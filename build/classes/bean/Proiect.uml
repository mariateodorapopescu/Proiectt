<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:UMLLabProfile="http:///schemas/UMLLabProfile/NS/0" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML" xsi:schemaLocation="http:///schemas/UMLLabProfile/NS/0 pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile">
  <uml:Model xmi:id="_HLdfYEVdEfCS7cth2SLu0w" name="Proiect">
    <eAnnotations xmi:id="_HQJyIEVdEfCS7cth2SLu0w" source="http://ns.yatta.de/umllab">
      <contents xmi:type="ecore:EAnnotation" xmi:id="_HQJyIUVdEfCS7cth2SLu0w" source="codegen">
        <details xmi:id="_HQJyIkVdEfCS7cth2SLu0w" key="codegenDirectory" value="/Proiect/src/main/java"/>
        <details xmi:id="_f7OkwEVdEfCS7cth2SLu0w" key="AssociatedSourceCode" value="/Proiect/src/main/java/Servlet/CompanyPolicyProcessor.java;433966497/1;/Proiect/src/main/java/Servlet/NaturalLanguageToSQLTranslator.java;1563714101/1;/Proiect/src/main/java/Filters/TokenBlacklist.java;3994535657/1;/Proiect/src/main/java/DAO/ModifUsrDao.java;3084930201/1;/Proiect/src/main/java/DAO/AdaugaConcediuDAO.java;742956253/1;/Proiect/src/main/java/DAO/AprobAdevDirDAO.java;3881054743/1;/Proiect/src/main/java/DAO/AprobAdevSefDAO.java;555008189/1;/Proiect/src/main/java/DAO/AprobDirDao.java;2781986338/1;/Proiect/src/main/java/DAO/AprobSefDao.java;1507075731/1;/Proiect/src/main/java/DAO/DelConDao.java;1699111413/1;/Proiect/src/main/java/DAO/DelUsrDao.java;1114354337/1;/Proiect/src/main/java/DAO/ModifPasdDao.java;1111247201/1;/Proiect/src/main/java/DAO/LoginDao.java;1696289019/1;/Proiect/src/main/java/DAO/ModifConDao.java;1429292902/1;/Proiect/src/main/java/DAO/ModifDepDao.java;2726317670/1;/Proiect/src/main/java/DAO/DepDao.java;1683573006/1;/Proiect/src/main/java/DAO/AdaugaAdeverintaDAO.java;4062368609/1;/Proiect/src/main/java/Servlet/AdaugaTaskServlet.java;12802031/1;/Proiect/src/main/java/DAO/MyUserDao.java;245794109/1;/Proiect/src/main/java/Servlet/AdaugaSediuServlet.java;2419331085/1;/Proiect/src/main/java/Servlet/AdaugaPozitieServlet.java;468607874/1;/Proiect/src/main/java/DAO/ResDirDao.java;1062831667/1;/Proiect/src/main/java/DAO/ResSefDao.java;4215196951/1;/Proiect/src/main/java/Servlet/AdaugaPostServlet.java;2017255582/1;/Proiect/src/main/java/DAO/StergereDepartamentDAO.java;574934754/1;/Proiect/src/main/java/DAO/UserDao.java;2128803181/1;/Proiect/src/main/java/Filters/CSRFTokenGeneratorFilter.java;675990840/1;/Proiect/src/main/java/Filters/CSRFValidationFilter.java;1356430317/1;/Proiect/src/main/java/Filters/CsrfTokenInjectionFilter.java;72652592/1;/Proiect/src/main/java/Servlet/AdaugaMembruEchipaServlet.java;3564509218/1;/Proiect/src/main/java/Filters/JwtFilter.java;22505683/1;/Proiect/src/main/java/Filters/JwtUtil.java;3052031404/1;/Proiect/src/main/java/Filters/rateLimitingFilter.java;146754774/1;/Proiect/src/main/java/Servlet/AAA.java;2529070729/1;/Proiect/src/main/java/Servlet/AdaugaDenumireServlet.java;2507746543/1;/Proiect/src/main/java/Servlet/AdaugaEchipaServlet.java;1193447457/1;/Proiect/src/main/java/Servlet/AdaugaEchipaServlett.java;696256096/1;/Proiect/src/main/java/Servlet/AdaugaEvenimentServlet.java;2519067882/1;/Proiect/src/main/java/Filters/HtmlResponseWrapper.java;3968607859/1;/Proiect/src/main/java/Servlet/DeleteTaskServlet.java;3868891670/1;/Proiect/src/main/java/DAO/ResAdevSefDAO.java;675637252/1;/Proiect/src/main/java/Servlet/AdaugaProiectServlet.java;1041720109/1;/Proiect/src/main/java/Servlet/DeleteSediuServlet.java;3370119958/1;/Proiect/src/main/java/DAO/ModificaAdeverintaDAO.java;2507226513/1;/Proiect/src/main/java/Servlet/AddAdevServlet.java;3694120578/1;/Proiect/src/main/java/Servlet/DeletePozitieServlet.java;2181435880/1;/Proiect/src/main/java/Servlet/AddDepServlet.java;1430651637/1;/Proiect/src/main/java/Servlet/ApplicationManagementServlet.java;1090706134/1;/Proiect/src/main/java/Servlet/AprobAdevDirServlet.java;3683455216/1;/Proiect/src/main/java/Servlet/AprobAdevSef.java;3755769384/1;/Proiect/src/main/java/Servlet/AprobDirServlet.java;1542073909/1;/Proiect/src/main/java/Servlet/AprobSefServlet.java;1317624013/1;/Proiect/src/main/java/Servlet/AsignarePozitieServlet.java;1695270780/1;/Proiect/src/main/java/Servlet/CVGeneratorServlet.java;2068240470/1;/Proiect/src/main/java/Servlet/DeletePostServlet.java;1113299059/1;/Proiect/src/main/java/Servlet/CVServlet.java;4212333068/1;/Proiect/src/main/java/Servlet/CerereAdeverintaServlet.java;2483313197/1;/Proiect/src/main/java/Servlet/CerereDemisieServlet.java;44290491/1;/Proiect/src/main/java/Servlet/DeleteEchipaServlet.java;200955703/1;/Proiect/src/main/java/Servlet/CheckInServlet.java;3926865660/1;/Proiect/src/main/java/Servlet/DeleteDenumireServlet.java;950785847/1;/Proiect/src/main/java/Servlet/ConcediiSuplimentareServlet.java;4146364963/1;/Proiect/src/main/java/Servlet/DelAdevServlet.java;3825938171/1;/Proiect/src/main/java/Servlet/DelConServlet.java;2235111601/1;/Proiect/src/main/java/Servlet/DelDepServlet.java;994203826/1;/Proiect/src/main/java/Servlet/DelUsrServlet.java;1039106634/1;/Proiect/src/main/java/Servlet/GetTeamMembersServlet.java;809156636/1;/Proiect/src/main/java/Servlet/CVManagementServlet.java;620003623/1;/Proiect/src/main/java/Servlet/AddConServlet.java;410136946/1;/Proiect/src/main/java/Servlet/DeleteProiectServlet.java;291930689/1;/Proiect/src/main/java/DAO/ResAdevDirDAO.java;1934595430/1;/Proiect/src/main/java/DAO/StergereAdeverintaDAO.java;1293636152/1;/Proiect/src/main/java/Servlet/DescarcaAdeverintaServlet.java;3108131123/1;/Proiect/src/main/java/Servlet/EditDenumireServlet.java;1717003111/1;/Proiect/src/main/java/Servlet/EditPostServlet.java;88606974/1;/Proiect/src/main/java/Servlet/EditPozitieServlet.java;203266218/1;/Proiect/src/main/java/Servlet/EditProiectServlet.java;3891444688/1;/Proiect/src/main/java/Servlet/EditSediuServlet.java;3056931299/1;/Proiect/src/main/java/Servlet/EditTaskServlet.java;8189284/1;/Proiect/src/main/java/Servlet/GetTasksCalendarServlet.java;1913702767/1;/Proiect/src/main/java/Servlet/GenerareCarteServlet.java;46633604/1;/Proiect/src/main/java/Servlet/GetAdeverinteServlet.java;44845641/1;/Proiect/src/main/java/Servlet/GetConcediiPersonaleServlet.java;829492812/1;/Proiect/src/main/java/Servlet/GetDenumireServlet.java;67691409/1;/Proiect/src/main/java/Servlet/GetSediuToSelectedDepartmentServlet.java;618331643/1;/Proiect/src/main/java/Servlet/GetNextConcediuAndHomeServlet.java;1887635916/1;/Proiect/src/main/java/Servlet/GetNextConcediuServlet.java;1103146487/1;/Proiect/src/main/java/Servlet/GetPozitieServlet.java;1121361101/1;/Proiect/src/main/java/Servlet/GetPozitiiDepartamentServlet.java;314078426/1;/Proiect/src/main/java/Servlet/GetRaportPrezentaServlet.java;2181877241/1;/Proiect/src/main/java/Servlet/GetSediuToNextConcediuServlet.java;1687848794/1;/Proiect/src/main/java/Servlet/GetSediuToDepServlet.java;484987495/1;/Proiect/src/main/java/Servlet/GetSediuServlet.java;2163389667/1;/Proiect/src/main/java/Servlet/GetSediuToConcediuServlet.java;2470582326/1;/Proiect/src/main/java/Servlet/GetSediiiServlet.java;2912089373/1;/Proiect/src/main/java/Servlet/GetSediuToHomeServlet.java;2654688237/1;/Proiect/src/main/java/Servlet/GetSediiSelectServlet.java;492646798/1;/Proiect/src/main/java/Servlet/GetSediuToOtherSediuServlet.java;4007449335/1;/Proiect/src/main/java/Servlet/GetDepartamenteServlet.java;2440481538/1;/Proiect/src/main/java/Servlet/LocalitatiProxyServlet.java;412726980/1;/Proiect/src/main/java/Servlet/LeaveDataServlet.java;2485451199/1;/Proiect/src/main/java/Servlet/GetUserConcediiServlet.java;1387103432/1;/Proiect/src/main/java/Servlet/GetUserToConcediuServlet.java;1916191552/1;/Proiect/src/main/java/Servlet/GetUserToDepartmentAnyServlet.java;3608089997/1;/Proiect/src/main/java/Servlet/GetUserToDepartmentServlet.java;966003568/1;/Proiect/src/main/java/Servlet/GetUserToNearestSediuServlet.java;389978188/1;/Proiect/src/main/java/Servlet/GetUserToSediuAnyServlet.java;1046115440/1;/Proiect/src/main/java/Servlet/JudeteProxyServlet.java;2916987969/1;/Proiect/src/main/java/Servlet/ImageServlet.java;3995504703/1;/Proiect/src/main/java/Servlet/IncetareContractServlet.java;4073650417/1;/Proiect/src/main/java/Servlet/InscriereEvenimentServlet.java;4021354903/1;/Proiect/src/main/java/Servlet/JobsServlet.java;2635783648/1;/Proiect/src/main/java/Servlet/JobssServlet.java;674689449/1;/Proiect/src/main/java/Servlet/JsonServlet.java;3684883866/1;/Proiect/src/main/java/Servlet/JsonServlet2.java;4288238592/1;/Proiect/src/main/java/Servlet/JsonServlet3.java;3265329578/1;/Proiect/src/main/java/Servlet/HRChatServlet.java;78279704/1;/Proiect/src/main/java/Servlet/ChatServlet.java;760611703/1;/Proiect/src/main/java/Servlet/EnhancedNLPProcessor.java;2769974621/1;/Proiect/src/main/java/Servlet/LoginServlet.java;334265018/1;/Proiect/src/main/java/Servlet/LogoutServlet.java;2814911078/1;/Proiect/src/main/java/Servlet/ManageSediu.java;2413653029/1;/Proiect/src/main/java/Servlet/ModifAdevServlet.java;109966351/1;/Proiect/src/main/java/Servlet/ModifConServlet.java;639684663/1;/Proiect/src/main/java/Servlet/ModifDepServlet.java;3237733898/1;/Proiect/src/main/java/Servlet/ModifPasdServlet.java;1326879030/1;/Proiect/src/main/java/Servlet/ModifUsrServlet.java;2780367981/1;/Proiect/src/main/java/Servlet/MyUserServlet.java;3104148867/1;/Proiect/src/main/java/Servlet/PeanServlet.java;608872998/1;/Proiect/src/main/java/Servlet/PenalizariServlet.java;2261862120/1;/Proiect/src/main/java/Servlet/ProcesareAdeverintaServlet.java;1215162476/1;/Proiect/src/main/java/Servlet/PromovareServlet.java;3634036082/1;/Proiect/src/main/java/Servlet/RemoveMembruEchipaServlet.java;3114765746/1;/Proiect/src/main/java/Servlet/ReportExportServlet.java;1660148189/1;/Proiect/src/main/java/Servlet/ReportsServlet.java;533349407/1;/Proiect/src/main/java/Servlet/ResAdevDirServlet.java;985850089/1;/Proiect/src/main/java/Servlet/ResAdevSefServlet.java;2405980398/1;/Proiect/src/main/java/Servlet/ResDirServlet.java;987195521/1;/Proiect/src/main/java/Servlet/ResSefServlet.java;4134855607/1;/Proiect/src/main/java/Servlet/ScheduleInterviewServlet.java;3216968601/1;/Proiect/src/main/java/Servlet/Sheet.java;3962440394/1;/Proiect/src/main/java/Servlet/SporuriServlet.java;1680309666/1;/Proiect/src/main/java/Servlet/ToggleDenumireServlet.java;2016699891/1;/Proiect/src/main/java/Servlet/TogglePozitieServlet.java;1617880412/1;/Proiect/src/main/java/Servlet/UpdateSediutLocatieServlet.java;1205575027/1;/Proiect/src/main/java/Servlet/UpdateTaskStatusServlet.java;749391835/1;/Proiect/src/main/java/Servlet/UploadImageServlet.java;243687380/1;/Proiect/src/main/java/Servlet/Workbook.java;3228399535/1;/Proiect/src/main/java/Servlet/XSSFWorkbook.java;3084983078/1;/Proiect/src/main/java/Servlet/decenulvede.java;3607002742/1;/Proiect/src/main/java/Servlet/moaradevant.java;3220628454/1;/Proiect/src/main/java/bean/Adeverinta.java;862075733/1;/Proiect/src/main/java/bean/CVUserDetails.java;2239415995/1;/Proiect/src/main/java/bean/Concediu.java;2093481167/1;/Proiect/src/main/java/bean/ContextFinalizer.java;196561593/1;/Proiect/src/main/java/bean/Data.java;816411476/1;/Proiect/src/main/java/bean/MyUser.java;2360694361/1;/Proiect/src/main/java/bean/ReportData.java;2631658418/1;/Proiect/src/main/java/bean/SessionTimeoutListener.java;980482588/1;/Proiect/src/main/java/bean/UserView.java;29554260/1;/Proiect/src/main/java/bean/Userr.java;576462618/1;/Proiect/src/main/java/csv/generateCSV1.java;3048731341/1;/Proiect/src/main/java/mail/GMailServer.java;1917958694/1;/Proiect/src/main/java/mail/MailAsincron.java;798517774/1;/Proiect/src/main/java/mail/OTP.java;92045797/1;/Proiect/src/main/java/mail/OTP2.java;703399730/1;/Proiect/src/main/java/mail/OTP3.java;3908512232/1;/Proiect/src/main/java/mix/AddLeaveLocation.java;1786588998/1;/Proiect/src/main/java/mix/DatabaseConnectionPool.java;459542339/1;/Proiect/src/main/java/mix/DatabaseQueries.java;1315690754/1;/Proiect/src/main/java/mix/DeleteSediu.java;3302115513/1;/Proiect/src/main/java/mix/GetAllSedii.java;2969983674/1;/Proiect/src/main/java/mix/GetLocationsServlet.java;1409405410/1;/Proiect/src/main/java/mix/GetSediiServlet.java;697942033/1;/Proiect/src/main/java/mix/GetSediuDetails.java;2948897509/1;/Proiect/src/main/java/mix/GetUserHolidayServlet.java;552604433/1;/Proiect/src/main/java/mix/GetUserWorkplaceServlet.java;278585173/1;/Proiect/src/main/java/mix/GetVacationDetailsServlet.java;4189124555/1;/Proiect/src/main/java/mix/LeaveGetAddress.java;932958526/1;/Proiect/src/main/java/mix/RandomColorGenerator.java;398499409/1;/Proiect/src/main/java/mix/RandomNumberGenerator.java;1240680509/1;/Proiect/src/main/java/mix/SaveLocationServlet.java;1339626218/1;/Proiect/src/main/java/mix/ServletUpdateAddress.java;2189744792/1;/Proiect/src/main/java/mix/ServletUpdateAddressDep.java;2176167583/1;/Proiect/src/main/java/mix/getUserHomeServlet.java;288357177/1;/Proiect/src/main/java/mix/locactacs.java;1219936971/1;/Proiect/src/main/java/mix/locactacss.java;1653702470/1;/Proiect/src/main/java/mix/locactdep.java;2920801314/1;/Proiect/src/main/java/mix/locatiee.java;1179784677/1;/Proiect/src/main/java/org/mindrot/jbcrypt/BCrypt.java;1360340848/1;/Proiect/src/main/java/scheduler/Constants.java;2646430079/1;/Proiect/src/main/java/scheduler/ContractTerminationScheduler.java;550582194/1;/Proiect/src/main/java/scheduler/DBScheduler.java;1473719632/1;/Proiect/src/main/java/scheduler/ReadPropertiesFile.java;3177841323/1;/Proiect/src/main/java/scheduler/Testing.java;1152605956/1;/Proiect/src/main/java/services/CNPValidator.java;1588118948/1;/Proiect/src/main/java/services/CheckerDataNasterii.java;3642713611/1;/Proiect/src/main/java/services/EmailValidator.java;2668515812/1;/Proiect/src/main/java/services/NameValidator.java;215819452/1;/Proiect/src/main/java/services/PasswordValidator.java;3229985023/1;/Proiect/src/main/java/services/PhoneNumberValidator.java;1409198195/1;/Proiect/src/main/webapp/WEB-INF/lib/BCrypt.java;1360340848/1;"/>
      </contents>
    </eAnnotations>
    <elementImport xmi:id="_SngE4EVdEfCS7cth2SLu0w">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
    </elementImport>
    <elementImport xmi:id="_Snk9YEVdEfCS7cth2SLu0w">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
    </elementImport>
    <elementImport xmi:id="_Snk9YUVdEfCS7cth2SLu0w">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#char"/>
    </elementImport>
    <elementImport xmi:id="_Snk9YkVdEfCS7cth2SLu0w">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
    </elementImport>
    <elementImport xmi:id="_SnlkcEVdEfCS7cth2SLu0w">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#float"/>
    </elementImport>
    <elementImport xmi:id="_SnlkcUVdEfCS7cth2SLu0w">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
    </elementImport>
    <elementImport xmi:id="_SnlkckVdEfCS7cth2SLu0w">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
    </elementImport>
    <elementImport xmi:id="_SnmLgEVdEfCS7cth2SLu0w">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#short"/>
    </elementImport>
    <elementImport xmi:id="_SnnZoEVdEfCS7cth2SLu0w">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
    </elementImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_SnxKoEVdEfCS7cth2SLu0w" name="java">
      <packagedElement xmi:type="uml:Package" xmi:id="_SnxxsEVdEfCS7cth2SLu0w" name="sql">
        <packagedElement xmi:type="uml:Interface" xmi:id="_T9fncEVdEfCS7cth2SLu0w" name="Connection"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_T9kf8EVdEfCS7cth2SLu0w" name="DriverManager"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_T9lHAUVdEfCS7cth2SLu0w" name="PreparedStatement"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_T9mVIEVdEfCS7cth2SLu0w" name="SQLException"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_T9wtMEVdEfCS7cth2SLu0w" name="ResultSet"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_T90-oEVdEfCS7cth2SLu0w" name="Statement"/>
        <packagedElement xmi:type="uml:DataType" xmi:id="_T-IgoEVdEfCS7cth2SLu0w" name="Date"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_T-wLsEVdEfCS7cth2SLu0w" name="Time"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_V8GCIEVdEfCS7cth2SLu0w" name="ResultSetMetaData"/>
        <packagedElement xmi:type="uml:DataType" xmi:id="_V8bZUUVdEfCS7cth2SLu0w" name="Timestamp"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_SpJqsEVdEfCS7cth2SLu0w" name="io">
        <packagedElement xmi:type="uml:Class" xmi:id="_T94B8EVdEfCS7cth2SLu0w" name="IOException"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_T99hgEVdEfCS7cth2SLu0w" name="File"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_T9-IkUVdEfCS7cth2SLu0w" name="FileInputStream"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_T9-voUVdEfCS7cth2SLu0w" name="FileNotFoundException"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_T-CaAEVdEfCS7cth2SLu0w" name="PrintWriter"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_T-z2EUVdEfCS7cth2SLu0w" name="ByteArrayOutputStream"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_T-1EMEVdEfCS7cth2SLu0w" name="StringWriter"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_UBRUMEVdEfCS7cth2SLu0w" name="OutputStream"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_V8ayQEVdEfCS7cth2SLu0w" name="BufferedReader"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_V8dOgUVdEfCS7cth2SLu0w" name="InputStream"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_V8uUQUVdEfCS7cth2SLu0w" name="Serializable"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_V80a4EVdEfCS7cth2SLu0w" name="ByteArrayInputStream"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_V87IkEVdEfCS7cth2SLu0w" name="UnsupportedEncodingException"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_SpY7QEVdEfCS7cth2SLu0w" name="util">
        <packagedElement xmi:type="uml:Package" xmi:id="_SqAmUEVdEfCS7cth2SLu0w" name="regex">
          <packagedElement xmi:type="uml:Class" xmi:id="_T-Y_UEVdEfCS7cth2SLu0w" name="Matcher"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_T-aNcUVdEfCS7cth2SLu0w" name="Pattern"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Package" xmi:id="_Sqsi0EVdEfCS7cth2SLu0w" name="concurrent">
          <packagedElement xmi:type="uml:Package" xmi:id="_Squ_EEVdEfCS7cth2SLu0w" name="atomic">
            <packagedElement xmi:type="uml:Class" xmi:id="_T-no0UVdEfCS7cth2SLu0w" name="AtomicInteger"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_T-masEVdEfCS7cth2SLu0w" name="ConcurrentHashMap"/>
          <packagedElement xmi:type="uml:Enumeration" xmi:id="_T-o28UVdEfCS7cth2SLu0w" name="TimeUnit"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_V88WsEVdEfCS7cth2SLu0w" name="Executors"/>
          <packagedElement xmi:type="uml:Interface" xmi:id="_V89k0UVdEfCS7cth2SLu0w" name="ScheduledExecutorService"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Package" xmi:id="_Svlp4EVdEfCS7cth2SLu0w" name="stream">
          <packagedElement xmi:type="uml:Class" xmi:id="_T_xfYEVdEfCS7cth2SLu0w" name="Collectors"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_T9_WsUVdEfCS7cth2SLu0w" name="ArrayList"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_T9_9wUVdEfCS7cth2SLu0w" name="List"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_T-V8AkVdEfCS7cth2SLu0w" name="Arrays"/>
        <packagedElement xmi:type="uml:DataType" xmi:id="_T-jXYUVdEfCS7cth2SLu0w" name="Date"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_T-klgEVdEfCS7cth2SLu0w" name="Collections"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_T-lzoEVdEfCS7cth2SLu0w" name="Set"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_UAHdoUVdEfCS7cth2SLu0w" name="HashSet"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_UAkJkEVdEfCS7cth2SLu0w" name="HashMap"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_UAkwoUVdEfCS7cth2SLu0w" name="Map"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_UBgkwEVdEfCS7cth2SLu0w" name="TreeMap"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_V80a4kVdEfCS7cth2SLu0w" name="Properties"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_V856cEVdEfCS7cth2SLu0w" name="Random"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_V8-y8EVdEfCS7cth2SLu0w" name="Timer"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_V8_aAEVdEfCS7cth2SLu0w" name="Locale"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_V8_aAkVdEfCS7cth2SLu0w" name="TimerTask"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_Sp1AIEVdEfCS7cth2SLu0w" name="security">
        <packagedElement xmi:type="uml:Class" xmi:id="_T-POUEVdEfCS7cth2SLu0w" name="SecureRandom"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_T-iwUkVdEfCS7cth2SLu0w" name="Key"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_Sp1nMEVdEfCS7cth2SLu0w" name="math">
        <packagedElement xmi:type="uml:DataType" xmi:id="_T-QccEVdEfCS7cth2SLu0w" name="BigInteger"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_SvCQQEVdEfCS7cth2SLu0w" name="time">
        <packagedElement xmi:type="uml:Package" xmi:id="_SwV30EVdEfCS7cth2SLu0w" name="temporal">
          <packagedElement xmi:type="uml:Enumeration" xmi:id="_UAGPgEVdEfCS7cth2SLu0w" name="ChronoUnit"/>
          <packagedElement xmi:type="uml:Enumeration" xmi:id="_V9BPMEVdEfCS7cth2SLu0w" name="ChronoField"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_T_hnwEVdEfCS7cth2SLu0w" name="LocalDate"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_T_jc8UVdEfCS7cth2SLu0w" name="LocalTime"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_UBfWoEVdEfCS7cth2SLu0w" name="YearMonth"/>
        <packagedElement xmi:type="uml:Package" xmi:id="_VqNn8EVdEfCS7cth2SLu0w" name="format">
          <packagedElement xmi:type="uml:Class" xmi:id="_V9AoIEVdEfCS7cth2SLu0w" name="DateTimeFormatter"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_V9BPMkVdEfCS7cth2SLu0w" name="DateTimeParseException"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_SzX9sEVdEfCS7cth2SLu0w" name="text">
        <packagedElement xmi:type="uml:Class" xmi:id="_UBFuAEVdEfCS7cth2SLu0w" name="SimpleDateFormat"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_UCPkkEVdEfCS7cth2SLu0w" name="lang">
        <packagedElement xmi:type="uml:Class" xmi:id="_UCPkkUVdEfCS7cth2SLu0w" name="ClassNotFoundException"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_V9OqkEVdEfCS7cth2SLu0w" name="Object"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_V9SU8EVdEfCS7cth2SLu0w" name="Exception"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_V9eiN0VdEfCS7cth2SLu0w" name="Comparable"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_V9l28EVdEfCS7cth2SLu0w" name="IllegalArgumentException"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_V9nsI0VdEfCS7cth2SLu0w" name="Runnable"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_Sny_0EVdEfCS7cth2SLu0w" name="bean">
      <packagedElement xmi:type="uml:Class" xmi:id="_T9m8MUVdEfCS7cth2SLu0w" name="MyUser">
        <ownedAttribute xmi:id="_V-a9YEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-a9YUVdEfCS7cth2SLu0w" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-a9YkVdEfCS7cth2SLu0w" name="nume">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-a9Y0VdEfCS7cth2SLu0w" name="prenume">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-a9ZEVdEfCS7cth2SLu0w" name="data_nasterii">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-bkcEVdEfCS7cth2SLu0w" name="adresa">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-bkcUVdEfCS7cth2SLu0w" name="email">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-bkckVdEfCS7cth2SLu0w" name="telefon">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-bkc0VdEfCS7cth2SLu0w" name="username">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-bkdEVdEfCS7cth2SLu0w" name="password">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-bkdUVdEfCS7cth2SLu0w" name="departament">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-bkdkVdEfCS7cth2SLu0w" name="tip">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-bkd0VdEfCS7cth2SLu0w" name="cnp">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-bkeEVdEfCS7cth2SLu0w" name="id">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-bkeUVdEfCS7cth2SLu0w" name="culoare">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <interfaceRealization xmi:id="_V9gXYEVdEfCS7cth2SLu0w" client="_T9m8MUVdEfCS7cth2SLu0w" supplier="_V8uUQUVdEfCS7cth2SLu0w" contract="_V8uUQUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_T9pYcEVdEfCS7cth2SLu0w" name="Concediu">
        <ownedComment xmi:id="_V_jl0kVdEfCS7cth2SLu0w">
          <body>Clasa ce modeleaza un concediu pentru DAO/baza de date</body>
        </ownedComment>
        <ownedAttribute xmi:id="_V-ZIMEVdEfCS7cth2SLu0w" name="id">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-ZIMUVdEfCS7cth2SLu0w" name="id_ang">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-ZIMkVdEfCS7cth2SLu0w" name="inceput">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-ZIM0VdEfCS7cth2SLu0w" name="sfarsit">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-ZINEVdEfCS7cth2SLu0w" name="motiv">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-ZINUVdEfCS7cth2SLu0w" name="locatie">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-ZINkVdEfCS7cth2SLu0w" name="status">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-ZIN0VdEfCS7cth2SLu0w" name="tip">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-ZIOEVdEfCS7cth2SLu0w" name="durata">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_T92MwEVdEfCS7cth2SLu0w" name="Adeverinta">
        <ownedComment xmi:id="_V_iXukVdEfCS7cth2SLu0w">
          <body>Clasa bean pentru adeverințe</body>
        </ownedComment>
        <ownedAttribute xmi:id="_V-WE4EVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-WE4UVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-WE4kVdEfCS7cth2SLu0w" name="id">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-WE40VdEfCS7cth2SLu0w" name="idAngajat">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-WE5EVdEfCS7cth2SLu0w" name="tip">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-WE5UVdEfCS7cth2SLu0w" name="motiv">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-WE5kVdEfCS7cth2SLu0w" name="status">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-WE50VdEfCS7cth2SLu0w" name="creare" type="_T-jXYUVdEfCS7cth2SLu0w" association="_V_iXu0VdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-Wr8EVdEfCS7cth2SLu0w" name="modif" type="_T-jXYUVdEfCS7cth2SLu0w" association="_V_iXvUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-Wr8UVdEfCS7cth2SLu0w" name="mentiuni">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <interfaceRealization xmi:id="_V9a30EVdEfCS7cth2SLu0w" client="_T92MwEVdEfCS7cth2SLu0w" supplier="_V8uUQUVdEfCS7cth2SLu0w" contract="_V8uUQUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_IvFUVdEfCS7cth2SLu0w" name="Adeverinta" specification="_VudOwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_IvFkVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IvF0VdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IvGEVdEfCS7cth2SLu0w" name="tip">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IvGUVdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IvGkVdEfCS7cth2SLu0w" name="status">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IvG0VdEfCS7cth2SLu0w" name="creare" type="_T-jXYUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_IvHEVdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>this.id = id;&#xD;
     this.idAngajat = idAngajat;&#xD;
     this.tip = tip;&#xD;
     this.motiv = motiv;&#xD;
     this.status = status;&#xD;
     this.creare = creare;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_IvHUVdEfCS7cth2SLu0w" name="Adeverinta" specification="_VudOykVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_IvHkVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IvH0VdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IvIEVdEfCS7cth2SLu0w" name="tip">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IvIUVdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IvIkVdEfCS7cth2SLu0w" name="status">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IvI0VdEfCS7cth2SLu0w" name="creare" type="_T-jXYUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_IvJEVdEfCS7cth2SLu0w" name="modif" type="_T-jXYUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_IvJUVdEfCS7cth2SLu0w" name="mentiuni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IvJkVdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>this.id = id;&#xD;
     this.idAngajat = idAngajat;&#xD;
     this.tip = tip;&#xD;
     this.motiv = motiv;&#xD;
     this.status = status;&#xD;
     this.creare = creare;&#xD;
     this.modif = modif;&#xD;
     this.mentiuni = mentiuni;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_IvJ0VdEfCS7cth2SLu0w" name="toString" specification="_VpFmkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_IvKEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>return &quot;Adeverinta [id=&quot; + id + &quot;, idAngajat=&quot; + idAngajat + &quot;, tip=&quot; + tip + &quot;, motiv=&quot; + motiv + &quot;, status=&quot;&#xD;
             + status + &quot;, creare=&quot; + creare + &quot;, modif=&quot; + modif + &quot;, mentiuni=&quot; + mentiuni + &quot;]&quot;;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VpEYcEVdEfCS7cth2SLu0w" name="Adeverinta">
          <eAnnotations xmi:id="_VpE_gEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VpE_gUVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VpE_gkVdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VpFmkEVdEfCS7cth2SLu0w" name="toString" method="_V_IvJ0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vud10kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VudOwEVdEfCS7cth2SLu0w" name="Adeverinta" method="_V_IvFUVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VudOyEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VudOyUVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VudOwUVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VudOwkVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VudOw0VdEfCS7cth2SLu0w" name="tip">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VudOxEVdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VudOxUVdEfCS7cth2SLu0w" name="status">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VudOxkVdEfCS7cth2SLu0w" name="creare" type="_T-jXYUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VudOx0VdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VudOykVdEfCS7cth2SLu0w" name="Adeverinta" method="_V_IvHUVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_Vud10EVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_Vud10UVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VudOy0VdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VudOzEVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VudOzUVdEfCS7cth2SLu0w" name="tip">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VudOzkVdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VudOz0VdEfCS7cth2SLu0w" name="status">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VudO0EVdEfCS7cth2SLu0w" name="creare" type="_T-jXYUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VudO0UVdEfCS7cth2SLu0w" name="modif" type="_T-jXYUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VudO0kVdEfCS7cth2SLu0w" name="mentiuni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VudO00VdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_T-MyEUVdEfCS7cth2SLu0w" name="UserView">
        <ownedAttribute xmi:id="_V-cLgEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-cLgUVdEfCS7cth2SLu0w" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-cLgkVdEfCS7cth2SLu0w" name="username">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-cLg0VdEfCS7cth2SLu0w" name="departament">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-cLhEVdEfCS7cth2SLu0w" name="tip">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <interfaceRealization xmi:id="_V9iMl0VdEfCS7cth2SLu0w" client="_T-MyEUVdEfCS7cth2SLu0w" supplier="_V8uUQUVdEfCS7cth2SLu0w" contract="_V8uUQUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_UAIrwEVdEfCS7cth2SLu0w" name="Data">
        <ownedComment xmi:id="_V_jl1EVdEfCS7cth2SLu0w">
          <body>Aceasta clasa modeleaza o data, pana sa descopar java.util.date</body>
        </ownedComment>
        <ownedAttribute xmi:id="_V-ZvQEVdEfCS7cth2SLu0w" name="zi">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V_jl1UVdEfCS7cth2SLu0w" name="luna">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V_kM4UVdEfCS7cth2SLu0w" name="an">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <interfaceRealization xmi:id="_V9fJQUVdEfCS7cth2SLu0w" client="_UAIrwEVdEfCS7cth2SLu0w" supplier="_V9eiN0VdEfCS7cth2SLu0w" contract="_V9eiN0VdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_JWMkVdEfCS7cth2SLu0w" name="Data" specification="_VukjgEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_J9MEVdEfCS7cth2SLu0w" name="zi">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_J9MUVdEfCS7cth2SLu0w" name="luna">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_J9MkVdEfCS7cth2SLu0w" name="an">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_J9M0VdEfCS7cth2SLu0w" type="_UAIrwEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>this.zi = zi;
     this.luna = luna;
     this.an = an;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_J9NEVdEfCS7cth2SLu0w" name="getLuna" specification="_VpQlsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_J9NUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>return luna;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_J9NkVdEfCS7cth2SLu0w" name="setLuna" specification="_VukjiEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_J9N0VdEfCS7cth2SLu0w" name="luna">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>this.luna = luna;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_J9OEVdEfCS7cth2SLu0w" name="getAn" specification="_VpQlsUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_J9OUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>return an;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_J9OkVdEfCS7cth2SLu0w" name="setAn" specification="_VulKkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_J9O0VdEfCS7cth2SLu0w" name="an">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>this.an = an;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_J9PEVdEfCS7cth2SLu0w" name="toString" specification="_VpQlskVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_J9PUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>String s = new String(&quot;&quot;);
     s = s + zi + &quot;.&quot; + luna + &quot;.&quot; + an;
     return s;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_J9PkVdEfCS7cth2SLu0w" name="compareTo" specification="_V9fwUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_J9P0VdEfCS7cth2SLu0w" name="o" type="_V9OqkEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_J9QEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>Data d = (Data)o;
     if (getAn() > d.getAn()) {
         return 1;
     } else if (getAn() &lt; d.getAn()) {
         return -1;
     } else if (getLuna() > d.getLuna()) {
         return 1;
     } else if (getLuna() &lt; d.getLuna()) {
         return -1;
     } else if (getZi() > d.getZi()) {
         return 1;
     } else if (getZi() &lt; d.getZi()) {
         return -1;
     } else {
         return 0;
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_J9QUVdEfCS7cth2SLu0w" name="toJavaDate" specification="_VpQls0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_J9QkVdEfCS7cth2SLu0w" name="data" type="_UAIrwEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_J9Q0VdEfCS7cth2SLu0w" type="_T-jXYUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>java.util.Calendar cal = java.util.Calendar.getInstance();
 		    cal.set(java.util.Calendar.YEAR, data.getAn());
 		    cal.set(java.util.Calendar.MONTH, data.getLuna() - 1); // Calendar month is zero-based
 		    cal.set(java.util.Calendar.DAY_OF_MONTH, data.getZi());
 		    return cal.getTime();
 		</body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VpQlsEVdEfCS7cth2SLu0w" name="getLuna" method="_V_J9NEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_kM5UVdEfCS7cth2SLu0w">
            <body>
     * @return numarul lunii</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vukjh0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VpQlsUVdEfCS7cth2SLu0w" name="getAn" method="_V_J9OEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_kM50VdEfCS7cth2SLu0w">
            <body>
     * @return un an</body>
          </ownedComment>
          <ownedParameter xmi:id="_VulKkEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VpQlskVdEfCS7cth2SLu0w" name="toString" method="_V_J9PEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_kM6UVdEfCS7cth2SLu0w">
            <body>Pentru a face afisari</body>
          </ownedComment>
          <ownedParameter xmi:id="_VulKk0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VpQls0VdEfCS7cth2SLu0w" name="toJavaDate" isStatic="true" method="_V_J9QUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_kM6kVdEfCS7cth2SLu0w">
            <body>Metoda ce converteste o data din formatul meu in formatul folosit de mysql si de cel implementat in Java
  * @param data
  * @return o data Java</body>
          </ownedComment>
          <ownedParameter xmi:id="_VpQltEVdEfCS7cth2SLu0w" name="data" type="_UAIrwEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VpQltUVdEfCS7cth2SLu0w" type="_T-jXYUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VukjgEVdEfCS7cth2SLu0w" name="Data" method="_V_JWMkVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VukjhUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VukjhkVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedComment xmi:id="_V_kM5EVdEfCS7cth2SLu0w">
            <body>Constructor
     * @param zi
     * @param luna
     * @param an</body>
          </ownedComment>
          <ownedParameter xmi:id="_VukjgUVdEfCS7cth2SLu0w" name="zi">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VukjgkVdEfCS7cth2SLu0w" name="luna">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vukjg0VdEfCS7cth2SLu0w" name="an">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VukjhEVdEfCS7cth2SLu0w" type="_UAIrwEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VukjiEVdEfCS7cth2SLu0w" name="setLuna" method="_V_J9NkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_kM5kVdEfCS7cth2SLu0w">
            <body>Seteaza o luna
     * @param luna</body>
          </ownedComment>
          <ownedParameter xmi:id="_VukjiUVdEfCS7cth2SLu0w" name="luna">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VulKkUVdEfCS7cth2SLu0w" name="setAn" method="_V_J9OkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_kM6EVdEfCS7cth2SLu0w">
            <body>seteaza anul
     * @param an</body>
          </ownedComment>
          <ownedParameter xmi:id="_VulKkkVdEfCS7cth2SLu0w" name="an">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V9fwUEVdEfCS7cth2SLu0w" name="compareTo" method="_V_J9PkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V9fwUUVdEfCS7cth2SLu0w" name="o" type="_V9OqkEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V9fwUkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vuec4EVdEfCS7cth2SLu0w" name="CVUserDetails">
        <ownedComment xmi:id="_V_i-wUVdEfCS7cth2SLu0w">
          <body>Clasa care conține detaliile unui utilizator pentru gestionarea CV-ului&#xD;
Folosită pentru a transfera datele utilizatorului între servlet-uri și JSP-uri</body>
        </ownedComment>
        <ownedAttribute xmi:id="_V-XTAEVdEfCS7cth2SLu0w" name="id">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-XTAUVdEfCS7cth2SLu0w" name="nume">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-XTAkVdEfCS7cth2SLu0w" name="prenume">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-XTA0VdEfCS7cth2SLu0w" name="dataNasterii" type="_T-IgoEVdEfCS7cth2SLu0w" association="_V_i-wkVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-XTBEVdEfCS7cth2SLu0w" name="adresa">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-XTBUVdEfCS7cth2SLu0w" name="email">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-XTBkVdEfCS7cth2SLu0w" name="telefon">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-XTB0VdEfCS7cth2SLu0w" name="username">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-X6EEVdEfCS7cth2SLu0w" name="idDep">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-X6EUVdEfCS7cth2SLu0w" name="tip">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-X6EkVdEfCS7cth2SLu0w" name="culoare">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-X6E0VdEfCS7cth2SLu0w" name="activ">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-X6FEVdEfCS7cth2SLu0w" name="profil">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-X6FUVdEfCS7cth2SLu0w" value="*"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-X6F0VdEfCS7cth2SLu0w" name="salariuBrut">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-YhIEVdEfCS7cth2SLu0w" name="sporuri">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-YhIUVdEfCS7cth2SLu0w" name="penalizari">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-YhIkVdEfCS7cth2SLu0w" name="dataAng" type="_T-IgoEVdEfCS7cth2SLu0w" association="_V_i-xEVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-YhI0VdEfCS7cth2SLu0w" name="dataModif" type="_T-IgoEVdEfCS7cth2SLu0w" association="_V_jl0EVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-YhJEVdEfCS7cth2SLu0w" name="denumire">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-YhJUVdEfCS7cth2SLu0w" name="numeDep">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_JWIEVdEfCS7cth2SLu0w" name="CVUserDetails" specification="_VufrAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_JWIUVdEfCS7cth2SLu0w" type="_Vuec4EVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>// Constructor implicit&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_JWIkVdEfCS7cth2SLu0w" name="CVUserDetails" specification="_VufrBEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_JWI0VdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_JWJEVdEfCS7cth2SLu0w" name="nume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_JWJUVdEfCS7cth2SLu0w" name="prenume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_JWJkVdEfCS7cth2SLu0w" name="email">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_JWJ0VdEfCS7cth2SLu0w" type="_Vuec4EVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>this.id = id;&#xD;
     this.nume = nume;&#xD;
     this.prenume = prenume;&#xD;
     this.email = email;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_JWKEVdEfCS7cth2SLu0w" name="toString" specification="_VugSF0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_JWKUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>return &quot;CVUserDetails{&quot; +&#xD;
             &quot;id=&quot; + id +&#xD;
             &quot;, nume='&quot; + nume + '\'' +&#xD;
             &quot;, prenume='&quot; + prenume + '\'' +&#xD;
             &quot;, email='&quot; + email + '\'' +&#xD;
             &quot;, idDep=&quot; + idDep +&#xD;
             &quot;, tip=&quot; + tip +&#xD;
             '}';&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VufrAEVdEfCS7cth2SLu0w" name="CVUserDetails" method="_V_JWIEVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VufrAUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VufrAkVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VufrA0VdEfCS7cth2SLu0w" type="_Vuec4EVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VufrBEVdEfCS7cth2SLu0w" name="CVUserDetails" method="_V_JWIkVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VugSFEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VugSFUVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VugSEEVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VugSEUVdEfCS7cth2SLu0w" name="nume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VugSEkVdEfCS7cth2SLu0w" name="prenume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VugSE0VdEfCS7cth2SLu0w" name="email">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VugSFkVdEfCS7cth2SLu0w" type="_Vuec4EVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VugSF0VdEfCS7cth2SLu0w" name="toString" method="_V_JWKEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VugSGEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VujVYEVdEfCS7cth2SLu0w" name="ContextFinalizer">
        <ownedComment xmi:id="_V_jl00VdEfCS7cth2SLu0w">
          <body>Am incercat sa folosesc aceasta cand mai aveam erori la server la inceput si imi pica serverul</body>
        </ownedComment>
        <interfaceRealization xmi:id="_V9d7IEVdEfCS7cth2SLu0w" client="_VujVYEVdEfCS7cth2SLu0w" supplier="_V8wwgEVdEfCS7cth2SLu0w" contract="_V8wwgEVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_JWKkVdEfCS7cth2SLu0w" name="contextInitialized" specification="_V9d7IUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_JWK0VdEfCS7cth2SLu0w" name="sce" type="_V8wJcEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>;;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_JWLEVdEfCS7cth2SLu0w" name="contextDestroyed" specification="_V9eiMkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_JWLUVdEfCS7cth2SLu0w" name="sce" type="_V8wJcEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>AbandonedConnectionCleanupThread.checkedShutdown();
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_V9d7IUVdEfCS7cth2SLu0w" name="contextInitialized" method="_V_JWKkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V9d7IkVdEfCS7cth2SLu0w" name="sce" type="_V8wJcEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V9eiMkVdEfCS7cth2SLu0w" name="contextDestroyed" method="_V_JWLEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V9eiM0VdEfCS7cth2SLu0w" name="sce" type="_V8wJcEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VumYsEVdEfCS7cth2SLu0w" name="ReportData"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vum_wEVdEfCS7cth2SLu0w" name="SessionTimeoutListener">
        <interfaceRealization xmi:id="_V9hlgEVdEfCS7cth2SLu0w" client="_Vum_wEVdEfCS7cth2SLu0w" supplier="_V8zMwUVdEfCS7cth2SLu0w" contract="_V8zMwUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_KkQEVdEfCS7cth2SLu0w" name="sessionDestroyed" specification="_V9iMkkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_KkQUVdEfCS7cth2SLu0w" name="se" type="_V8ylsEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>if (se.getSession().isNew() == false) { // Verificați dacă sesiunea nu este nouă
         updateAllUsersInactive();
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_KkQkVdEfCS7cth2SLu0w" name="updateAllUsersInactive" specification="_Vum_wUVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>Connection conn = null;
     Statement stmt = null;
     try {
         // Încercați să vă conectați la baza de date
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
         stmt = conn.createStatement();

         // Actualizați toți utilizatorii ca inactivi
         stmt.executeUpdate(&quot;UPDATE useri SET activ = 0&quot;);

         System.out.println(&quot;All users have been set to inactive.&quot;);
     } catch (Exception e) {
         e.printStackTrace();
     } finally {
         try {
             if (stmt != null) stmt.close();
             if (conn != null) conn.close();
         } catch (Exception ex) {
             ex.printStackTrace();
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vum_wUVdEfCS7cth2SLu0w" name="updateAllUsersInactive" visibility="private" method="_V_KkQkVdEfCS7cth2SLu0w"/>
        <ownedOperation xmi:id="_V9hlgUVdEfCS7cth2SLu0w" name="sessionCreated">
          <ownedParameter xmi:id="_V9hlgkVdEfCS7cth2SLu0w" name="se" type="_V8ylsEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V9iMkkVdEfCS7cth2SLu0w" name="sessionDestroyed" method="_V_KkQEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V9iMk0VdEfCS7cth2SLu0w" name="se" type="_V8ylsEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vunm0EVdEfCS7cth2SLu0w" name="Userr">
        <ownedAttribute xmi:id="_V-cykEVdEfCS7cth2SLu0w" name="name">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-cykUVdEfCS7cth2SLu0w" name="address">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_KkQ0VdEfCS7cth2SLu0w" name="toString" specification="_VuoN5EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_KkREVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>return &quot;User [name=&quot; + name + &quot;, address=&quot; + address + &quot;]&quot;;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vunm0UVdEfCS7cth2SLu0w" name="Userr">
          <eAnnotations xmi:id="_VuoN4EVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VuoN4UVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VuoN40VdEfCS7cth2SLu0w" type="_Vunm0EVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuoN5EVdEfCS7cth2SLu0w" name="toString" method="_V_KkQ0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuoN5UVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_V_iXu0VdEfCS7cth2SLu0w" name="" memberEnd="_V-WE50VdEfCS7cth2SLu0w _V_iXvEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_V_iXvEVdEfCS7cth2SLu0w" name="" type="_T92MwEVdEfCS7cth2SLu0w" association="_V_iXu0VdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_V_iXvUVdEfCS7cth2SLu0w" name="" memberEnd="_V-Wr8EVdEfCS7cth2SLu0w _V_i-wEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_V_i-wEVdEfCS7cth2SLu0w" name="" type="_T92MwEVdEfCS7cth2SLu0w" association="_V_iXvUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_V_i-wkVdEfCS7cth2SLu0w" name="" memberEnd="_V-XTA0VdEfCS7cth2SLu0w _V_i-w0VdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_V_i-w0VdEfCS7cth2SLu0w" name="" type="_Vuec4EVdEfCS7cth2SLu0w" association="_V_i-wkVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_V_i-xEVdEfCS7cth2SLu0w" name="" memberEnd="_V-YhIkVdEfCS7cth2SLu0w _V_i-xUVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_V_i-xUVdEfCS7cth2SLu0w" name="" type="_Vuec4EVdEfCS7cth2SLu0w" association="_V_i-xEVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_V_jl0EVdEfCS7cth2SLu0w" name="" memberEnd="_V-YhI0VdEfCS7cth2SLu0w _V_jl0UVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_V_jl0UVdEfCS7cth2SLu0w" name="" type="_Vuec4EVdEfCS7cth2SLu0w" association="_V_jl0EVdEfCS7cth2SLu0w"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_Sn8JwEVdEfCS7cth2SLu0w" name="DAO">
      <packagedElement xmi:type="uml:Class" xmi:id="_S3MtwEVdEfCS7cth2SLu0w" name="ModifUsrDao">
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UH3rcEVdEfCS7cth2SLu0w" name="registerEmployee" specification="_UCRZwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UH4SgEVdEfCS7cth2SLu0w" name="employee" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UH4SgUVdEfCS7cth2SLu0w" name="who">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UH4SgkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>String INSERT_USERS_SQL = &quot;UPDATE useri SET nume = ?, prenume = ?, data_nasterii = ?, adresa = ?, email = ?, telefon = ?, username = ?, id_dep = ?, tip = ? WHERE username = ?&quot;;

	    int result = 0;

	    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
	    try (Connection con = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	         PreparedStatement preparedStatement = con.prepareStatement(INSERT_USERS_SQL)) {
	        preparedStatement.setString(1, employee.getNume());
	        preparedStatement.setString(2, employee.getPrenume());
	        preparedStatement.setString(3, employee.getData_nasterii());
	        preparedStatement.setString(4, employee.getAdresa());
	        preparedStatement.setString(5, employee.getEmail());
	        preparedStatement.setString(6, employee.getTelefon());
	        preparedStatement.setString(7, employee.getUsername());
	        preparedStatement.setInt(8, employee.getDepartament());
	        preparedStatement.setInt(9, employee.getTip());
	        preparedStatement.setString(10, who);
	        System.out.println(who + &quot; &quot; + employee.getUsername());
	        result = preparedStatement.executeUpdate();
	    } catch (SQLException e) {
	        printSQLException(e);
	    }
	    return result;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UH9yEEVdEfCS7cth2SLu0w" name="printSQLException" specification="_UCTO8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UH9yEUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {
         if (e instanceof SQLException) {
             e.printStackTrace(System.err);
             System.err.println(&quot;SQLState: &quot; + ((SQLException) e).getSQLState());
             System.err.println(&quot;Error Code: &quot; + ((SQLException) e).getErrorCode());
             System.err.println(&quot;Message: &quot; + e.getMessage());
             Throwable t = ex.getCause();
             while (t != null) {
                 System.out.println(&quot;Cause: &quot; + t);
                 t = t.getCause();
             }
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UCRZwEVdEfCS7cth2SLu0w" name="registerEmployee" method="_UH3rcEVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCRZwkVdEfCS7cth2SLu0w" name="who">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UCRZw0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCTO8EVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" method="_UH9yEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCTO8UVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UCRZwUVdEfCS7cth2SLu0w" name="employee" type="_T9m8MUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S3b-UEVdEfCS7cth2SLu0w" name="AdaugaConcediuDAO">
        <ownedComment xmi:id="_UJPkcEVdEfCS7cth2SLu0w">
          <body>Clasa care se ocupa de incarcarea unui concediu in baza de date</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UH9yEkVdEfCS7cth2SLu0w" name="incarca" specification="_UCT2AEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UH9yE0VdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UH9yFEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>String sql = &quot;INSERT INTO concedii &quot; +
		        &quot;(id_ang, start_c, end_c, motiv, locatie, status, tip, durata, added, modified, acc_res) VALUES &quot; +
		        &quot;(?, ?, ?, ?, ?, ?, ?, ?, CURDATE(), CURDATE(), CURDATE())&quot;;
		    
		    System.out.println(&quot;Încercare inserare concediu pentru angajatul: &quot; + concediu.getId_ang());
		    
		    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
		    
		    try (Connection conexiune = DriverManager.getConnection(
		            &quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
		         PreparedStatement stmt = conexiune.prepareStatement(sql)) {
		        
		        stmt.setInt(1, concediu.getId_ang());
		        stmt.setString(2, concediu.getInceput());
		        stmt.setString(3, concediu.getSfarsit());
		        stmt.setString(4, concediu.getMotiv());
		        stmt.setString(5, concediu.getLocatie());
		        stmt.setInt(6, concediu.getStatus());
		        stmt.setInt(7, concediu.getTip());
		        stmt.setInt(8, concediu.getDurata());
		        
		        System.out.println(&quot;Executing SQL: &quot; + stmt.toString());
		        int rezultat = stmt.executeUpdate();
		        System.out.println(&quot;Rezultat inserare: &quot; + rezultat);
		        return rezultat;
		    } catch (SQLException e) {
		        System.out.println(&quot;Eroare la inserare concediu:&quot;);
		        printSQLException(e);
		        throw e; // Retransmitem excepția
		    }
		</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UH-ZIEVdEfCS7cth2SLu0w" name="printSQLException" specification="_UCUdEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UH-ZIUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {
         if (e instanceof SQLException) {
             e.printStackTrace(System.err);
             System.err.println(&quot;Stare: &quot; + ((SQLException) e).getSQLState());
             System.err.println(&quot;Cod eroare: &quot; + ((SQLException) e).getErrorCode());
             System.err.println(&quot;Explicatie: &quot; + e.getMessage());
             Throwable t = ex.getCause();
             while (t != null) {
                 System.out.println(&quot;Cauza: &quot; + t);
                 t = t.getCause();
             }
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UCT2AEVdEfCS7cth2SLu0w" name="incarca" method="_UH9yEkVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCT2AUVdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UCT2AkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCUdEEVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" isStatic="true" method="_UH-ZIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCUdEUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S3fosEVdEfCS7cth2SLu0w" name="AprobAdevDirDAO">
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UH_AMEVdEfCS7cth2SLu0w" name="aprobare" specification="_S3g20EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UH_AMUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UH_AMkVdEfCS7cth2SLu0w" name="mentiuni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>String UPDATE_STATUS_SQL = &quot;UPDATE adeverinte SET status = 2, modif = CURDATE(), motiv = ? WHERE id = ?&quot;;&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
&#xD;
     try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_STATUS_SQL)) {&#xD;
         preparedStatement.setString(1, mentiuni);&#xD;
         preparedStatement.setInt(2, idAdeverinta);&#xD;
&#xD;
         preparedStatement.executeUpdate();&#xD;
     } catch (SQLException e) {&#xD;
         printSQLException(e);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UH_AM0VdEfCS7cth2SLu0w" name="printSQLException" specification="_UCVEIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UH_ANEVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {&#xD;
            if (e instanceof SQLException) {&#xD;
                e.printStackTrace(System.err);&#xD;
                System.err.println(&quot;Stare: &quot; + ((SQLException) e).getSQLState());&#xD;
                System.err.println(&quot;Cod eroare: &quot; + ((SQLException) e).getErrorCode());&#xD;
                System.err.println(&quot;Explicatie: &quot; + e.getMessage());&#xD;
                Throwable t = ex.getCause();&#xD;
                while (t != null) {&#xD;
                    System.out.println(&quot;Cauza: &quot; + t);&#xD;
                    t = t.getCause();&#xD;
                }&#xD;
            }&#xD;
        }&#xD;
    </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S3g20EVdEfCS7cth2SLu0w" name="aprobare" method="_UH_AMEVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S3hd4EVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S3iE8EVdEfCS7cth2SLu0w" name="mentiuni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCVEIEVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" isStatic="true" method="_UH_AM0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCVEIUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S3qn0EVdEfCS7cth2SLu0w" name="AprobAdevSefDAO">
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UH_nQEVdEfCS7cth2SLu0w" name="aprobare" specification="_S3r18EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UH_nQUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UH_nQkVdEfCS7cth2SLu0w" name="mentiuni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>String UPDATE_STATUS_SQL = &quot;UPDATE adeverinte SET status = 1, modif = CURDATE(), motiv = ? WHERE id = ?&quot;;&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
&#xD;
     try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_STATUS_SQL)) {&#xD;
         preparedStatement.setString(1, mentiuni);&#xD;
         preparedStatement.setInt(2, idAdeverinta);&#xD;
&#xD;
         preparedStatement.executeUpdate();&#xD;
     } catch (SQLException e) {&#xD;
         printSQLException(e);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UH_nQ0VdEfCS7cth2SLu0w" name="printSQLException" specification="_UCVrMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UH_nREVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {&#xD;
         if (e instanceof SQLException) {&#xD;
             e.printStackTrace(System.err);&#xD;
             System.err.println(&quot;Stare: &quot; + ((SQLException) e).getSQLState());&#xD;
             System.err.println(&quot;Cod eroare: &quot; + ((SQLException) e).getErrorCode());&#xD;
             System.err.println(&quot;Explicatie: &quot; + e.getMessage());&#xD;
             Throwable t = ex.getCause();&#xD;
             while (t != null) {&#xD;
                 System.out.println(&quot;Cauza: &quot; + t);&#xD;
                 t = t.getCause();&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S3r18EVdEfCS7cth2SLu0w" name="aprobare" method="_UH_nQEVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S3r18UVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S3r18kVdEfCS7cth2SLu0w" name="mentiuni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCVrMEVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" isStatic="true" method="_UH_nQ0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCVrMUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S3trIEVdEfCS7cth2SLu0w" name="AprobDirDao">
        <ownedComment xmi:id="_UJQLgEVdEfCS7cth2SLu0w">
          <body>DAO pentru aprobare director -> difera de DAO aprobari/respingeri prin SET status=2!!</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIAOUEVdEfCS7cth2SLu0w" name="aprobare" specification="_S3vgUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIAOUUVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIAOUkVdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIAOU0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile
		// nu are ca si celelalte sa fie id_ang != 0
	    String sql = &quot;UPDATE concedii SET status = 2, mentiuni = \&quot;&quot; + motiv + &quot;\&quot;, acc_res = (select current_date()) WHERE id = ?&quot;;
	    int rezultat = 0;
	    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
	    // creare conexiune cu baza de date
	    try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	    		// pregatire interogare
	         PreparedStatement stmt = conexiune.prepareStatement(sql)) {
	        stmt.setInt(1, id);
	        // executie interogare
	        rezultat = stmt.executeUpdate();
	    } catch (SQLException e) {
	        printSQLException(e);
	    }
	    return rezultat;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIA1YEVdEfCS7cth2SLu0w" name="printSQLException" specification="_UCWSQEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIA1YUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {
         if (e instanceof SQLException) {
             e.printStackTrace(System.err);
             System.err.println(&quot;Stare: &quot; + ((SQLException) e).getSQLState());
             System.err.println(&quot;Cod eroare: &quot; + ((SQLException) e).getErrorCode());
             System.err.println(&quot;Explicatie: &quot; + e.getMessage());
             Throwable t = ex.getCause();
             while (t != null) {
                 System.out.println(&quot;Cauza: &quot; + t);
                 t = t.getCause();
             }
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S3vgUEVdEfCS7cth2SLu0w" name="aprobare" method="_UIAOUEVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S3vgUUVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S3vgUkVdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S3wHYEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCWSQEVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" isStatic="true" method="_UIA1YEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCWSQUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S3yjoEVdEfCS7cth2SLu0w" name="AprobSefDao">
        <ownedComment xmi:id="_UJQLgUVdEfCS7cth2SLu0w">
          <body>DAO pentru aprobare sef -> difera de DAO aprobari/respingeri prin SET status=1!!</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIA1YkVdEfCS7cth2SLu0w" name="aprobare" specification="_S3zxwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIA1Y0VdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIA1ZEVdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIA1ZUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile
		    //String sql = &quot;UPDATE concedii SET status = 2, comm_dir = \&quot;&quot; + motiv + &quot;\&quot;, acc_res = (select current_date()) WHERE id = ?&quot;;
		    String sql = &quot;UPDATE concedii SET status = 1, mentiuni = \&quot;&quot; + motiv + &quot;\&quot;, acc_res = (select current_date()) WHERE id = ? and id_ang != 0&quot;;
		// String sql = &quot;UPDATE concedii SET status = 1, acc_res = (select current_date()) WHERE id = ? and id_ang != 0&quot;;
	    int result = 0;
	    // initializare driver pentru comunicarea cu baza de date
	    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
	    // conexiunea cu baza de date
	    try (Connection con = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	    		// pregatirea interogarii
	         PreparedStatement preparedStatement = con.prepareStatement(sql)) {
	        preparedStatement.setInt(1, id);
	        // executia interogarii
	        result = preparedStatement.executeUpdate();
	    } catch (SQLException e) {
	        printSQLException(e);
	    }
	    return result;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIBccEVdEfCS7cth2SLu0w" name="printSQLException" specification="_UCW5UEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIBccUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {
         if (e instanceof SQLException) {
             e.printStackTrace(System.err);
             System.err.println(&quot;Stare: &quot; + ((SQLException) e).getSQLState());
             System.err.println(&quot;Cod eroare: &quot; + ((SQLException) e).getErrorCode());
             System.err.println(&quot;Explicatie: &quot; + e.getMessage());
             Throwable t = ex.getCause();
             while (t != null) {
                 System.out.println(&quot;Cauza: &quot; + t);
                 t = t.getCause();
             }
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S3zxwEVdEfCS7cth2SLu0w" name="aprobare" method="_UIA1YkVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S3zxwUVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S30Y0EVdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S30Y0UVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCW5UEVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" isStatic="true" method="_UIBccEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCW5UUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S32OAEVdEfCS7cth2SLu0w" name="DelConDao">
        <ownedComment xmi:id="_UJQLgkVdEfCS7cth2SLu0w">
          <body>Clasa care se ocupa cu stergerea unui concediu, facand legatura directa cu baza de date</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIBcckVdEfCS7cth2SLu0w" name="stergere" specification="_UCXgYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIBcc0VdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIBcdEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile
     String sql = &quot;delete from concedii WHERE id = ?;&quot;;
     int rezultat = 0;
     // initializare driver pentru baza de date
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
     // creare conexiune
     try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
     		// pregatire interogare
          PreparedStatement interogare = conexiune.prepareStatement(sql)) {
     	// setaree argumente wildcard in interogare ce depind de obiectul concediu primit, mai exact id-ul sau
         interogare.setInt(1, concediu.getId());
         // executare interogare
         rezultat = interogare.executeUpdate();
     } catch (SQLException e) {
         printSQLException(e);
     }
     return rezultat;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UICqkEVdEfCS7cth2SLu0w" name="printSQLException" specification="_UCYHcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UICqkUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {
         if (e instanceof SQLException) {
             e.printStackTrace(System.err);
             System.err.println(&quot;Stare: &quot; + ((SQLException) e).getSQLState());
             System.err.println(&quot;Cod eroare: &quot; + ((SQLException) e).getErrorCode());
             System.err.println(&quot;Explicatie: &quot; + e.getMessage());
             Throwable t = ex.getCause();
             while (t != null) {
                 System.out.println(&quot;Cauza: &quot; + t);
                 t = t.getCause();
             }
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UCXgYEVdEfCS7cth2SLu0w" name="stergere" method="_UIBcckVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCXgYUVdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UCXgYkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCYHcEVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" isStatic="true" method="_UICqkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCYHcUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S35RUEVdEfCS7cth2SLu0w" name="DelUsrDao">
        <ownedComment xmi:id="_UJQLg0VdEfCS7cth2SLu0w">
          <body>Clasa care prorpiu zis are in ea metoda de face stergerea din baza de date</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UICqkkVdEfCS7cth2SLu0w" name="deleteUser" specification="_S36fcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UICqk0VdEfCS7cth2SLu0w" name="numeutilizator">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UICqlEVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UICqlUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// declrarare si initializare variabile
	    String sql2 = &quot;DELETE FROM appearance WHERE id_usr = ?;&quot;;
	    String sql3 = &quot;DELETE FROM useri WHERE username = ?;&quot;;
	    int rezultat = 0;
	    Connection conexiune = null;
	    PreparedStatement stmt = null;

	    try {
	    	// creare conexiune
	        conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	        conexiune.setAutoCommit(false); 
	        
	        // Mai intai sterge utilizarorul ddin lista de oameni care au concedi in acea perioada care se afla in acel departament
	        stmt = conexiune.prepareStatement(sql2);
	        stmt.setInt(1, id);
	        // apoi se sterge utilizatorul
	        // asta datorita cheii externe
	        stmt = conexiune.prepareStatement(sql3);
	        stmt.setString(1, numeutilizator);
	        rezultat = stmt.executeUpdate();
	        // se da commit daca cele 2 stergeri nu au produs eroare + return
	        conexiune.commit(); 
	    } catch (SQLException e) {
	        if (conexiune != null) {
	            try {
	                conexiune.rollback(); // daca a aparut o eroare dam un undo ca nu stim unde a avut loc sau cam asa ceva
	            } catch (SQLException ex) {
	                printSQLException(ex);
	            }
	        }
	        printSQLException(e);
	        throw e;
	    } finally {
	    	// indiferent daca se sterge sau nu cu bine, inchidem conexiunile
	        if (stmt != null) {
	            try {
	                stmt.close();
	            } catch (SQLException e) {
	                printSQLException(e);
	            }
	        }
	        if (conexiune != null) {
	            try {
	                conexiune.setAutoCommit(true);
	                conexiune.close();
	            } catch (SQLException e) {
	                printSQLException(e);
	            }
	        }
	    }
	    return rezultat;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIDRoEVdEfCS7cth2SLu0w" name="printSQLException" specification="_UCYHckVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIDRoUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {
         if (e instanceof SQLException) {
             e.printStackTrace(System.err);
             System.err.println(&quot;Stare: &quot; + ((SQLException) e).getSQLState());
             System.err.println(&quot;Cod eroare: &quot; + ((SQLException) e).getErrorCode());
             System.err.println(&quot;Explicatie: &quot; + e.getMessage());
             Throwable t = ex.getCause();
             while (t != null) {
                 System.out.println(&quot;Cauza: &quot; + t);
                 t = t.getCause();
             }
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S36fcEVdEfCS7cth2SLu0w" name="deleteUser" method="_UICqkkVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S37GgEVdEfCS7cth2SLu0w" name="numeutilizator">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S37GgUVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S37tkEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCYHckVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" isStatic="true" method="_UIDRoEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCYugEVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S39iwEVdEfCS7cth2SLu0w" name="ModifPasdDao">
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIDRokVdEfCS7cth2SLu0w" name="registerEmployee" specification="_S3-w4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIDRo0VdEfCS7cth2SLu0w" name="pass">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIDRpEVdEfCS7cth2SLu0w" name="who">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIDRpUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>String INSERT_USERS_SQL = &quot;UPDATE useri SET password = ? WHERE username = ?&quot;;

	    int result = 0;

	    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
	    try (Connection con = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	         PreparedStatement preparedStatement = con.prepareStatement(INSERT_USERS_SQL)) {
	    	String hash = BCrypt.hashpw(pass, BCrypt.gensalt());
	        preparedStatement.setString(1, hash);
	        preparedStatement.setString(2, who);
//	        System.err.println(pass);
	        System.err.println(&quot;dao &quot; + who);
	        result = preparedStatement.executeUpdate();
	    } catch (SQLException e) {
	        printSQLException(e);
	    }
	    return result;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIDRpkVdEfCS7cth2SLu0w" name="printSQLException" specification="_UCZVkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIDRp0VdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {
         if (e instanceof SQLException) {
             e.printStackTrace(System.err);
             System.err.println(&quot;SQLState: &quot; + ((SQLException) e).getSQLState());
             System.err.println(&quot;Error Code: &quot; + ((SQLException) e).getErrorCode());
             System.err.println(&quot;Message: &quot; + e.getMessage());
             Throwable t = ex.getCause();
             while (t != null) {
                 System.out.println(&quot;Cause: &quot; + t);
                 t = t.getCause();
             }
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S3-w4EVdEfCS7cth2SLu0w" name="registerEmployee" method="_UIDRokVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S3_X8EVdEfCS7cth2SLu0w" name="pass">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S3_X8UVdEfCS7cth2SLu0w" name="who">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S3__AEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCZVkEVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" method="_UIDRpkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCZVkUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S4B0MEVdEfCS7cth2SLu0w" name="LoginDao">
        <ownedAttribute xmi:id="_UF-OAEVdEfCS7cth2SLu0w" name="DB_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UF-1EEVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UF_cIEVdEfCS7cth2SLu0w" name="DB_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UF_cIUVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UF_cIkVdEfCS7cth2SLu0w" name="DB_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UF_cI0VdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UID4sEVdEfCS7cth2SLu0w" name="validate" specification="_UCZ8oEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UID4sUVdEfCS7cth2SLu0w" name="loginBean" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UID4skVdEfCS7cth2SLu0w" type="_T9m8MUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>if (loginBean == null || loginBean.getUsername() == null || loginBean.getPassword() == null) {
         System.out.println(&quot;Login attempt failed: Invalid input data&quot;);
         return null;
     }

     System.out.println(&quot;Attempting login for user: &quot; + loginBean.getUsername());
     MyUser user = null;
     Connection connection = null;

     try {
         // Load MySQL database driver
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
         
         // Establish database connection
         connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
         
         // Prepare and execute query
         String sql = &quot;SELECT * FROM useri WHERE username = ?&quot;;
         try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
             preparedStatement.setString(1, loginBean.getUsername());
             
             try (ResultSet rs = preparedStatement.executeQuery()) {
                 if (rs.next()) {
                     System.out.println(&quot;User found in database&quot;);
                     String hashedPassword = rs.getString(&quot;password&quot;);
                     
                     if (hashedPassword == null) {
                         System.out.println(&quot;Error: Stored password is null&quot;);
                         return null;
                     }

                     try {
                         if (BCrypt.checkpw(loginBean.getPassword(), hashedPassword)) {
                             System.out.println(&quot;Password match successful&quot;);
                             user = new MyUser();
                             user.setUsername(rs.getString(&quot;username&quot;));
                             user.setTip(rs.getInt(&quot;tip&quot;));
                             user.setPrenume(rs.getString(&quot;prenume&quot;));
                             user.setId(rs.getInt(&quot;id&quot;));
                             
                             // Update activ status
                             updateUserStatus(connection, loginBean.getUsername());
                         } else {
                             System.out.println(&quot;Password match failed for user: &quot; + loginBean.getUsername());
                         }
                     } catch (IllegalArgumentException e) {
                         System.out.println(&quot;Error checking password: &quot; + e.getMessage());
                         e.printStackTrace();
                         return null;
                     }
                 } else {
                     System.out.println(&quot;No user found with username: &quot; + loginBean.getUsername());
                 }
             }
         }
     } catch (SQLException e) {
         System.out.println(&quot;Database error occurred&quot;);
         printSQLException(e);
         throw e;
     } catch (ClassNotFoundException e) {
         System.out.println(&quot;MySQL JDBC Driver not found&quot;);
         e.printStackTrace();
         throw e;
     } finally {
         if (connection != null) {
             try {
                 connection.close();
                 System.out.println(&quot;Database connection closed&quot;);
             } catch (SQLException e) {
                 System.out.println(&quot;Error closing database connection&quot;);
                 e.printStackTrace();
             }
         }
     }
     
     return user;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UID4s0VdEfCS7cth2SLu0w" name="updateUserStatus" specification="_UCajsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UID4tEVdEfCS7cth2SLu0w" name="connection" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UID4tUVdEfCS7cth2SLu0w" name="username">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>if (connection == null || username == null) {
         System.out.println(&quot;Invalid parameters for updating user status&quot;);
         return;
     }

     String updateSQL = &quot;UPDATE useri SET activ = 1 WHERE username = ?&quot;;
     try (PreparedStatement stmt = connection.prepareStatement(updateSQL)) {
         stmt.setString(1, username);
         int rowsUpdated = stmt.executeUpdate();
         System.out.println(&quot;Updated activ status for &quot; + username + &quot;. Rows affected: &quot; + rowsUpdated);
         
         if (rowsUpdated == 0) {
             System.out.println(&quot;Warning: No rows were updated for username: &quot; + username);
         }
     } catch (SQLException e) {
         System.out.println(&quot;Error updating user status for &quot; + username);
         throw e;
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UID4tkVdEfCS7cth2SLu0w" name="printSQLException" specification="_UCajs0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIEfwEVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>if (ex == null) {
         return;
     }

     System.out.println(&quot;SQLException details:&quot;);
     for (Throwable e : ex) {
         if (e instanceof SQLException) {
             e.printStackTrace(System.err);
             SQLException sqlEx = (SQLException) e;
             System.err.println(&quot;SQLState: &quot; + sqlEx.getSQLState());
             System.err.println(&quot;Error Code: &quot; + sqlEx.getErrorCode());
             System.err.println(&quot;Message: &quot; + e.getMessage());
             
             Throwable t = ex.getCause();
             while (t != null) {
                 System.out.println(&quot;Cause: &quot; + t);
                 t = t.getCause();
             }
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UCZ8oEVdEfCS7cth2SLu0w" name="validate" method="_UID4sEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCZ8oUVdEfCS7cth2SLu0w" name="loginBean" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UCZ8okVdEfCS7cth2SLu0w" type="_T9m8MUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UCajsEVdEfCS7cth2SLu0w" name="updateUserStatus" visibility="private" method="_UID4s0VdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCajsUVdEfCS7cth2SLu0w" name="connection" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UCajskVdEfCS7cth2SLu0w" name="username">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCajs0VdEfCS7cth2SLu0w" name="printSQLException" visibility="private" method="_UID4tkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCbKwEVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S4GssEVdEfCS7cth2SLu0w" name="ModifConDao">
        <ownedComment xmi:id="_UJQLhEVdEfCS7cth2SLu0w">
          <body>acest Dao se ocupa de modificarea unui concediu</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIEfwUVdEfCS7cth2SLu0w" name="check" specification="_UCbx0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIEfwkVdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIEfw0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile
     String sql = &quot;UPDATE concedii SET start_c = ?, end_c = ?, motiv = ?, locatie = ?, modified = (select current_date()) WHERE id = ?;&quot;;
     int rezultat = 0;
     
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);

     try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
          PreparedStatement stm = conexiune.prepareStatement(sql)) {
         stm.setString(1, concediu.getInceput());
         stm.setString(2, concediu.getSfarsit());
         stm.setString(3, concediu.getMotiv());
         stm.setString(4, concediu.getLocatie());
         stm.setInt(5, concediu.getId());

         rezultat = stm.executeUpdate();
     } catch (SQLException e) {
         printSQLException(e);
     }
     return rezultat;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIFG0EVdEfCS7cth2SLu0w" name="printSQLException" specification="_UCbx00VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIFG0UVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e : ex) {
         if (e instanceof SQLException) {
             e.printStackTrace(System.err);
             System.err.println(&quot;SQLState: &quot; + ((SQLException) e).getSQLState());
             System.err.println(&quot;Error Code: &quot; + ((SQLException) e).getErrorCode());
             System.err.println(&quot;Message: &quot; + e.getMessage());
             Throwable t = ex.getCause();
             while (t != null) {
                 System.out.println(&quot;Cause: &quot; + t);
                 t = t.getCause();
             }
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UCbx0EVdEfCS7cth2SLu0w" name="check" method="_UIEfwUVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCbx0UVdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UCbx0kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCbx00VdEfCS7cth2SLu0w" name="printSQLException" visibility="private" method="_UIFG0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCbx1EVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S4JwAEVdEfCS7cth2SLu0w" name="ModifDepDao">
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIFG0kVdEfCS7cth2SLu0w" name="modif" specification="_S4K-IEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIFG00VdEfCS7cth2SLu0w" name="neww">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIFG1EVdEfCS7cth2SLu0w" name="old">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIFG1UVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>String INSERT_USERS_SQL = &quot;UPDATE departament SET nume_dep = ? WHERE nume_dep = ?&quot;;

	    int result = 0;

	    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
	    try (Connection con = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	         PreparedStatement preparedStatement = con.prepareStatement(INSERT_USERS_SQL)) {
	        preparedStatement.setString(1, old);
	        preparedStatement.setString(2, neww);
	        result = preparedStatement.executeUpdate();
	    } catch (SQLException e) {
	        printSQLException(e);
	    }
	    return result;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIFG1kVdEfCS7cth2SLu0w" name="printSQLException" specification="_UCcY4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIFG10VdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {
         if (e instanceof SQLException) {
             e.printStackTrace(System.err);
             System.err.println(&quot;SQLState: &quot; + ((SQLException) e).getSQLState());
             System.err.println(&quot;Error Code: &quot; + ((SQLException) e).getErrorCode());
             System.err.println(&quot;Message: &quot; + e.getMessage());
             Throwable t = ex.getCause();
             while (t != null) {
                 System.out.println(&quot;Cause: &quot; + t);
                 t = t.getCause();
             }
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S4K-IEVdEfCS7cth2SLu0w" name="modif" method="_UIFG0kVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S4LlMEVdEfCS7cth2SLu0w" name="neww">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S4LlMUVdEfCS7cth2SLu0w" name="old">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S4LlMkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCcY4EVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" method="_UIFG1kVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCcY4UVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S4OBcEVdEfCS7cth2SLu0w" name="DepDao">
        <ownedComment xmi:id="_UJQykEVdEfCS7cth2SLu0w">
          <body>Clasa care se ocupa cu incarcarea unui departament in baza de date</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIFG2EVdEfCS7cth2SLu0w" name="getNextId" specification="_S4PPkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIFG2UVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile
	    int id = 0;
	    String sql = &quot;SELECT MAX(id_dep) FROM departament&quot;;
	    // incarcare driver
	    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
	    // creare conexiune
	    try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	    		// pregatire interogare
	         PreparedStatement interogare = conexiune.prepareStatement(sql)) {
	        // executare interogare
	        ResultSet rezultat = interogare.executeQuery();
	        if (rezultat.next()) {
	        	// daca s-a intors ceva, se selecteaza, adunandu-se 1 pentru ca e ultimul id din tabel
	            id = rezultat.getInt(1) + 1;
	        }
	    } catch (SQLException e) {
	        printSQLException(e);
	    }
	    return id;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIFt4EVdEfCS7cth2SLu0w" name="addDep" specification="_S4P2oEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIFt4UVdEfCS7cth2SLu0w" name="dep">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIFt4kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile
     String sql = &quot;INSERT INTO departament (id_dep, nume_dep) VALUES (?, ?);&quot;;
     // realizare conexiune
     try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
     		// pregatire interogare
          PreparedStatement interogare = conexiune.prepareStatement(sql)) {
     	// adaugare variabile
     	int nextId = getNextId();  
     	interogare.setInt(1, nextId);
         interogare.setString(2, dep);
         // executare interogare
         return interogare.executeUpdate();
     } catch (SQLException e) {
         printSQLException(e);
         throw e;
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIGU8EVdEfCS7cth2SLu0w" name="printSQLException" specification="_UCdnAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIGU8UVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {
         if (e instanceof SQLException) {
             e.printStackTrace(System.err);
             System.err.println(&quot;Stare: &quot; + ((SQLException) e).getSQLState());
             System.err.println(&quot;Cod eroare: &quot; + ((SQLException) e).getErrorCode());
             System.err.println(&quot;Explicatie: &quot; + e.getMessage());
             Throwable t = ex.getCause();
             while (t != null) {
                 System.out.println(&quot;Cauza: &quot; + t);
                 t = t.getCause();
             }
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S4PPkEVdEfCS7cth2SLu0w" name="getNextId" method="_UIFG2EVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJQykUVdEfCS7cth2SLu0w">
            <body>Functie ce afla urmatorul id (tabela nu are functia auto-increment la id)
	 * @return urmatorul id
	 * @throws SQLException
	 * @throws ClassNotFoundException</body>
          </ownedComment>
          <ownedParameter xmi:id="_S4PPkUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S4P2oEVdEfCS7cth2SLu0w" name="addDep" method="_UIFt4EVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJQykkVdEfCS7cth2SLu0w">
            <body>Aici are loc adaugarea propriu zisa
	 * @param dep
	 * @return numar de modificari facute
	 * @throws ClassNotFoundException
	 * @throws SQLException</body>
          </ownedComment>
          <ownedParameter xmi:id="_S4QdsEVdEfCS7cth2SLu0w" name="dep">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S4REwEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCdnAEVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" isStatic="true" method="_UIGU8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJQyk0VdEfCS7cth2SLu0w">
            <body>Afiseaza frumos / Pretty print o eroare dintr-o baza de date
	 * @param ex</body>
          </ownedComment>
          <ownedParameter xmi:id="_UCdnAUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S4S58EVdEfCS7cth2SLu0w" name="AdaugaAdeverintaDAO">
        <ownedComment xmi:id="_UJQylEVdEfCS7cth2SLu0w">
          <body>Clasa pentru operațiile cu baza de date legate de adăugarea adeverințelor</body>
        </ownedComment>
        <ownedAttribute xmi:id="_UGADMEVdEfCS7cth2SLu0w" name="URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGADMUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGADMkVdEfCS7cth2SLu0w" name="USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGADM0VdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGADNEVdEfCS7cth2SLu0w" name="PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGAqQEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIGU8kVdEfCS7cth2SLu0w" name="AdaugaAdeverintaDAO" specification="_S4VWMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIGU80VdEfCS7cth2SLu0w" type="_S4S58EVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>// Încercăm să încărcăm driver-ul JDBC&#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         throw new RuntimeException(&quot;Nu s-a putut încărca driver-ul JDBC&quot;, e);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIGU9EVdEfCS7cth2SLu0w" name="incarca" specification="_UCeOEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIGU9UVdEfCS7cth2SLu0w" name="adeverinta" type="_T92MwEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIGU9kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>Connection conexiune = null;&#xD;
     PreparedStatement stmt = null;&#xD;
     &#xD;
     try {&#xD;
         conexiune = DriverManager.getConnection(URL, USER, PASSWORD);&#xD;
         &#xD;
         // Dezactivăm autocommit pentru a face operațiunile atomice&#xD;
         conexiune.setAutoCommit(false);&#xD;
         &#xD;
         // Obținem următorul ID disponibil&#xD;
         int nextId = getNextId(conexiune);&#xD;
         &#xD;
         // SQL pentru inserare&#xD;
         String sql = &quot;INSERT INTO adeverinte (id, id_ang, tip, pentru_servi, status, creare) VALUES (?, ?, ?, ?, ?, CURDATE())&quot;;&#xD;
         &#xD;
         stmt = conexiune.prepareStatement(sql);&#xD;
         stmt.setInt(1, nextId); // Folosim ID-ul generat&#xD;
         stmt.setInt(2, adeverinta.getIdAngajat());&#xD;
         stmt.setInt(3, adeverinta.getTip());&#xD;
         stmt.setString(4, adeverinta.getMentiuni());&#xD;
         stmt.setInt(5, adeverinta.getStatus());&#xD;
         &#xD;
         // Executăm query-ul&#xD;
         int result = stmt.executeUpdate();&#xD;
         &#xD;
         if (result > 0) {&#xD;
             // Confirmăm tranzacția&#xD;
             conexiune.commit();&#xD;
             return nextId;&#xD;
         } else {&#xD;
             // Facem rollback în caz de eșec&#xD;
             conexiune.rollback();&#xD;
             return -1;&#xD;
         }&#xD;
     } catch (SQLException e) {&#xD;
         // În caz de excepție, facem rollback&#xD;
         if (conexiune != null) {&#xD;
             try {&#xD;
                 conexiune.rollback();&#xD;
             } catch (SQLException ex) {&#xD;
                 ex.printStackTrace();&#xD;
             }&#xD;
         }&#xD;
         throw e;&#xD;
     } finally {&#xD;
         // Închidem resursele&#xD;
         if (stmt != null) {&#xD;
             try {&#xD;
                 stmt.close();&#xD;
             } catch (SQLException e) {&#xD;
                 e.printStackTrace();&#xD;
             }&#xD;
         }&#xD;
         if (conexiune != null) {&#xD;
             try {&#xD;
                 conexiune.setAutoCommit(true); // Resetăm autocommit&#xD;
                 conexiune.close();&#xD;
             } catch (SQLException e) {&#xD;
                 e.printStackTrace();&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIGU90VdEfCS7cth2SLu0w" name="getNextId" specification="_UCeOE0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIGU-EVdEfCS7cth2SLu0w" name="conexiune" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIGU-UVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>Statement stmt = null;&#xD;
     ResultSet rs = null;&#xD;
     &#xD;
     try {&#xD;
         stmt = conexiune.createStatement();&#xD;
         // Folosim COALESCE pentru a gestiona cazul când tabela e goală&#xD;
         rs = stmt.executeQuery(&quot;SELECT COALESCE(MAX(id), 0) AS max_id FROM adeverinte&quot;);&#xD;
         &#xD;
         if (rs.next()) {&#xD;
             return rs.getInt(&quot;max_id&quot;) + 1;&#xD;
         }&#xD;
         &#xD;
         return 1; // Dacă nu există înregistrări, începem de la 1&#xD;
     } finally {&#xD;
         if (rs != null) {&#xD;
             try {&#xD;
                 rs.close();&#xD;
             } catch (SQLException e) {&#xD;
                 e.printStackTrace();&#xD;
             }&#xD;
         }&#xD;
         if (stmt != null) {&#xD;
             try {&#xD;
                 stmt.close();&#xD;
             } catch (SQLException e) {&#xD;
                 e.printStackTrace();&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIG8AEVdEfCS7cth2SLu0w" name="existaAdeverinta" specification="_S4XLYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIG8AUVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIG8AkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>Connection conexiune = null;&#xD;
     PreparedStatement stmt = null;&#xD;
     ResultSet rs = null;&#xD;
     &#xD;
     try {&#xD;
         conexiune = DriverManager.getConnection(URL, USER, PASSWORD);&#xD;
         &#xD;
         String sql = &quot;SELECT 1 FROM adeverinte WHERE id = ?&quot;;&#xD;
         stmt = conexiune.prepareStatement(sql);&#xD;
         stmt.setInt(1, id);&#xD;
         &#xD;
         rs = stmt.executeQuery();&#xD;
         return rs.next(); // Întoarce true dacă există cel puțin o înregistrare&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         return false;&#xD;
     } finally {&#xD;
         // Închidem resursele&#xD;
         if (rs != null) {&#xD;
             try {&#xD;
                 rs.close();&#xD;
             } catch (SQLException e) {&#xD;
                 e.printStackTrace();&#xD;
             }&#xD;
         }&#xD;
         if (stmt != null) {&#xD;
             try {&#xD;
                 stmt.close();&#xD;
             } catch (SQLException e) {&#xD;
                 e.printStackTrace();&#xD;
             }&#xD;
         }&#xD;
         if (conexiune != null) {&#xD;
             try {&#xD;
                 conexiune.close();&#xD;
             } catch (SQLException e) {&#xD;
                 e.printStackTrace();&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIG8A0VdEfCS7cth2SLu0w" name="getStatusAdeverinta" specification="_S4XycEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIG8BEVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIG8BUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>Connection conexiune = null;&#xD;
     PreparedStatement stmt = null;&#xD;
     ResultSet rs = null;&#xD;
     &#xD;
     try {&#xD;
         conexiune = DriverManager.getConnection(URL, USER, PASSWORD);&#xD;
         &#xD;
         String sql = &quot;SELECT status FROM adeverinte WHERE id = ?&quot;;&#xD;
         stmt = conexiune.prepareStatement(sql);&#xD;
         stmt.setInt(1, id);&#xD;
         &#xD;
         rs = stmt.executeQuery();&#xD;
         if (rs.next()) {&#xD;
             return rs.getInt(&quot;status&quot;);&#xD;
         }&#xD;
         &#xD;
         return -999; // Adeverința nu există&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         return -999;&#xD;
     } finally {&#xD;
         // Închidem resursele&#xD;
         if (rs != null) {&#xD;
             try {&#xD;
                 rs.close();&#xD;
             } catch (SQLException e) {&#xD;
                 e.printStackTrace();&#xD;
             }&#xD;
         }&#xD;
         if (stmt != null) {&#xD;
             try {&#xD;
                 stmt.close();&#xD;
             } catch (SQLException e) {&#xD;
                 e.printStackTrace();&#xD;
             }&#xD;
         }&#xD;
         if (conexiune != null) {&#xD;
             try {&#xD;
                 conexiune.close();&#xD;
             } catch (SQLException e) {&#xD;
                 e.printStackTrace();&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S4VWMEVdEfCS7cth2SLu0w" name="AdaugaAdeverintaDAO" method="_UIGU8kVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S4VWMUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S4V9QEVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_S4V9QUVdEfCS7cth2SLu0w" type="_S4S58EVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S4XLYEVdEfCS7cth2SLu0w" name="existaAdeverinta" method="_UIG8AEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S4XLYUVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S4XLYkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S4XycEVdEfCS7cth2SLu0w" name="getStatusAdeverinta" method="_UIG8A0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S4XycUVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S4YZgEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCeOEEVdEfCS7cth2SLu0w" name="incarca" method="_UIGU9EVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCeOEUVdEfCS7cth2SLu0w" name="adeverinta" type="_T92MwEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UCeOEkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCeOE0VdEfCS7cth2SLu0w" name="getNextId" visibility="private" method="_UIGU90VdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCeOFEVdEfCS7cth2SLu0w" name="conexiune" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UCeOFUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S4d5EEVdEfCS7cth2SLu0w" name="MyUserDao">
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIHjE0VdEfCS7cth2SLu0w" name="getNextId" specification="_S4fHMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIHjFEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>int nextId = 0;
	    String SQL_SELECT_LAST_ID = &quot;SELECT MAX(id) FROM useri&quot;;

	    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
	    try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	         PreparedStatement preparedStatement = connection.prepareStatement(SQL_SELECT_LAST_ID)) {
	        
	        ResultSet rs = preparedStatement.executeQuery();
	        if (rs.next()) {
	            nextId = rs.getInt(1) + 1;
	        }
	    } catch (SQLException e) {
	        printSQLException(e);
	    }
	    return nextId;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIHjFUVdEfCS7cth2SLu0w" name="registerEmployee" specification="_UCgDQEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIHjFkVdEfCS7cth2SLu0w" name="employee" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIHjF0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>String INSERT_USERS_SQL = &quot;INSERT INTO useri&quot; +
	        &quot;  (nume, prenume, data_nasterii, email, telefon, username, password, id_dep, tip, cnp, culoare) VALUES &quot; +
	        &quot; (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);&quot;;

	    int result = 0;

	    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);

	    try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	         PreparedStatement preparedStatement = connection.prepareStatement(INSERT_USERS_SQL)) {
	    	String hashedPassword = BCrypt.hashpw(employee.getPassword(), BCrypt.gensalt());
//	        preparedStatement.setInt(1, nextId);
	        preparedStatement.setString(1, employee.getNume());
	        preparedStatement.setString(2, employee.getPrenume());
	        preparedStatement.setString(3, employee.getData_nasterii());
	      
	        preparedStatement.setString(4, employee.getEmail());
	        preparedStatement.setString(5, employee.getTelefon());
	        preparedStatement.setString(6, employee.getUsername());
	        preparedStatement.setString(7, hashedPassword);
	        preparedStatement.setInt(8, employee.getDepartament());
	        preparedStatement.setInt(9, employee.getTip());
	        preparedStatement.setString(10, employee.getCnp());
	        preparedStatement.setString(11, employee.getCuloare());
	        //System.err.println(employee.getNume() + &quot; &quot; + employee.getPrenume() + &quot; &quot; + employee.getData_nasterii() + &quot; &quot; + employee.getAdresa() + &quot; &quot; + employee.getEmail() + &quot; &quot; + employee.getTelefon() +&quot; &quot; + employee.getUsername() + &quot; &quot; + employee.getPassword() + &quot; &quot; + employee.getDepartament() + &quot; &quot; + employee.getTip());
	        /*
	        File imageFile = new File(&quot;C:\\Users\\Popi\\eclipse-workspace\\Proiect\\person.jpg&quot;);
	        try (FileInputStream fis = new FileInputStream(imageFile)) {
	            preparedStatement.setBinaryStream(13, fis, (int) imageFile.length());
	        } catch (FileNotFoundException e) {
	            System.out.println(&quot;Imaginea nu a fost găsită.&quot;);
	            e.printStackTrace();
	        }
	        */
	        result = preparedStatement.executeUpdate();

	    } catch (SQLException e) {
	        printSQLException(e);
	        throw new IOException();
	    }
	    // insertUserWithImage(&quot;C:\Users\Popi\eclipse-workspace\Proiect\person.jpg&quot;, id);
	    return result;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIIKIEVdEfCS7cth2SLu0w" name="insertUserWithImage" specification="_S4g8YEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIIKIUVdEfCS7cth2SLu0w" name="imagePath">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIIKIkVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>String INSERT_USERS_SQL = &quot;INSERT INTO useri (profil) VALUES (?) where id = ?;&quot;;
	    File imageFile = new File(imagePath);
	    try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	         PreparedStatement preparedStatement = connection.prepareStatement(INSERT_USERS_SQL);
	         FileInputStream fis = new FileInputStream(imageFile)) {

	        preparedStatement.setBinaryStream(1, fis, (int) imageFile.length());
	        preparedStatement.executeUpdate();
	    } catch (FileNotFoundException e) {
	        System.out.println(&quot;Imaginea nu a fost găsită.&quot;);
	        e.printStackTrace();
	    } catch (SQLException e) {
	        System.out.println(&quot;Eroare la baza de date.&quot;);
	        e.printStackTrace();
	    } catch (IOException e) {
	        System.out.println(&quot;Eroare la citirea fișierului.&quot;);
	        e.printStackTrace();
	    }
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIIxMEVdEfCS7cth2SLu0w" name="getTipuri" specification="_S4iKgEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIIxMUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UIIxMkVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;String> tipuri = new ArrayList&lt;>();

	    try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	         PreparedStatement preparedStatement = connection.prepareStatement(&quot;SELECT denumire FROM tipuri&quot;)) {
         ResultSet rs = preparedStatement.executeQuery();
         while (rs.next()) {
             tipuri.add(rs.getString(&quot;denumire&quot;));
         }
     }
     return tipuri;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIJYQEVdEfCS7cth2SLu0w" name="getDepartamente" specification="_S4ixkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIJYQUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UIJYQkVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;String> departamente = new ArrayList&lt;>();
     try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	         PreparedStatement preparedStatement = connection.prepareStatement(&quot;SELECT denumire FROM tipuri&quot;)) {
            ResultSet rs = preparedStatement.executeQuery();
         while (rs.next()) {
             departamente.add(rs.getString(&quot;nume_dep&quot;));
         }
     }
     return departamente;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIJYQ0VdEfCS7cth2SLu0w" name="printSQLException" specification="_UCgqUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIJYREVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {
         if (e instanceof SQLException) {
             e.printStackTrace(System.err);
             System.err.println(&quot;SQLState: &quot; + ((SQLException) e).getSQLState());
             System.err.println(&quot;Error Code: &quot; + ((SQLException) e).getErrorCode());
             System.err.println(&quot;Message: &quot; + e.getMessage());
             Throwable t = ex.getCause();
             while (t != null) {
                 System.out.println(&quot;Cause: &quot; + t);
                 t = t.getCause();
             }
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S4fHMEVdEfCS7cth2SLu0w" name="getNextId" method="_UIHjE0VdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S4fuQEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S4g8YEVdEfCS7cth2SLu0w" name="insertUserWithImage" method="_UIIKIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S4hjcEVdEfCS7cth2SLu0w" name="imagePath">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S4hjcUVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S4iKgEVdEfCS7cth2SLu0w" name="getTipuri" method="_UIIxMEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S4iKgUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S4iKgkVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S4ixkEVdEfCS7cth2SLu0w" name="getDepartamente" method="_UIJYQEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S4jYoEVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S4jYoUVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCgDQEVdEfCS7cth2SLu0w" name="registerEmployee" method="_UIHjFUVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCgDQUVdEfCS7cth2SLu0w" name="employee" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UCgDQkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCgqUEVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" method="_UIJYQ0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCgqUUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S4sikEVdEfCS7cth2SLu0w" name="ResDirDao">
        <ownedComment xmi:id="_UJQylUVdEfCS7cth2SLu0w">
          <body>DAO pentru respingere director -> difera de DAO aprobari/respingeri prin SET status=-2!!</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIKmYEVdEfCS7cth2SLu0w" name="respingere" specification="_S4twsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIKmYUVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIKmYkVdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIKmY0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile
	    	//String sql = &quot;UPDATE concedii SET status = -2, acc_res = (select current_date()) WHERE id = ? and id_ang != 0&quot;;
		    String sql = &quot;UPDATE concedii SET status = -2, mentiuni = \&quot;&quot; + motiv + &quot;\&quot;, acc_res = (select current_date()) WHERE id = ? and id_ang != 0&quot;;
	    int result = 0;
	    // initializare driver pentru comunicarea cu baza de date
	    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
	    // conexiunea cu baza de date
	    try (Connection con = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	    		// pregatirea interogarii
	         PreparedStatement preparedStatement = con.prepareStatement(sql)) {
	        preparedStatement.setInt(1, id);
	        // executia interogarii
	        result = preparedStatement.executeUpdate();
	    } catch (SQLException e) {
	        printSQLException(e);
	    }
	    return result;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIKmZEVdEfCS7cth2SLu0w" name="printSQLException" specification="_UCjtoEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIKmZUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {
         if (e instanceof SQLException) {
             e.printStackTrace(System.err);
             System.err.println(&quot;Stare: &quot; + ((SQLException) e).getSQLState());
             System.err.println(&quot;Cod eroare: &quot; + ((SQLException) e).getErrorCode());
             System.err.println(&quot;Explicatie: &quot; + e.getMessage());
             Throwable t = ex.getCause();
             while (t != null) {
                 System.out.println(&quot;Cauza: &quot; + t);
                 t = t.getCause();
             }
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S4twsEVdEfCS7cth2SLu0w" name="respingere" method="_UIKmYEVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S4uXwEVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S4uXwUVdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S4uXwkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCjtoEVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" isStatic="true" method="_UIKmZEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCjtoUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S4wM8EVdEfCS7cth2SLu0w" name="ResSefDao">
        <ownedComment xmi:id="_UJRZoEVdEfCS7cth2SLu0w">
          <body>DAO pentru aprobare sef -> difera de DAO aprobari/respingeri prin SET status=-1!!</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UILNcEVdEfCS7cth2SLu0w" name="respingere" specification="_S4xbEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UILNcUVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UILNckVdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UILNc0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile
	    //String sql = &quot;UPDATE concedii SET status = 2, comm_dir = \&quot;&quot; + motiv + &quot;\&quot;, acc_res = (select current_date()) WHERE id = ?&quot;;
	    String sql = &quot;UPDATE concedii SET status = -1, mentiuni = \&quot;&quot; + motiv + &quot;\&quot;, acc_res = (select current_date()) WHERE id = ? and id_ang != 0&quot;;
	// String sql = &quot;UPDATE concedii SET status = 1, acc_res = (select current_date()) WHERE id = ? and id_ang != 0&quot;;
	    int result = 0;
	    // initializare driver pentru comunicarea cu baza de date
	    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
	    // conexiunea cu baza de date
	    try (Connection con = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	    		// pregatirea interogarii
	         PreparedStatement preparedStatement = con.prepareStatement(sql)) {
	        preparedStatement.setInt(1, id);
	        // executia interogarii
	        result = preparedStatement.executeUpdate();
	    } catch (SQLException e) {
	        printSQLException(e);
	    }
	    return result;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UILNdEVdEfCS7cth2SLu0w" name="printSQLException" specification="_UCkUsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UILNdUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {
         if (e instanceof SQLException) {
             e.printStackTrace(System.err);
             System.err.println(&quot;Stare: &quot; + ((SQLException) e).getSQLState());
             System.err.println(&quot;Cod eroare: &quot; + ((SQLException) e).getErrorCode());
             System.err.println(&quot;Explicatie: &quot; + e.getMessage());
             Throwable t = ex.getCause();
             while (t != null) {
                 System.out.println(&quot;Cauza: &quot; + t);
                 t = t.getCause();
             }
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S4xbEEVdEfCS7cth2SLu0w" name="respingere" method="_UILNcEVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S4xbEUVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S4xbEkVdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S4xbE0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCkUsEVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" isStatic="true" method="_UILNdEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCk7wEVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S42TkEVdEfCS7cth2SLu0w" name="StergereDepartamentDAO">
        <ownedComment xmi:id="_UJRZoUVdEfCS7cth2SLu0w">
          <body>Clasa ce se ocupa de stergerea unui departament si e legatura cu baza de date</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UILNeUVdEfCS7cth2SLu0w" name="stergere" specification="_S43hsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UILNekVdEfCS7cth2SLu0w" name="username">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UILNe0VdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UILNfEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile
 	String sql1 = &quot;DELETE FROM plecati WHERE id_dep = ?;&quot;; // am avut un tabel intitulat plecati in care numaram pe zile cate persoane erau plecate
 	// din fiecare departament si acum terbuie sa sterg de aici mai intai datorita cheii straine
 	String sql2 = &quot;DELETE FROM departament WHERE nume_dep = ?&quot;;
     int rezultat = 0;
	    Connection conexiune = null;
	    PreparedStatement interogare = null;

	    try {
	    	// creare conexiune propriu-zis
	        conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	        conexiune.setAutoCommit(false); // dezactivare autocomit caci nu ma va lasa baza de date sa fac prea multe stergeri
	        interogare = conexiune.prepareStatement(sql1); // pregatire interogare
	        interogare.setInt(1, id);
	        // aceiasi pasi se fac si mai jos
	        interogare = conexiune.prepareStatement(sql2);
	        interogare.setString(1, username);
	        rezultat = interogare.executeUpdate();
	        // se face commit daca e ok ce se intampla
	        conexiune.commit(); 
	    } catch (SQLException e) {
	        if (conexiune != null) {
	            try {
	                conexiune.rollback(); // in caz de eroare, un fel de undo
	            } catch (SQLException ex) {
	                printSQLException(ex);
	            }
	        }
	        printSQLException(e);
	        throw e;
	    } finally {
	    	// indiferent daca e eroare sau nu, se inchide conexiunea
	        if (interogare != null) {
	            try {
	                interogare.close();
	            } catch (SQLException e) {
	                printSQLException(e);
	            }
	        }
	        if (conexiune != null) {
	            try {
	                conexiune.setAutoCommit(true);
	                conexiune.close();
	            } catch (SQLException e) {
	                printSQLException(e);
	            }
	        }
	    }
	    return rezultat;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIL0gEVdEfCS7cth2SLu0w" name="printSQLException" specification="_UCmJ4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIL0gUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {
         if (e instanceof SQLException) {
             e.printStackTrace(System.err);
             System.err.println(&quot;Stare: &quot; + ((SQLException) e).getSQLState());
             System.err.println(&quot;Cod eroare: &quot; + ((SQLException) e).getErrorCode());
             System.err.println(&quot;Explicatie: &quot; + e.getMessage());
             Throwable t = ex.getCause();
             while (t != null) {
                 System.out.println(&quot;Cauza: &quot; + t);
                 t = t.getCause();
             }
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S43hsEVdEfCS7cth2SLu0w" name="stergere" method="_UILNeUVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S43hsUVdEfCS7cth2SLu0w" name="username">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S43hskVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S44IwEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCmJ4EVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" isStatic="true" method="_UIL0gEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCmJ4UVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S45W4EVdEfCS7cth2SLu0w" name="UserDao">
        <ownedAttribute xmi:id="_UGB4YEVdEfCS7cth2SLu0w" name="dataSource" visibility="private" type="_T-MLAEVdEfCS7cth2SLu0w" association="_UKED0EVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIL0gkVdEfCS7cth2SLu0w" name="UserDao" specification="_UCmw8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIL0g0VdEfCS7cth2SLu0w" name="dataSource" type="_T-MLAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIL0hEVdEfCS7cth2SLu0w" type="_S45W4EVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>this.dataSource = dataSource;
	    </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIL0hUVdEfCS7cth2SLu0w" name="list" specification="_S48aMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIL0hkVdEfCS7cth2SLu0w" type="_T-MyEUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UIL0h0VdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;UserView> products = new ArrayList&lt;UserView>();

	        try (
	            Connection connection = dataSource.getConnection();
	            PreparedStatement statement = connection.prepareStatement(&quot;select username, denumire as tip, nume_dep as departament from useri natural join departament natural join tipuri&quot;);
	            ResultSet resultSet = statement.executeQuery();
	        ) {
	            while (resultSet.next()) {
	                UserView product = new UserView();
	                product.setUsername(resultSet.getString(&quot;username&quot;));
	                product.setDepartament(resultSet.getString(&quot;departament&quot;));
	                product.setTip(resultSet.getString(&quot;tip&quot;));
	                products.add(product);
	            }
	        }
	        return products;
	    </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIMbkEVdEfCS7cth2SLu0w" name="getTipuri" specification="_S49oUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIMbkUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UIMbkkVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;String> tipuri = new ArrayList&lt;>();
	        try (Connection connection = dataSource.getConnection();
	             PreparedStatement pstmt = connection.prepareStatement(&quot;SELECT denumire FROM tipuri&quot;)) {
	            ResultSet rs = pstmt.executeQuery();
	            while (rs.next()) {
	                tipuri.add(rs.getString(&quot;denumire&quot;));
	            }
	        }
	        return tipuri;
	    </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIMbk0VdEfCS7cth2SLu0w" name="getDepartamente" specification="_S4-2cEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIMblEVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UIMblUVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;String> departamente = new ArrayList&lt;>();
	        try (Connection connection = dataSource.getConnection();
	             PreparedStatement pstmt = connection.prepareStatement(&quot;SELECT nume_dep FROM departament&quot;)) {
	            ResultSet rs = pstmt.executeQuery();
	            while (rs.next()) {
	                departamente.add(rs.getString(&quot;nume_dep&quot;));
	            }
	        }
	        return departamente;
	    </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S48aMEVdEfCS7cth2SLu0w" name="list" method="_UIL0hUVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S48aMUVdEfCS7cth2SLu0w" type="_T-MyEUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S48aMkVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S49oUEVdEfCS7cth2SLu0w" name="getTipuri" method="_UIMbkEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S49oUUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S49oUkVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S4-2cEVdEfCS7cth2SLu0w" name="getDepartamente" method="_UIMbk0VdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S4-2cUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S4-2ckVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UCmw8EVdEfCS7cth2SLu0w" name="UserDao" method="_UIL0gkVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_UCmw8kVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_UCmw80VdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_UCmw8UVdEfCS7cth2SLu0w" name="dataSource" type="_T-MLAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UCmw9EVdEfCS7cth2SLu0w" type="_S45W4EVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S67-QEVdEfCS7cth2SLu0w" name="ResAdevSefDAO">
        <ownedComment xmi:id="_UJSnwEVdEfCS7cth2SLu0w">
          <body>Clasa DAO pentru gestionarea aprobării adeverințelor de către șef</body>
        </ownedComment>
        <ownedAttribute xmi:id="_UGVaYUVdEfCS7cth2SLu0w" name="dataSource" visibility="private" type="_T-MLAEVdEfCS7cth2SLu0w" association="_UKJjYUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGWBcUVdEfCS7cth2SLu0w" name="connection" visibility="private" type="_T9fncEVdEfCS7cth2SLu0w" association="_UKKKcUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGWogEVdEfCS7cth2SLu0w" name="statement" visibility="private" type="_T90-oEVdEfCS7cth2SLu0w" association="_UKKxgUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGWogkVdEfCS7cth2SLu0w" name="preparedStatement" visibility="private" type="_T9lHAUVdEfCS7cth2SLu0w" association="_UKLYkUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGXPkUVdEfCS7cth2SLu0w" name="resultSet" visibility="private" type="_T9wtMEVdEfCS7cth2SLu0w" association="_UKL_oUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIU-c0VdEfCS7cth2SLu0w" name="ResAdevSefDAO" specification="_S69zcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIU-dEVdEfCS7cth2SLu0w" type="_S67-QEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>// Inițializează sursa de date&#xD;
    super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIVlgEVdEfCS7cth2SLu0w" name="getAdeverintePendingApproval" specification="_S6-agUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIVlgUVdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UIVlgkVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;Adeverinta> adeverinte = new ArrayList&lt;>();&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea&#xD;
         connection = dataSource.getConnection();&#xD;
         &#xD;
         // Query pentru a obține adeverințele cu status 0 (neaprobate)&#xD;
         String sql = &quot;SELECT a.id, a.tip, a.motiv, a.status, a.creare, a.modif, &quot; +&#xD;
                      &quot;u.nume, u.prenume, u.id as id_ang, u.id_dep, t.denumire as tip_denumire &quot; +&#xD;
                      &quot;FROM adeverinte a &quot; +&#xD;
                      &quot;JOIN useri u ON a.id_ang = u.id &quot; +&#xD;
                      &quot;JOIN tip_adev t ON a.tip = t.id &quot; +&#xD;
                      &quot;WHERE a.status = 0 ORDER BY a.creare DESC&quot;;&#xD;
         &#xD;
         statement = connection.createStatement();&#xD;
         resultSet = statement.executeQuery(sql);&#xD;
         &#xD;
         // Procesare rezultate&#xD;
         while (resultSet.next()) {&#xD;
             Adeverinta adeverinta = new Adeverinta();&#xD;
             adeverinta.setId(resultSet.getInt(&quot;id&quot;));&#xD;
             adeverinta.setTip(resultSet.getInt(&quot;tip&quot;));&#xD;
             adeverinta.setMotiv(resultSet.getString(&quot;motiv&quot;));&#xD;
             adeverinta.setStatus(resultSet.getInt(&quot;status&quot;));&#xD;
             adeverinta.setCreare(resultSet.getDate(&quot;creare&quot;));&#xD;
             adeverinta.setModif(resultSet.getDate(&quot;modif&quot;));&#xD;
             adeverinta.setIdAngajat(resultSet.getInt(&quot;id_ang&quot;));&#xD;
            &#xD;
             adeverinta.setIdAngajat(resultSet.getInt(&quot;id_ang&quot;));&#xD;
           &#xD;
            &#xD;
             &#xD;
             adeverinte.add(adeverinta);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return adeverinte;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIVlg0VdEfCS7cth2SLu0w" name="getAdeverintePendingApprovalByDepartment" specification="_S6_BkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIVlhEVdEfCS7cth2SLu0w" name="idDepartament">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIVlhUVdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UIVlhkVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;Adeverinta> adeverinte = new ArrayList&lt;>();&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea&#xD;
         connection = dataSource.getConnection();&#xD;
         &#xD;
         // Query pentru a obține adeverințele cu status 0 (neaprobate) dintr-un anumit departament&#xD;
         String sql = &quot;SELECT a.id, a.tip, a.motiv, a.status, a.creare, a.modif, &quot; +&#xD;
                      &quot;u.nume, u.prenume, u.id as id_ang, u.id_dep, t.denumire as tip_denumire &quot; +&#xD;
                      &quot;FROM adeverinte a &quot; +&#xD;
                      &quot;JOIN useri u ON a.id_ang = u.id &quot; +&#xD;
                      &quot;JOIN tip_adev t ON a.tip = t.id &quot; +&#xD;
                      &quot;WHERE a.status = 0 AND u.id_dep = ? ORDER BY a.creare DESC&quot;;&#xD;
         &#xD;
         preparedStatement = connection.prepareStatement(sql);&#xD;
         preparedStatement.setInt(1, idDepartament);&#xD;
         resultSet = preparedStatement.executeQuery();&#xD;
         &#xD;
         // Procesare rezultate&#xD;
         while (resultSet.next()) {&#xD;
             Adeverinta adeverinta = new Adeverinta();&#xD;
             adeverinta.setId(resultSet.getInt(&quot;id&quot;));&#xD;
             adeverinta.setTip(resultSet.getInt(&quot;tip&quot;));&#xD;
             adeverinta.setMotiv(resultSet.getString(&quot;motiv&quot;));&#xD;
             adeverinta.setStatus(resultSet.getInt(&quot;status&quot;));&#xD;
             adeverinta.setCreare(resultSet.getDate(&quot;creare&quot;));&#xD;
             adeverinta.setModif(resultSet.getDate(&quot;modif&quot;));&#xD;
             adeverinta.setIdAngajat(resultSet.getInt(&quot;id_ang&quot;));&#xD;
             &#xD;
             adeverinta.setIdAngajat(resultSet.getInt(&quot;id_ang&quot;));&#xD;
            &#xD;
             &#xD;
             adeverinte.add(adeverinta);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return adeverinte;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIVlh0VdEfCS7cth2SLu0w" name="approveAdeverinta" specification="_S7APsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIVliEVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIVliUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>boolean success = false;&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea&#xD;
         connection = dataSource.getConnection();&#xD;
         &#xD;
         // Query pentru a actualiza statusul adeverinței&#xD;
         String sql = &quot;UPDATE adeverinte SET status = 1, modif = CURDATE() WHERE id = ?&quot;;&#xD;
         &#xD;
         preparedStatement = connection.prepareStatement(sql);&#xD;
         preparedStatement.setInt(1, idAdeverinta);&#xD;
         &#xD;
         // Execută update-ul&#xD;
         int rowsAffected = preparedStatement.executeUpdate();&#xD;
         &#xD;
         // Verifică dacă update-ul a avut succes&#xD;
         if (rowsAffected > 0) {&#xD;
             success = true;&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return success;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIWMkEVdEfCS7cth2SLu0w" name="rejectAdeverinta" specification="_S7A2wEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIWMkUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIWMkkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>boolean success = false;&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea&#xD;
         connection = dataSource.getConnection();&#xD;
         &#xD;
         // Query pentru a actualiza statusul adeverinței&#xD;
         String sql = &quot;UPDATE adeverinte SET status = -1, modif = CURDATE() WHERE id = ?&quot;;&#xD;
         &#xD;
         preparedStatement = connection.prepareStatement(sql);&#xD;
         preparedStatement.setInt(1, idAdeverinta);&#xD;
         &#xD;
         // Execută update-ul&#xD;
         int rowsAffected = preparedStatement.executeUpdate();&#xD;
         &#xD;
         // Verifică dacă update-ul a avut succes&#xD;
         if (rowsAffected > 0) {&#xD;
             success = true;&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return success;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIWMk0VdEfCS7cth2SLu0w" name="getAdeverintaById" specification="_S7CE4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIWMlEVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIWMlUVdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Adeverinta adeverinta = null;&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea&#xD;
         connection = dataSource.getConnection();&#xD;
         &#xD;
         // Query pentru a obține detaliile adeverinței&#xD;
         String sql = &quot;SELECT a.id, a.tip, a.motiv, a.status, a.creare, a.modif, &quot; +&#xD;
                      &quot;u.nume, u.prenume, u.id as id_ang, u.id_dep, t.denumire as tip_denumire &quot; +&#xD;
                      &quot;FROM adeverinte a &quot; +&#xD;
                      &quot;JOIN useri u ON a.id_ang = u.id &quot; +&#xD;
                      &quot;JOIN tip_adev t ON a.tip = t.id &quot; +&#xD;
                      &quot;WHERE a.id = ?&quot;;&#xD;
         &#xD;
         preparedStatement = connection.prepareStatement(sql);&#xD;
         preparedStatement.setInt(1, idAdeverinta);&#xD;
         resultSet = preparedStatement.executeQuery();&#xD;
         &#xD;
         // Procesare rezultat&#xD;
         if (resultSet.next()) {&#xD;
             adeverinta = new Adeverinta();&#xD;
             adeverinta.setId(resultSet.getInt(&quot;id&quot;));&#xD;
             adeverinta.setTip(resultSet.getInt(&quot;tip&quot;));&#xD;
             adeverinta.setMotiv(resultSet.getString(&quot;motiv&quot;));&#xD;
             adeverinta.setStatus(resultSet.getInt(&quot;status&quot;));&#xD;
             adeverinta.setCreare(resultSet.getDate(&quot;creare&quot;));&#xD;
             adeverinta.setModif(resultSet.getDate(&quot;modif&quot;));&#xD;
             adeverinta.setIdAngajat(resultSet.getInt(&quot;id_ang&quot;));&#xD;
            &#xD;
             adeverinta.setIdAngajat(resultSet.getInt(&quot;id_ang&quot;));&#xD;
             &#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return adeverinta;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIWMlkVdEfCS7cth2SLu0w" name="close" specification="_S7Cr8EVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>try {&#xD;
         if (resultSet != null) {&#xD;
             resultSet.close();&#xD;
         }&#xD;
         &#xD;
         if (statement != null) {&#xD;
             statement.close();&#xD;
         }&#xD;
         &#xD;
         if (preparedStatement != null) {&#xD;
             preparedStatement.close();&#xD;
         }&#xD;
         &#xD;
         if (connection != null) {&#xD;
             connection.close();&#xD;
         }&#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S69zcEVdEfCS7cth2SLu0w" name="ResAdevSefDAO" method="_UIU-c0VdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S69zcUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S69zckVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedComment xmi:id="_UJSnwUVdEfCS7cth2SLu0w">
            <body>Constructor care inițializează conexiunea la baza de date</body>
          </ownedComment>
          <ownedParameter xmi:id="_S6-agEVdEfCS7cth2SLu0w" type="_S67-QEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S6-agUVdEfCS7cth2SLu0w" name="getAdeverintePendingApproval" method="_UIVlgEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJSnwkVdEfCS7cth2SLu0w">
            <body>Obține toate adeverințele care așteaptă aprobarea șefului&#xD;
     * &#xD;
     * @return Lista de adeverințe care așteaptă aprobarea</body>
          </ownedComment>
          <ownedParameter xmi:id="_S6-agkVdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S6-ag0VdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S6_BkEVdEfCS7cth2SLu0w" name="getAdeverintePendingApprovalByDepartment" method="_UIVlg0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJSnw0VdEfCS7cth2SLu0w">
            <body>Obține toate adeverințele pentru un anumit departament care așteaptă aprobarea șefului&#xD;
     * &#xD;
     * @param idDepartament ID-ul departamentului&#xD;
     * @return Lista de adeverințe care așteaptă aprobarea</body>
          </ownedComment>
          <ownedParameter xmi:id="_S6_ooEVdEfCS7cth2SLu0w" name="idDepartament">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S6_ooUVdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S6_ookVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S7APsEVdEfCS7cth2SLu0w" name="approveAdeverinta" method="_UIVlh0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJSnxEVdEfCS7cth2SLu0w">
            <body>Aprobă o adeverință (actualizează statusul la 1 - Aprobat de șef)&#xD;
     * &#xD;
     * @param idAdeverinta ID-ul adeverinței care trebuie aprobată&#xD;
     * @return true dacă operația a avut succes, false în caz contrar</body>
          </ownedComment>
          <ownedParameter xmi:id="_S7APsUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S7APskVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S7A2wEVdEfCS7cth2SLu0w" name="rejectAdeverinta" method="_UIWMkEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJSnxUVdEfCS7cth2SLu0w">
            <body>Respinge o adeverință (actualizează statusul la -1 - Respins de șef)&#xD;
     * &#xD;
     * @param idAdeverinta ID-ul adeverinței care trebuie respinsă&#xD;
     * @return true dacă operația a avut succes, false în caz contrar</body>
          </ownedComment>
          <ownedParameter xmi:id="_S7A2wUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S7Bd0EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S7CE4EVdEfCS7cth2SLu0w" name="getAdeverintaById" method="_UIWMk0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJSnxkVdEfCS7cth2SLu0w">
            <body>Obține detaliile unei adeverințe specifice&#xD;
     * &#xD;
     * @param idAdeverinta ID-ul adeverinței&#xD;
     * @return Obiectul Adeverinta sau null dacă nu a fost găsit</body>
          </ownedComment>
          <ownedParameter xmi:id="_S7CE4UVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UDVJsEVdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S7Cr8EVdEfCS7cth2SLu0w" name="close" visibility="private" method="_UIWMlkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJSnx0VdEfCS7cth2SLu0w">
            <body>Metoda pentru închiderea resurselor</body>
          </ownedComment>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S7Mc8EVdEfCS7cth2SLu0w" name="ModificaAdeverintaDAO">
        <ownedComment xmi:id="_UJSnyEVdEfCS7cth2SLu0w">
          <body>Clasa DAO pentru modificarea adeverințelor</body>
        </ownedComment>
        <ownedAttribute xmi:id="_UGZr0EVdEfCS7cth2SLu0w" name="connection" visibility="private" type="_T9fncEVdEfCS7cth2SLu0w" isReadOnly="true" association="_UKMmsUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGbhAEVdEfCS7cth2SLu0w" name="statement" visibility="private" type="_T90-oEVdEfCS7cth2SLu0w" association="_UKNNwUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGcIEEVdEfCS7cth2SLu0w" name="preparedStatement" visibility="private" type="_T9lHAUVdEfCS7cth2SLu0w" association="_UKN00UVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGcIEkVdEfCS7cth2SLu0w" name="resultSet" visibility="private" type="_T9wtMEVdEfCS7cth2SLu0w" association="_UKOb4UVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGcvIUVdEfCS7cth2SLu0w" name="URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGcvIkVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGcvI0VdEfCS7cth2SLu0w" name="USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGdWMEVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGdWMUVdEfCS7cth2SLu0w" name="PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGdWMkVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGdWM0VdEfCS7cth2SLu0w" name="DRIVER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGdWNEVdEfCS7cth2SLu0w" value="&quot;com.mysql.cj.jdbc.Driver&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIXasEVdEfCS7cth2SLu0w" name="ModificaAdeverintaDAO" specification="_S7OSIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIXasUVdEfCS7cth2SLu0w" type="_S7Mc8EVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>try {&#xD;
         Class.forName(DRIVER);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIXaskVdEfCS7cth2SLu0w" name="getAdeverintaById" specification="_S7PgQEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIXas0VdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIXatEVdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Adeverinta adeverinta = null;&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea direct prin DriverManager&#xD;
         connection = getConnection();&#xD;
         &#xD;
         // Query pentru a obține detaliile adeverinței&#xD;
         String sql = &quot;SELECT a.id, a.tip, a.motiv, a.pentru_servi, a.status, a.creare, a.modif, &quot; +&#xD;
                      &quot;u.nume, u.prenume, u.id as id_ang, u.id_dep, t.denumire as tip_denumire &quot; +&#xD;
                      &quot;FROM adeverinte a &quot; +&#xD;
                      &quot;JOIN useri u ON a.id_ang = u.id &quot; +&#xD;
                      &quot;JOIN tip_adev t ON a.tip = t.id &quot; +&#xD;
                      &quot;WHERE a.id = ?&quot;;&#xD;
         &#xD;
         preparedStatement = connection.prepareStatement(sql);&#xD;
         preparedStatement.setInt(1, idAdeverinta);&#xD;
         resultSet = preparedStatement.executeQuery();&#xD;
         &#xD;
         // Procesare rezultat&#xD;
         if (resultSet.next()) {&#xD;
             adeverinta = new Adeverinta();&#xD;
             adeverinta.setId(resultSet.getInt(&quot;id&quot;));&#xD;
             adeverinta.setTip(resultSet.getInt(&quot;tip&quot;));&#xD;
             &#xD;
             // Verifică ambele câmpuri și utilizează valoarea non-null&#xD;
             String motiv = resultSet.getString(&quot;pentru_servi&quot;);&#xD;
             if (motiv == null || motiv.trim().isEmpty()) {&#xD;
                 motiv = resultSet.getString(&quot;motiv&quot;);&#xD;
             }&#xD;
             adeverinta.setMotiv(motiv);&#xD;
             adeverinta.setMentiuni(motiv); // Folosește aceeași valoare și pentru mențiuni&#xD;
             &#xD;
             adeverinta.setStatus(resultSet.getInt(&quot;status&quot;));&#xD;
             adeverinta.setCreare(resultSet.getDate(&quot;creare&quot;));&#xD;
             adeverinta.setModif(resultSet.getDate(&quot;modif&quot;));&#xD;
             adeverinta.setIdAngajat(resultSet.getInt(&quot;id_ang&quot;));&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return adeverinta;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIYBwEVdEfCS7cth2SLu0w" name="updateAdeverinta" specification="_UDYNAUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIYBwUVdEfCS7cth2SLu0w" name="adeverinta" type="_T92MwEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIYBwkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>boolean success = false;&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea direct prin DriverManager&#xD;
         connection = getConnection();&#xD;
         &#xD;
         // Query pentru a actualiza adeverința - actualizează ambele câmpuri&#xD;
         String sql = &quot;UPDATE adeverinte SET tip = ?, motiv = ?, pentru_servi = ?, modif = CURDATE() WHERE id = ?&quot;;&#xD;
         &#xD;
         preparedStatement = connection.prepareStatement(sql);&#xD;
         preparedStatement.setInt(1, adeverinta.getTip());&#xD;
         &#xD;
         // Folosește fie motiv, fie mențiuni, în funcție de care nu este null&#xD;
         String textMotiv = adeverinta.getMotiv();&#xD;
         if (textMotiv == null || textMotiv.trim().isEmpty()) {&#xD;
             textMotiv = adeverinta.getMentiuni();&#xD;
         }&#xD;
         &#xD;
         preparedStatement.setString(2, textMotiv); // Actualizează câmpul motiv&#xD;
         preparedStatement.setString(3, textMotiv); // Actualizează câmpul pentru_servi&#xD;
         preparedStatement.setInt(4, adeverinta.getId());&#xD;
         &#xD;
         // Execută update-ul&#xD;
         int rowsAffected = preparedStatement.executeUpdate();&#xD;
         &#xD;
         // Verifică dacă update-ul a avut succes&#xD;
         if (rowsAffected > 0) {&#xD;
             success = true;&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return success;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIYBw0VdEfCS7cth2SLu0w" name="canModifyAdeverinta" specification="_S7QuYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIYBxEVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIYBxUVdEfCS7cth2SLu0w" name="idUser">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIYBxkVdEfCS7cth2SLu0w" name="tipUser">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIYBx0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>boolean canModify = false;&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea direct prin DriverManager&#xD;
         connection = getConnection();&#xD;
         &#xD;
         // Verifică adeverința și permisiunile utilizatorului&#xD;
         String sql = &quot;SELECT a.status, a.id_ang, u.id_dep FROM adeverinte a &quot; +&#xD;
                     &quot;JOIN useri u ON a.id_ang = u.id WHERE a.id = ?&quot;;&#xD;
         &#xD;
         preparedStatement = connection.prepareStatement(sql);&#xD;
         preparedStatement.setInt(1, idAdeverinta);&#xD;
         resultSet = preparedStatement.executeQuery();&#xD;
         &#xD;
         if (resultSet.next()) {&#xD;
             int status = resultSet.getInt(&quot;status&quot;);&#xD;
             int idAngajat = resultSet.getInt(&quot;id_ang&quot;);&#xD;
             int idDepartament = resultSet.getInt(&quot;id_dep&quot;);&#xD;
             &#xD;
             // Verifică permisiunile în funcție de tipul utilizatorului&#xD;
             if (idAngajat == idUser &amp;&amp; status == 0) {&#xD;
                 // Utilizatorul poate modifica propriile adeverințe neaprobate&#xD;
                 canModify = true;&#xD;
             } else if ((tipUser == 3 || (tipUser >= 10 &amp;&amp; tipUser &lt;= 15)) &amp;&amp; status &lt;= 1) {&#xD;
                 // Șefii pot modifica adeverințele din departamentul lor&#xD;
                 // Verifică dacă utilizatorul este șef pentru departamentul angajatului&#xD;
                 String sqlDep = &quot;SELECT 1 FROM useri WHERE id = ? AND id_dep = ?&quot;;&#xD;
                 PreparedStatement stmtDep = connection.prepareStatement(sqlDep);&#xD;
                 stmtDep.setInt(1, idUser);&#xD;
                 stmtDep.setInt(2, idDepartament);&#xD;
                 ResultSet rsDep = stmtDep.executeQuery();&#xD;
                 if (rsDep.next()) {&#xD;
                     canModify = true;&#xD;
                 }&#xD;
                 rsDep.close();&#xD;
                 stmtDep.close();&#xD;
             } else if (tipUser == 0 || tipUser == 4 || tipUser > 15) {&#xD;
                 // Directorii și administratorii pot modifica orice adeverință&#xD;
                 canModify = true;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return canModify;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIYByEVdEfCS7cth2SLu0w" name="close" specification="_S7R8gUVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>try {&#xD;
         if (resultSet != null) {&#xD;
             resultSet.close();&#xD;
         }&#xD;
         &#xD;
         if (statement != null) {&#xD;
             statement.close();&#xD;
         }&#xD;
         &#xD;
         if (preparedStatement != null) {&#xD;
             preparedStatement.close();&#xD;
         }&#xD;
         &#xD;
         if (connection != null) {&#xD;
             connection.close();&#xD;
         }&#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S7OSIEVdEfCS7cth2SLu0w" name="ModificaAdeverintaDAO" method="_UIXasEVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S7O5MEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S7O5MUVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedComment xmi:id="_UJTO0EVdEfCS7cth2SLu0w">
            <body>Constructor care încarcă driver-ul JDBC</body>
          </ownedComment>
          <ownedParameter xmi:id="_S7O5MkVdEfCS7cth2SLu0w" type="_S7Mc8EVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S7PgQEVdEfCS7cth2SLu0w" name="getAdeverintaById" method="_UIXaskVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJTO0UVdEfCS7cth2SLu0w">
            <body>Obține o adeverință din baza de date&#xD;
     * &#xD;
     * @param idAdeverinta ID-ul adeverinței&#xD;
     * @return Obiectul Adeverinta sau null dacă nu a fost găsit</body>
          </ownedComment>
          <ownedParameter xmi:id="_S7PgQUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UDYNAEVdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S7QuYEVdEfCS7cth2SLu0w" name="canModifyAdeverinta" method="_UIYBw0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJTO00VdEfCS7cth2SLu0w">
            <body>Verifică dacă o adeverință poate fi modificată (statusul trebuie să fie 0 pentru utilizatori normali)&#xD;
     * &#xD;
     * @param idAdeverinta ID-ul adeverinței&#xD;
     * @param idUser ID-ul utilizatorului&#xD;
     * @param tipUser Tipul utilizatorului&#xD;
     * @return true dacă adeverința poate fi modificată, false în caz contrar</body>
          </ownedComment>
          <ownedParameter xmi:id="_S7RVcEVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S7RVcUVdEfCS7cth2SLu0w" name="idUser">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S7RVckVdEfCS7cth2SLu0w" name="tipUser">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S7R8gEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S7R8gUVdEfCS7cth2SLu0w" name="close" visibility="private" method="_UIYByEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJTO1EVdEfCS7cth2SLu0w">
            <body>Metoda pentru închiderea resurselor</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:id="_UDYNAUVdEfCS7cth2SLu0w" name="updateAdeverinta" method="_UIYBwEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJTO0kVdEfCS7cth2SLu0w">
            <body>Modifică o adeverință&#xD;
     * &#xD;
     * @param adeverinta Adeverința cu datele actualizate&#xD;
     * @return true dacă operația a avut succes, false în caz contrar</body>
          </ownedComment>
          <ownedParameter xmi:id="_UDYNAkVdEfCS7cth2SLu0w" name="adeverinta" type="_T92MwEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDYNA0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S-GnAEVdEfCS7cth2SLu0w" name="ResAdevDirDAO">
        <ownedComment xmi:id="_UJXgRkVdEfCS7cth2SLu0w">
          <body>Clasa DAO pentru gestionarea aprobării adeverințelor de către director</body>
        </ownedComment>
        <ownedAttribute xmi:id="_UG1wskVdEfCS7cth2SLu0w" name="dataSource" visibility="private" type="_T-MLAEVdEfCS7cth2SLu0w" association="_UKVwoEVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UG2XwUVdEfCS7cth2SLu0w" name="connection" visibility="private" type="_T9fncEVdEfCS7cth2SLu0w" association="_UKWXsUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UG2-0EVdEfCS7cth2SLu0w" name="statement" visibility="private" type="_T90-oEVdEfCS7cth2SLu0w" association="_UKW-wUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UG2-0kVdEfCS7cth2SLu0w" name="preparedStatement" visibility="private" type="_T9lHAUVdEfCS7cth2SLu0w" association="_UKW-xEVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UG3l4UVdEfCS7cth2SLu0w" name="resultSet" visibility="private" type="_T9wtMEVdEfCS7cth2SLu0w" association="_UKXl0UVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIunEEVdEfCS7cth2SLu0w" name="ResAdevDirDAO" specification="_S-H1IEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIunEUVdEfCS7cth2SLu0w" type="_S-GnAEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>// Inițializează sursa de date&#xD;
   super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIunEkVdEfCS7cth2SLu0w" name="getAdeverinteApprovedBySef" specification="_S-IcMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIunE0VdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UIunFEVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;Adeverinta> adeverinte = new ArrayList&lt;>();&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea&#xD;
         connection = dataSource.getConnection();&#xD;
         &#xD;
         // Query pentru a obține adeverințele cu status 1 (aprobate de șef)&#xD;
         String sql = &quot;SELECT a.id, a.tip, a.motiv, a.status, a.creare, a.modif, &quot; +&#xD;
                      &quot;u.nume, u.prenume, u.id as id_ang, u.id_dep, t.denumire as tip_denumire, &quot; +&#xD;
                      &quot;d.nume_dep as departament &quot; +&#xD;
                      &quot;FROM adeverinte a &quot; +&#xD;
                      &quot;JOIN useri u ON a.id_ang = u.id &quot; +&#xD;
                      &quot;JOIN tip_adev t ON a.tip = t.id &quot; +&#xD;
                      &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                      &quot;WHERE a.status = 1 ORDER BY a.modif DESC&quot;;&#xD;
         &#xD;
         statement = connection.createStatement();&#xD;
         resultSet = statement.executeQuery(sql);&#xD;
         &#xD;
         // Procesare rezultate&#xD;
         while (resultSet.next()) {&#xD;
             Adeverinta adeverinta = new Adeverinta();&#xD;
             adeverinta.setId(resultSet.getInt(&quot;id&quot;));&#xD;
             adeverinta.setTip(resultSet.getInt(&quot;tip&quot;));&#xD;
             adeverinta.setMotiv(resultSet.getString(&quot;motiv&quot;));&#xD;
             adeverinta.setStatus(resultSet.getInt(&quot;status&quot;));&#xD;
             adeverinta.setCreare(resultSet.getDate(&quot;creare&quot;));&#xD;
             adeverinta.setModif(resultSet.getDate(&quot;modif&quot;));&#xD;
   &#xD;
             adeverinta.setIdAngajat(resultSet.getInt(&quot;id_ang&quot;));&#xD;
&#xD;
             adeverinte.add(adeverinta);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return adeverinte;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIunFUVdEfCS7cth2SLu0w" name="getAllAdeverinte" specification="_S-JDQEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIunFkVdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UIunF0VdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;Adeverinta> adeverinte = new ArrayList&lt;>();&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea&#xD;
         connection = dataSource.getConnection();&#xD;
         &#xD;
         // Query pentru a obține toate adeverințele&#xD;
         String sql = &quot;SELECT a.id, a.tip, a.motiv, a.status, a.creare, a.modif, &quot; +&#xD;
                      &quot;u.nume, u.prenume, u.id as id_ang, u.id_dep, t.denumire as tip_denumire, &quot; +&#xD;
                      &quot;d.nume_dep as departament, s.nume_status &quot; +&#xD;
                      &quot;FROM adeverinte a &quot; +&#xD;
                      &quot;JOIN useri u ON a.id_ang = u.id &quot; +&#xD;
                      &quot;JOIN tip_adev t ON a.tip = t.id &quot; +&#xD;
                      &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                      &quot;JOIN statusuri s ON a.status = s.status &quot; +&#xD;
                      &quot;ORDER BY a.modif DESC&quot;;&#xD;
         &#xD;
         statement = connection.createStatement();&#xD;
         resultSet = statement.executeQuery(sql);&#xD;
         &#xD;
         // Procesare rezultate&#xD;
         while (resultSet.next()) {&#xD;
             Adeverinta adeverinta = new Adeverinta();&#xD;
             adeverinta.setId(resultSet.getInt(&quot;id&quot;));&#xD;
             adeverinta.setTip(resultSet.getInt(&quot;tip&quot;));&#xD;
             adeverinta.setMotiv(resultSet.getString(&quot;motiv&quot;));&#xD;
             adeverinta.setStatus(resultSet.getInt(&quot;status&quot;));&#xD;
             adeverinta.setCreare(resultSet.getDate(&quot;creare&quot;));&#xD;
             adeverinta.setModif(resultSet.getDate(&quot;modif&quot;));&#xD;
             &#xD;
             adeverinta.setIdAngajat(resultSet.getInt(&quot;id_ang&quot;));&#xD;
            &#xD;
             &#xD;
             adeverinte.add(adeverinta);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return adeverinte;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIunGEVdEfCS7cth2SLu0w" name="approveAdeverinta" specification="_S-JqUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIunGUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIunGkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>boolean success = false;&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea&#xD;
         connection = dataSource.getConnection();&#xD;
         &#xD;
         // Query pentru a actualiza statusul adeverinței&#xD;
         String sql = &quot;UPDATE adeverinte SET status = 2, modif = CURDATE() WHERE id = ?&quot;;&#xD;
         &#xD;
         preparedStatement = connection.prepareStatement(sql);&#xD;
         preparedStatement.setInt(1, idAdeverinta);&#xD;
         &#xD;
         // Execută update-ul&#xD;
         int rowsAffected = preparedStatement.executeUpdate();&#xD;
         &#xD;
         // Verifică dacă update-ul a avut succes&#xD;
         if (rowsAffected > 0) {&#xD;
             success = true;&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return success;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIvOIEVdEfCS7cth2SLu0w" name="rejectAdeverinta" specification="_S-KRYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIvOIUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIvOIkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>boolean success = false;&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea&#xD;
         connection = dataSource.getConnection();&#xD;
         &#xD;
         // Query pentru a actualiza statusul adeverinței&#xD;
         String sql = &quot;UPDATE adeverinte SET status = -2, modif = CURDATE() WHERE id = ?&quot;;&#xD;
         &#xD;
         preparedStatement = connection.prepareStatement(sql);&#xD;
         preparedStatement.setInt(1, idAdeverinta);&#xD;
         &#xD;
         // Execută update-ul&#xD;
         int rowsAffected = preparedStatement.executeUpdate();&#xD;
         &#xD;
         // Verifică dacă update-ul a avut succes&#xD;
         if (rowsAffected > 0) {&#xD;
             success = true;&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return success;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIvOI0VdEfCS7cth2SLu0w" name="getAdeverinteStats" specification="_S-KRY0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIvOJEVdEfCS7cth2SLu0w" type="_S-LfgEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>AdeverinteStats stats = new AdeverinteStats();&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea&#xD;
         connection = dataSource.getConnection();&#xD;
         &#xD;
         // Query pentru a număra adeverințele după status&#xD;
         String sql = &quot;SELECT status, COUNT(*) as count FROM adeverinte GROUP BY status&quot;;&#xD;
         &#xD;
         statement = connection.createStatement();&#xD;
         resultSet = statement.executeQuery(sql);&#xD;
         &#xD;
         // Procesare rezultate&#xD;
         while (resultSet.next()) {&#xD;
             int status = resultSet.getInt(&quot;status&quot;);&#xD;
             int count = resultSet.getInt(&quot;count&quot;);&#xD;
             &#xD;
             switch (status) {&#xD;
                 case -2:&#xD;
                     stats.setRespinseDirector(count);&#xD;
                     break;&#xD;
                 case -1:&#xD;
                     stats.setRespinseSef(count);&#xD;
                     break;&#xD;
                 case 0:&#xD;
                     stats.setNeaprobate(count);&#xD;
                     break;&#xD;
                 case 1:&#xD;
                     stats.setAprobateSef(count);&#xD;
                     break;&#xD;
                 case 2:&#xD;
                     stats.setAprobateDirector(count);&#xD;
                     break;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return stats;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIvOJUVdEfCS7cth2SLu0w" name="getAdeverintaById" specification="_S-K4cEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIvOJkVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIvOJ0VdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Adeverinta adeverinta = null;&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea&#xD;
         connection = dataSource.getConnection();&#xD;
         &#xD;
         // Query pentru a obține detaliile adeverinței&#xD;
         String sql = &quot;SELECT a.id, a.tip, a.motiv, a.status, a.creare, a.modif, &quot; +&#xD;
                      &quot;u.nume, u.prenume, u.id as id_ang, u.id_dep, t.denumire as tip_denumire, &quot; +&#xD;
                      &quot;d.nume_dep as departament, s.nume_status &quot; +&#xD;
                      &quot;FROM adeverinte a &quot; +&#xD;
                      &quot;JOIN useri u ON a.id_ang = u.id &quot; +&#xD;
                      &quot;JOIN tip_adev t ON a.tip = t.id &quot; +&#xD;
                      &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                      &quot;JOIN statusuri s ON a.status = s.status &quot; +&#xD;
                      &quot;WHERE a.id = ?&quot;;&#xD;
         &#xD;
         preparedStatement = connection.prepareStatement(sql);&#xD;
         preparedStatement.setInt(1, idAdeverinta);&#xD;
         resultSet = preparedStatement.executeQuery();&#xD;
         &#xD;
         // Procesare rezultat&#xD;
         if (resultSet.next()) {&#xD;
             adeverinta = new Adeverinta();&#xD;
             adeverinta.setId(resultSet.getInt(&quot;id&quot;));&#xD;
             adeverinta.setTip(resultSet.getInt(&quot;tip&quot;));&#xD;
             adeverinta.setMotiv(resultSet.getString(&quot;motiv&quot;));&#xD;
             adeverinta.setStatus(resultSet.getInt(&quot;status&quot;));&#xD;
             adeverinta.setCreare(resultSet.getDate(&quot;creare&quot;));&#xD;
             adeverinta.setModif(resultSet.getDate(&quot;modif&quot;));&#xD;
            &#xD;
             adeverinta.setIdAngajat(resultSet.getInt(&quot;id_ang&quot;));&#xD;
            &#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return adeverinta;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIv1MEVdEfCS7cth2SLu0w" name="close" specification="_S-N7wEVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>try {&#xD;
         if (resultSet != null) {&#xD;
             resultSet.close();&#xD;
         }&#xD;
         &#xD;
         if (statement != null) {&#xD;
             statement.close();&#xD;
         }&#xD;
         &#xD;
         if (preparedStatement != null) {&#xD;
             preparedStatement.close();&#xD;
         }&#xD;
         &#xD;
         if (connection != null) {&#xD;
             connection.close();&#xD;
         }&#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S-H1IEVdEfCS7cth2SLu0w" name="ResAdevDirDAO" method="_UIunEEVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S-H1IUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S-H1IkVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedComment xmi:id="_UJXgR0VdEfCS7cth2SLu0w">
            <body>Constructor care inițializează conexiunea la baza de date</body>
          </ownedComment>
          <ownedParameter xmi:id="_S-H1I0VdEfCS7cth2SLu0w" type="_S-GnAEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S-IcMEVdEfCS7cth2SLu0w" name="getAdeverinteApprovedBySef" method="_UIunEkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJXgSEVdEfCS7cth2SLu0w">
            <body>Obține toate adeverințele care au fost aprobate de șef și așteaptă aprobarea directorului&#xD;
     * &#xD;
     * @return Lista de adeverințe care așteaptă aprobarea directorului</body>
          </ownedComment>
          <ownedParameter xmi:id="_S-IcMUVdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S-IcMkVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S-JDQEVdEfCS7cth2SLu0w" name="getAllAdeverinte" method="_UIunFUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJXgSUVdEfCS7cth2SLu0w">
            <body>Obține istoricul adeverințelor (toate adeverințele indiferent de status)&#xD;
     * &#xD;
     * @return Lista tuturor adeverințelor</body>
          </ownedComment>
          <ownedParameter xmi:id="_S-JDQUVdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S-JDQkVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S-JqUEVdEfCS7cth2SLu0w" name="approveAdeverinta" method="_UIunGEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJXgSkVdEfCS7cth2SLu0w">
            <body>Aprobă definitiv o adeverință (actualizează statusul la 2 - Aprobat de director)&#xD;
     * &#xD;
     * @param idAdeverinta ID-ul adeverinței care trebuie aprobată&#xD;
     * @return true dacă operația a avut succes, false în caz contrar</body>
          </ownedComment>
          <ownedParameter xmi:id="_S-JqUUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S-JqUkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S-KRYEVdEfCS7cth2SLu0w" name="rejectAdeverinta" method="_UIvOIEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJXgS0VdEfCS7cth2SLu0w">
            <body>Respinge o adeverință (actualizează statusul la -2 - Respins de director)&#xD;
     * &#xD;
     * @param idAdeverinta ID-ul adeverinței care trebuie respinsă&#xD;
     * @return true dacă operația a avut succes, false în caz contrar</body>
          </ownedComment>
          <ownedParameter xmi:id="_S-KRYUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S-KRYkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S-KRY0VdEfCS7cth2SLu0w" name="getAdeverinteStats" method="_UIvOI0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJXgTEVdEfCS7cth2SLu0w">
            <body>Obține statistici pentru adeverințe&#xD;
     * &#xD;
     * @return Un obiect care conține numărul de adeverințe grupate pe status</body>
          </ownedComment>
          <ownedParameter xmi:id="_UAQAgEVdEfCS7cth2SLu0w" type="_S-LfgEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S-K4cEVdEfCS7cth2SLu0w" name="getAdeverintaById" method="_UIvOJUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJXgTUVdEfCS7cth2SLu0w">
            <body>Obține detaliile unei adeverințe specifice&#xD;
     * &#xD;
     * @param idAdeverinta ID-ul adeverinței&#xD;
     * @return Obiectul Adeverinta sau null dacă nu a fost găsit</body>
          </ownedComment>
          <ownedParameter xmi:id="_S-K4cUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UElt8EVdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S-N7wEVdEfCS7cth2SLu0w" name="close" visibility="private" method="_UIv1MEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJXgT0VdEfCS7cth2SLu0w">
            <body>Metoda pentru închiderea resurselor</body>
          </ownedComment>
        </ownedOperation>
        <nestedClassifier xmi:type="uml:Class" xmi:id="_S-LfgEVdEfCS7cth2SLu0w" name="AdeverinteStats">
          <ownedComment xmi:id="_UJXgTkVdEfCS7cth2SLu0w">
            <body>Clasa pentru statistici despre adeverințe</body>
          </ownedComment>
          <ownedAttribute xmi:id="_UG4M8EVdEfCS7cth2SLu0w" name="neaprobate">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG4M8UVdEfCS7cth2SLu0w" value="0"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_UG4M8kVdEfCS7cth2SLu0w" name="aprobateSef">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG4M80VdEfCS7cth2SLu0w" value="0"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_UG4M9EVdEfCS7cth2SLu0w" name="aprobateDirector">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG4M9UVdEfCS7cth2SLu0w" value="0"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_UG40AEVdEfCS7cth2SLu0w" name="respinseSef">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG40AUVdEfCS7cth2SLu0w" value="0"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_UG40AkVdEfCS7cth2SLu0w" name="respinseDirector">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG40A0VdEfCS7cth2SLu0w" value="0"/>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIvOKEVdEfCS7cth2SLu0w" name="getTotal" specification="_S-MtoEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_UIvOKUVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedParameter>
            <language>java</language>
            <body>return neaprobate + aprobateSef + aprobateDirector + respinseSef + respinseDirector;&#xD;
     </body>
          </ownedBehavior>
          <ownedOperation xmi:id="_S-MtoEVdEfCS7cth2SLu0w" name="getTotal" method="_UIvOKEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_S-MtoUVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedParameter>
          </ownedOperation>
        </nestedClassifier>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S-S0QEVdEfCS7cth2SLu0w" name="StergereAdeverintaDAO">
        <ownedComment xmi:id="_UJXgUEVdEfCS7cth2SLu0w">
          <body>Clasa DAO pentru operațiile de ștergere a adeverințelor</body>
        </ownedComment>
        <ownedAttribute xmi:id="_UG5bEEVdEfCS7cth2SLu0w" name="connection" visibility="private" type="_T9fncEVdEfCS7cth2SLu0w" isReadOnly="true" association="_UKYM4UVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UG6pMUVdEfCS7cth2SLu0w" name="statement" visibility="private" type="_T90-oEVdEfCS7cth2SLu0w" association="_UKZbAEVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UG7QQUVdEfCS7cth2SLu0w" name="preparedStatement" visibility="private" type="_T9lHAUVdEfCS7cth2SLu0w" association="_UKaCEUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UG7QQ0VdEfCS7cth2SLu0w" name="resultSet" visibility="private" type="_T9wtMEVdEfCS7cth2SLu0w" association="_UKapIEVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UG73UUVdEfCS7cth2SLu0w" name="URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG73UkVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UG8eYEVdEfCS7cth2SLu0w" name="USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG8eYUVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UG8eYkVdEfCS7cth2SLu0w" name="PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG8eY0VdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UG8eZEVdEfCS7cth2SLu0w" name="DRIVER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG8eZUVdEfCS7cth2SLu0w" value="&quot;com.mysql.cj.jdbc.Driver&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIwcQEVdEfCS7cth2SLu0w" name="StergereAdeverintaDAO" specification="_S-VQgEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIwcQUVdEfCS7cth2SLu0w" type="_S-S0QEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>try {&#xD;
         Class.forName(DRIVER);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIwcQkVdEfCS7cth2SLu0w" name="deleteAdeverinta" specification="_S-V3kEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIwcQ0VdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIwcREVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>boolean success = false;&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea direct prin DriverManager&#xD;
         connection = getConnection();&#xD;
         &#xD;
         // Verifică dacă adeverința există&#xD;
         if (!adeverintaExists(idAdeverinta)) {&#xD;
             return false;&#xD;
         }&#xD;
         &#xD;
         // Query pentru a șterge adeverința&#xD;
         String sql = &quot;DELETE FROM adeverinte WHERE id = ?&quot;;&#xD;
         &#xD;
         preparedStatement = connection.prepareStatement(sql);&#xD;
         preparedStatement.setInt(1, idAdeverinta);&#xD;
         &#xD;
         // Execută query-ul&#xD;
         int rowsAffected = preparedStatement.executeUpdate();&#xD;
         &#xD;
         // Verifică dacă ștergerea a avut succes&#xD;
         if (rowsAffected > 0) {&#xD;
             success = true;&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return success;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIwcRUVdEfCS7cth2SLu0w" name="deleteAdeverinteByAngajat" specification="_S-WeoUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIwcRkVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIwcR0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>int deletedRows = 0;&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea direct prin DriverManager&#xD;
         connection = getConnection();&#xD;
         &#xD;
         // Query pentru a șterge adeverințele unui angajat&#xD;
         String sql = &quot;DELETE FROM adeverinte WHERE id_ang = ?&quot;;&#xD;
         &#xD;
         preparedStatement = connection.prepareStatement(sql);&#xD;
         preparedStatement.setInt(1, idAngajat);&#xD;
         &#xD;
         // Execută query-ul&#xD;
         deletedRows = preparedStatement.executeUpdate();&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return deletedRows;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIwcSEVdEfCS7cth2SLu0w" name="deleteAdeverinteByStatus" specification="_S-XFsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIwcSUVdEfCS7cth2SLu0w" name="status">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIwcSkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>int deletedRows = 0;&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea direct prin DriverManager&#xD;
         connection = getConnection();&#xD;
         &#xD;
         // Query pentru a șterge adeverințele cu un anumit status&#xD;
         String sql = &quot;DELETE FROM adeverinte WHERE status = ?&quot;;&#xD;
         &#xD;
         preparedStatement = connection.prepareStatement(sql);&#xD;
         preparedStatement.setInt(1, status);&#xD;
         &#xD;
         // Execută query-ul&#xD;
         deletedRows = preparedStatement.executeUpdate();&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return deletedRows;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIwcS0VdEfCS7cth2SLu0w" name="deleteAdeverinteOlderThan" specification="_UATq4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIwcTEVdEfCS7cth2SLu0w" name="data" type="_T-IgoEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIwcTUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>int deletedRows = 0;&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea direct prin DriverManager&#xD;
         connection = getConnection();&#xD;
         &#xD;
         // Query pentru a șterge adeverințele mai vechi decât o anumită dată&#xD;
         String sql = &quot;DELETE FROM adeverinte WHERE creare &lt; ?&quot;;&#xD;
         &#xD;
         preparedStatement = connection.prepareStatement(sql);&#xD;
         preparedStatement.setDate(1, data);&#xD;
         &#xD;
         // Execută query-ul&#xD;
         deletedRows = preparedStatement.executeUpdate();&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return deletedRows;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIxDUEVdEfCS7cth2SLu0w" name="deleteAdeverinteByTip" specification="_S-XswUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIxDUUVdEfCS7cth2SLu0w" name="tip">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIxDUkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>int deletedRows = 0;&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea direct prin DriverManager&#xD;
         connection = getConnection();&#xD;
         &#xD;
         // Query pentru a șterge adeverințele de un anumit tip&#xD;
         String sql = &quot;DELETE FROM adeverinte WHERE tip = ?&quot;;&#xD;
         &#xD;
         preparedStatement = connection.prepareStatement(sql);&#xD;
         preparedStatement.setInt(1, tip);&#xD;
         &#xD;
         // Execută query-ul&#xD;
         deletedRows = preparedStatement.executeUpdate();&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return deletedRows;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIxDU0VdEfCS7cth2SLu0w" name="deleteAdeverinteByMotiv" specification="_S-Y64EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIxDVEVdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIxDVUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>int deletedRows = 0;&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea direct prin DriverManager&#xD;
         connection = getConnection();&#xD;
         &#xD;
         // Query pentru a șterge adeverințele cu un anumit motiv&#xD;
         String sql = &quot;DELETE FROM adeverinte WHERE motiv LIKE ?&quot;;&#xD;
         &#xD;
         preparedStatement = connection.prepareStatement(sql);&#xD;
         preparedStatement.setString(1, &quot;%&quot; + motiv + &quot;%&quot;);&#xD;
         &#xD;
         // Execută query-ul&#xD;
         deletedRows = preparedStatement.executeUpdate();&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return deletedRows;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIxDVkVdEfCS7cth2SLu0w" name="deleteAdeverinteByDepartament" specification="_S-Zh8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIxDV0VdEfCS7cth2SLu0w" name="idDepartament">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIxDWEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>int deletedRows = 0;&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea direct prin DriverManager&#xD;
         connection = getConnection();&#xD;
         &#xD;
         // Query pentru a șterge adeverințele angajaților dintr-un anumit departament&#xD;
         String sql = &quot;DELETE a FROM adeverinte a &quot; +&#xD;
                      &quot;JOIN useri u ON a.id_ang = u.id &quot; +&#xD;
                      &quot;WHERE u.id_dep = ?&quot;;&#xD;
         &#xD;
         preparedStatement = connection.prepareStatement(sql);&#xD;
         preparedStatement.setInt(1, idDepartament);&#xD;
         &#xD;
         // Execută query-ul&#xD;
         deletedRows = preparedStatement.executeUpdate();&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return deletedRows;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIxDWUVdEfCS7cth2SLu0w" name="getDeleteCandidates" specification="_S-Zh80VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIxDWkVdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UIxDW0VdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;Adeverinta> adeverinte = new ArrayList&lt;>();&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea direct prin DriverManager&#xD;
         connection = getConnection();&#xD;
         &#xD;
         // Query pentru a obține adeverințele care pot fi șterse&#xD;
         String sql = &quot;SELECT a.id, a.tip, a.motiv, a.status, a.creare, a.modif, &quot; +&#xD;
                      &quot;u.nume, u.prenume, u.id as id_ang, u.id_dep, t.denumire as tip_denumire, &quot; +&#xD;
                      &quot;d.nume_dep as departament, s.nume_status &quot; +&#xD;
                      &quot;FROM adeverinte a &quot; +&#xD;
                      &quot;JOIN useri u ON a.id_ang = u.id &quot; +&#xD;
                      &quot;JOIN tip_adev t ON a.tip = t.id &quot; +&#xD;
                      &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                      &quot;JOIN statusuri s ON a.status = s.status &quot; +&#xD;
                      &quot;WHERE a.status &lt; 0 OR a.creare &lt; DATE_SUB(CURDATE(), INTERVAL 1 YEAR) &quot; +&#xD;
                      &quot;ORDER BY a.creare ASC&quot;;&#xD;
         &#xD;
         statement = connection.createStatement();&#xD;
         resultSet = statement.executeQuery(sql);&#xD;
         &#xD;
         // Procesare rezultate&#xD;
         while (resultSet.next()) {&#xD;
             Adeverinta adeverinta = new Adeverinta();&#xD;
             adeverinta.setId(resultSet.getInt(&quot;id&quot;));&#xD;
             adeverinta.setTip(resultSet.getInt(&quot;tip&quot;));&#xD;
             adeverinta.setMotiv(resultSet.getString(&quot;motiv&quot;));&#xD;
             adeverinta.setStatus(resultSet.getInt(&quot;status&quot;));&#xD;
             adeverinta.setCreare(resultSet.getDate(&quot;creare&quot;));&#xD;
             adeverinta.setModif(resultSet.getDate(&quot;modif&quot;));&#xD;
             &#xD;
             adeverinta.setIdAngajat(resultSet.getInt(&quot;id_ang&quot;));&#xD;
            &#xD;
             &#xD;
             adeverinte.add(adeverinta);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return adeverinte;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIxDXEVdEfCS7cth2SLu0w" name="truncateAdeverinte" specification="_S-aJAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIxDXUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>boolean success = false;&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea direct prin DriverManager&#xD;
         connection = getConnection();&#xD;
         &#xD;
         // Query pentru a goli tabela&#xD;
         String sql = &quot;TRUNCATE TABLE adeverinte&quot;;&#xD;
         &#xD;
         statement = connection.createStatement();&#xD;
         statement.executeUpdate(sql);&#xD;
         &#xD;
         success = true;&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return success;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIxqYEVdEfCS7cth2SLu0w" name="adeverintaExists" specification="_S-awEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIxqYUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIxqYkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>String sql = &quot;SELECT COUNT(*) FROM adeverinte WHERE id = ?&quot;;&#xD;
     preparedStatement = connection.prepareStatement(sql);&#xD;
     preparedStatement.setInt(1, idAdeverinta);&#xD;
     resultSet = preparedStatement.executeQuery();&#xD;
     &#xD;
     if (resultSet.next()) {&#xD;
         return resultSet.getInt(1) > 0;&#xD;
     }&#xD;
     &#xD;
     return false;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIxqY0VdEfCS7cth2SLu0w" name="getTotalAdeverinte" specification="_S-bXIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIxqZEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>int total = 0;&#xD;
     &#xD;
     try {&#xD;
         // Obține conexiunea direct prin DriverManager&#xD;
         connection = getConnection();&#xD;
         &#xD;
         // Query pentru a număra adeverințele&#xD;
         String sql = &quot;SELECT COUNT(*) FROM adeverinte&quot;;&#xD;
         &#xD;
         statement = connection.createStatement();&#xD;
         resultSet = statement.executeQuery(sql);&#xD;
         &#xD;
         if (resultSet.next()) {&#xD;
             total = resultSet.getInt(1);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         // Închide resursele&#xD;
         close();&#xD;
     }&#xD;
     &#xD;
     return total;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIxqZUVdEfCS7cth2SLu0w" name="close" specification="_S-bXIkVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>try {&#xD;
         if (resultSet != null) {&#xD;
             resultSet.close();&#xD;
         }&#xD;
         &#xD;
         if (statement != null) {&#xD;
             statement.close();&#xD;
         }&#xD;
         &#xD;
         if (preparedStatement != null) {&#xD;
             preparedStatement.close();&#xD;
         }&#xD;
         &#xD;
         if (connection != null) {&#xD;
             connection.close();&#xD;
         }&#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S-VQgEVdEfCS7cth2SLu0w" name="StergereAdeverintaDAO" method="_UIwcQEVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S-VQgUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S-VQgkVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedComment xmi:id="_UJYHUEVdEfCS7cth2SLu0w">
            <body>Constructor care încarcă driver-ul JDBC</body>
          </ownedComment>
          <ownedParameter xmi:id="_S-VQg0VdEfCS7cth2SLu0w" type="_S-S0QEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S-V3kEVdEfCS7cth2SLu0w" name="deleteAdeverinta" method="_UIwcQkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJYHUUVdEfCS7cth2SLu0w">
            <body>Șterge o adeverință din baza de date&#xD;
     * &#xD;
     * @param idAdeverinta ID-ul adeverinței care trebuie ștearsă&#xD;
     * @return true dacă operația a avut succes, false în caz contrar</body>
          </ownedComment>
          <ownedParameter xmi:id="_S-V3kUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S-WeoEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S-WeoUVdEfCS7cth2SLu0w" name="deleteAdeverinteByAngajat" method="_UIwcRUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJYHUkVdEfCS7cth2SLu0w">
            <body>Șterge toate adeverințele unui angajat&#xD;
     * &#xD;
     * @param idAngajat ID-ul angajatului&#xD;
     * @return numărul de adeverințe șterse</body>
          </ownedComment>
          <ownedParameter xmi:id="_S-WeokVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S-Weo0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S-XFsEVdEfCS7cth2SLu0w" name="deleteAdeverinteByStatus" method="_UIwcSEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJYHU0VdEfCS7cth2SLu0w">
            <body>Șterge toate adeverințele cu un anumit status&#xD;
     * &#xD;
     * @param status Status-ul adeverințelor care trebuie șterse&#xD;
     * @return numărul de adeverințe șterse</body>
          </ownedComment>
          <ownedParameter xmi:id="_S-XFsUVdEfCS7cth2SLu0w" name="status">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S-XswEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S-XswUVdEfCS7cth2SLu0w" name="deleteAdeverinteByTip" method="_UIxDUEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJYHVUVdEfCS7cth2SLu0w">
            <body>Șterge adeverințele de un anumit tip&#xD;
     * &#xD;
     * @param tip Tipul adeverințelor care trebuie șterse&#xD;
     * @return numărul de adeverințe șterse</body>
          </ownedComment>
          <ownedParameter xmi:id="_S-XswkVdEfCS7cth2SLu0w" name="tip">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S-YT0EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S-Y64EVdEfCS7cth2SLu0w" name="deleteAdeverinteByMotiv" method="_UIxDU0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJYHVkVdEfCS7cth2SLu0w">
            <body>Șterge adeverințele cu un anumit motiv&#xD;
     * &#xD;
     * @param motiv Motivul adeverințelor care trebuie șterse (se face căutare parțială)&#xD;
     * @return numărul de adeverințe șterse</body>
          </ownedComment>
          <ownedParameter xmi:id="_S-Y64UVdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S-Y64kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S-Zh8EVdEfCS7cth2SLu0w" name="deleteAdeverinteByDepartament" method="_UIxDVkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJYHV0VdEfCS7cth2SLu0w">
            <body>Șterge adeverințele pentru angajații dintr-un anumit departament&#xD;
     * &#xD;
     * @param idDepartament ID-ul departamentului&#xD;
     * @return numărul de adeverințe șterse</body>
          </ownedComment>
          <ownedParameter xmi:id="_S-Zh8UVdEfCS7cth2SLu0w" name="idDepartament">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S-Zh8kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S-Zh80VdEfCS7cth2SLu0w" name="getDeleteCandidates" method="_UIxDWUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJYHWEVdEfCS7cth2SLu0w">
            <body>Obține adeverințele care pot fi șterse (respinse sau mai vechi de o anumită perioadă)&#xD;
     * &#xD;
     * @return Lista de adeverințe care pot fi șterse</body>
          </ownedComment>
          <ownedParameter xmi:id="_S-Zh9EVdEfCS7cth2SLu0w" type="_T92MwEVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S-Zh9UVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S-aJAEVdEfCS7cth2SLu0w" name="truncateAdeverinte" method="_UIxDXEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJYHWUVdEfCS7cth2SLu0w">
            <body>Golește complet tabela de adeverințe (ATENȚIE: Operațiune periculoasă!)&#xD;
     * &#xD;
     * @return true dacă operația a avut succes, false în caz contrar</body>
          </ownedComment>
          <ownedParameter xmi:id="_S-aJAUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S-awEEVdEfCS7cth2SLu0w" name="adeverintaExists" visibility="private" method="_UIxqYEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJYHWkVdEfCS7cth2SLu0w">
            <body>Verifică dacă o adeverință există în baza de date&#xD;
     * &#xD;
     * @param idAdeverinta ID-ul adeverinței&#xD;
     * @return true dacă adeverința există, false în caz contrar</body>
          </ownedComment>
          <ownedParameter xmi:id="_S-awEUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S-awEkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S-bXIEVdEfCS7cth2SLu0w" name="getTotalAdeverinte" method="_UIxqY0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJYHW0VdEfCS7cth2SLu0w">
            <body>Obține numărul total de adeverințe&#xD;
     * &#xD;
     * @return Numărul total de adeverințe</body>
          </ownedComment>
          <ownedParameter xmi:id="_S-bXIUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S-bXIkVdEfCS7cth2SLu0w" name="close" visibility="private" method="_UIxqZUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJYHXEVdEfCS7cth2SLu0w">
            <body>Metoda pentru închiderea resurselor</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:id="_UATq4EVdEfCS7cth2SLu0w" name="deleteAdeverinteOlderThan" method="_UIwcS0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJYHVEVdEfCS7cth2SLu0w">
            <body>Șterge adeverințele mai vechi decât o anumită dată&#xD;
     * &#xD;
     * @param data Data limită (se vor șterge adeverințele create înainte de această dată)&#xD;
     * @return numărul de adeverințe șterse</body>
          </ownedComment>
          <ownedParameter xmi:id="_UATq4UVdEfCS7cth2SLu0w" name="data" type="_T-IgoEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UATq4kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKED0EVdEfCS7cth2SLu0w" name="" memberEnd="_UKED0UVdEfCS7cth2SLu0w _UGB4YEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKED0UVdEfCS7cth2SLu0w" name="" type="_S45W4EVdEfCS7cth2SLu0w" association="_UKED0EVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKJjYUVdEfCS7cth2SLu0w" name="" memberEnd="_UKJjYkVdEfCS7cth2SLu0w _UGVaYUVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKJjYkVdEfCS7cth2SLu0w" name="" type="_S67-QEVdEfCS7cth2SLu0w" association="_UKJjYUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKKKcUVdEfCS7cth2SLu0w" name="" memberEnd="_UKKKckVdEfCS7cth2SLu0w _UGWBcUVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKKKckVdEfCS7cth2SLu0w" name="" type="_S67-QEVdEfCS7cth2SLu0w" association="_UKKKcUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKKxgUVdEfCS7cth2SLu0w" name="" memberEnd="_UKKxgkVdEfCS7cth2SLu0w _UGWogEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKKxgkVdEfCS7cth2SLu0w" name="" type="_S67-QEVdEfCS7cth2SLu0w" association="_UKKxgUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKLYkUVdEfCS7cth2SLu0w" name="" memberEnd="_UKLYkkVdEfCS7cth2SLu0w _UGWogkVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKLYkkVdEfCS7cth2SLu0w" name="" type="_S67-QEVdEfCS7cth2SLu0w" association="_UKLYkUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKL_oUVdEfCS7cth2SLu0w" name="" memberEnd="_UKL_okVdEfCS7cth2SLu0w _UGXPkUVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKL_okVdEfCS7cth2SLu0w" name="" type="_S67-QEVdEfCS7cth2SLu0w" association="_UKL_oUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKMmsUVdEfCS7cth2SLu0w" name="" memberEnd="_UKMmskVdEfCS7cth2SLu0w _UGZr0EVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKMmskVdEfCS7cth2SLu0w" name="" type="_S7Mc8EVdEfCS7cth2SLu0w" association="_UKMmsUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKNNwUVdEfCS7cth2SLu0w" name="" memberEnd="_UKNNwkVdEfCS7cth2SLu0w _UGbhAEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKNNwkVdEfCS7cth2SLu0w" name="" type="_S7Mc8EVdEfCS7cth2SLu0w" association="_UKNNwUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKN00UVdEfCS7cth2SLu0w" name="" memberEnd="_UKN00kVdEfCS7cth2SLu0w _UGcIEEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKN00kVdEfCS7cth2SLu0w" name="" type="_S7Mc8EVdEfCS7cth2SLu0w" association="_UKN00UVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKOb4UVdEfCS7cth2SLu0w" name="" memberEnd="_UKOb4kVdEfCS7cth2SLu0w _UGcIEkVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKOb4kVdEfCS7cth2SLu0w" name="" type="_S7Mc8EVdEfCS7cth2SLu0w" association="_UKOb4UVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKVwoEVdEfCS7cth2SLu0w" name="" memberEnd="_UKVwoUVdEfCS7cth2SLu0w _UG1wskVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKVwoUVdEfCS7cth2SLu0w" name="" type="_S-GnAEVdEfCS7cth2SLu0w" association="_UKVwoEVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKWXsUVdEfCS7cth2SLu0w" name="" memberEnd="_UKWXskVdEfCS7cth2SLu0w _UG2XwUVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKWXskVdEfCS7cth2SLu0w" name="" type="_S-GnAEVdEfCS7cth2SLu0w" association="_UKWXsUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKW-wUVdEfCS7cth2SLu0w" name="" memberEnd="_UKW-wkVdEfCS7cth2SLu0w _UG2-0EVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKW-wkVdEfCS7cth2SLu0w" name="" type="_S-GnAEVdEfCS7cth2SLu0w" association="_UKW-wUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKW-xEVdEfCS7cth2SLu0w" name="" memberEnd="_UKW-xUVdEfCS7cth2SLu0w _UG2-0kVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKW-xUVdEfCS7cth2SLu0w" name="" type="_S-GnAEVdEfCS7cth2SLu0w" association="_UKW-xEVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKXl0UVdEfCS7cth2SLu0w" name="" memberEnd="_UKXl0kVdEfCS7cth2SLu0w _UG3l4UVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKXl0kVdEfCS7cth2SLu0w" name="" type="_S-GnAEVdEfCS7cth2SLu0w" association="_UKXl0UVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKYM4UVdEfCS7cth2SLu0w" name="" memberEnd="_UKYM4kVdEfCS7cth2SLu0w _UG5bEEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKYM4kVdEfCS7cth2SLu0w" name="" type="_S-S0QEVdEfCS7cth2SLu0w" association="_UKYM4UVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKZbAEVdEfCS7cth2SLu0w" name="" memberEnd="_UKZbAUVdEfCS7cth2SLu0w _UG6pMUVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKZbAUVdEfCS7cth2SLu0w" name="" type="_S-S0QEVdEfCS7cth2SLu0w" association="_UKZbAEVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKaCEUVdEfCS7cth2SLu0w" name="" memberEnd="_UKaCEkVdEfCS7cth2SLu0w _UG7QQUVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKaCEkVdEfCS7cth2SLu0w" name="" type="_S-S0QEVdEfCS7cth2SLu0w" association="_UKaCEUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKapIEVdEfCS7cth2SLu0w" name="" memberEnd="_UKapIUVdEfCS7cth2SLu0w _UG7QQ0VdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKapIUVdEfCS7cth2SLu0w" name="" type="_S-S0QEVdEfCS7cth2SLu0w" association="_UKapIEVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_xjAMYEVgEfCS7cth2SLu0w" name="NewClass1"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_SonfMEVdEfCS7cth2SLu0w" name="org">
      <packagedElement xmi:type="uml:Package" xmi:id="_SooGQEVdEfCS7cth2SLu0w" name="mindrot">
        <packagedElement xmi:type="uml:Package" xmi:id="_SootUEVdEfCS7cth2SLu0w" name="jbcrypt">
          <packagedElement xmi:type="uml:Class" xmi:id="_T9u4AEVdEfCS7cth2SLu0w" name="BCrypt">
            <eAnnotations xmi:id="_VqR5YEVdEfCS7cth2SLu0w" source="http://ns.yatta.de/umllab">
              <contents xmi:type="ecore:EAnnotation" xmi:id="_VqSgcEVdEfCS7cth2SLu0w" source="codegen">
                <details xmi:id="_VqSgcUVdEfCS7cth2SLu0w" key="codegenDirectory" value="/Proiect/src/main/webapp/WEB-INF"/>
              </contents>
            </eAnnotations>
            <ownedComment xmi:id="_V_mpIUVdEfCS7cth2SLu0w">
              <body>BCrypt implements OpenBSD-style Blowfish password hashing using
the scheme described in &quot;A Future-Adaptable Password Scheme&quot; by
Niels Provos and David Mazieres.
&lt;p>
This password hashing system tries to thwart off-line password
cracking using a computationally-intensive hashing algorithm,
based on Bruce Schneier's Blowfish cipher. The work factor of
the algorithm is parameterised, so it can be increased as
computers get faster.
&lt;p>
Usage is really simple. To hash a password for the first time,
call the hashpw method with a random salt, like this:
&lt;p>
&lt;code>
String pw_hash = BCrypt.hashpw(plain_password, BCrypt.gensalt()); &lt;br />
&lt;/code>
&lt;p>
To check whether a plaintext password matches one that has been
hashed previously, use the checkpw method:
&lt;p>
&lt;code>
if (BCrypt.checkpw(candidate_password, stored_hash))&lt;br />
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&quot;It matches&quot;);&lt;br />
else&lt;br />
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&quot;It does not match&quot;);&lt;br />
&lt;/code>
&lt;p>
The gensalt() method takes an optional parameter (log_rounds)
that determines the computational complexity of the hashing:
&lt;p>
&lt;code>
String strong_salt = BCrypt.gensalt(10)&lt;br />
String stronger_salt = BCrypt.gensalt(12)&lt;br />
&lt;/code>
&lt;p>
The amount of work increases exponentially (2**log_rounds), so 
each increment is twice as much work. The default log_rounds is
10, and the valid range is 4 to 30.
 *
@author Damien Miller
@version 0.2</body>
            </ownedComment>
            <ownedAttribute xmi:id="_V-jgQEVdEfCS7cth2SLu0w" name="GENSALT_DEFAULT_LOG2_ROUNDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-jgQUVdEfCS7cth2SLu0w" value="10"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_V-jgQkVdEfCS7cth2SLu0w" name="BCRYPT_SALT_LEN" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-jgQ0VdEfCS7cth2SLu0w" value="16"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_V-jgREVdEfCS7cth2SLu0w" name="BLOWFISH_NUM_ROUNDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-jgRUVdEfCS7cth2SLu0w" value="16"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_V-jgRkVdEfCS7cth2SLu0w" name="P_orig" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-jgR0VdEfCS7cth2SLu0w" value="*"/>
              <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-kHUEVdEfCS7cth2SLu0w" value="{&#xA;&#x9;&#x9;0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344,&#xA;&#x9;&#x9;0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89,&#xA;&#x9;&#x9;0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,&#xA;&#x9;&#x9;0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917,&#xA;&#x9;&#x9;0x9216d5d9, 0x8979fb1b&#xA;&#x9;}"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_V-kHUkVdEfCS7cth2SLu0w" name="S_orig" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-kHU0VdEfCS7cth2SLu0w" value="*"/>
              <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-kHVUVdEfCS7cth2SLu0w" value="{&#xA;&#x9;&#x9;0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7,&#xA;&#x9;&#x9;0xb8e1afed, 0x6a267e96, 0xba7c9045, 0xf12c7f99,&#xA;&#x9;&#x9;0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16,&#xA;&#x9;&#x9;0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e,&#xA;&#x9;&#x9;0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee,&#xA;&#x9;&#x9;0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013,&#xA;&#x9;&#x9;0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef,&#xA;&#x9;&#x9;0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e,&#xA;&#x9;&#x9;0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60,&#xA;&#x9;&#x9;0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,&#xA;&#x9;&#x9;0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce,&#xA;&#x9;&#x9;0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a,&#xA;&#x9;&#x9;0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e,&#xA;&#x9;&#x9;0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677,&#xA;&#x9;&#x9;0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,&#xA;&#x9;&#x9;0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032,&#xA;&#x9;&#x9;0xef845d5d, 0xe98575b1, 0xdc262302, 0xeb651b88,&#xA;&#x9;&#x9;0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239,&#xA;&#x9;&#x9;0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e,&#xA;&#x9;&#x9;0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0,&#xA;&#x9;&#x9;0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3,&#xA;&#x9;&#x9;0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98,&#xA;&#x9;&#x9;0xa1f1651d, 0x39af0176, 0x66ca593e, 0x82430e88,&#xA;&#x9;&#x9;0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe,&#xA;&#x9;&#x9;0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6,&#xA;&#x9;&#x9;0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d,&#xA;&#x9;&#x9;0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b,&#xA;&#x9;&#x9;0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7,&#xA;&#x9;&#x9;0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04c006ba,&#xA;&#x9;&#x9;0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,&#xA;&#x9;&#x9;0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f,&#xA;&#x9;&#x9;0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09,&#xA;&#x9;&#x9;0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3,&#xA;&#x9;&#x9;0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb,&#xA;&#x9;&#x9;0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279,&#xA;&#x9;&#x9;0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8,&#xA;&#x9;&#x9;0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab,&#xA;&#x9;&#x9;0x323db5fa, 0xfd238760, 0x53317b48, 0x3e00df82,&#xA;&#x9;&#x9;0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db,&#xA;&#x9;&#x9;0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,&#xA;&#x9;&#x9;0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0,&#xA;&#x9;&#x9;0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b,&#xA;&#x9;&#x9;0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790,&#xA;&#x9;&#x9;0xe1ddf2da, 0xa4cb7e33, 0x62fb1341, 0xcee4c6e8,&#xA;&#x9;&#x9;0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,&#xA;&#x9;&#x9;0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0,&#xA;&#x9;&#x9;0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7,&#xA;&#x9;&#x9;0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c,&#xA;&#x9;&#x9;0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad,&#xA;&#x9;&#x9;0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1,&#xA;&#x9;&#x9;0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299,&#xA;&#x9;&#x9;0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9,&#xA;&#x9;&#x9;0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477,&#xA;&#x9;&#x9;0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf,&#xA;&#x9;&#x9;0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49,&#xA;&#x9;&#x9;0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af,&#xA;&#x9;&#x9;0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa,&#xA;&#x9;&#x9;0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5,&#xA;&#x9;&#x9;0x83260376, 0x6295cfa9, 0x11c81968, 0x4e734a41,&#xA;&#x9;&#x9;0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,&#xA;&#x9;&#x9;0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400,&#xA;&#x9;&#x9;0x08ba6fb5, 0x571be91f, 0xf296ec6b, 0x2a0dd915,&#xA;&#x9;&#x9;0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664,&#xA;&#x9;&#x9;0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a,&#xA;&#x9;&#x9;0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623,&#xA;&#x9;&#x9;0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266,&#xA;&#x9;&#x9;0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1,&#xA;&#x9;&#x9;0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e,&#xA;&#x9;&#x9;0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6,&#xA;&#x9;&#x9;0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,&#xA;&#x9;&#x9;0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e,&#xA;&#x9;&#x9;0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1,&#xA;&#x9;&#x9;0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737,&#xA;&#x9;&#x9;0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8,&#xA;&#x9;&#x9;0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,&#xA;&#x9;&#x9;0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd,&#xA;&#x9;&#x9;0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701,&#xA;&#x9;&#x9;0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7,&#xA;&#x9;&#x9;0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41,&#xA;&#x9;&#x9;0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331,&#xA;&#x9;&#x9;0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf,&#xA;&#x9;&#x9;0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af,&#xA;&#x9;&#x9;0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e,&#xA;&#x9;&#x9;0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87,&#xA;&#x9;&#x9;0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,&#xA;&#x9;&#x9;0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2,&#xA;&#x9;&#x9;0xef1c1847, 0x3215d908, 0xdd433b37, 0x24c2ba16,&#xA;&#x9;&#x9;0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd,&#xA;&#x9;&#x9;0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b,&#xA;&#x9;&#x9;0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,&#xA;&#x9;&#x9;0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e,&#xA;&#x9;&#x9;0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3,&#xA;&#x9;&#x9;0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99e71d0f,&#xA;&#x9;&#x9;0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a,&#xA;&#x9;&#x9;0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4,&#xA;&#x9;&#x9;0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960,&#xA;&#x9;&#x9;0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66,&#xA;&#x9;&#x9;0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28,&#xA;&#x9;&#x9;0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802,&#xA;&#x9;&#x9;0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,&#xA;&#x9;&#x9;0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510,&#xA;&#x9;&#x9;0x13cca830, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf,&#xA;&#x9;&#x9;0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14,&#xA;&#x9;&#x9;0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e,&#xA;&#x9;&#x9;0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,&#xA;&#x9;&#x9;0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7,&#xA;&#x9;&#x9;0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8,&#xA;&#x9;&#x9;0xf837889a, 0x97e32d77, 0x11ed935f, 0x16681281,&#xA;&#x9;&#x9;0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99,&#xA;&#x9;&#x9;0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696,&#xA;&#x9;&#x9;0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128,&#xA;&#x9;&#x9;0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73,&#xA;&#x9;&#x9;0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0,&#xA;&#x9;&#x9;0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0,&#xA;&#x9;&#x9;0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,&#xA;&#x9;&#x9;0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250,&#xA;&#x9;&#x9;0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3,&#xA;&#x9;&#x9;0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285,&#xA;&#x9;&#x9;0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00,&#xA;&#x9;&#x9;0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,&#xA;&#x9;&#x9;0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb,&#xA;&#x9;&#x9;0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e,&#xA;&#x9;&#x9;0xa6078084, 0x19f8509e, 0xe8efd855, 0x61d99735,&#xA;&#x9;&#x9;0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc,&#xA;&#x9;&#x9;0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9,&#xA;&#x9;&#x9;0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340,&#xA;&#x9;&#x9;0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20,&#xA;&#x9;&#x9;0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7,&#xA;&#x9;&#x9;0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934,&#xA;&#x9;&#x9;0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068,&#xA;&#x9;&#x9;0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af,&#xA;&#x9;&#x9;0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840,&#xA;&#x9;&#x9;0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45,&#xA;&#x9;&#x9;0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb8504,&#xA;&#x9;&#x9;0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,&#xA;&#x9;&#x9;0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb,&#xA;&#x9;&#x9;0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee,&#xA;&#x9;&#x9;0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6,&#xA;&#x9;&#x9;0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42,&#xA;&#x9;&#x9;0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,&#xA;&#x9;&#x9;0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2,&#xA;&#x9;&#x9;0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb,&#xA;&#x9;&#x9;0xfb0af54e, 0xd8feb397, 0x454056ac, 0xba489527,&#xA;&#x9;&#x9;0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b,&#xA;&#x9;&#x9;0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33,&#xA;&#x9;&#x9;0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c,&#xA;&#x9;&#x9;0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3,&#xA;&#x9;&#x9;0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc,&#xA;&#x9;&#x9;0x07f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17,&#xA;&#x9;&#x9;0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,&#xA;&#x9;&#x9;0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b,&#xA;&#x9;&#x9;0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115,&#xA;&#x9;&#x9;0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922,&#xA;&#x9;&#x9;0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728,&#xA;&#x9;&#x9;0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,&#xA;&#x9;&#x9;0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e,&#xA;&#x9;&#x9;0x0a476341, 0x992eff74, 0x3a6f6eab, 0xf4f8fd37,&#xA;&#x9;&#x9;0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d,&#xA;&#x9;&#x9;0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804,&#xA;&#x9;&#x9;0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b,&#xA;&#x9;&#x9;0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3,&#xA;&#x9;&#x9;0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb,&#xA;&#x9;&#x9;0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d,&#xA;&#x9;&#x9;0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c,&#xA;&#x9;&#x9;0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,&#xA;&#x9;&#x9;0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9,&#xA;&#x9;&#x9;0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a,&#xA;&#x9;&#x9;0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe,&#xA;&#x9;&#x9;0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d,&#xA;&#x9;&#x9;0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,&#xA;&#x9;&#x9;0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f,&#xA;&#x9;&#x9;0x77a057be, 0xbde8ae24, 0x55464299, 0xbf582e61,&#xA;&#x9;&#x9;0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2,&#xA;&#x9;&#x9;0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9,&#xA;&#x9;&#x9;0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2,&#xA;&#x9;&#x9;0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c,&#xA;&#x9;&#x9;0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e,&#xA;&#x9;&#x9;0xb77f19b6, 0xe0a9dc09, 0x662d09a1, 0xc4324633,&#xA;&#x9;&#x9;0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10,&#xA;&#x9;&#x9;0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,&#xA;&#x9;&#x9;0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52,&#xA;&#x9;&#x9;0x50115e01, 0xa70683fa, 0xa002b5c4, 0x0de6d027,&#xA;&#x9;&#x9;0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5,&#xA;&#x9;&#x9;0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc7d62,&#xA;&#x9;&#x9;0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,&#xA;&#x9;&#x9;0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76,&#xA;&#x9;&#x9;0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24,&#xA;&#x9;&#x9;0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc,&#xA;&#x9;&#x9;0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4,&#xA;&#x9;&#x9;0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c,&#xA;&#x9;&#x9;0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837,&#xA;&#x9;&#x9;0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0,&#xA;&#x9;&#x9;0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b,&#xA;&#x9;&#x9;0x5cb0679e, 0x4fa33742, 0xd3822740, 0x99bc9bbe,&#xA;&#x9;&#x9;0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,&#xA;&#x9;&#x9;0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4,&#xA;&#x9;&#x9;0x5748ab2f, 0xbc946e79, 0xc6a376d2, 0x6549c2c8,&#xA;&#x9;&#x9;0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6,&#xA;&#x9;&#x9;0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304,&#xA;&#x9;&#x9;0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22,&#xA;&#x9;&#x9;0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4,&#xA;&#x9;&#x9;0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6,&#xA;&#x9;&#x9;0x2826a2f9, 0xa73a3ae1, 0x4ba99586, 0xef5562e9,&#xA;&#x9;&#x9;0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59,&#xA;&#x9;&#x9;0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593,&#xA;&#x9;&#x9;0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51,&#xA;&#x9;&#x9;0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28,&#xA;&#x9;&#x9;0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c,&#xA;&#x9;&#x9;0xe029ac71, 0xe019a5e6, 0x47b0acfd, 0xed93fa9b,&#xA;&#x9;&#x9;0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,&#xA;&#x9;&#x9;0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c,&#xA;&#x9;&#x9;0x15056dd4, 0x88f46dba, 0x03a16125, 0x0564f0bd,&#xA;&#x9;&#x9;0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a,&#xA;&#x9;&#x9;0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319,&#xA;&#x9;&#x9;0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb,&#xA;&#x9;&#x9;0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f,&#xA;&#x9;&#x9;0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991,&#xA;&#x9;&#x9;0xea7a90c2, 0xfb3e7bce, 0x5121ce64, 0x774fbe32,&#xA;&#x9;&#x9;0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680,&#xA;&#x9;&#x9;0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166,&#xA;&#x9;&#x9;0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae,&#xA;&#x9;&#x9;0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb,&#xA;&#x9;&#x9;0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5,&#xA;&#x9;&#x9;0x72eacea8, 0xfa6484bb, 0x8d6612ae, 0xbf3c6f47,&#xA;&#x9;&#x9;0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,&#xA;&#x9;&#x9;0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d,&#xA;&#x9;&#x9;0x4040cb08, 0x4eb4e2cc, 0x34d2466a, 0x0115af84,&#xA;&#x9;&#x9;0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048,&#xA;&#x9;&#x9;0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8,&#xA;&#x9;&#x9;0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd,&#xA;&#x9;&#x9;0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9,&#xA;&#x9;&#x9;0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7,&#xA;&#x9;&#x9;0x1a908749, 0xd44fbd9a, 0xd0dadecb, 0xd50ada38,&#xA;&#x9;&#x9;0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f,&#xA;&#x9;&#x9;0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c,&#xA;&#x9;&#x9;0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525,&#xA;&#x9;&#x9;0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1,&#xA;&#x9;&#x9;0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442,&#xA;&#x9;&#x9;0xe0ec6e0e, 0x1698db3b, 0x4c98a0be, 0x3278e964,&#xA;&#x9;&#x9;0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,&#xA;&#x9;&#x9;0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8,&#xA;&#x9;&#x9;0xdf359f8d, 0x9b992f2e, 0xe60b6f47, 0x0fe3f11d,&#xA;&#x9;&#x9;0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f,&#xA;&#x9;&#x9;0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299,&#xA;&#x9;&#x9;0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02,&#xA;&#x9;&#x9;0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc,&#xA;&#x9;&#x9;0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614,&#xA;&#x9;&#x9;0xe6c6c7bd, 0x327a140a, 0x45e1d006, 0xc3f27b9a,&#xA;&#x9;&#x9;0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6,&#xA;&#x9;&#x9;0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,&#xA;&#x9;&#x9;0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0,&#xA;&#x9;&#x9;0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060,&#xA;&#x9;&#x9;0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e,&#xA;&#x9;&#x9;0x1948c25c, 0x02fb8a8c, 0x01c36ae4, 0xd6ebe1f9,&#xA;&#x9;&#x9;0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,&#xA;&#x9;&#x9;0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6&#xA;&#x9;}"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_V-kHV0VdEfCS7cth2SLu0w" name="bf_crypt_ciphertext" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-kHWEVdEfCS7cth2SLu0w" value="*"/>
              <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-kuYUVdEfCS7cth2SLu0w" value="{&#xA;&#x9;&#x9;0x4f727068, 0x65616e42, 0x65686f6c,&#xA;&#x9;&#x9;0x64657253, 0x63727944, 0x6f756274&#xA;&#x9;}"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_V-kuY0VdEfCS7cth2SLu0w" name="base64_code" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#char"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-kuZEVdEfCS7cth2SLu0w" value="*"/>
              <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-kuZkVdEfCS7cth2SLu0w" value="{&#xA;&#x9;&#x9;'.', '/', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',&#xA;&#x9;&#x9;'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',&#xA;&#x9;&#x9;'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',&#xA;&#x9;&#x9;'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',&#xA;&#x9;&#x9;'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5',&#xA;&#x9;&#x9;'6', '7', '8', '9'&#xA;&#x9;}"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_V-kuaEVdEfCS7cth2SLu0w" name="index_64" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-lVcEVdEfCS7cth2SLu0w" value="*"/>
              <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-lVckVdEfCS7cth2SLu0w" value="{&#xA;&#x9;&#x9;-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,&#xA;&#x9;&#x9;-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,&#xA;&#x9;&#x9;-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,&#xA;&#x9;&#x9;-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,&#xA;&#x9;&#x9;-1, -1, -1, -1, -1, -1, 0, 1, 54, 55,&#xA;&#x9;&#x9;56, 57, 58, 59, 60, 61, 62, 63, -1, -1,&#xA;&#x9;&#x9;-1, -1, -1, -1, -1, 2, 3, 4, 5, 6,&#xA;&#x9;&#x9;7, 8, 9, 10, 11, 12, 13, 14, 15, 16,&#xA;&#x9;&#x9;17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,&#xA;&#x9;&#x9;-1, -1, -1, -1, -1, -1, 28, 29, 30,&#xA;&#x9;&#x9;31, 32, 33, 34, 35, 36, 37, 38, 39, 40,&#xA;&#x9;&#x9;41, 42, 43, 44, 45, 46, 47, 48, 49, 50,&#xA;&#x9;&#x9;51, 52, 53, -1, -1, -1, -1, -1&#xA;&#x9;}"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_V-lVdEVdEfCS7cth2SLu0w" name="P" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-lVdUVdEfCS7cth2SLu0w" value="*"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_V-lVeEVdEfCS7cth2SLu0w" name="S" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-lVeUVdEfCS7cth2SLu0w" value="*"/>
            </ownedAttribute>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_THIEVdEfCS7cth2SLu0w" name="encode_base64" specification="_VvPR4EVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_V_THIUVdEfCS7cth2SLu0w" name="d">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V_THIkVdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_V_THI0VdEfCS7cth2SLu0w" name="len">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_V_THJEVdEfCS7cth2SLu0w" direction="return">
                <name xsi:nil="true"/>
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <language>java</language>
              <body>int off = 0;
		StringBuffer rs = new StringBuffer();
		int c1, c2;

		if (len &lt;= 0 || len > d.length)
			throw new IllegalArgumentException (&quot;Invalid len&quot;);

		while (off &lt; len) {
			c1 = d[off++] &amp; 0xff;
			rs.append(base64_code[(c1 >> 2) &amp; 0x3f]);
			c1 = (c1 &amp; 0x03) &lt;&lt; 4;
			if (off >= len) {
				rs.append(base64_code[c1 &amp; 0x3f]);
				break;
			}
			c2 = d[off++] &amp; 0xff;
			c1 |= (c2 >> 4) &amp; 0x0f;
			rs.append(base64_code[c1 &amp; 0x3f]);
			c1 = (c2 &amp; 0x0f) &lt;&lt; 2;
			if (off >= len) {
				rs.append(base64_code[c1 &amp; 0x3f]);
				break;
			}
			c2 = d[off++] &amp; 0xff;
			c1 |= (c2 >> 6) &amp; 0x03;
			rs.append(base64_code[c1 &amp; 0x3f]);
			rs.append(base64_code[c2 &amp; 0x3f]);
		}
		return rs.toString();
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_THJUVdEfCS7cth2SLu0w" name="char64" specification="_VvP48kVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_V_THJkVdEfCS7cth2SLu0w" name="x">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#char"/>
              </ownedParameter>
              <ownedParameter xmi:id="_V_THJ0VdEfCS7cth2SLu0w" direction="return">
                <name xsi:nil="true"/>
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
              </ownedParameter>
              <language>java</language>
              <body>if ((int)x &lt; 0 || (int)x > index_64.length)
			return -1;
		return index_64[(int)x];
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_THKEVdEfCS7cth2SLu0w" name="decode_base64" specification="_VvP49UVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_V_THKUVdEfCS7cth2SLu0w" name="s">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_V_THKkVdEfCS7cth2SLu0w" name="maxolen">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_V_THK0VdEfCS7cth2SLu0w" direction="return">
                <name xsi:nil="true"/>
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V_THLEVdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <language>java</language>
              <body>StringBuffer rs = new StringBuffer();
		int off = 0, slen = s.length(), olen = 0;
		byte ret[];
		byte c1, c2, c3, c4, o;

		if (maxolen &lt;= 0)
			throw new IllegalArgumentException (&quot;Invalid maxolen&quot;);

		while (off &lt; slen - 1 &amp;&amp; olen &lt; maxolen) {
			c1 = char64(s.charAt(off++));
			c2 = char64(s.charAt(off++));
			if (c1 == -1 || c2 == -1)
				break;
			o = (byte)(c1 &lt;&lt; 2);
			o |= (c2 &amp; 0x30) >> 4;
			rs.append((char)o);
			if (++olen >= maxolen || off >= slen)
				break;
			c3 = char64(s.charAt(off++));
			if (c3 == -1)
				break;
			o = (byte)((c2 &amp; 0x0f) &lt;&lt; 4);
			o |= (c3 &amp; 0x3c) >> 2;
			rs.append((char)o);
			if (++olen >= maxolen || off >= slen)
				break;
			c4 = char64(s.charAt(off++));
			o = (byte)((c3 &amp; 0x03) &lt;&lt; 6);
			o |= c4;
			rs.append((char)o);
			++olen;
		}

		ret = new byte[olen];
		for (off = 0; off &lt; olen; off++)
			ret[off] = (byte)rs.charAt(off);
		return ret;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_THLUVdEfCS7cth2SLu0w" name="encipher" specification="_VvQgA0VdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_V_THLkVdEfCS7cth2SLu0w" name="lr">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V_THL0VdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_V_THMEVdEfCS7cth2SLu0w" name="off">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>int i, n, l = lr[off], r = lr[off + 1];

		l ^= P[0];
		for (i = 0; i &lt;= BLOWFISH_NUM_ROUNDS - 2;) {
			// Feistel substitution on left word
			n = S[(l >> 24) &amp; 0xff];
			n += S[0x100 | ((l >> 16) &amp; 0xff)];
			n ^= S[0x200 | ((l >> 8) &amp; 0xff)];
			n += S[0x300 | (l &amp; 0xff)];
			r ^= n ^ P[++i];

			// Feistel substitution on right word
			n = S[(r >> 24) &amp; 0xff];
			n += S[0x100 | ((r >> 16) &amp; 0xff)];
			n ^= S[0x200 | ((r >> 8) &amp; 0xff)];
			n += S[0x300 | (r &amp; 0xff)];
			l ^= n ^ P[++i];
		}
		lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];
		lr[off + 1] = l;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_THMUVdEfCS7cth2SLu0w" name="streamtoword" specification="_VvRHEEVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_V_THMkVdEfCS7cth2SLu0w" name="data">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V_THM0VdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_V_THNEVdEfCS7cth2SLu0w" name="offp">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V_THNUVdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_V_THNkVdEfCS7cth2SLu0w" direction="return">
                <name xsi:nil="true"/>
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>int i;
		int word = 0;
		int off = offp[0];

		for (i = 0; i &lt; 4; i++) {
			word = (word &lt;&lt; 8) | (data[off] &amp; 0xff);
			off = (off + 1) % data.length;
		}

		offp[0] = off;
		return word;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_THN0VdEfCS7cth2SLu0w" name="init_key" specification="_VqD28EVdEfCS7cth2SLu0w">
              <language>java</language>
              <body>P = (int[])P_orig.clone();
		S = (int[])S_orig.clone();
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_TuMEVdEfCS7cth2SLu0w" name="key" specification="_VvRuIEVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_V_TuMUVdEfCS7cth2SLu0w" name="key">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V_TuMkVdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <language>java</language>
              <body>int i;
		int koffp[] = { 0 };
		int lr[] = { 0, 0 };
		int plen = P.length, slen = S.length;

		for (i = 0; i &lt; plen; i++)
			P[i] = P[i] ^ streamtoword(key, koffp);

		for (i = 0; i &lt; plen; i += 2) {
			encipher(lr, 0);
			P[i] = lr[0];
			P[i + 1] = lr[1];
		}

		for (i = 0; i &lt; slen; i += 2) {
			encipher(lr, 0);
			S[i] = lr[0];
			S[i + 1] = lr[1];
		}
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_TuM0VdEfCS7cth2SLu0w" name="ekskey" specification="_VvRuJUVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_V_TuNEVdEfCS7cth2SLu0w" name="data">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V_TuNUVdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_V_TuNkVdEfCS7cth2SLu0w" name="key">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V_TuN0VdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <language>java</language>
              <body>int i;
		int koffp[] = { 0 }, doffp[] = { 0 };
		int lr[] = { 0, 0 };
		int plen = P.length, slen = S.length;

		for (i = 0; i &lt; plen; i++)
			P[i] = P[i] ^ streamtoword(key, koffp);

		for (i = 0; i &lt; plen; i += 2) {
			lr[0] ^= streamtoword(data, doffp);
			lr[1] ^= streamtoword(data, doffp);
			encipher(lr, 0);
			P[i] = lr[0];
			P[i + 1] = lr[1];
		}

		for (i = 0; i &lt; slen; i += 2) {
			lr[0] ^= streamtoword(data, doffp);
			lr[1] ^= streamtoword(data, doffp);
			encipher(lr, 0);
			S[i] = lr[0];
			S[i + 1] = lr[1];
		}
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_TuOEVdEfCS7cth2SLu0w" name="crypt_raw" specification="_VvSVM0VdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_V_TuOUVdEfCS7cth2SLu0w" name="password">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V_TuOkVdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_V_TuO0VdEfCS7cth2SLu0w" name="salt">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V_TuPEVdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_V_TuPUVdEfCS7cth2SLu0w" name="log_rounds">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_V_TuPkVdEfCS7cth2SLu0w" name="cdata">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V_TuP0VdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_V_TuQEVdEfCS7cth2SLu0w" direction="return">
                <name xsi:nil="true"/>
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V_TuQUVdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <language>java</language>
              <body>int rounds, i, j;
		int clen = cdata.length;
		byte ret[];

		if (log_rounds &lt; 4 || log_rounds > 30)
			throw new IllegalArgumentException (&quot;Bad number of rounds&quot;);
		rounds = 1 &lt;&lt; log_rounds;
		if (salt.length != BCRYPT_SALT_LEN)
			throw new IllegalArgumentException (&quot;Bad salt length&quot;);

		init_key();
		ekskey(salt, password);
		for (i = 0; i != rounds; i++) {
			key(password);
			key(salt);
		}

		for (i = 0; i &lt; 64; i++) {
			for (j = 0; j &lt; (clen >> 1); j++)
				encipher(cdata, j &lt;&lt; 1);
		}

		ret = new byte[clen * 4];
		for (i = 0, j = 0; i &lt; clen; i++) {
			ret[j++] = (byte)((cdata[i] >> 24) &amp; 0xff);
			ret[j++] = (byte)((cdata[i] >> 16) &amp; 0xff);
			ret[j++] = (byte)((cdata[i] >> 8) &amp; 0xff);
			ret[j++] = (byte)(cdata[i] &amp; 0xff);
		}
		return ret;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_TuQkVdEfCS7cth2SLu0w" name="hashpw" specification="_VvS8R0VdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_V_TuQ0VdEfCS7cth2SLu0w" name="password">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_V_TuREVdEfCS7cth2SLu0w" name="salt">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_V_TuRUVdEfCS7cth2SLu0w" direction="return">
                <name xsi:nil="true"/>
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <language>java</language>
              <body>BCrypt B;
		String real_salt;
		byte passwordb[], saltb[], hashed[];
		char minor = (char)0;
		int rounds, off = 0;
		StringBuffer rs = new StringBuffer();

		if (salt.charAt(0) != '$' || salt.charAt(1) != '2')
			throw new IllegalArgumentException (&quot;Invalid salt version&quot;);
		if (salt.charAt(2) == '$')
			off = 3;
		else {
			minor = salt.charAt(2);
			if (minor != 'a' || salt.charAt(3) != '$')
				throw new IllegalArgumentException (&quot;Invalid salt revision&quot;);
			off = 4;
		}

		// Extract number of rounds
		if (salt.charAt(off + 2) > '$')
			throw new IllegalArgumentException (&quot;Missing salt rounds&quot;);
		rounds = Integer.parseInt(salt.substring(off, off + 2));

		real_salt = salt.substring(off + 3, off + 25);
		try {
			passwordb = (password + (minor >= 'a' ? &quot;\000&quot; : &quot;&quot;)).getBytes(&quot;UTF-8&quot;);
		} catch (UnsupportedEncodingException uee) {
			throw new AssertionError(&quot;UTF-8 is not supported&quot;);
		}

		saltb = decode_base64(real_salt, BCRYPT_SALT_LEN);

		B = new BCrypt();
		hashed = B.crypt_raw(passwordb, saltb, rounds,
		    (int[])bf_crypt_ciphertext.clone());

		rs.append(&quot;$2&quot;);
		if (minor >= 'a')
			rs.append(minor);
		rs.append(&quot;$&quot;);
		if (rounds &lt; 10)
			rs.append(&quot;0&quot;);
		if (rounds > 30) {
			throw new IllegalArgumentException(
			    &quot;rounds exceeds maximum (30)&quot;);
		}
		rs.append(Integer.toString(rounds));
		rs.append(&quot;$&quot;);
		rs.append(encode_base64(saltb, saltb.length));
		rs.append(encode_base64(hashed,
		    bf_crypt_ciphertext.length * 4 - 1));
		return rs.toString();
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_TuRkVdEfCS7cth2SLu0w" name="gensalt" specification="_VvTjUEVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_V_TuR0VdEfCS7cth2SLu0w" name="log_rounds">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_V_TuSEVdEfCS7cth2SLu0w" name="random" type="_T-POUEVdEfCS7cth2SLu0w"/>
              <ownedParameter xmi:id="_V_TuSUVdEfCS7cth2SLu0w" direction="return">
                <name xsi:nil="true"/>
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <language>java</language>
              <body>StringBuffer rs = new StringBuffer();
		byte rnd[] = new byte[BCRYPT_SALT_LEN];

		random.nextBytes(rnd);

		rs.append(&quot;$2a$&quot;);
		if (log_rounds &lt; 10)
			rs.append(&quot;0&quot;);
		if (log_rounds > 30) {
			throw new IllegalArgumentException(
			    &quot;log_rounds exceeds maximum (30)&quot;);
		}
		rs.append(Integer.toString(log_rounds));
		rs.append(&quot;$&quot;);
		rs.append(encode_base64(rnd, rnd.length));
		return rs.toString();
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_TuSkVdEfCS7cth2SLu0w" name="gensalt" specification="_VvTjVEVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_V_TuS0VdEfCS7cth2SLu0w" name="log_rounds">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_V_TuTEVdEfCS7cth2SLu0w" direction="return">
                <name xsi:nil="true"/>
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <language>java</language>
              <body>return gensalt(log_rounds, new SecureRandom());
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_TuTUVdEfCS7cth2SLu0w" name="gensalt" specification="_VqD28UVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_V_TuTkVdEfCS7cth2SLu0w" direction="return">
                <name xsi:nil="true"/>
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <language>java</language>
              <body>return gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_TuT0VdEfCS7cth2SLu0w" name="checkpw" specification="_VvTjWEVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_V_TuUEVdEfCS7cth2SLu0w" name="plaintext">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_V_TuUUVdEfCS7cth2SLu0w" name="hashed">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_V_TuUkVdEfCS7cth2SLu0w" direction="return">
                <name xsi:nil="true"/>
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <language>java</language>
              <body>byte hashed_bytes[];
		byte try_bytes[];
		try {
			String try_pw = hashpw(plaintext, hashed);
			hashed_bytes = hashed.getBytes(&quot;UTF-8&quot;);
			try_bytes = try_pw.getBytes(&quot;UTF-8&quot;);
		} catch (UnsupportedEncodingException uee) {
			return false;
		}
		if (hashed_bytes.length != try_bytes.length)
			return false;
		byte ret = 0;
		for (int i = 0; i &lt; try_bytes.length; i++)
			ret |= hashed_bytes[i] ^ try_bytes[i];
		return ret == 0;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_VqD28EVdEfCS7cth2SLu0w" name="init_key" visibility="private" method="_V_THN0VdEfCS7cth2SLu0w"/>
            <ownedOperation xmi:id="_VqD28UVdEfCS7cth2SLu0w" name="gensalt" isStatic="true" method="_V_TuTUVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_VvTjV0VdEfCS7cth2SLu0w" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_VvPR4EVdEfCS7cth2SLu0w" name="encode_base64" visibility="private" isStatic="true" method="_V_THIEVdEfCS7cth2SLu0w" raisedException="_V9l28EVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_VvPR4UVdEfCS7cth2SLu0w" name="d">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VvP48EVdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_VvPR4kVdEfCS7cth2SLu0w" name="len">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_VvPR40VdEfCS7cth2SLu0w" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_VvP48kVdEfCS7cth2SLu0w" name="char64" visibility="private" isStatic="true" method="_V_THJUVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_VvP480VdEfCS7cth2SLu0w" name="x">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#char"/>
              </ownedParameter>
              <ownedParameter xmi:id="_VvP49EVdEfCS7cth2SLu0w" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_VvP49UVdEfCS7cth2SLu0w" name="decode_base64" visibility="private" isStatic="true" method="_V_THKEVdEfCS7cth2SLu0w" raisedException="_V9l28EVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_VvP49kVdEfCS7cth2SLu0w" name="s">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_VvP490VdEfCS7cth2SLu0w" name="maxolen">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_VvQgAEVdEfCS7cth2SLu0w" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VvQgAUVdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_VvQgA0VdEfCS7cth2SLu0w" name="encipher" visibility="private" isLeaf="true" method="_V_THLUVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_VvQgBEVdEfCS7cth2SLu0w" name="lr">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VvQgB0VdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_VvQgBUVdEfCS7cth2SLu0w" name="off">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_VvRHEEVdEfCS7cth2SLu0w" name="streamtoword" visibility="private" isStatic="true" method="_V_THMUVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_VvRHEUVdEfCS7cth2SLu0w" name="data">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VvRHFUVdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_VvRHEkVdEfCS7cth2SLu0w" name="offp">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VvRHF0VdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_VvRHE0VdEfCS7cth2SLu0w" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_VvRuIEVdEfCS7cth2SLu0w" name="key" visibility="private" method="_V_TuMEVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_VvRuIUVdEfCS7cth2SLu0w" name="key">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VvRuI0VdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_VvRuJUVdEfCS7cth2SLu0w" name="ekskey" visibility="private" method="_V_TuM0VdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_VvRuJkVdEfCS7cth2SLu0w" name="data">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VvRuKUVdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_VvRuJ0VdEfCS7cth2SLu0w" name="key">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VvSVMUVdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_VvSVM0VdEfCS7cth2SLu0w" name="crypt_raw" method="_V_TuOEVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_VvSVNEVdEfCS7cth2SLu0w" name="password">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VvS8QUVdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_VvSVNUVdEfCS7cth2SLu0w" name="salt">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VvS8Q0VdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_VvSVNkVdEfCS7cth2SLu0w" name="log_rounds">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_VvSVN0VdEfCS7cth2SLu0w" name="cdata">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VvS8RUVdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_VvSVOEVdEfCS7cth2SLu0w" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VvSVOUVdEfCS7cth2SLu0w" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_VvS8R0VdEfCS7cth2SLu0w" name="hashpw" isStatic="true" method="_V_TuQkVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_VvS8SEVdEfCS7cth2SLu0w" name="password">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_VvS8SUVdEfCS7cth2SLu0w" name="salt">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_VvS8SkVdEfCS7cth2SLu0w" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_VvTjUEVdEfCS7cth2SLu0w" name="gensalt" isStatic="true" method="_V_TuRkVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_VvTjUUVdEfCS7cth2SLu0w" name="log_rounds">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_VvTjUkVdEfCS7cth2SLu0w" name="random" type="_T-POUEVdEfCS7cth2SLu0w"/>
              <ownedParameter xmi:id="_VvTjU0VdEfCS7cth2SLu0w" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_VvTjVEVdEfCS7cth2SLu0w" name="gensalt" isStatic="true" method="_V_TuSkVdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_VvTjVUVdEfCS7cth2SLu0w" name="log_rounds">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_VvTjVkVdEfCS7cth2SLu0w" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_VvTjWEVdEfCS7cth2SLu0w" name="checkpw" isStatic="true" method="_V_TuT0VdEfCS7cth2SLu0w">
              <ownedParameter xmi:id="_VvTjWUVdEfCS7cth2SLu0w" name="plaintext">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_VvTjWkVdEfCS7cth2SLu0w" name="hashed">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_VvUKYEVdEfCS7cth2SLu0w" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
            </ownedOperation>
          </packagedElement>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_Sr41oEVdEfCS7cth2SLu0w" name="json">
        <packagedElement xmi:type="uml:Class" xmi:id="_T-58sEVdEfCS7cth2SLu0w" name="JSONObject"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_UAfREEVdEfCS7cth2SLu0w" name="JSONArray"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_Vol3UEVdEfCS7cth2SLu0w" name="apache">
        <packagedElement xmi:type="uml:Package" xmi:id="_VomeYEVdEfCS7cth2SLu0w" name="poi">
          <packagedElement xmi:type="uml:Package" xmi:id="_VomeYUVdEfCS7cth2SLu0w" name="ss">
            <packagedElement xmi:type="uml:Package" xmi:id="_VomeYkVdEfCS7cth2SLu0w" name="usermodel">
              <packagedElement xmi:type="uml:Interface" xmi:id="_V8nmkEVdEfCS7cth2SLu0w" name="Font"/>
              <packagedElement xmi:type="uml:Interface" xmi:id="_V8rQ8EVdEfCS7cth2SLu0w" name="Cell"/>
              <packagedElement xmi:type="uml:Interface" xmi:id="_V8r4AEVdEfCS7cth2SLu0w" name="CellStyle"/>
              <packagedElement xmi:type="uml:Interface" xmi:id="_V8r4AkVdEfCS7cth2SLu0w" name="Row"/>
            </packagedElement>
          </packagedElement>
          <packagedElement xmi:type="uml:Package" xmi:id="_VomeY0VdEfCS7cth2SLu0w" name="xssf">
            <packagedElement xmi:type="uml:Package" xmi:id="_VomeZEVdEfCS7cth2SLu0w" name="usermodel">
              <packagedElement xmi:type="uml:Class" xmi:id="_V8oNoUVdEfCS7cth2SLu0w" name="XSSFSheet"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_V8oNo0VdEfCS7cth2SLu0w" name="XSSFWorkbook"/>
            </packagedElement>
          </packagedElement>
        </packagedElement>
        <packagedElement xmi:type="uml:Package" xmi:id="_VpZvokVdEfCS7cth2SLu0w" name="tomcat">
          <packagedElement xmi:type="uml:Package" xmi:id="_VpZvo0VdEfCS7cth2SLu0w" name="jakartaee">
            <packagedElement xmi:type="uml:Package" xmi:id="_VpZvpEVdEfCS7cth2SLu0w" name="commons">
              <packagedElement xmi:type="uml:Package" xmi:id="_VpZvpUVdEfCS7cth2SLu0w" name="lang3">
                <packagedElement xmi:type="uml:Class" xmi:id="_V84sUEVdEfCS7cth2SLu0w" name="StringEscapeUtils"/>
              </packagedElement>
            </packagedElement>
          </packagedElement>
        </packagedElement>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_SpKRwEVdEfCS7cth2SLu0w" name="jakarta">
      <packagedElement xmi:type="uml:Package" xmi:id="_SpKRwUVdEfCS7cth2SLu0w" name="servlet">
        <packagedElement xmi:type="uml:Package" xmi:id="_SpKRwkVdEfCS7cth2SLu0w" name="annotation">
          <packagedElement xmi:type="uml:Interface" xmi:id="_T953IUVdEfCS7cth2SLu0w" name="WebServlet"/>
          <packagedElement xmi:type="uml:Interface" xmi:id="_T-nBwUVdEfCS7cth2SLu0w" name="WebFilter"/>
          <packagedElement xmi:type="uml:Interface" xmi:id="_V8tGIEVdEfCS7cth2SLu0w" name="MultipartConfig"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Package" xmi:id="_SpPKQEVdEfCS7cth2SLu0w" name="http">
          <packagedElement xmi:type="uml:Class" xmi:id="_T96eMUVdEfCS7cth2SLu0w" name="HttpServlet"/>
          <packagedElement xmi:type="uml:Interface" xmi:id="_T97FQUVdEfCS7cth2SLu0w" name="HttpServletRequest"/>
          <packagedElement xmi:type="uml:Interface" xmi:id="_T97sUUVdEfCS7cth2SLu0w" name="HttpServletResponse"/>
          <packagedElement xmi:type="uml:Interface" xmi:id="_T-DoIEVdEfCS7cth2SLu0w" name="HttpSession"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_T-zPAUVdEfCS7cth2SLu0w" name="HttpServletResponseWrapper"/>
          <packagedElement xmi:type="uml:Interface" xmi:id="_V8cncEVdEfCS7cth2SLu0w" name="Part"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_T95QEEVdEfCS7cth2SLu0w" name="ServletException"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_T-S4sEVdEfCS7cth2SLu0w" name="Filter"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_T-TfwUVdEfCS7cth2SLu0w" name="FilterChain"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_T-UG0UVdEfCS7cth2SLu0w" name="FilterConfig"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_T-Ut4UVdEfCS7cth2SLu0w" name="ServletRequest"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_T-V8AEVdEfCS7cth2SLu0w" name="ServletResponse"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_T-yA4EVdEfCS7cth2SLu0w" name="ServletOutputStream"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_T-yn8UVdEfCS7cth2SLu0w" name="WriteListener"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_SpWfAEVdEfCS7cth2SLu0w" name="Servlet">
      <packagedElement xmi:type="uml:Package" xmi:id="_VnC_MEVdEfCS7cth2SLu0w" name="NaturalLanguageToSQLTranslator">
        <packagedElement xmi:type="uml:Class" xmi:id="_V8GpMEVdEfCS7cth2SLu0w" name="QueryInfo"/>
        <packagedElement xmi:type="uml:Enumeration" xmi:id="_V8GpMkVdEfCS7cth2SLu0w" name="QueryType"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S4a1wEVdEfCS7cth2SLu0w" name="AdaugaTaskServlet">
        <generalization xmi:id="_UCfcMkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGAqQUVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGAqQkVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIHjEEVdEfCS7cth2SLu0w" name="doPost" specification="_UCe1IEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIHjEUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIHjEkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String nume = request.getParameter(&quot;nume&quot;);&#xD;
     String descriere = request.getParameter(&quot;descriere&quot;);&#xD;
     String idPrj = request.getParameter(&quot;id_prj&quot;);&#xD;
     String idAng = request.getParameter(&quot;id_ang&quot;);&#xD;
     String supervizor = request.getParameter(&quot;supervizor&quot;);&#xD;
     String start = request.getParameter(&quot;start&quot;);&#xD;
     String end = request.getParameter(&quot;end&quot;);&#xD;
     String status = request.getParameter(&quot;status&quot;);&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {&#xD;
             // Generare ID task unic&#xD;
             int newTaskId = 1;&#xD;
             String sqlMaxId = &quot;SELECT MAX(id) as max_id FROM tasks&quot;;&#xD;
             try (PreparedStatement stmt = connection.prepareStatement(sqlMaxId)) {&#xD;
                 ResultSet rs = stmt.executeQuery();&#xD;
                 if (rs.next()) {&#xD;
                     newTaskId = rs.getInt(&quot;max_id&quot;) + 1;&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             // Inserarea noului task&#xD;
             String sql = &quot;INSERT INTO tasks (id, nume, id_prj, id_ang, supervizor, start, end, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#xD;
             try (PreparedStatement pstmt = connection.prepareStatement(sql)) {&#xD;
                 pstmt.setInt(1, newTaskId);&#xD;
                 pstmt.setString(2, nume);&#xD;
                 pstmt.setString(3, idPrj);&#xD;
                 pstmt.setString(4, idAng);&#xD;
                 pstmt.setString(5, supervizor);&#xD;
                 pstmt.setString(6, start);&#xD;
                 pstmt.setString(7, end);&#xD;
                 pstmt.setString(8, status);&#xD;
                 &#xD;
                 int rowsAffected = pstmt.executeUpdate();&#xD;
                 &#xD;
                 if (rowsAffected > 0) {&#xD;
                     // Creare notificare pentru persoana asignată&#xD;
                     if (!idAng.equals(supervizor)) {&#xD;
                         String sqlNotification = &quot;INSERT INTO notificari_task (id_task, id_ang, tip_notificare, mesaj) VALUES (?, ?, ?, ?)&quot;;&#xD;
                         try (PreparedStatement pstmtNotif = connection.prepareStatement(sqlNotification)) {&#xD;
                             pstmtNotif.setInt(1, newTaskId);&#xD;
                             pstmtNotif.setString(2, idAng);&#xD;
                             pstmtNotif.setString(3, &quot;TASK_NOU&quot;);&#xD;
                             pstmtNotif.setString(4, &quot;Ați primit un task nou: &quot; + nume);&#xD;
                             pstmtNotif.executeUpdate();&#xD;
                         } catch (SQLException e) {&#xD;
                             // Ignoră eroarea de notificare - continua fluxul&#xD;
                             e.printStackTrace();&#xD;
                         }&#xD;
                     }&#xD;
                     &#xD;
                     response.sendRedirect(&quot;administrare_taskuri.jsp?action=list&amp;success=true&quot;);&#xD;
                 } else {&#xD;
                     response.sendRedirect(&quot;administrare_taskuri.jsp?action=add&amp;error=true&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     } catch (ClassNotFoundException | SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;administrare_taskuri.jsp?action=add&amp;error=&quot; + e.getMessage());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UCe1IEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIHjEEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCfcMEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UCfcMUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S4mb8EVdEfCS7cth2SLu0w" name="AdaugaSediuServlet">
        <generalization xmi:id="_UCh4cEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIJ_UEVdEfCS7cth2SLu0w" name="doPost" specification="_UChRYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIJ_UUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIJ_UkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String numeSediu = request.getParameter(&quot;nume_sediu&quot;);&#xD;
     String tipSediu = request.getParameter(&quot;tip_sediu&quot;);&#xD;
     &#xD;
     String telefon = request.getParameter(&quot;telefon&quot;);&#xD;
     String email = request.getParameter(&quot;email&quot;);&#xD;
     &#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Utilizare DriverManager în locul DBConn&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         &#xD;
         String sql = &quot;INSERT INTO sedii (nume_sediu, tip_sediu, &quot; +&#xD;
                     &quot;telefon, email) &quot; +&#xD;
                     &quot;VALUES (?, ?, ?, ?)&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setString(1, numeSediu);&#xD;
         pstmt.setString(2, tipSediu);&#xD;
        &#xD;
         pstmt.setString(3, telefon);&#xD;
         pstmt.setString(4, email);&#xD;
       &#xD;
         pstmt.executeUpdate();&#xD;
         pstmt.close();&#xD;
         &#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	        PrintWriter out = response.getWriter();&#xD;
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
	        out.println(&quot;alert('Adaugare sediu cu succes!');&quot;);&#xD;
	        out.println(&quot;window.location.href = 'administrare_sedii.jsp?success=true';&quot;);&#xD;
	        out.println(&quot;&lt;/script>&quot;);&#xD;
	        out.close();&#xD;
	        return;      &#xD;
         &#xD;
     } catch (SQLException | ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	        PrintWriter out = response.getWriter();&#xD;
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
	        out.println(&quot;alert('Nu s-a putut adauga sediul!');&quot;);&#xD;
	        out.println(&quot;window.location.href = 'administrare_sedii.jsp?success=true';&quot;);&#xD;
	        out.println(&quot;&lt;/script>&quot;);&#xD;
	        out.close();&#xD;
	        return;      &#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UChRYEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIJ_UEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UChRYUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UChRYkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S4o4MEVdEfCS7cth2SLu0w" name="AdaugaPozitieServlet">
        <generalization xmi:id="_UCjGkEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGBRUEVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGBRUUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGBRUkVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGBRU0VdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGBRVEVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGBRVUVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIJ_U0VdEfCS7cth2SLu0w" name="doPost" specification="_UCifgEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIJ_VEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIJ_VUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String denumire = request.getParameter(&quot;denumire&quot;);&#xD;
     int salariu = Integer.parseInt(request.getParameter(&quot;salariu&quot;));&#xD;
     int ierarhie = Integer.parseInt(request.getParameter(&quot;ierarhie&quot;));&#xD;
     int departamentSpecific = Integer.parseInt(request.getParameter(&quot;departament_specific&quot;));&#xD;
     String descriere = request.getParameter(&quot;descriere&quot;);&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         String sql = &quot;INSERT INTO tipuri (denumire, salariu, ierarhie, departament_specific, descriere) &quot; +&#xD;
                     &quot;VALUES (?, ?, ?, ?, ?)&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setString(1, denumire);&#xD;
         pstmt.setInt(2, salariu);&#xD;
         pstmt.setInt(3, ierarhie);&#xD;
         pstmt.setInt(4, departamentSpecific);&#xD;
         pstmt.setString(5, descriere);&#xD;
         &#xD;
         pstmt.executeUpdate();&#xD;
         pstmt.close();&#xD;
         &#xD;
         response.sendRedirect(&quot;administrare_pozitii.jsp?success=true&quot;);&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;administrare_pozitii.jsp?error=true&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;administrare_pozitii.jsp?error=driverNotFound&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UCifgEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIJ_U0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCifgUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UCifgkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S4zQQEVdEfCS7cth2SLu0w" name="AdaugaPostServlet">
        <generalization xmi:id="_UCli00VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UILNdkVdEfCS7cth2SLu0w" name="doPost" specification="_UCli0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UILNd0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UILNeEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>//        HttpSession session = request.getSession();&#xD;
//        Integer userTip = (Integer) session.getAttribute(&quot;userTip&quot;);&#xD;
//        Integer userDep = (Integer) session.getAttribute(&quot;userDep&quot;);&#xD;
//        &#xD;
//        // Verificare permisiuni&#xD;
//        if (userTip == null || (userTip != 0 &amp;&amp; (userTip != 3 &amp;&amp; userDep != 1))) {&#xD;
//            response.sendRedirect(&quot;Access.jsp?error=accessDenied&quot;);&#xD;
//            return;&#xD;
//        }&#xD;
     &#xD;
     // Obținerea parametrilor postului&#xD;
     String titlu = request.getParameter(&quot;titlu&quot;);&#xD;
     String req = request.getParameter(&quot;req&quot;);&#xD;
     String resp = request.getParameter(&quot;resp&quot;);&#xD;
     String dom = request.getParameter(&quot;dom&quot;);&#xD;
     String subdom = request.getParameter(&quot;subdom&quot;);&#xD;
     int pozitie = Integer.parseInt(request.getParameter(&quot;pozitie&quot;));&#xD;
     int departament = Integer.parseInt(request.getParameter(&quot;departament&quot;));&#xD;
     Date start = Date.valueOf(request.getParameter(&quot;start&quot;));&#xD;
     Date end = Date.valueOf(request.getParameter(&quot;end&quot;));&#xD;
     int ore = Integer.parseInt(request.getParameter(&quot;ore&quot;));&#xD;
     boolean tip = &quot;1&quot;.equals(request.getParameter(&quot;tip&quot;));&#xD;
     String keywords = request.getParameter(&quot;keywords&quot;);&#xD;
     &#xD;
     // Obținerea parametrilor de locație&#xD;
     String judet = request.getParameter(&quot;judet&quot;);&#xD;
     String localitate = request.getParameter(&quot;localitate&quot;);&#xD;
     String strada = request.getParameter(&quot;strada&quot;);&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         &#xD;
         // Începem o tranzacție pentru a asigura consistența&#xD;
         conn.setAutoCommit(false);&#xD;
         &#xD;
//            // 1. Mai întâi inserăm locația nouă&#xD;
//            String sqlLoc = &quot;INSERT INTO locatii_joburi (strada, oras, judet, tara) VALUES (?, ?, ?, 'România')&quot;;&#xD;
//            PreparedStatement pstmtLoc = conn.prepareStatement(sqlLoc, Statement.RETURN_GENERATED_KEYS);&#xD;
//            pstmtLoc.setString(1, strada);&#xD;
//            pstmtLoc.setString(2, localitate);&#xD;
//            pstmtLoc.setString(3, judet);&#xD;
//           &#xD;
//            pstmtLoc.executeUpdate();&#xD;
//            &#xD;
//            // Obținem ID-ul generat pentru locație&#xD;
//            int idLocatie = 0;&#xD;
//            ResultSet generatedKeys = pstmtLoc.getGeneratedKeys();&#xD;
//            if (generatedKeys.next()) {&#xD;
//                idLocatie = generatedKeys.getInt(1);&#xD;
//            } else {&#xD;
//                throw new SQLException(&quot;Eroare la crearea locației, nu s-a obținut ID-ul.&quot;);&#xD;
//            }&#xD;
//            pstmtLoc.close();&#xD;
//            &#xD;
//            // 2. Apoi inserăm postul&#xD;
         String sql = &quot;INSERT INTO joburi (titlu, req, resp, dom, subdom, pozitie, departament, &quot; +&#xD;
                     &quot;start, end, activ, keywords, ore, tip) &quot; +&#xD;
                     &quot;VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 1, ?, ?, ?)&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setString(1, titlu);&#xD;
         pstmt.setString(2, req);&#xD;
         pstmt.setString(3, resp);&#xD;
         pstmt.setString(4, dom);&#xD;
         pstmt.setString(5, subdom);&#xD;
         pstmt.setInt(6, pozitie);&#xD;
         pstmt.setInt(7, departament);&#xD;
         pstmt.setDate(8, start);&#xD;
         pstmt.setDate(9, end);&#xD;
         //pstmt.setInt(10, idLocatie);&#xD;
         pstmt.setString(10, keywords);&#xD;
         pstmt.setInt(11, ore);&#xD;
         pstmt.setBoolean(12, tip);&#xD;
         &#xD;
         pstmt.executeUpdate();&#xD;
         pstmt.close();&#xD;
         &#xD;
         // Confirmăm tranzacția&#xD;
         conn.commit();&#xD;
         &#xD;
         response.sendRedirect(&quot;administrare_posturi.jsp?action=list&amp;success=true&quot;);&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         // Rollback în caz de eroare&#xD;
         if (conn != null) {&#xD;
             try {&#xD;
                 conn.rollback();&#xD;
             } catch (SQLException ex) {&#xD;
                 ex.printStackTrace();&#xD;
             }&#xD;
         }&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;administrare_posturi.jsp?action=add&amp;error=true&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;administrare_posturi.jsp?action=add&amp;error=true&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { &#xD;
                 conn.setAutoCommit(true);&#xD;
                 conn.close(); &#xD;
             } catch (SQLException e) { &#xD;
                 e.printStackTrace(); &#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UCli0EVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UILNdkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UCli0UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UCli0kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5a7UEVdEfCS7cth2SLu0w" name="AdaugaMembruEchipaServlet">
        <generalization xmi:id="_UC_ygEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGE7sEVdEfCS7cth2SLu0w" name="DB_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGFiwEVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGFiwUVdEfCS7cth2SLu0w" name="DB_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGFiwkVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGFiw0VdEfCS7cth2SLu0w" name="DB_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGFixEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIO30EVdEfCS7cth2SLu0w" name="doPost" specification="_UC_LcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIO30UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIO30kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession();&#xD;
    &#xD;
&#xD;
     int idEchipa = Integer.parseInt(request.getParameter(&quot;id_echipa&quot;));&#xD;
     int idProiect = Integer.parseInt(request.getParameter(&quot;id_prj&quot;));&#xD;
     String[] membri = request.getParameterValues(&quot;membri&quot;);&#xD;
&#xD;
     // Verifică dacă există membri selectați&#xD;
     if (membri == null || membri.length == 0) {&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=members&amp;id_echipa=&quot; + idEchipa &#xD;
                 + &quot;&amp;id_prj=&quot; + idProiect + &quot;&amp;error=noMembersSelected&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         // Disable auto-commit for transaction&#xD;
         conn.setAutoCommit(false);&#xD;
&#xD;
         // Adaugă membri în echipă folosind tabela membrii_echipe&#xD;
         String sql = &quot;INSERT INTO membrii_echipe (id_ang, id_echipa) VALUES (?, ?)&quot;;&#xD;
         try (PreparedStatement pstmt = conn.prepareStatement(sql)) {&#xD;
             &#xD;
             for (String idMembru : membri) {&#xD;
                 pstmt.setInt(1, Integer.parseInt(idMembru));&#xD;
                 pstmt.setInt(2, idEchipa);&#xD;
                 pstmt.addBatch();&#xD;
             }&#xD;
             &#xD;
             int[] results = pstmt.executeBatch();&#xD;
             boolean allSuccessful = true;&#xD;
             &#xD;
             for (int result : results) {&#xD;
                 if (result &lt;= 0) {&#xD;
                     allSuccessful = false;&#xD;
                     break;&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             if (!allSuccessful) {&#xD;
                 conn.rollback();&#xD;
                 response.sendRedirect(&quot;administrare_proiecte.jsp?action=members&amp;id_echipa=&quot; + idEchipa &#xD;
                         + &quot;&amp;id_prj=&quot; + idProiect + &quot;&amp;error=insertFailed&quot;);&#xD;
                 return;&#xD;
             }&#xD;
         }&#xD;
&#xD;
         // Commit transaction&#xD;
         conn.commit();&#xD;
         getServletContext().log(&quot;Membri adăugați cu succes la echipa: &quot; + idEchipa);&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=members&amp;id_echipa=&quot; + idEchipa &#xD;
                 + &quot;&amp;id_prj=&quot; + idProiect + &quot;&amp;success=true&quot;);&#xD;
&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;JDBC Driver not found&quot;, e);&#xD;
         &#xD;
         // Rollback transaction if needed&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             getServletContext().log(&quot;Error during rollback&quot;, ex);&#xD;
         }&#xD;
         &#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=members&amp;id_echipa=&quot; + idEchipa &#xD;
                 + &quot;&amp;id_prj=&quot; + idProiect + &quot;&amp;error=driverNotFound&quot;);&#xD;
     } catch (SQLException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Database error&quot;, e);&#xD;
         &#xD;
         // Rollback transaction&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             getServletContext().log(&quot;Error during rollback&quot;, ex);&#xD;
         }&#xD;
         &#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=members&amp;id_echipa=&quot; + idEchipa &#xD;
                 + &quot;&amp;id_prj=&quot; + idProiect + &quot;&amp;error=databaseError&quot;);&#xD;
     } catch (Exception e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Unexpected error&quot;, e);&#xD;
         &#xD;
         // Rollback transaction&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             getServletContext().log(&quot;Error during rollback&quot;, ex);&#xD;
         }&#xD;
         &#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=members&amp;id_echipa=&quot; + idEchipa &#xD;
                 + &quot;&amp;id_prj=&quot; + idProiect + &quot;&amp;error=unexpectedError&quot;);&#xD;
     } finally {&#xD;
         // Reset auto-commit and close connection&#xD;
         if (conn != null) {&#xD;
             try {&#xD;
                 conn.setAutoCommit(true);&#xD;
                 conn.close();&#xD;
             } catch (SQLException e) {&#xD;
                 getServletContext().log(&quot;Error closing connection&quot;, e);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UC_LcEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIO30EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UC_LcUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UC_LckVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S53nQEVdEfCS7cth2SLu0w" name="AAA">
        <generalization xmi:id="_UDIVY0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGKbQEVdEfCS7cth2SLu0w" name="DB_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGKbQUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGKbQkVdEfCS7cth2SLu0w" name="DB_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGLCUEVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGLCUUVdEfCS7cth2SLu0w" name="DB_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGLCUkVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIRUEUVdEfCS7cth2SLu0w" name="doPost" specification="_UDIVYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIRUEkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIRUE0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String nume = request.getParameter(&quot;nume&quot;);&#xD;
     String descriere = request.getParameter(&quot;descriere&quot;);&#xD;
     Date dataStart = Date.valueOf(request.getParameter(&quot;start&quot;));&#xD;
     Date dataEnd = Date.valueOf(request.getParameter(&quot;end&quot;));&#xD;
     int supervizor = Integer.parseInt(request.getParameter(&quot;supervizor&quot;));&#xD;
&#xD;
     // Validări de bază&#xD;
     if (nume == null || nume.trim().isEmpty() || &#xD;
         descriere == null || descriere.trim().isEmpty() ||&#xD;
         dataStart == null || dataEnd == null) {&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=add&amp;error=invalidData&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     // Verifică dacă data de început este înainte de data de sfârșit&#xD;
     if (dataStart.after(dataEnd)) {&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=add&amp;error=invalidDates&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish the connection using DriverManager instead of DBConn&#xD;
         try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {&#xD;
             &#xD;
             String sql = &quot;INSERT INTO proiecte (nume, descriere, start, end, supervizor) &quot; +&#xD;
                          &quot;VALUES (?, ?, ?, ?, ?)&quot;;&#xD;
             &#xD;
             try (PreparedStatement pstmt = conn.prepareStatement(sql)) {&#xD;
                 pstmt.setString(1, nume);&#xD;
                 pstmt.setString(2, descriere);&#xD;
                 pstmt.setDate(3, dataStart);&#xD;
                 pstmt.setDate(4, dataEnd);&#xD;
                 pstmt.setInt(5, supervizor);&#xD;
&#xD;
                 int rowsAffected = pstmt.executeUpdate();&#xD;
                 &#xD;
                 if (rowsAffected > 0) {&#xD;
                     response.sendRedirect(&quot;administrare_proiecte.jsp?action=list&amp;success=true&quot;);&#xD;
                 } else {&#xD;
                     response.sendRedirect(&quot;administrare_proiecte.jsp?action=add&amp;error=insertFailed&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;JDBC Driver not found&quot;, e);&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=add&amp;error=driverNotFound&quot;);&#xD;
     } catch (SQLException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Database error&quot;, e);&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=add&amp;error=databaseError&quot;);&#xD;
     } catch (Exception e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Unexpected error&quot;, e);&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=add&amp;error=unexpectedError&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UDIVYEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIRUEUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDIVYUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDIVYkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S58fwEVdEfCS7cth2SLu0w" name="AdaugaDenumireServlet">
        <generalization xmi:id="_UDJjg0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGLCU0VdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGLCVEVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGLpYEVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGLpYUVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGLpYkVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGLpY0VdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIRUFEVdEfCS7cth2SLu0w" name="doPost" specification="_UDJjgEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIRUFUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIRUFkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>int tipPozitie = Integer.parseInt(request.getParameter(&quot;tip_pozitie&quot;));&#xD;
     int idDep = Integer.parseInt(request.getParameter(&quot;id_dep&quot;));&#xD;
     String denumireCompleta = request.getParameter(&quot;denumire_completa&quot;);&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         String sql = &quot;INSERT INTO denumiri_pozitii (tip_pozitie, id_dep, denumire_completa, activ) &quot; +&#xD;
                     &quot;VALUES (?, ?, ?, 1)&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setInt(1, tipPozitie);&#xD;
         pstmt.setInt(2, idDep);&#xD;
         pstmt.setString(3, denumireCompleta);&#xD;
         &#xD;
         pstmt.executeUpdate();&#xD;
         pstmt.close();&#xD;
         &#xD;
         response.sendRedirect(&quot;administrare_pozitii.jsp?success=true&quot;);&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         if (e.getMessage().contains(&quot;Duplicate&quot;)) {&#xD;
             response.sendRedirect(&quot;administrare_pozitii.jsp?error=duplicate&quot;);&#xD;
         } else {&#xD;
             e.printStackTrace();&#xD;
             response.sendRedirect(&quot;administrare_pozitii.jsp?error=true&quot;);&#xD;
         }&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;administrare_pozitii.jsp?error=driverNotFound&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UDJjgEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIRUFEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDJjgUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDJjgkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S6ZLsEVdEfCS7cth2SLu0w" name="AdaugaEchipaServlet">
        <generalization xmi:id="_UDKxo0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGMQcEVdEfCS7cth2SLu0w" name="DB_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGMQcUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGMQckVdEfCS7cth2SLu0w" name="DB_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGMQc0VdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGMQdEVdEfCS7cth2SLu0w" name="DB_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGMQdUVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIR7IEVdEfCS7cth2SLu0w" name="doPost" specification="_UDKxoEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIR7IUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIR7IkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession();&#xD;
   &#xD;
&#xD;
     String nume = request.getParameter(&quot;nume&quot;);&#xD;
     int idProiect = Integer.parseInt(request.getParameter(&quot;id_prj&quot;));&#xD;
     int supervizor = Integer.parseInt(request.getParameter(&quot;supervizor&quot;));&#xD;
     String[] membri = request.getParameterValues(&quot;membri&quot;);&#xD;
&#xD;
     // Validări de bază&#xD;
     if (nume == null || nume.trim().isEmpty()) {&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=teams&amp;id=&quot; + idProiect + &quot;&amp;error=invalidTeamName&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         // Disable auto-commit for transaction&#xD;
         conn.setAutoCommit(false);&#xD;
&#xD;
         // Adaugă echipa&#xD;
         String sql = &quot;INSERT INTO echipe (nume, supervizor, id_prj) VALUES (?, ?, ?)&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);&#xD;
         pstmt.setString(1, nume);&#xD;
         pstmt.setInt(2, supervizor);&#xD;
         pstmt.setInt(3, idProiect);&#xD;
         pstmt.executeUpdate();&#xD;
&#xD;
         // Obține ID-ul echipei nou create&#xD;
         ResultSet rs = pstmt.getGeneratedKeys();&#xD;
         int idEchipa = 0;&#xD;
         if (rs.next()) {&#xD;
             idEchipa = rs.getInt(1);&#xD;
         }&#xD;
         rs.close();&#xD;
         pstmt.close();&#xD;
&#xD;
         // Dacă nu s-a creat ID echipă, facem rollback și returnăm eroare&#xD;
         if (idEchipa == 0) {&#xD;
             conn.rollback();&#xD;
             response.sendRedirect(&quot;administrare_proiecte.jsp?action=teams&amp;id=&quot; + idProiect + &quot;&amp;error=teamCreationFailed&quot;);&#xD;
             return;&#xD;
         }&#xD;
&#xD;
         // Adaugă membrii în echipă - folosind tabela membrii_echipe&#xD;
         if (membri != null &amp;&amp; membri.length > 0) {&#xD;
             sql = &quot;INSERT INTO membrii_echipe (id_ang, id_echipa) VALUES (?, ?)&quot;;&#xD;
             pstmt = conn.prepareStatement(sql);&#xD;
&#xD;
             for (String idMembru : membri) {&#xD;
                 pstmt.setInt(1, Integer.parseInt(idMembru));&#xD;
                 pstmt.setInt(2, idEchipa);&#xD;
                 pstmt.addBatch();&#xD;
             }&#xD;
&#xD;
             pstmt.executeBatch();&#xD;
             pstmt.close();&#xD;
         }&#xD;
&#xD;
         // Commit transaction&#xD;
         conn.commit();&#xD;
         getServletContext().log(&quot;Echipa creată cu succes: &quot; + idEchipa);&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=teams&amp;id=&quot; + idProiect + &quot;&amp;success=true&quot;);&#xD;
&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;JDBC Driver not found&quot;, e);&#xD;
         &#xD;
         // Rollback transaction if needed&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             getServletContext().log(&quot;Error during rollback&quot;, ex);&#xD;
         }&#xD;
         &#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=teams&amp;id=&quot; + idProiect + &quot;&amp;error=driverNotFound&quot;);&#xD;
     } catch (SQLException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Database error&quot;, e);&#xD;
         &#xD;
         // Rollback transaction&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             getServletContext().log(&quot;Error during rollback&quot;, ex);&#xD;
         }&#xD;
         &#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=teams&amp;id=&quot; + idProiect + &quot;&amp;error=databaseError&quot;);&#xD;
     } catch (Exception e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Unexpected error&quot;, e);&#xD;
         &#xD;
         // Rollback transaction&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             getServletContext().log(&quot;Error during rollback&quot;, ex);&#xD;
         }&#xD;
         &#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=teams&amp;id=&quot; + idProiect + &quot;&amp;error=unexpectedError&quot;);&#xD;
     } finally {&#xD;
         // Reset auto-commit and close connection&#xD;
         if (conn != null) {&#xD;
             try {&#xD;
                 conn.setAutoCommit(true);&#xD;
                 conn.close();&#xD;
             } catch (SQLException e) {&#xD;
                 getServletContext().log(&quot;Error closing connection&quot;, e);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UDKxoEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIR7IEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDKxoUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDKxokVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S6cPAEVdEfCS7cth2SLu0w" name="AdaugaEchipaServlett">
        <generalization xmi:id="_UDL_w0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGM3gEVdEfCS7cth2SLu0w" name="DB_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGM3gUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGM3gkVdEfCS7cth2SLu0w" name="DB_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGM3g0VdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGM3hEVdEfCS7cth2SLu0w" name="DB_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGNekEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIR7I0VdEfCS7cth2SLu0w" name="doPost" specification="_UDL_wEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIR7JEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIR7JUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession();&#xD;
   &#xD;
&#xD;
     String nume = request.getParameter(&quot;nume&quot;);&#xD;
     int idProiect = Integer.parseInt(request.getParameter(&quot;id_prj&quot;));&#xD;
     int supervizor = Integer.parseInt(request.getParameter(&quot;supervizor&quot;));&#xD;
     String[] membri = request.getParameterValues(&quot;membri&quot;);&#xD;
&#xD;
     // Validări de bază&#xD;
     if (nume == null || nume.trim().isEmpty()) {&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=teams&amp;id=&quot; + idProiect + &quot;&amp;error=invalidTeamName&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         // Disable auto-commit for transaction&#xD;
         conn.setAutoCommit(false);&#xD;
&#xD;
         // Adaugă echipa&#xD;
         String sql = &quot;INSERT INTO echipe (nume, supervizor, id_prj) VALUES (?, ?, ?)&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);&#xD;
         pstmt.setString(1, nume);&#xD;
         pstmt.setInt(2, supervizor);&#xD;
         pstmt.setInt(3, idProiect);&#xD;
         pstmt.executeUpdate();&#xD;
&#xD;
         // Obține ID-ul echipei nou create&#xD;
         ResultSet rs = pstmt.getGeneratedKeys();&#xD;
         int idEchipa = 0;&#xD;
         if (rs.next()) {&#xD;
             idEchipa = rs.getInt(1);&#xD;
         }&#xD;
         rs.close();&#xD;
         pstmt.close();&#xD;
&#xD;
         // Dacă nu s-a creat ID echipă, facem rollback și returnăm eroare&#xD;
         if (idEchipa == 0) {&#xD;
             conn.rollback();&#xD;
             response.sendRedirect(&quot;administrare_proiecte.jsp?action=teams&amp;id=&quot; + idProiect + &quot;&amp;error=teamCreationFailed&quot;);&#xD;
             return;&#xD;
         }&#xD;
&#xD;
         // Adaugă membrii în echipă - folosind tabela membrii_echipe&#xD;
         if (membri != null &amp;&amp; membri.length > 0) {&#xD;
             sql = &quot;INSERT INTO membrii_echipe (id_ang, id_echipa) VALUES (?, ?)&quot;;&#xD;
             pstmt = conn.prepareStatement(sql);&#xD;
&#xD;
             for (String idMembru : membri) {&#xD;
                 pstmt.setInt(1, Integer.parseInt(idMembru));&#xD;
                 pstmt.setInt(2, idEchipa);&#xD;
                 pstmt.addBatch();&#xD;
             }&#xD;
&#xD;
             pstmt.executeBatch();&#xD;
             pstmt.close();&#xD;
         }&#xD;
&#xD;
         // Commit transaction&#xD;
         conn.commit();&#xD;
         getServletContext().log(&quot;Echipa creată cu succes: &quot; + idEchipa);&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=teams&amp;id=&quot; + idProiect + &quot;&amp;success=true&quot;);&#xD;
&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;JDBC Driver not found&quot;, e);&#xD;
         &#xD;
         // Rollback transaction if needed&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             getServletContext().log(&quot;Error during rollback&quot;, ex);&#xD;
         }&#xD;
         &#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=teams&amp;id=&quot; + idProiect + &quot;&amp;error=driverNotFound&quot;);&#xD;
     } catch (SQLException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Database error&quot;, e);&#xD;
         &#xD;
         // Rollback transaction&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             getServletContext().log(&quot;Error during rollback&quot;, ex);&#xD;
         }&#xD;
         &#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=teams&amp;id=&quot; + idProiect + &quot;&amp;error=databaseError&quot;);&#xD;
     } catch (Exception e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Unexpected error&quot;, e);&#xD;
         &#xD;
         // Rollback transaction&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             getServletContext().log(&quot;Error during rollback&quot;, ex);&#xD;
         }&#xD;
         &#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=teams&amp;id=&quot; + idProiect + &quot;&amp;error=unexpectedError&quot;);&#xD;
     } finally {&#xD;
         // Reset auto-commit and close connection&#xD;
         if (conn != null) {&#xD;
             try {&#xD;
                 conn.setAutoCommit(true);&#xD;
                 conn.close();&#xD;
             } catch (SQLException e) {&#xD;
                 getServletContext().log(&quot;Error closing connection&quot;, e);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UDL_wEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIR7I0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDL_wUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDL_wkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S6fSUEVdEfCS7cth2SLu0w" name="AdaugaEvenimentServlet">
        <generalization xmi:id="_UDN08EVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGNekUVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGNekkVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGNek0VdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGOFoEVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGOFoUVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGOFokVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UISiMEVdEfCS7cth2SLu0w" name="doPost" specification="_UDNN4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UISiMUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UISiMkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession();&#xD;
     Integer userTip = (Integer) session.getAttribute(&quot;userTip&quot;);&#xD;
     Integer userDep = (Integer) session.getAttribute(&quot;userDep&quot;);&#xD;
     &#xD;
     // Verificare permisiuni - doar HR&#xD;
     if (userTip == null || (userTip != 3 &amp;&amp; userTip != 1 &amp;&amp; userDep != 1)) {&#xD;
         response.sendRedirect(&quot;Access.jsp?error=accessDenied&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     String nume = request.getParameter(&quot;nume&quot;);&#xD;
     int tip = Integer.parseInt(request.getParameter(&quot;tip&quot;));&#xD;
     Date dataStart = Date.valueOf(request.getParameter(&quot;data_start&quot;));&#xD;
     Time oraStart = Time.valueOf(request.getParameter(&quot;ora_start&quot;) + &quot;:00&quot;);&#xD;
     int locuriMax = Integer.parseInt(request.getParameter(&quot;locuri_max&quot;));&#xD;
     String descriere = request.getParameter(&quot;descriere&quot;);&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         String sql = &quot;INSERT INTO evenimente (nume, tip, data_start, ora_start, locuri_max, descriere) &quot; +&#xD;
                     &quot;VALUES (?, ?, ?, ?, ?, ?)&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setString(1, nume);&#xD;
         pstmt.setInt(2, tip);&#xD;
         pstmt.setDate(3, dataStart);&#xD;
         pstmt.setTime(4, oraStart);&#xD;
         pstmt.setInt(5, locuriMax);&#xD;
         pstmt.setString(6, descriere);&#xD;
         &#xD;
         pstmt.executeUpdate();&#xD;
         pstmt.close();&#xD;
         &#xD;
         response.sendRedirect(&quot;training_conferinte.jsp?success=true&quot;);&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;training_conferinte.jsp?error=true&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;training_conferinte.jsp?error=true&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UDNN4EVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UISiMEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDNN4UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDNN4kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S65iAEVdEfCS7cth2SLu0w" name="DeleteTaskServlet">
        <generalization xmi:id="_UDT7k0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGUzUEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGVaYEVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIU-cEVdEfCS7cth2SLu0w" name="doPost" specification="_UDT7kEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIU-cUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIU-ckVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     JSONObject jsonResponse = new JSONObject();&#xD;
     &#xD;
     String id = request.getParameter(&quot;id&quot;);&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {&#xD;
             // Șterge notificările asociate&#xD;
             String sqlDeleteNotifications = &quot;DELETE FROM notificari_task WHERE id_task = ?&quot;;&#xD;
             try (PreparedStatement pstmtNotif = connection.prepareStatement(sqlDeleteNotifications)) {&#xD;
                 pstmtNotif.setString(1, id);&#xD;
                 pstmtNotif.executeUpdate();&#xD;
             }&#xD;
             &#xD;
             // Șterge task-ul&#xD;
             String sql = &quot;DELETE FROM tasks WHERE id = ?&quot;;&#xD;
             try (PreparedStatement pstmt = connection.prepareStatement(sql)) {&#xD;
                 pstmt.setString(1, id);&#xD;
                 int rowsAffected = pstmt.executeUpdate();&#xD;
                 &#xD;
                 if (rowsAffected > 0) {&#xD;
                     jsonResponse.put(&quot;success&quot;, true);&#xD;
                     jsonResponse.put(&quot;message&quot;, &quot;Task-ul a fost șters cu succes!&quot;);&#xD;
                 } else {&#xD;
                     jsonResponse.put(&quot;success&quot;, false);&#xD;
                     jsonResponse.put(&quot;message&quot;, &quot;Nu s-a putut șterge task-ul!&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     } catch (ClassNotFoundException | SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         jsonResponse.put(&quot;success&quot;, false);&#xD;
         jsonResponse.put(&quot;message&quot;, &quot;Eroare: &quot; + e.getMessage());&#xD;
     }&#xD;
     &#xD;
     out.print(jsonResponse.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UDT7kEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIU-cEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDT7kUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDT7kkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S7GWUEVdEfCS7cth2SLu0w" name="AdaugaProiectServlet">
        <generalization xmi:id="_UDWX00VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGYdsEVdEfCS7cth2SLu0w" name="DB_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGYdsUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGYdskVdEfCS7cth2SLu0w" name="DB_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGZEwEVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGZEwUVdEfCS7cth2SLu0w" name="DB_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGZEwkVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIWMl0VdEfCS7cth2SLu0w" name="doPost" specification="_UDWX0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIWMmEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIWMmUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String nume = request.getParameter(&quot;nume&quot;);&#xD;
     String descriere = request.getParameter(&quot;descriere&quot;);&#xD;
     Date dataStart = Date.valueOf(request.getParameter(&quot;start&quot;));&#xD;
     Date dataEnd = Date.valueOf(request.getParameter(&quot;end&quot;));&#xD;
     int supervizor = Integer.parseInt(request.getParameter(&quot;supervizor&quot;));&#xD;
&#xD;
     // Validări de bază&#xD;
     if (nume == null || nume.trim().isEmpty() || &#xD;
         descriere == null || descriere.trim().isEmpty() ||&#xD;
         dataStart == null || dataEnd == null) {&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=add&amp;error=invalidData&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     // Verifică dacă data de început este înainte de data de sfârșit&#xD;
     if (dataStart.after(dataEnd)) {&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=add&amp;error=invalidDates&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish the connection using DriverManager instead of DBConn&#xD;
         try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {&#xD;
             &#xD;
             String sql = &quot;INSERT INTO proiecte (nume, descriere, start, end, supervizor) &quot; +&#xD;
                          &quot;VALUES (?, ?, ?, ?, ?)&quot;;&#xD;
             &#xD;
             try (PreparedStatement pstmt = conn.prepareStatement(sql)) {&#xD;
                 pstmt.setString(1, nume);&#xD;
                 pstmt.setString(2, descriere);&#xD;
                 pstmt.setDate(3, dataStart);&#xD;
                 pstmt.setDate(4, dataEnd);&#xD;
                 pstmt.setInt(5, supervizor);&#xD;
&#xD;
                 int rowsAffected = pstmt.executeUpdate();&#xD;
                 &#xD;
                 if (rowsAffected > 0) {&#xD;
                     response.sendRedirect(&quot;administrare_proiecte.jsp?action=list&amp;success=true&quot;);&#xD;
                 } else {&#xD;
                     response.sendRedirect(&quot;administrare_proiecte.jsp?action=add&amp;error=insertFailed&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;JDBC Driver not found&quot;, e);&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=add&amp;error=driverNotFound&quot;);&#xD;
     } catch (SQLException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Database error&quot;, e);&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=add&amp;error=databaseError&quot;);&#xD;
     } catch (Exception e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Unexpected error&quot;, e);&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=add&amp;error=unexpectedError&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UDWX0EVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIWMl0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDWX0UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDWX0kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S7KAsEVdEfCS7cth2SLu0w" name="DeleteSediuServlet">
        <generalization xmi:id="_UDXl80VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIWzoEVdEfCS7cth2SLu0w" name="doPost" specification="_UDXl8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIWzoUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIWzokVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json;charset=UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     JSONObject json = new JSONObject();&#xD;
     &#xD;
     int idSediu = Integer.parseInt(request.getParameter(&quot;id_sediu&quot;));&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Utilizare DriverManager în locul DBConn&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         &#xD;
         // Verifică dacă este sediul principal&#xD;
         String checkPrincipal = &quot;SELECT tip_sediu FROM sedii WHERE id_sediu = ?&quot;;&#xD;
         PreparedStatement pstmtCheck = conn.prepareStatement(checkPrincipal);&#xD;
         pstmtCheck.setInt(1, idSediu);&#xD;
         ResultSet rsCheck = pstmtCheck.executeQuery();&#xD;
         &#xD;
         if (rsCheck.next() &amp;&amp; &quot;principal&quot;.equals(rsCheck.getString(&quot;tip_sediu&quot;))) {&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Nu se poate șterge sediul principal!&quot;);&#xD;
             rsCheck.close();&#xD;
             pstmtCheck.close();&#xD;
             out.print(json.toString());&#xD;
             return;&#xD;
         }&#xD;
         rsCheck.close();&#xD;
         pstmtCheck.close();&#xD;
         &#xD;
         // Verifică dacă sediul are angajați&#xD;
         String checkAngajati = &quot;SELECT COUNT(*) as count FROM locatii_useri &quot; +&#xD;
                               &quot;WHERE id_sediu = ?&quot;;&#xD;
         PreparedStatement pstmtAngajati = conn.prepareStatement(checkAngajati);&#xD;
         pstmtAngajati.setInt(1, idSediu);&#xD;
         ResultSet rsAngajati = pstmtAngajati.executeQuery();&#xD;
         &#xD;
         if (rsAngajati.next() &amp;&amp; rsAngajati.getInt(&quot;count&quot;) > 0) {&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Nu se poate șterge un sediu care are angajați!&quot;);&#xD;
             rsAngajati.close();&#xD;
             pstmtAngajati.close();&#xD;
             out.print(json.toString());&#xD;
             return;&#xD;
         }&#xD;
         rsAngajati.close();&#xD;
         pstmtAngajati.close();&#xD;
         &#xD;
         // Șterge sediul&#xD;
         String sql = &quot;DELETE FROM sedii WHERE id_sediu = ?&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setInt(1, idSediu);&#xD;
         &#xD;
         int rowsAffected = pstmt.executeUpdate();&#xD;
         &#xD;
         if (rowsAffected > 0) {&#xD;
             json.put(&quot;success&quot;, true);&#xD;
             json.put(&quot;message&quot;, &quot;Sediul a fost șters cu succes!&quot;);&#xD;
         } else {&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Sediul nu a fost găsit!&quot;);&#xD;
         }&#xD;
         &#xD;
         pstmt.close();&#xD;
         &#xD;
     } catch (SQLException | ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Eroare la ștergerea sediului!&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     out.print(json.toString());&#xD;
     out.flush();&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UDXl8EVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIWzoEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDXl8UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDXl8kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S7W1AEVdEfCS7cth2SLu0w" name="AddAdevServlet">
        <ownedComment xmi:id="_UJTO1UVdEfCS7cth2SLu0w">
          <body>Servlet pentru adăugarea adeverințelor</body>
        </ownedComment>
        <generalization xmi:id="_UDapQ0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGekUEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGekUUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGekUkVdEfCS7cth2SLu0w" name="adeverintaDAO" visibility="private" type="_S4S58EVdEfCS7cth2SLu0w" association="_UKPC8UVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGfLYUVdEfCS7cth2SLu0w" name="URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGfycEVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGfycUVdEfCS7cth2SLu0w" name="USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGfyckVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGfyc0VdEfCS7cth2SLu0w" name="PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGfydEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGgZgEVdEfCS7cth2SLu0w" name="DRIVER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGgZgUVdEfCS7cth2SLu0w" value="&quot;com.mysql.cj.jdbc.Driver&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIYo0EVdEfCS7cth2SLu0w" name="AddAdevServlet" specification="_S7ZRQEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIYo0UVdEfCS7cth2SLu0w" type="_S7W1AEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
     try {&#xD;
         Class.forName(DRIVER);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIYo0kVdEfCS7cth2SLu0w" name="init" specification="_S7Z4UEVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>adeverintaDAO = new AdaugaAdeverintaDAO();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIYo00VdEfCS7cth2SLu0w" name="doGet" specification="_UDaCMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIYo1EVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIYo1UVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.getWriter().append(&quot;Nu se poate face GET pe acest servlet.&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIYo1kVdEfCS7cth2SLu0w" name="doPost" specification="_UDapQEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIYo10VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIYo2EVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Verificare sesiune&#xD;
     HttpSession sesiune = request.getSession(false);&#xD;
     if (sesiune == null) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Nu există sesiune activă!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'login.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     MyUser currentUser = (MyUser) sesiune.getAttribute(&quot;currentUser&quot;);&#xD;
     if (currentUser == null) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Utilizator neconectat!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'login.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Extragere date din formular&#xD;
     int idAngajat = Integer.valueOf(request.getParameter(&quot;userId&quot;));&#xD;
     int tip = Integer.valueOf(request.getParameter(&quot;tip&quot;));&#xD;
     String motiv = request.getParameter(&quot;motiv&quot;);&#xD;
     &#xD;
     // Verificare date&#xD;
     if (motiv == null || motiv.trim().isEmpty()) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Motivul nu poate fi gol!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'addadev.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         // Verifică tipul utilizatorului și setează statusul adeverinței corespunzător&#xD;
         int tipAngajat = determinaTipAngajat(idAngajat);&#xD;
         int status = 0; // Status implicit: neaprobat&#xD;
         &#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;).newInstance();&#xD;
         try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;); // conexiune bd&#xD;
                 PreparedStatement preparedStatement = connection.prepareStatement(&quot;SELECT DISTINCT u.*, t.denumire AS functie, d.nume_dep, t.ierarhie as ierarhie,&quot; +&#xD;
                         &quot;dp.denumire_completa AS denumire FROM useri u &quot; +&#xD;
                         &quot;JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                         &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                         &quot;LEFT JOIN denumiri_pozitii dp ON t.tip = dp.tip_pozitie AND d.id_dep = dp.id_dep &quot; +&#xD;
                         &quot;WHERE u.id = ?&quot;)) {&#xD;
                 preparedStatement.setInt(1, idAngajat);&#xD;
                 ResultSet rs = preparedStatement.executeQuery();&#xD;
                 if (rs.next()) {&#xD;
                 	// extrag date despre userul curent&#xD;
                     &#xD;
                     int userType = rs.getInt(&quot;tip&quot;);&#xD;
                     int userDep = rs.getInt(&quot;id_dep&quot;);&#xD;
                     String functie = rs.getString(&quot;functie&quot;);&#xD;
                     int ierarhie = rs.getInt(&quot;ierarhie&quot;);&#xD;
&#xD;
                     // Funcție helper pentru a determina rolul utilizatorului&#xD;
                     boolean isDirector = (ierarhie &lt; 3) ;&#xD;
                     boolean isSef = (ierarhie >= 4 &amp;&amp; ierarhie &lt;=5);&#xD;
                     boolean isIncepator = (ierarhie >= 10);&#xD;
                     boolean isUtilizatorNormal = !isDirector &amp;&amp; !isSef &amp;&amp; !isIncepator; // tipuri 1, 2, 5-9&#xD;
                     boolean isAdmin = (functie.compareTo(&quot;Administrator&quot;) == 0);&#xD;
                     &#xD;
         &#xD;
         // Dacă utilizatorul este șef (tip = 3), director (tip = 4) sau alt rol superior (tip >= 9),&#xD;
         // statusul va fi direct 1 (aprobat de șef)&#xD;
         if (isDirector || isSef) {&#xD;
             status = 1; // Aprobat de șef&#xD;
         }&#xD;
         &#xD;
         // Creare obiect Adeverinta&#xD;
         Adeverinta adeverinta = new Adeverinta();&#xD;
         adeverinta.setIdAngajat(idAngajat);&#xD;
         adeverinta.setTip(tip);&#xD;
         adeverinta.setMentiuni(motiv);&#xD;
         adeverinta.setStatus(status); // Status stabilit în funcție de tipul angajatului&#xD;
         &#xD;
         // Adăugare în baza de date&#xD;
         int result = adeverintaDAO.incarca(adeverinta);&#xD;
         &#xD;
         if (result > 0) {&#xD;
             // Determinare șef departament pentru notificare doar dacă statusul este 0&#xD;
             int idSef = -1;&#xD;
             if (status == 0) {&#xD;
                 idSef = determinaSef(idAngajat);&#xD;
             }&#xD;
             &#xD;
             // Trimitere răspuns către client&#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             if (status == 1) {&#xD;
                 out.println(&quot;alert('Adeverința a fost adăugată și aprobată automat!');&quot;);&#xD;
             } else {&#xD;
                 out.println(&quot;alert('Adeverința a fost adăugată cu succes și așteaptă aprobarea!');&quot;);&#xD;
             }&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp?pag=1';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
             &#xD;
             // Trimitere email în mod asincron doar dacă e necesar (statusul e 0)&#xD;
             if (status == 0 &amp;&amp; idSef != -1) {&#xD;
                 final int idSefFinal = idSef;&#xD;
                 Thread mailThread = new Thread(() -> {&#xD;
                     try {&#xD;
                         // Se trimite email atât șefului cât și solicitantului&#xD;
                         MailAsincron.trimitereNotificareAdeverintaNoua(idAngajat, idSefFinal, tip, motiv);&#xD;
                     } catch (Exception e) {&#xD;
                         e.printStackTrace();&#xD;
                         System.out.println(&quot;Eroare la trimiterea email-ului: &quot; + e.getMessage());&#xD;
                     }&#xD;
                 });&#xD;
                 mailThread.start();&#xD;
             }&#xD;
         } else {&#xD;
             throw new SQLException(&quot;Nu s-a putut adăuga adeverința în baza de date&quot;);&#xD;
         }&#xD;
                 }&#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Eroare la adăugarea adeverinței: &quot; + e.getMessage() + &quot;');&quot;);&#xD;
         out.println(&quot;window.location.href = 'addadev.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
     }&#xD;
                 }catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Eroare la adăugarea adeverinței: &quot; + e.getMessage() + &quot;');&quot;);&#xD;
         out.println(&quot;window.location.href = 'addadev.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIZP4EVdEfCS7cth2SLu0w" name="determinaTipAngajat" specification="_S7bGcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIZP4UVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIZP4kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>try (Connection conexiune = DriverManager.getConnection(URL, USER, PASSWORD)) {&#xD;
         String sql = &quot;SELECT tip FROM useri WHERE id = ?&quot;;&#xD;
         try (PreparedStatement ps = conexiune.prepareStatement(sql)) {&#xD;
             ps.setInt(1, idAngajat);&#xD;
             try (ResultSet rs = ps.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     return rs.getInt(&quot;tip&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
     return -1; // Nu am găsit angajatul&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIZP40VdEfCS7cth2SLu0w" name="determinaSef" specification="_S7btgUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIZP5EVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIZP5UVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>try (Connection conexiune = DriverManager.getConnection(URL, USER, PASSWORD)) {&#xD;
         // Mai întâi aflăm departamentul angajatului&#xD;
         String sqlDepartament = &quot;SELECT id_dep FROM useri WHERE id = ?&quot;;&#xD;
         try (PreparedStatement psDepartament = conexiune.prepareStatement(sqlDepartament)) {&#xD;
             psDepartament.setInt(1, idAngajat);&#xD;
             try (ResultSet rsDepartament = psDepartament.executeQuery()) {&#xD;
                 if (rsDepartament.next()) {&#xD;
                     int idDepartament = rsDepartament.getInt(&quot;id_dep&quot;);&#xD;
                     &#xD;
                     // Apoi căutăm șeful departamentului (tip = 3)&#xD;
                     String sqlSef = &quot;SELECT id FROM useri WHERE id_dep = ? AND tip = 3&quot;;&#xD;
                     try (PreparedStatement psSef = conexiune.prepareStatement(sqlSef)) {&#xD;
                         psSef.setInt(1, idDepartament);&#xD;
                         try (ResultSet rsSef = psSef.executeQuery()) {&#xD;
                             if (rsSef.next()) {&#xD;
                                 return rsSef.getInt(&quot;id&quot;);&#xD;
                             }&#xD;
                         }&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
     return -1; // Nu am găsit șeful&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S7ZRQEVdEfCS7cth2SLu0w" name="AddAdevServlet" method="_UIYo0EVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S7ZRQUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S7ZRQkVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedComment xmi:id="_UJTO1kVdEfCS7cth2SLu0w">
            <body>Constructor</body>
          </ownedComment>
          <ownedParameter xmi:id="_S7ZRQ0VdEfCS7cth2SLu0w" type="_S7W1AEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S7Z4UEVdEfCS7cth2SLu0w" name="init" method="_UIYo0kVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJTO10VdEfCS7cth2SLu0w">
            <body>Inițializare servlet</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:id="_S7bGcEVdEfCS7cth2SLu0w" name="determinaTipAngajat" visibility="private" method="_UIZP4EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJTO2kVdEfCS7cth2SLu0w">
            <body>Determină tipul unui angajat&#xD;
     * &#xD;
     * @param idAngajat ID-ul angajatului&#xD;
     * @return Tipul angajatului sau -1 dacă nu este găsit</body>
          </ownedComment>
          <ownedParameter xmi:id="_S7bGcUVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S7btgEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S7btgUVdEfCS7cth2SLu0w" name="determinaSef" visibility="private" method="_UIZP40VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJTO20VdEfCS7cth2SLu0w">
            <body>Determină ID-ul șefului departamentului pentru un angajat&#xD;
     * &#xD;
     * @param idAngajat ID-ul angajatului&#xD;
     * @return ID-ul șefului departamentului sau -1 dacă nu este găsit</body>
          </ownedComment>
          <ownedParameter xmi:id="_S7btgkVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S7cUkEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UDaCMEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UIYo00VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJTO2EVdEfCS7cth2SLu0w">
            <body>Metoda GET - nu este implementată, doar afișează un mesaj</body>
          </ownedComment>
          <ownedParameter xmi:id="_UDaCMUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDaCMkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UDapQEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIYo1kVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJTO2UVdEfCS7cth2SLu0w">
            <body>Metoda POST - procesează adăugarea adeverințelor</body>
          </ownedComment>
          <ownedParameter xmi:id="_UDapQUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDapQkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S7gmAEVdEfCS7cth2SLu0w" name="DeletePozitieServlet">
        <generalization xmi:id="_UDcecEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGhAkEVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGhAkUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGhAkkVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGhAk0VdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGhAlEVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGhnoEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIZP5kVdEfCS7cth2SLu0w" name="doPost" specification="_UDb3YEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIZP50VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIZP6EVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json;charset=UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     JSONObject json = new JSONObject();&#xD;
     &#xD;
//        HttpSession session = request.getSession();&#xD;
//        Integer userTip = (Integer) session.getAttribute(&quot;userTip&quot;);&#xD;
//        Integer userDep = (Integer) session.getAttribute(&quot;userDep&quot;);&#xD;
//        &#xD;
//        // Verificare permisiuni - doar Admin HR sau Director&#xD;
//        if (userTip == null || (userTip != 0 &amp;&amp; (userTip != 3 &amp;&amp; userDep != 1))) {&#xD;
//            json.put(&quot;success&quot;, false);&#xD;
//            json.put(&quot;message&quot;, &quot;Nu aveți permisiuni pentru această operațiune!&quot;);&#xD;
//            out.print(json.toString());&#xD;
//            return;&#xD;
//        }&#xD;
     &#xD;
     int tipId = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         conn.setAutoCommit(false);&#xD;
         &#xD;
         // Verifică dacă poziția este folosită de angajați&#xD;
         String checkUsers = &quot;SELECT COUNT(*) as count FROM useri WHERE tip = ?&quot;;&#xD;
         PreparedStatement pstmtCheckUsers = conn.prepareStatement(checkUsers);&#xD;
         pstmtCheckUsers.setInt(1, tipId);&#xD;
         ResultSet rsUsers = pstmtCheckUsers.executeQuery();&#xD;
         &#xD;
         if (rsUsers.next() &amp;&amp; rsUsers.getInt(&quot;count&quot;) > 0) {&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Nu se poate șterge această poziție deoarece este asociată unor angajați!&quot;);&#xD;
             rsUsers.close();&#xD;
             pstmtCheckUsers.close();&#xD;
             out.print(json.toString());&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Verifică dacă poziția este folosită în istoricul promovărilor&#xD;
         String checkHistory = &quot;SELECT COUNT(*) as count FROM istoric_promovari WHERE tip_nou = ? OR tip_vechi = ?&quot;;&#xD;
         PreparedStatement pstmtCheckHistory = conn.prepareStatement(checkHistory);&#xD;
         pstmtCheckHistory.setInt(1, tipId);&#xD;
         pstmtCheckHistory.setInt(2, tipId);&#xD;
         ResultSet rsHistory = pstmtCheckHistory.executeQuery();&#xD;
         &#xD;
         if (rsHistory.next() &amp;&amp; rsHistory.getInt(&quot;count&quot;) > 0) {&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Nu se poate șterge această poziție deoarece este folosită în istoricul angajaților!&quot;);&#xD;
             rsHistory.close();&#xD;
             pstmtCheckHistory.close();&#xD;
             out.print(json.toString());&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Verifică dacă poziția este folosită în joburi&#xD;
         String checkJobs = &quot;SELECT COUNT(*) as count FROM joburi WHERE pozitie = ?&quot;;&#xD;
         PreparedStatement pstmtCheckJobs = conn.prepareStatement(checkJobs);&#xD;
         pstmtCheckJobs.setInt(1, tipId);&#xD;
         ResultSet rsJobs = pstmtCheckJobs.executeQuery();&#xD;
         &#xD;
         if (rsJobs.next() &amp;&amp; rsJobs.getInt(&quot;count&quot;) > 0) {&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Nu se poate șterge această poziție deoarece este folosită în anunțuri de job!&quot;);&#xD;
             rsJobs.close();&#xD;
             pstmtCheckJobs.close();&#xD;
             out.print(json.toString());&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Șterge denumirile specifice pentru această poziție&#xD;
         String deleteDenumiri = &quot;DELETE FROM denumiri_pozitii WHERE tip_pozitie = ?&quot;;&#xD;
         PreparedStatement pstmtDeleteDenumiri = conn.prepareStatement(deleteDenumiri);&#xD;
         pstmtDeleteDenumiri.setInt(1, tipId);&#xD;
         pstmtDeleteDenumiri.executeUpdate();&#xD;
         &#xD;
         // Șterge poziția&#xD;
         String deletePozitie = &quot;DELETE FROM tipuri WHERE tip = ?&quot;;&#xD;
         PreparedStatement pstmtDeletePozitie = conn.prepareStatement(deletePozitie);&#xD;
         pstmtDeletePozitie.setInt(1, tipId);&#xD;
         &#xD;
         int rowsAffected = pstmtDeletePozitie.executeUpdate();&#xD;
         &#xD;
         if (rowsAffected > 0) {&#xD;
             conn.commit();&#xD;
             json.put(&quot;success&quot;, true);&#xD;
             json.put(&quot;message&quot;, &quot;Poziția a fost ștearsă cu succes!&quot;);&#xD;
         } else {&#xD;
             conn.rollback();&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Nu s-a putut șterge poziția!&quot;);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             ex.printStackTrace();&#xD;
         }&#xD;
         e.printStackTrace();&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Eroare la ștergerea poziției: &quot; + e.getMessage());&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Eroare la încărcarea driverului JDBC!&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { &#xD;
                 conn.setAutoCommit(true);&#xD;
                 conn.close(); &#xD;
             } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     out.print(json.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UDb3YEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIZP5kVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDb3YUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDb3YkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S7kQYEVdEfCS7cth2SLu0w" name="AddDepServlet">
        <ownedComment xmi:id="_UJTO3EVdEfCS7cth2SLu0w">
          <body>servlet ce se ocupa cu adaugarea unui departament</body>
        </ownedComment>
        <generalization xmi:id="_UDfhw0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGhnoUVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGhnokVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGhno0VdEfCS7cth2SLu0w" name="depDao" visibility="private" type="_S4OBcEVdEfCS7cth2SLu0w" association="_UKPqAUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIZ28EVdEfCS7cth2SLu0w" name="init" specification="_S7k3cEVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>depDao = new DepDao(); &#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIZ28UVdEfCS7cth2SLu0w" name="doGet" specification="_UDdFgEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIZ28kVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIZ280VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.getWriter().append(&quot;Nu se poate face get =(&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIZ29EVdEfCS7cth2SLu0w" name="doPost" specification="_UDfhwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIZ29UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIZ29kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String nume = request.getParameter(&quot;nume&quot;); // adaug numai numele, id-ul este autoincremental&#xD;
     &#xD;
     if (!NameValidator.validateName(nume)) {&#xD;
     	// functie care verifica daca exita numai literali in nume (si cratima sau spartiu)&#xD;
         response.sendRedirect(&quot;adddep.jsp?n=true&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
     	// adaugare&#xD;
         depDao.addDep(nume);&#xD;
         &#xD;
         // apoi redirectionez la pagina care listeaza si permite modificarea si stergerea departamentelor&#xD;
         // acest lucru il fac pentru ca utilizatorul sa poata vedea ce departamente sunt la un moment dat in institutie &#xD;
         // + sa vada ca departamanetul adaugat se afla printre departamentele existente&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
		    out.println(&quot;alert('Adaugare cu succes!');&quot;);&#xD;
		    out.println(&quot;window.location.href = 'modifdeldep.jsp';&quot;);&#xD;
		    out.println(&quot;&lt;/script>&quot;);&#xD;
		    out.close();&#xD;
		    // trimiterea de mailuri se face in mod asincron&#xD;
		    new Thread(() -> {&#xD;
		        try {&#xD;
		            MailAsincron.send3();&#xD;
		        } catch (Exception e) {&#xD;
		            e.printStackTrace();&#xD;
		        }&#xD;
		    }).start();&#xD;
     } catch (Exception e) {&#xD;
     	// in caz de eroare redirectionez la aceeasi pagina, ca sa poata vedea toate departamentele existente, dar cu alerta diefrita&#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
		    out.println(&quot;alert('Eroare la adaugarea departamentului - motive necunoscute!');&quot;);&#xD;
		    out.println(&quot;window.location.href = 'modifdeldep.jsp';&quot;);&#xD;
		    out.println(&quot;&lt;/script>&quot;);&#xD;
		    out.close();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S7k3cEVdEfCS7cth2SLu0w" name="init" method="_UIZ28EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJTO3UVdEfCS7cth2SLu0w">
            <body>initializare DAO</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:id="_UDdFgEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UIZ28UVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDdFgUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDdFgkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UDfhwEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIZ29EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDfhwUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDfhwkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S7pI4EVdEfCS7cth2SLu0w" name="ApplicationManagementServlet">
        <generalization xmi:id="_UDkaQEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGiOsEVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGi1wEVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGi1wUVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGi1wkVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGi1w0VdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGi1xEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIZ290VdEfCS7cth2SLu0w" name="doGet" specification="_UDgI0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIZ2-EVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIZ2-UVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;user_id&quot;) == null) {&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     String action = request.getParameter(&quot;action&quot;);&#xD;
     if (action == null) action = &quot;list&quot;;&#xD;
     &#xD;
     switch(action) {&#xD;
         case &quot;list&quot;:&#xD;
             listApplications(request, response);&#xD;
             break;&#xD;
         case &quot;delete&quot;:&#xD;
             deleteApplication(request, response);&#xD;
             break;&#xD;
         case &quot;withdraw&quot;:&#xD;
             withdrawApplication(request, response);&#xD;
             break;&#xD;
         default:&#xD;
             listApplications(request, response);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIaeAEVdEfCS7cth2SLu0w" name="doPost" specification="_UDhW8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIaeAUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIaeAkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;user_id&quot;) == null) {&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     String action = request.getParameter(&quot;action&quot;);&#xD;
     if (&quot;apply&quot;.equals(action)) {&#xD;
         applyForJob(request, response);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIaeA0VdEfCS7cth2SLu0w" name="listApplications" specification="_UDh-AEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIaeBEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIaeBUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         HttpSession session = request.getSession();&#xD;
         int userId = (Integer) session.getAttribute(&quot;user_id&quot;);&#xD;
         int userDep = (Integer) session.getAttribute(&quot;user_dep&quot;);&#xD;
         &#xD;
         String sql;&#xD;
         PreparedStatement ps;&#xD;
         &#xD;
         if (userDep == 1) { // HR poate vedea toate aplicările&#xD;
             sql = &quot;SELECT a.*, u.nume, u.prenume, u.email, j.titlu, j.dom, j.subdom, d.nume_dep &quot; +&#xD;
                   &quot;FROM aplicari a &quot; +&#xD;
                   &quot;JOIN useri u ON a.id_ang = u.id &quot; +&#xD;
                   &quot;JOIN joburi j ON a.job_id = j.id &quot; +&#xD;
                   &quot;JOIN departament d ON j.departament = d.id_dep &quot; +&#xD;
                   &quot;ORDER BY a.data_apl DESC&quot;;&#xD;
             ps = conn.prepareStatement(sql);&#xD;
         } else { // Utilizatorii normali văd doar aplicările lor&#xD;
             sql = &quot;SELECT a.*, j.titlu, j.dom, j.subdom, d.nume_dep &quot; +&#xD;
                   &quot;FROM aplicari a &quot; +&#xD;
                   &quot;JOIN joburi j ON a.job_id = j.id &quot; +&#xD;
                   &quot;JOIN departament d ON j.departament = d.id_dep &quot; +&#xD;
                   &quot;WHERE a.id_ang = ? &quot; +&#xD;
                   &quot;ORDER BY a.data_apl DESC&quot;;&#xD;
             ps = conn.prepareStatement(sql);&#xD;
             ps.setInt(1, userId);&#xD;
         }&#xD;
         &#xD;
         ResultSet rs = ps.executeQuery();&#xD;
         request.setAttribute(&quot;applications&quot;, rs);&#xD;
         request.setAttribute(&quot;isHR&quot;, userDep == 1);&#xD;
         &#xD;
         request.getRequestDispatcher(&quot;application-management.jsp&quot;).forward(request, response);&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIaeBkVdEfCS7cth2SLu0w" name="applyForJob" specification="_UDilEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIaeB0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIaeCEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         HttpSession session = request.getSession();&#xD;
         int userId = (Integer) session.getAttribute(&quot;user_id&quot;);&#xD;
         int jobId = Integer.parseInt(request.getParameter(&quot;job_id&quot;));&#xD;
         &#xD;
         // Verifică dacă utilizatorul a aplicat deja&#xD;
         String checkSql = &quot;SELECT COUNT(*) FROM aplicari WHERE job_id = ? AND id_ang = ?&quot;;&#xD;
         PreparedStatement checkPs = conn.prepareStatement(checkSql);&#xD;
         checkPs.setInt(1, jobId);&#xD;
         checkPs.setInt(2, userId);&#xD;
         ResultSet checkRs = checkPs.executeQuery();&#xD;
         &#xD;
         if (checkRs.next() &amp;&amp; checkRs.getInt(1) > 0) {&#xD;
             response.sendRedirect(&quot;JobsServlet?action=detail&amp;id=&quot; + jobId + &quot;&amp;error=already_applied&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Adaugă aplicarea&#xD;
         String sql = &quot;INSERT INTO aplicari (job_id, id_ang, data_apl) VALUES (?, ?, CURDATE())&quot;;&#xD;
         PreparedStatement ps = conn.prepareStatement(sql);&#xD;
         ps.setInt(1, jobId);&#xD;
         ps.setInt(2, userId);&#xD;
         &#xD;
         int result = ps.executeUpdate();&#xD;
         &#xD;
         if (result > 0) {&#xD;
             response.sendRedirect(&quot;JobsServlet?action=detail&amp;id=&quot; + jobId + &quot;&amp;success=true&quot;);&#xD;
         } else {&#xD;
             response.sendRedirect(&quot;JobsServlet?action=detail&amp;id=&quot; + jobId + &quot;&amp;error=failed&quot;);&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIbFEEVdEfCS7cth2SLu0w" name="deleteApplication" specification="_UDjMIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIbFEUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIbFEkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         int applicationId = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
         HttpSession session = request.getSession();&#xD;
         int userDep = (Integer) session.getAttribute(&quot;user_dep&quot;);&#xD;
         &#xD;
         // Doar HR poate șterge aplicări&#xD;
         if (userDep != 1) {&#xD;
             response.sendRedirect(&quot;ApplicationManagementServlet?error=unauthorized&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         String sql = &quot;DELETE FROM aplicari WHERE id = ?&quot;;&#xD;
         PreparedStatement ps = conn.prepareStatement(sql);&#xD;
         ps.setInt(1, applicationId);&#xD;
         &#xD;
         int result = ps.executeUpdate();&#xD;
         &#xD;
         if (result > 0) {&#xD;
             response.sendRedirect(&quot;ApplicationManagementServlet?success=deleted&quot;);&#xD;
         } else {&#xD;
             response.sendRedirect(&quot;ApplicationManagementServlet?error=delete_failed&quot;);&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIbFE0VdEfCS7cth2SLu0w" name="withdrawApplication" specification="_UDjzMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIbFFEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIbFFUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         int applicationId = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
         HttpSession session = request.getSession();&#xD;
         int userId = (Integer) session.getAttribute(&quot;user_id&quot;);&#xD;
         &#xD;
         // Verifică dacă aplicarea aparține utilizatorului curent&#xD;
         String checkSql = &quot;SELECT id_ang FROM aplicari WHERE id = ?&quot;;&#xD;
         PreparedStatement checkPs = conn.prepareStatement(checkSql);&#xD;
         checkPs.setInt(1, applicationId);&#xD;
         ResultSet checkRs = checkPs.executeQuery();&#xD;
         &#xD;
         if (checkRs.next() &amp;&amp; checkRs.getInt(&quot;id_ang&quot;) == userId) {&#xD;
             // Șterge aplicarea&#xD;
             String sql = &quot;DELETE FROM aplicari WHERE id = ?&quot;;&#xD;
             PreparedStatement ps = conn.prepareStatement(sql);&#xD;
             ps.setInt(1, applicationId);&#xD;
             &#xD;
             int result = ps.executeUpdate();&#xD;
             &#xD;
             if (result > 0) {&#xD;
                 response.sendRedirect(&quot;ApplicationManagementServlet?success=withdrawn&quot;);&#xD;
             } else {&#xD;
                 response.sendRedirect(&quot;ApplicationManagementServlet?error=withdraw_failed&quot;);&#xD;
             }&#xD;
         } else {&#xD;
             response.sendRedirect(&quot;ApplicationManagementServlet?error=unauthorized&quot;);&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UDgI0EVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UIZ290VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDgv4EVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDgv4UVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UDhW8EVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIaeAEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDhW8UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDhW8kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UDh-AEVdEfCS7cth2SLu0w" name="listApplications" visibility="private" method="_UIaeA0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDh-AUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDh-AkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UDilEEVdEfCS7cth2SLu0w" name="applyForJob" visibility="private" method="_UIaeBkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDilEUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDilEkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UDjMIEVdEfCS7cth2SLu0w" name="deleteApplication" visibility="private" method="_UIbFEEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDjMIUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDjMIkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UDjzMEVdEfCS7cth2SLu0w" name="withdrawApplication" visibility="private" method="_UIbFE0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDjzMUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDjzMkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S7xrwEVdEfCS7cth2SLu0w" name="AprobAdevDirServlet">
        <ownedComment xmi:id="_UJT14EVdEfCS7cth2SLu0w">
          <body>Servlet implementation class AprobAdevDirServlet</body>
        </ownedComment>
        <generalization xmi:id="_UDmPc0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGjc0EVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGjc0UVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIbFFkVdEfCS7cth2SLu0w" name="AprobAdevDirServlet" specification="_S7y54EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIbFF0VdEfCS7cth2SLu0w" type="_S7xrwEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
     // TODO Auto-generated constructor stub&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIbsIEVdEfCS7cth2SLu0w" name="doPost" specification="_UDlBUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIbsIUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIbsIkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Verificare sesiune și utilizator conectat&#xD;
     HttpSession sesiune = request.getSession(false);&#xD;
     if (sesiune == null) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Nu există sesiune activă!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'login.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     MyUser currentUser = (MyUser) sesiune.getAttribute(&quot;currentUser&quot;);&#xD;
     if (currentUser == null) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Utilizator neconectat!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'login.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Verifica dacă utilizatorul are rol de director&#xD;
     int userType = currentUser.getTip();&#xD;
     boolean isDirector = userType == 0 || userType > 15;&#xD;
     if (!isDirector) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Nu aveți permisiunea de a aproba adeverințe ca director!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Extrage parametrii&#xD;
     int idAdeverinta;&#xD;
     String motivAprobarii = request.getParameter(&quot;reason&quot;);&#xD;
     &#xD;
     try {&#xD;
         idAdeverinta = Integer.parseInt(request.getParameter(&quot;idadev&quot;));&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('ID adeverință invalid!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     Connection conn = null;&#xD;
     PreparedStatement verificareStmt = null;&#xD;
     PreparedStatement updateStmt = null;&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         conn.setAutoCommit(false); // Incepe tranzacția&#xD;
         &#xD;
         // Verifică existența adeverinței și starea ei&#xD;
         String sqlVerificare = &quot;SELECT a.id_ang, a.status, u.id_dep FROM adeverinte a &quot; +&#xD;
                                &quot;JOIN useri u ON a.id_ang = u.id WHERE a.id = ?&quot;;&#xD;
         verificareStmt = conn.prepareStatement(sqlVerificare);&#xD;
         verificareStmt.setInt(1, idAdeverinta);&#xD;
         &#xD;
         ResultSet rs = verificareStmt.executeQuery();&#xD;
         &#xD;
         if (!rs.next()) {&#xD;
             conn.rollback();&#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Adeverința nu există!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         int status = rs.getInt(&quot;status&quot;);&#xD;
         int idAngajat = rs.getInt(&quot;id_ang&quot;);&#xD;
         int idDepartament = rs.getInt(&quot;id_dep&quot;);&#xD;
         &#xD;
         // Verifică dacă adeverința este în starea corectă pentru aprobare de director (status = 1 sau 0 pentru cazuri speciale)&#xD;
         boolean statusValid = status == 1;  // Normal: aprobat de șef&#xD;
         &#xD;
         // Directorii pot aproba direct și adeverințele propriilor șefi sau alte cazuri speciale&#xD;
         if (status == 0) {&#xD;
             // Verifică dacă angajatul este șef (tip = 3) sau are alt rol special&#xD;
             String sqlVerificaSef = &quot;SELECT tip FROM useri WHERE id = ?&quot;;&#xD;
             try (PreparedStatement stmtSef = conn.prepareStatement(sqlVerificaSef)) {&#xD;
                 stmtSef.setInt(1, idAngajat);&#xD;
                 ResultSet rsSef = stmtSef.executeQuery();&#xD;
                 if (rsSef.next()) {&#xD;
                     int tipAngajat = rsSef.getInt(&quot;tip&quot;);&#xD;
                     if (tipAngajat == 3 || tipAngajat >= 10) {&#xD;
                         statusValid = true;  // Permitem directorului să aprobe direct adeverințele șefilor&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         if (!statusValid) {&#xD;
             conn.rollback();&#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Adeverința nu este în starea care permite aprobarea de către director!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
//            // Verifică dacă directorul este din același departament cu angajatul&#xD;
//            int userDepartament = currentUser.getDepartament();&#xD;
//            if (idDepartament != userDepartament) {&#xD;
//                conn.rollback();&#xD;
//                response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
//                PrintWriter out = response.getWriter();&#xD;
//                out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
//                out.println(&quot;alert('Nu puteți aproba adeverințe pentru angajați din alte departamente!');&quot;);&#xD;
//                out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
//                out.println(&quot;&lt;/script>&quot;);&#xD;
//                out.close();&#xD;
//                return;&#xD;
//            }&#xD;
         &#xD;
         // Actualizează starea adeverinței la &quot;Aprobat director&quot; (status = 2)&#xD;
         String sqlUpdate;&#xD;
         if (motivAprobarii != null &amp;&amp; !motivAprobarii.trim().isEmpty()) {&#xD;
             sqlUpdate = &quot;UPDATE adeverinte SET status = 2, modif = CURDATE(), motiv = ? WHERE id = ?&quot;;&#xD;
             updateStmt = conn.prepareStatement(sqlUpdate);&#xD;
             updateStmt.setString(1, motivAprobarii);&#xD;
             updateStmt.setInt(2, idAdeverinta);&#xD;
         } else {&#xD;
             sqlUpdate = &quot;UPDATE adeverinte SET status = 2, modif = CURDATE() WHERE id = ?&quot;;&#xD;
             updateStmt = conn.prepareStatement(sqlUpdate);&#xD;
             updateStmt.setInt(1, idAdeverinta);&#xD;
         }&#xD;
         &#xD;
         int result = updateStmt.executeUpdate();&#xD;
         &#xD;
         if (result > 0) {&#xD;
             conn.commit(); // Confirmă tranzacția&#xD;
             &#xD;
             // Trimite notificare prin email&#xD;
             final int finalIdAngajat = idAngajat;&#xD;
             final int finalIdAdeverinta = idAdeverinta;&#xD;
             &#xD;
             Thread emailThread = new Thread(() -> {&#xD;
                 try {&#xD;
                     MailAsincron.trimitereNotificareAdeverintaAprobataDirector(finalIdAngajat, finalIdAdeverinta);&#xD;
                 } catch (Exception e) {&#xD;
                     e.printStackTrace();&#xD;
                 }&#xD;
             });&#xD;
             &#xD;
             emailThread.start();&#xD;
             &#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Adeverința a fost aprobată cu succes!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
         } else {&#xD;
             conn.rollback();&#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Nu s-a putut aproba adeverința!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             ex.printStackTrace();&#xD;
         }&#xD;
         &#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Eroare la aprobarea adeverinței: &quot; + e.getMessage() + &quot;');&quot;);&#xD;
         out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
     } finally {&#xD;
         try {&#xD;
             if (verificareStmt != null) verificareStmt.close();&#xD;
             if (updateStmt != null) updateStmt.close();&#xD;
             if (conn != null) {&#xD;
                 conn.setAutoCommit(true); // Resetează autocommit&#xD;
                 conn.close();&#xD;
             }&#xD;
         } catch (SQLException e) {&#xD;
             e.printStackTrace();&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIbsI0VdEfCS7cth2SLu0w" name="doGet" specification="_UDmPcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIbsJEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIbsJUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doPost(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S7y54EVdEfCS7cth2SLu0w" name="AprobAdevDirServlet" method="_UIbFFkVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S7zg8EVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S7zg8UVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_S7zg8kVdEfCS7cth2SLu0w" type="_S7xrwEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UDlBUEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIbsIEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDloYEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDloYUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UDmPcEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UIbsI0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDmPcUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDmPckVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S74ZcEVdEfCS7cth2SLu0w" name="AprobAdevSef">
        <ownedComment xmi:id="_UJT14UVdEfCS7cth2SLu0w">
          <body>Servlet pentru aprobarea adeverințelor de către șef</body>
        </ownedComment>
        <generalization xmi:id="_UDoEo0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGkD4EVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGkD4UVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIbsJkVdEfCS7cth2SLu0w" name="AprobAdevSef" specification="_S75nkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIbsJ0VdEfCS7cth2SLu0w" type="_S74ZcEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIbsKEVdEfCS7cth2SLu0w" name="doPost" specification="_UDm2gEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIbsKUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIbsKkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Verificare sesiune și utilizator conectat&#xD;
     HttpSession sesiune = request.getSession(false);&#xD;
     if (sesiune == null) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Nu există sesiune activă!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'login.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     MyUser currentUser = (MyUser) sesiune.getAttribute(&quot;currentUser&quot;);&#xD;
     if (currentUser == null) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Utilizator neconectat!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'login.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Verifica dacă utilizatorul are rol de șef&#xD;
     int userType = currentUser.getTip();&#xD;
     boolean isSef = userType == 3 || (userType >= 10 &amp;&amp; userType &lt;= 15);&#xD;
     if (!isSef) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Nu aveți permisiunea de a aproba adeverințe ca șef!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Extrage parametrii&#xD;
     int idAdeverinta;&#xD;
     String motivAprobarii = request.getParameter(&quot;reason&quot;);&#xD;
     &#xD;
     try {&#xD;
         idAdeverinta = Integer.parseInt(request.getParameter(&quot;idadev&quot;));&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('ID adeverință invalid!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     Connection conn = null;&#xD;
     PreparedStatement verificareStmt = null;&#xD;
     PreparedStatement updateStmt = null;&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         conn.setAutoCommit(false); // Incepe tranzacția&#xD;
         &#xD;
         // Verifică existența adeverinței și starea ei&#xD;
         String sqlVerificare = &quot;SELECT a.id_ang, a.status, u.id_dep FROM adeverinte a &quot; +&#xD;
                                &quot;JOIN useri u ON a.id_ang = u.id WHERE a.id = ?&quot;;&#xD;
         verificareStmt = conn.prepareStatement(sqlVerificare);&#xD;
         verificareStmt.setInt(1, idAdeverinta);&#xD;
         &#xD;
         ResultSet rs = verificareStmt.executeQuery();&#xD;
         &#xD;
         if (!rs.next()) {&#xD;
             conn.rollback();&#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Adeverința nu există!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         int status = rs.getInt(&quot;status&quot;);&#xD;
         int idAngajat = rs.getInt(&quot;id_ang&quot;);&#xD;
         int idDepartament = rs.getInt(&quot;id_dep&quot;);&#xD;
         &#xD;
         // Verifică dacă adeverința este în starea corectă pentru aprobare de șef (status = 0)&#xD;
         if (status != 0) {&#xD;
             conn.rollback();&#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Adeverința nu este în starea care permite aprobarea de către șef!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Actualizează starea adeverinței la &quot;Aprobat șef&quot; (status = 1)&#xD;
         String sqlUpdate = &quot;UPDATE adeverinte SET status = 1, modif = CURDATE(), motiv = ? WHERE id = ?&quot;;&#xD;
         updateStmt = conn.prepareStatement(sqlUpdate);&#xD;
         updateStmt.setString(1, motivAprobarii);&#xD;
         updateStmt.setInt(2, idAdeverinta);&#xD;
         &#xD;
         int result = updateStmt.executeUpdate();&#xD;
         &#xD;
         if (result > 0) {&#xD;
             conn.commit(); // Confirmă tranzacția&#xD;
             &#xD;
             // Trimite notificare prin email&#xD;
             final int finalIdAngajat = idAngajat;&#xD;
             final int finalIdAdeverinta = idAdeverinta;&#xD;
             &#xD;
             Thread emailThread = new Thread(() -> {&#xD;
                 try {&#xD;
                     MailAsincron.trimitereNotificareAdeverintaAprobataSef(finalIdAngajat, finalIdAdeverinta);&#xD;
                 } catch (Exception e) {&#xD;
                     e.printStackTrace();&#xD;
                 }&#xD;
             });&#xD;
             &#xD;
             emailThread.start();&#xD;
             &#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Adeverința a fost aprobată cu succes!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
         } else {&#xD;
             conn.rollback();&#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Nu s-a putut aproba adeverința!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             ex.printStackTrace();&#xD;
         }&#xD;
         &#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Eroare la aprobarea adeverinței: &quot; + e.getMessage() + &quot;');&quot;);&#xD;
         out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
     } finally {&#xD;
         try {&#xD;
             if (verificareStmt != null) verificareStmt.close();&#xD;
             if (updateStmt != null) updateStmt.close();&#xD;
             if (conn != null) {&#xD;
                 conn.setAutoCommit(true); // Resetează autocommit&#xD;
                 conn.close();&#xD;
             }&#xD;
         } catch (SQLException e) {&#xD;
             e.printStackTrace();&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIcTMEVdEfCS7cth2SLu0w" name="doGet" specification="_UDoEoEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIcTMUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIcTMkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doPost(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S75nkEVdEfCS7cth2SLu0w" name="AprobAdevSef" method="_UIbsJkVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S75nkUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S76OoEVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_S76OoUVdEfCS7cth2SLu0w" type="_S74ZcEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UDm2gEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIbsKEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDm2gUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDndkEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UDoEoEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UIcTMEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDoEoUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDoEokVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S78q4EVdEfCS7cth2SLu0w" name="AprobDirServlet">
        <ownedComment xmi:id="_UJT14kVdEfCS7cth2SLu0w">
          <body>Servlet ce se ocupa cu aprobarea unui concediu</body>
        </ownedComment>
        <generalization xmi:id="_UDqg4kVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGkD4kVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGkq8EVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGkq8UVdEfCS7cth2SLu0w" name="dep" visibility="private" type="_S3trIEVdEfCS7cth2SLu0w" association="_UKQ4IUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIcTM0VdEfCS7cth2SLu0w" name="init" specification="_S795AEVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>dep = new AprobDirDao();
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIcTNEVdEfCS7cth2SLu0w" name="doGet" specification="_UDorsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIcTNUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIcTNkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doPost(request, response);
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIc6QEVdEfCS7cth2SLu0w" name="doPost" specification="_UDp50EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIc6QUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIc6QkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession sesiune = request.getSession(false); 
     // o verificare in plus, la un debug, asta ca sa ma asigur ca extrag ceva valid si nu am erori dupa
     if (sesiune == null) {
     	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
         PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Sesiune nula!');&quot;);
		    out.println(&quot;window.location.href = 'login.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
         return;
     }
     
     MyUser utilizatorcurent = (MyUser) sesiune.getAttribute(&quot;currentUser&quot;);
     if (utilizatorcurent == null) {
     	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
         PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Nu e conectat niciun utilizator!');&quot;);
		    out.println(&quot;window.location.href = 'login.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
         return;
     }

     int idconcediu = Integer.parseInt(request.getParameter(&quot;idcon&quot;));
     String motiv = request.getParameter(&quot;reason&quot;);
     //System.out.println(motiv);
         int id = -1;
 
     try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {
         dep.aprobare(idconcediu, motiv); // fac aprobarea in DAO, aprobare = schimbare status
         id = getIdAng(idconcediu, conexiune);
         final int id2 = id; 
        // notificare asincrona
         new Thread(() -> {
             try {
                 MailAsincron.send6(id2, idconcediu);
             } catch (Exception e) {
                 e.printStackTrace();
             }
         }).start();
         
         // apoi redirectionez la pagina care listeaza concediile
         // acest lucru il fac pentru ca utilizatorul sa poata vedea ce concedii sunt la un moment dat in institutie 
         // + sa vada ca s-a aprobat cu succes   
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);
         PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Aprobare cu succes!');&quot;);
		    out.println(&quot;window.location.href = 'vizualizareconcedii.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
     } catch (SQLException e) {
     	// in caz de eroare redirectionez la aceeasi pagina, ca sa poata vedea ca nu s-a aprobat
         printSQLException(e);
         e.printStackTrace();
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);
         PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Eroare la aprobare la baza de date!');&quot;);
		    out.println(&quot;window.location.href = 'concediinoidir.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
     } catch (ClassNotFoundException e) {
     	// in caz de eroare redirectionez la aceeasi pagina, ca sa poata vedea ca nu s-a aprobat
     	e.printStackTrace();
     	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
         PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Eroare la aprobare - nu s-a gasit clasa, debug only!');&quot;);
		    out.println(&quot;window.location.href = 'concediinoidir.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
		}
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIc6Q0VdEfCS7cth2SLu0w" name="getIdAng" specification="_UDp500VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIc6REVdEfCS7cth2SLu0w" name="idconcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIc6RUVdEfCS7cth2SLu0w" name="conexiune" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIc6RkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>String sql = &quot;SELECT id_ang FROM concedii WHERE id = ?&quot;;
     try (PreparedStatement stmt = conexiune.prepareStatement(sql)) {
         stmt.setInt(1, idconcediu);
         ResultSet rezultat = stmt.executeQuery();
         if (rezultat.next()) {
             return rezultat.getInt(&quot;id_ang&quot;);
         }
     }
     return -1; 
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIc6R0VdEfCS7cth2SLu0w" name="printSQLException" specification="_UDqg4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIc6SEVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {
         if (e instanceof SQLException) {
             e.printStackTrace(System.err);
             System.err.println(&quot;Stare: &quot; + ((SQLException) e).getSQLState());
             System.err.println(&quot;Cod eroare: &quot; + ((SQLException) e).getErrorCode());
             System.err.println(&quot;Explicatie: &quot; + e.getMessage());
             Throwable t = ex.getCause();
             while (t != null) {
                 System.out.println(&quot;Cauza: &quot; + t);
                 t = t.getCause();
             }
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S795AEVdEfCS7cth2SLu0w" name="init" method="_UIcTM0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJT140VdEfCS7cth2SLu0w">
            <body>initializare DAO</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:id="_UDorsEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UIcTNEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJT15EVdEfCS7cth2SLu0w">
            <body>teoretic nu poate afce doGet, practic eu cand aprob fac o cerere get si dau sa o procesez ca pe un post</body>
          </ownedComment>
          <ownedParameter xmi:id="_UDpSwEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDpSwUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UDp50EVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIc6QEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDp50UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDp50kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UDp500VdEfCS7cth2SLu0w" name="getIdAng" visibility="private" method="_UIc6Q0VdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJT15UVdEfCS7cth2SLu0w">
            <body>Functie ce afla id-ul unui angajat dintr-un concediu
     * @param idconcediu
     * @param conexiune
     * @return id angajat sau -1 daca nu a gasit nimic
     * @throws SQLException</body>
          </ownedComment>
          <ownedParameter xmi:id="_UDp51EVdEfCS7cth2SLu0w" name="idconcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UDp51UVdEfCS7cth2SLu0w" name="conexiune" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDp51kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UDqg4EVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" isStatic="true" method="_UIc6R0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJT15kVdEfCS7cth2SLu0w">
            <body>Afiseaza frumos / Pretty print o eroare dintr-o baza de date
	 * @param ex</body>
          </ownedComment>
          <ownedParameter xmi:id="_UDqg4UVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S8CxgEVdEfCS7cth2SLu0w" name="AprobSefServlet">
        <generalization xmi:id="_UDtkMkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGlSAEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGlSAUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGmgIEVdEfCS7cth2SLu0w" name="dep" visibility="private" type="_S3yjoEVdEfCS7cth2SLu0w" association="_UKQ4JEVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIdhUEVdEfCS7cth2SLu0w" name="init" specification="_S8DYkEVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>dep = new AprobSefDao();
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIdhUUVdEfCS7cth2SLu0w" name="doGet" specification="_UDrvAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIdhUkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIdhU0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doPost(request, response);
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIdhVEVdEfCS7cth2SLu0w" name="doPost" specification="_UDsWEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIdhVUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIdhVkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession sesiune = request.getSession(false); 
     // o verificare in plus, la un debug, asta ca sa ma asigur ca extrag ceva valid si nu am erori dupa
     if (sesiune == null) {
     	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
         PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Sesiune nula!');&quot;);
		    out.println(&quot;window.location.href = 'login.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
         return;
     }
     
     MyUser utilizatorcurent = (MyUser) sesiune.getAttribute(&quot;currentUser&quot;);
     if (utilizatorcurent == null) {
     	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
         PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Nu e conectat niciun utilizator!');&quot;);
		    out.println(&quot;window.location.href = 'login.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
         return;
     }

     int idconcediu = Integer.parseInt(request.getParameter(&quot;idcon&quot;));
     String motiv = request.getParameter(&quot;reason&quot;);
     //System.out.println(motiv);
         int id = -1;
 
     try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {
         dep.aprobare(idconcediu, motiv); // fac aprobarea in DAO, aprobare = schimbare status
         id = getIdAng(idconcediu, conexiune);
         
         final int id2 = id; 
        // notificare asincrona
         new Thread(() -> {
             try {
                 MailAsincron.send7(id2, idconcediu);
             } catch (Exception e) {
                 e.printStackTrace();
             }
         }).start();
         
	    	 // apoi redirectionez la pagina care listeaza concediile
	            // acest lucru il fac pentru ca utilizatorul sa poata vedea ce concedii sunt la un moment dat in institutie 
	            // + sa vada ca s-a aprobat cu succes   
	            response.setContentType(&quot;text/html;charset=UTF-8&quot;);
	            PrintWriter out = response.getWriter();
			    out.println(&quot;&lt;script type='text/javascript'>&quot;);
			    out.println(&quot;alert('Aprobare cu succes!');&quot;);
			    out.println(&quot;window.location.href = 'vizualizareconcedii.jsp';&quot;);
			    out.println(&quot;&lt;/script>&quot;);
			    out.close();
	        } catch (SQLException e) {
	        	// in caz de eroare redirectionez la aceeasi pagina, ca sa poata vedea ca nu s-a aprobat
	            printSQLException(e);
	            e.printStackTrace();
	            response.setContentType(&quot;text/html;charset=UTF-8&quot;);
	            PrintWriter out = response.getWriter();
			    out.println(&quot;&lt;script type='text/javascript'>&quot;);
			    out.println(&quot;alert('Eroare la aprobare la baza de date!');&quot;);
			    out.println(&quot;window.location.href = 'concediinoidir.jsp';&quot;);
			    out.println(&quot;&lt;/script>&quot;);
			    out.close();
	        } catch (ClassNotFoundException e) {
	        	// in caz de eroare redirectionez la aceeasi pagina, ca sa poata vedea ca nu s-a aprobat
	        	e.printStackTrace();
	        	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
	            PrintWriter out = response.getWriter();
			    out.println(&quot;&lt;script type='text/javascript'>&quot;);
			    out.println(&quot;alert('Eroare la aprobare - nu s-a gasit clasa, debug only!');&quot;);
			    out.println(&quot;window.location.href = 'concediinoidir.jsp';&quot;);
			    out.println(&quot;&lt;/script>&quot;);
			    out.close();
			}
	    </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIdhV0VdEfCS7cth2SLu0w" name="getIdAng" specification="_UDs9IEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIdhWEVdEfCS7cth2SLu0w" name="idconcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIdhWUVdEfCS7cth2SLu0w" name="conexiune" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIdhWkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>String sql = &quot;SELECT id_ang FROM concedii WHERE id = ?&quot;;
	        try (PreparedStatement stmt = conexiune.prepareStatement(sql)) {
	            stmt.setInt(1, idconcediu);
	            ResultSet rezultat = stmt.executeQuery();
	            if (rezultat.next()) {
	                return rezultat.getInt(&quot;id_ang&quot;);
	            }
	        }
	        return -1; 
	    </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIeIYEVdEfCS7cth2SLu0w" name="printSQLException" specification="_UDtkMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIeIYUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {
	            if (e instanceof SQLException) {
	                e.printStackTrace(System.err);
	                System.err.println(&quot;Stare: &quot; + ((SQLException) e).getSQLState());
	                System.err.println(&quot;Cod eroare: &quot; + ((SQLException) e).getErrorCode());
	                System.err.println(&quot;Explicatie: &quot; + e.getMessage());
	                Throwable t = ex.getCause();
	                while (t != null) {
	                    System.out.println(&quot;Cauza: &quot; + t);
	                    t = t.getCause();
	                }
	            }
	        }
	    </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S8DYkEVdEfCS7cth2SLu0w" name="init" method="_UIdhUEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJT150VdEfCS7cth2SLu0w">
            <body>initializare DAO</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:id="_UDrvAEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UIdhUUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJT16EVdEfCS7cth2SLu0w">
            <body>doGET se face cand apasa pe butonul de aprobare</body>
          </ownedComment>
          <ownedParameter xmi:id="_UDrvAUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDrvAkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UDsWEEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIdhVEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDsWEUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDsWEkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UDs9IEVdEfCS7cth2SLu0w" name="getIdAng" visibility="private" method="_UIdhV0VdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJT16UVdEfCS7cth2SLu0w">
            <body>Functie ce afla id-ul unui angajat dintr-un concediu
	     * @param idconcediu
	     * @param conexiune
	     * @return id angajat sau -1 daca nu a gasit nimic
	     * @throws SQLException</body>
          </ownedComment>
          <ownedParameter xmi:id="_UDs9IUVdEfCS7cth2SLu0w" name="idconcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UDs9IkVdEfCS7cth2SLu0w" name="conexiune" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDs9I0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UDtkMEVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" isStatic="true" method="_UIeIYEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJT16kVdEfCS7cth2SLu0w">
            <body>Afiseaza frumos / Pretty print o eroare dintr-o baza de date
		 * @param ex</body>
          </ownedComment>
          <ownedParameter xmi:id="_UDtkMUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S8JfMEVdEfCS7cth2SLu0w" name="AsignarePozitieServlet">
        <generalization xmi:id="_UDuyU0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGnHMEVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGnHMUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGnHMkVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGnuQEVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGnuQUVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGnuQkVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIeIYkVdEfCS7cth2SLu0w" name="doPost" specification="_UDuyUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIeIY0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIeIZEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>//        HttpSession session = request.getSession();&#xD;
//        Integer userTip = (Integer) session.getAttribute(&quot;userTip&quot;);&#xD;
//        Integer userDep = (Integer) session.getAttribute(&quot;userDep&quot;);&#xD;
//        &#xD;
//        // Verificare permisiuni - doar Admin HR&#xD;
//        if (userTip == null || (userTip != 3 &amp;&amp; userDep != 1)) {&#xD;
//            response.sendRedirect(&quot;Access.jsp?error=accessDenied&quot;);&#xD;
//            return;&#xD;
//        }&#xD;
     &#xD;
     int idAng = Integer.parseInt(request.getParameter(&quot;id_ang&quot;));&#xD;
     int idDep = Integer.parseInt(request.getParameter(&quot;id_dep&quot;));&#xD;
     int tipPozitie = Integer.parseInt(request.getParameter(&quot;tip_pozitie&quot;));&#xD;
     Date dataPozitie = Date.valueOf(request.getParameter(&quot;data_pozitie&quot;));&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         conn.setAutoCommit(false);&#xD;
         &#xD;
         // Obține tipul vechi și departamentul vechi pentru istoric&#xD;
         String getTipAndDep = &quot;SELECT tip, id_dep FROM useri WHERE id = ?&quot;;&#xD;
         PreparedStatement pstmtGet = conn.prepareStatement(getTipAndDep);&#xD;
         pstmtGet.setInt(1, idAng);&#xD;
         ResultSet rs = pstmtGet.executeQuery();&#xD;
         &#xD;
         int tipVechi = 0;&#xD;
         int depVechi = 0;&#xD;
         if (rs.next()) {&#xD;
             tipVechi = rs.getInt(&quot;tip&quot;);&#xD;
             depVechi = rs.getInt(&quot;id_dep&quot;);&#xD;
         }&#xD;
         &#xD;
         // Actualizează angajatul&#xD;
         String sql = &quot;UPDATE useri SET id_dep = ?, tip = ?, data_modif = ? WHERE id = ?&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setInt(1, idDep);&#xD;
         pstmt.setInt(2, tipPozitie);&#xD;
         pstmt.setDate(3, dataPozitie);&#xD;
         pstmt.setInt(4, idAng);&#xD;
         pstmt.executeUpdate();&#xD;
         &#xD;
         // Înregistrează în istoric_promovari&#xD;
         String tipPromovare = (depVechi == idDep) ? &quot;Promovare internă&quot; : &quot;Transfer departament&quot;;&#xD;
         sql = &quot;INSERT INTO istoric_promovari (id_ang, tip_vechi, tip_nou, tip_promovare, data_promovare) VALUES (?, ?, ?, ?, ?)&quot;;&#xD;
         pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setInt(1, idAng);&#xD;
         pstmt.setInt(2, tipVechi);&#xD;
         pstmt.setInt(3, tipPozitie);&#xD;
         pstmt.setString(4, tipPromovare);&#xD;
         pstmt.setDate(5, dataPozitie);&#xD;
         pstmt.executeUpdate();&#xD;
         &#xD;
         conn.commit();&#xD;
         response.sendRedirect(&quot;administrare_pozitii.jsp?success=true&quot;);&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             ex.printStackTrace();&#xD;
         }&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;administrare_pozitii.jsp?error=true&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;administrare_pozitii.jsp?error=driverNotFound&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { &#xD;
                 conn.setAutoCommit(true);&#xD;
                 conn.close(); &#xD;
             } catch (SQLException e) { &#xD;
                 e.printStackTrace(); &#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UDuyUEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIeIYkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDuyUUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDuyUkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S8NwoEVdEfCS7cth2SLu0w" name="CVGeneratorServlet">
        <generalization xmi:id="_UDwng0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGnuQ0VdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGnuREVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGnuRUVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGnuRkVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGoVUEVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGoVUUVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGoVUkVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGoVU0VdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIeIZUVdEfCS7cth2SLu0w" name="doGet" specification="_UDwAcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIeIZkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIeIZ0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;currentUser&quot;) == null) {&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
     MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);&#xD;
&#xD;
     // === 2) Încarcă driver-ul JDBC și deschide conexiunea ===&#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         throw new ServletException(&quot;JDBC Driver neidentificat!&quot;, e);&#xD;
     }&#xD;
&#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
         // === 3) Preluare ierarhie și departament al utilizatorului ===&#xD;
         String roleSql = &#xD;
             &quot;SELECT t.ierarhie, t.denumire AS functie, u.id_dep &quot; +&#xD;
             &quot;FROM useri u &quot; +&#xD;
             &quot;JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
             &quot;WHERE u.id = ?&quot;;&#xD;
         int userIerarhie, userDep;&#xD;
         String userFunctie;&#xD;
         try (PreparedStatement rolePs = conn.prepareStatement(roleSql)) {&#xD;
             rolePs.setInt(1, currentUser.getId());&#xD;
             try (ResultSet rs = rolePs.executeQuery()) {&#xD;
                 if (!rs.next()) {&#xD;
                     response.sendRedirect(&quot;login.jsp&quot;);&#xD;
                     return;&#xD;
                 }&#xD;
                 userIerarhie = rs.getInt(&quot;ierarhie&quot;);&#xD;
                 userFunctie  = rs.getString(&quot;functie&quot;);&#xD;
                 userDep      = rs.getInt(&quot;id_dep&quot;);&#xD;
             }&#xD;
         }&#xD;
&#xD;
         boolean isDirector = userIerarhie &lt; 3;&#xD;
         boolean isHR       = (userDep == 1);   // departamentul 1 = HR&#xD;
         // === 4) Determinare userId de încărcat ===&#xD;
         int targetUserId;&#xD;
         if (request.getParameter(&quot;id&quot;) != null &amp;&amp; (isDirector || isHR)) {&#xD;
             // directorul sau HR poate vedea CV-uri ale altor utilizatori&#xD;
             targetUserId = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
         } else {&#xD;
             // altfel, generează doar propriul CV&#xD;
             targetUserId = currentUser.getId();&#xD;
         }&#xD;
&#xD;
         // === 5) Colectare date din baza de date ===&#xD;
         // 5.1 Date personale&#xD;
         String sql = &quot;SELECT u.*, d.nume_dep, t.denumire AS pozitie &quot; +&#xD;
                      &quot;FROM useri u &quot; +&#xD;
                      &quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                      &quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                      &quot;WHERE u.id = ?&quot;;&#xD;
         try (PreparedStatement ps = conn.prepareStatement(sql)) {&#xD;
             ps.setInt(1, targetUserId);&#xD;
             try (ResultSet userRs = ps.executeQuery()) {&#xD;
                 request.setAttribute(&quot;userRs&quot;, userRs);  // pasăm ResultSet pe request&#xD;
                 // Nota: JSP-ul va trebui să itereze pe acest ResultSet pentru a extrage datele&#xD;
             }&#xD;
         }&#xD;
&#xD;
         // 5.2 Calități și interese din cv&#xD;
         sql = &quot;SELECT * FROM cv WHERE id_ang = ?&quot;;&#xD;
         try (PreparedStatement ps = conn.prepareStatement(sql)) {&#xD;
             ps.setInt(1, targetUserId);&#xD;
             try (ResultSet cvRs = ps.executeQuery()) {&#xD;
                 request.setAttribute(&quot;cvRs&quot;, cvRs);&#xD;
             }&#xD;
         }&#xD;
&#xD;
         // 5.3 Educație&#xD;
         sql = &quot;SELECT s.*, c.semnificatie AS ciclu_denumire &quot; +&#xD;
               &quot;FROM studii s &quot; +&#xD;
               &quot;LEFT JOIN cicluri c ON s.ciclu = c.id &quot; +&#xD;
               &quot;WHERE s.id_ang = ? ORDER BY s.start DESC&quot;;&#xD;
         try (PreparedStatement ps = conn.prepareStatement(sql)) {&#xD;
             ps.setInt(1, targetUserId);&#xD;
             try (ResultSet eduRs = ps.executeQuery()) {&#xD;
                 request.setAttribute(&quot;eduRs&quot;, eduRs);&#xD;
             }&#xD;
         }&#xD;
&#xD;
         // 5.4 Experiență&#xD;
         sql = &quot;SELECT e.*, t.denumire AS tip_denumire, d.nume_dep &quot; +&#xD;
               &quot;FROM experienta e &quot; +&#xD;
               &quot;LEFT JOIN tipuri t ON e.tip = t.tip &quot; +&#xD;
               &quot;LEFT JOIN departament d ON e.id_dep = d.id_dep &quot; +&#xD;
               &quot;WHERE e.id_ang = ? ORDER BY e.start DESC&quot;;&#xD;
         try (PreparedStatement ps = conn.prepareStatement(sql)) {&#xD;
             ps.setInt(1, targetUserId);&#xD;
             try (ResultSet expRs = ps.executeQuery()) {&#xD;
                 request.setAttribute(&quot;expRs&quot;, expRs);&#xD;
             }&#xD;
         }&#xD;
&#xD;
         // 5.5 Proiecte personale&#xD;
         sql = &quot;SELECT * FROM proiecte2 WHERE id_ang = ? ORDER BY start DESC&quot;;&#xD;
         try (PreparedStatement ps = conn.prepareStatement(sql)) {&#xD;
             ps.setInt(1, targetUserId);&#xD;
             try (ResultSet projRs = ps.executeQuery()) {&#xD;
                 request.setAttribute(&quot;projRs&quot;, projRs);&#xD;
             }&#xD;
         }&#xD;
&#xD;
         // 5.6 Limbi&#xD;
         sql = &quot;SELECT la.*, l.limba, n.semnificatie AS nivel_denumire &quot; +&#xD;
               &quot;FROM limbi_ang la &quot; +&#xD;
               &quot;JOIN limbi l ON la.id_limba = l.id &quot; +&#xD;
               &quot;JOIN nivel n ON la.nivel = n.id &quot; +&#xD;
               &quot;WHERE la.id_ang = ?&quot;;&#xD;
         try (PreparedStatement ps = conn.prepareStatement(sql)) {&#xD;
             ps.setInt(1, targetUserId);&#xD;
             try (ResultSet langRs = ps.executeQuery()) {&#xD;
                 request.setAttribute(&quot;langRs&quot;, langRs);&#xD;
             }&#xD;
         }&#xD;
&#xD;
         // === 6) Forward către JSP-ul de generare CV ===&#xD;
         request.getRequestDispatcher(&quot;generated-cv.jsp&quot;)&#xD;
                .forward(request, response);&#xD;
&#xD;
     } catch (SQLException e) {&#xD;
         throw new ServletException(&quot;Eroare la conexiunea cu baza de date: &quot; + e.getMessage(), e);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UDwAcEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UIeIZUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDwAcUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDwAckVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S8RbAEVdEfCS7cth2SLu0w" name="DeletePostServlet">
        <generalization xmi:id="_UDx1o0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIevcEVdEfCS7cth2SLu0w" name="doPost" specification="_UDx1oEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIevcUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIevckVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json;charset=UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     JSONObject json = new JSONObject();&#xD;
     &#xD;
     int idPost = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         &#xD;
         // Începem o tranzacție pentru a asigura consistența&#xD;
         conn.setAutoCommit(false);&#xD;
         &#xD;
         // Verifică dacă există aplicări pentru acest post&#xD;
         String checkAplicari = &quot;SELECT COUNT(*) as count FROM aplicari WHERE job_id = ?&quot;;&#xD;
         PreparedStatement pstmtCheck = conn.prepareStatement(checkAplicari);&#xD;
         pstmtCheck.setInt(1, idPost);&#xD;
         ResultSet rsCheck = pstmtCheck.executeQuery();&#xD;
         &#xD;
         if (rsCheck.next() &amp;&amp; rsCheck.getInt(&quot;count&quot;) > 0) {&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Nu se poate șterge un post care are aplicări!&quot;);&#xD;
             rsCheck.close();&#xD;
             pstmtCheck.close();&#xD;
             out.print(json.toString());&#xD;
             return;&#xD;
         }&#xD;
         rsCheck.close();&#xD;
         pstmtCheck.close();&#xD;
         &#xD;
         // Obținem ID-ul locației asociate postului&#xD;
         String getLocatie = &quot;SELECT id_locatie FROM joburi WHERE id = ?&quot;;&#xD;
         PreparedStatement pstmtLoc = conn.prepareStatement(getLocatie);&#xD;
         pstmtLoc.setInt(1, idPost);&#xD;
         ResultSet rsLoc = pstmtLoc.executeQuery();&#xD;
         &#xD;
         Integer idLocatie = null;&#xD;
         if (rsLoc.next()) {&#xD;
             idLocatie = rsLoc.getInt(&quot;id_locatie&quot;);&#xD;
         }&#xD;
         rsLoc.close();&#xD;
         pstmtLoc.close();&#xD;
         &#xD;
         // Șterge postul&#xD;
         String sqlDeleteJob = &quot;DELETE FROM joburi WHERE id = ?&quot;;&#xD;
         PreparedStatement pstmtJob = conn.prepareStatement(sqlDeleteJob);&#xD;
         pstmtJob.setInt(1, idPost);&#xD;
         &#xD;
         int rowsAffected = pstmtJob.executeUpdate();&#xD;
         pstmtJob.close();&#xD;
         &#xD;
         if (rowsAffected > 0) {&#xD;
             // Șterge locația asociată, dacă există și dacă nu mai este folosită de alte posturi&#xD;
             if (idLocatie != null) {&#xD;
                 // Verifică dacă locația mai este folosită de alte posturi&#xD;
                 String checkLocation = &quot;SELECT COUNT(*) as count FROM joburi WHERE id_locatie = ?&quot;;&#xD;
                 PreparedStatement pstmtCheckLoc = conn.prepareStatement(checkLocation);&#xD;
                 pstmtCheckLoc.setInt(1, idLocatie);&#xD;
                 ResultSet rsCheckLoc = pstmtCheckLoc.executeQuery();&#xD;
                 &#xD;
                 if (rsCheckLoc.next() &amp;&amp; rsCheckLoc.getInt(&quot;count&quot;) == 0) {&#xD;
                     // Locația nu mai este folosită, o ștergem&#xD;
                     String sqlDeleteLoc = &quot;DELETE FROM locatii_joburi WHERE id_locatie = ?&quot;;&#xD;
                     PreparedStatement pstmtDeleteLoc = conn.prepareStatement(sqlDeleteLoc);&#xD;
                     pstmtDeleteLoc.setInt(1, idLocatie);&#xD;
                     pstmtDeleteLoc.executeUpdate();&#xD;
                     pstmtDeleteLoc.close();&#xD;
                 }&#xD;
                 rsCheckLoc.close();&#xD;
                 pstmtCheckLoc.close();&#xD;
             }&#xD;
             &#xD;
             json.put(&quot;success&quot;, true);&#xD;
             json.put(&quot;message&quot;, &quot;Postul a fost șters cu succes!&quot;);&#xD;
         } else {&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Postul nu a fost găsit!&quot;);&#xD;
         }&#xD;
         &#xD;
         // Confirmăm tranzacția&#xD;
         conn.commit();&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         // Rollback în caz de eroare&#xD;
         if (conn != null) {&#xD;
             try {&#xD;
                 conn.rollback();&#xD;
             } catch (SQLException ex) {&#xD;
                 ex.printStackTrace();&#xD;
             }&#xD;
         }&#xD;
         e.printStackTrace();&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Eroare la ștergerea postului!&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Eroare la încărcarea driverului JDBC!&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { &#xD;
                 conn.setAutoCommit(true);&#xD;
                 conn.close(); &#xD;
             } catch (SQLException e) { &#xD;
                 e.printStackTrace(); &#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     out.print(json.toString());&#xD;
     out.flush();&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UDx1oEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIevcEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDx1oUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDx1okVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S8UeUEVdEfCS7cth2SLu0w" name="CVServlet">
        <generalization xmi:id="_UD4jUEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGo8YEVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGo8YUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGo8YkVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGo8Y0VdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGo8ZEVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGpjcEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIfWgEVdEfCS7cth2SLu0w" name="doGet" specification="_UDzDwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIfWgUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIfWgkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;user_id&quot;) == null) {&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     String action = request.getParameter(&quot;action&quot;);&#xD;
     if (action == null) action = &quot;view&quot;;&#xD;
     &#xD;
     switch(action) {&#xD;
         case &quot;view&quot;:&#xD;
             viewCV(request, response);&#xD;
             break;&#xD;
         case &quot;edit&quot;:&#xD;
             editCV(request, response);&#xD;
             break;&#xD;
         case &quot;create&quot;:&#xD;
             createCV(request, response);&#xD;
             break;&#xD;
         default:&#xD;
             viewCV(request, response);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIfWg0VdEfCS7cth2SLu0w" name="createCV" specification="_UDzDw0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIfWhEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIfWhUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// TODO Auto-generated method stub&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIfWhkVdEfCS7cth2SLu0w" name="doPost" specification="_UDzq0UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIfWh0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIfWiEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;user_id&quot;) == null) {&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     String action = request.getParameter(&quot;action&quot;);&#xD;
     if (&quot;save&quot;.equals(action)) {&#xD;
         saveCV(request, response);&#xD;
     } else if (&quot;addExperience&quot;.equals(action)) {&#xD;
         addExperience(request, response);&#xD;
     } else if (&quot;addEducation&quot;.equals(action)) {&#xD;
         addEducation(request, response);&#xD;
     } else if (&quot;addLanguage&quot;.equals(action)) {&#xD;
         addLanguage(request, response);&#xD;
     } else if (&quot;addProject&quot;.equals(action)) {&#xD;
         addProject(request, response);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIfWiUVdEfCS7cth2SLu0w" name="viewCV" specification="_UD0R4UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIfWikVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIfWi0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         HttpSession session = request.getSession();&#xD;
         int userId;&#xD;
         &#xD;
         // Dacă este HR și vede CV-ul unui candidat&#xD;
         if (request.getParameter(&quot;id&quot;) != null &amp;&amp; (Integer)session.getAttribute(&quot;user_dep&quot;) == 1) {&#xD;
             userId = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
         } else {&#xD;
             userId = (Integer) session.getAttribute(&quot;user_id&quot;);&#xD;
         }&#xD;
         &#xD;
         // Date personale&#xD;
         String sql = &quot;SELECT u.*, d.nume_dep, t.denumire &quot; +&#xD;
                      &quot;FROM useri u &quot; +&#xD;
                      &quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                      &quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                      &quot;WHERE u.id = ?&quot;;&#xD;
         PreparedStatement ps = conn.prepareStatement(sql);&#xD;
         ps.setInt(1, userId);&#xD;
         ResultSet userRs = ps.executeQuery();&#xD;
         &#xD;
         // CV data&#xD;
         sql = &quot;SELECT * FROM cv WHERE id_ang = ?&quot;;&#xD;
         ps = conn.prepareStatement(sql);&#xD;
         ps.setInt(1, userId);&#xD;
         ResultSet cvRs = ps.executeQuery();&#xD;
         &#xD;
         // Experiență&#xD;
         sql = &quot;SELECT e.*, t.denumire as tip_denumire, d.nume_dep &quot; +&#xD;
               &quot;FROM experienta e &quot; +&#xD;
               &quot;LEFT JOIN tipuri t ON e.tip = t.tip &quot; +&#xD;
               &quot;LEFT JOIN departament d ON e.id_dep = d.id_dep &quot; +&#xD;
               &quot;WHERE e.id_ang = ? ORDER BY e.start DESC&quot;;&#xD;
         ps = conn.prepareStatement(sql);&#xD;
         ps.setInt(1, userId);&#xD;
         ResultSet experienceRs = ps.executeQuery();&#xD;
         &#xD;
         // Educație&#xD;
         sql = &quot;SELECT s.*, c.semnificatie as ciclu_denumire &quot; +&#xD;
               &quot;FROM studii s &quot; +&#xD;
               &quot;LEFT JOIN cicluri c ON s.ciclu = c.id &quot; +&#xD;
               &quot;WHERE s.id_ang = ? ORDER BY s.start DESC&quot;;&#xD;
         ps = conn.prepareStatement(sql);&#xD;
         ps.setInt(1, userId);&#xD;
         ResultSet educationRs = ps.executeQuery();&#xD;
         &#xD;
         // Limbi străine&#xD;
         sql = &quot;SELECT la.*, l.limba, n.semnificatie as nivel_denumire &quot; +&#xD;
               &quot;FROM limbi_ang la &quot; +&#xD;
               &quot;JOIN limbi l ON la.id_limba = l.id &quot; +&#xD;
               &quot;JOIN nivel n ON la.nivel = n.id &quot; +&#xD;
               &quot;WHERE la.id_ang = ?&quot;;&#xD;
         ps = conn.prepareStatement(sql);&#xD;
         ps.setInt(1, userId);&#xD;
         ResultSet languagesRs = ps.executeQuery();&#xD;
         &#xD;
         // Proiecte&#xD;
         sql = &quot;SELECT * FROM proiecte2 WHERE id_ang = ? ORDER BY start DESC&quot;;&#xD;
         ps = conn.prepareStatement(sql);&#xD;
         ps.setInt(1, userId);&#xD;
         ResultSet projectsRs = ps.executeQuery();&#xD;
         &#xD;
         request.setAttribute(&quot;user&quot;, userRs);&#xD;
         request.setAttribute(&quot;cv&quot;, cvRs);&#xD;
         request.setAttribute(&quot;experience&quot;, experienceRs);&#xD;
         request.setAttribute(&quot;education&quot;, educationRs);&#xD;
         request.setAttribute(&quot;languages&quot;, languagesRs);&#xD;
         request.setAttribute(&quot;projects&quot;, projectsRs);&#xD;
         &#xD;
         request.getRequestDispatcher(&quot;view-cv.jsp&quot;).forward(request, response);&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIf9kEVdEfCS7cth2SLu0w" name="editCV" specification="_UD048EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIf9kUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIf9kkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Similar cu viewCV dar încarcă date pentru editare&#xD;
     viewCV(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIf9k0VdEfCS7cth2SLu0w" name="saveCV" specification="_UD1gAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIf9lEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIf9lUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         HttpSession session = request.getSession();&#xD;
         int userId = (Integer) session.getAttribute(&quot;user_id&quot;);&#xD;
         &#xD;
         String calitati = request.getParameter(&quot;calitati&quot;);&#xD;
         String interese = request.getParameter(&quot;interese&quot;);&#xD;
         &#xD;
         // Verifică dacă există deja un CV&#xD;
         String checkSql = &quot;SELECT COUNT(*) FROM cv WHERE id_ang = ?&quot;;&#xD;
         PreparedStatement checkPs = conn.prepareStatement(checkSql);&#xD;
         checkPs.setInt(1, userId);&#xD;
         ResultSet checkRs = checkPs.executeQuery();&#xD;
         checkRs.next();&#xD;
         &#xD;
         if (checkRs.getInt(1) > 0) {&#xD;
             // Update&#xD;
             String sql = &quot;UPDATE cv SET calitati = ?, interese = ? WHERE id_ang = ?&quot;;&#xD;
             PreparedStatement ps = conn.prepareStatement(sql);&#xD;
             ps.setString(1, calitati);&#xD;
             ps.setString(2, interese);&#xD;
             ps.setInt(3, userId);&#xD;
             ps.executeUpdate();&#xD;
         } else {&#xD;
             // Insert&#xD;
             String sql = &quot;INSERT INTO cv (id_ang, calitati, interese) VALUES (?, ?, ?)&quot;;&#xD;
             PreparedStatement ps = conn.prepareStatement(sql);&#xD;
             ps.setInt(1, userId);&#xD;
             ps.setString(2, calitati);&#xD;
             ps.setString(3, interese);&#xD;
             ps.executeUpdate();&#xD;
         }&#xD;
         &#xD;
         response.sendRedirect(&quot;CVServlet?action=view&quot;);&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIf9lkVdEfCS7cth2SLu0w" name="addExperience" specification="_UD2HEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIf9l0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIf9mEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         HttpSession session = request.getSession();&#xD;
         int userId = (Integer) session.getAttribute(&quot;user_id&quot;);&#xD;
         &#xD;
         String den_job = request.getParameter(&quot;den_job&quot;);&#xD;
         String instit = request.getParameter(&quot;instit&quot;);&#xD;
         int tip = Integer.parseInt(request.getParameter(&quot;tip&quot;));&#xD;
         int id_dep = Integer.parseInt(request.getParameter(&quot;id_dep&quot;));&#xD;
         String domeniu = request.getParameter(&quot;domeniu&quot;);&#xD;
         String subdomeniu = request.getParameter(&quot;subdomeniu&quot;);&#xD;
         String start = request.getParameter(&quot;start&quot;);&#xD;
         String end = request.getParameter(&quot;end&quot;);&#xD;
         String descriere = request.getParameter(&quot;descriere&quot;);&#xD;
         &#xD;
         String sql = &quot;INSERT INTO experienta (den_job, instit, tip, id_dep, domeniu, subdomeniu, start, end, descriere, id_ang) &quot; +&#xD;
                      &quot;VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#xD;
         &#xD;
         PreparedStatement ps = conn.prepareStatement(sql);&#xD;
         ps.setString(1, den_job);&#xD;
         ps.setString(2, instit);&#xD;
         ps.setInt(3, tip);&#xD;
         ps.setInt(4, id_dep);&#xD;
         ps.setString(5, domeniu);&#xD;
         ps.setString(6, subdomeniu);&#xD;
         ps.setString(7, start);&#xD;
         ps.setString(8, end);&#xD;
         ps.setString(9, descriere);&#xD;
         ps.setInt(10, userId);&#xD;
         &#xD;
         ps.executeUpdate();&#xD;
         response.sendRedirect(&quot;CVServlet?action=view&quot;);&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIgkoEVdEfCS7cth2SLu0w" name="addEducation" specification="_UD2uIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIgkoUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIgkokVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         HttpSession session = request.getSession();&#xD;
         int userId = (Integer) session.getAttribute(&quot;user_id&quot;);&#xD;
         &#xD;
         String facultate = request.getParameter(&quot;facultate&quot;);&#xD;
         String universitate = request.getParameter(&quot;universitate&quot;);&#xD;
         int ciclu = Integer.parseInt(request.getParameter(&quot;ciclu&quot;));&#xD;
         String start = request.getParameter(&quot;start&quot;);&#xD;
         String end = request.getParameter(&quot;end&quot;);&#xD;
         &#xD;
         String sql = &quot;INSERT INTO studii (facultate, universitate, ciclu, start, end, id_ang) &quot; +&#xD;
                      &quot;VALUES (?, ?, ?, ?, ?, ?)&quot;;&#xD;
         &#xD;
         PreparedStatement ps = conn.prepareStatement(sql);&#xD;
         ps.setString(1, facultate);&#xD;
         ps.setString(2, universitate);&#xD;
         ps.setInt(3, ciclu);&#xD;
         ps.setString(4, start);&#xD;
         ps.setString(5, end);&#xD;
         ps.setInt(6, userId);&#xD;
         &#xD;
         ps.executeUpdate();&#xD;
         response.sendRedirect(&quot;CVServlet?action=view&quot;);&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIgko0VdEfCS7cth2SLu0w" name="addLanguage" specification="_UD3VMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIgkpEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIgkpUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         HttpSession session = request.getSession();&#xD;
         int userId = (Integer) session.getAttribute(&quot;user_id&quot;);&#xD;
         &#xD;
         int id_limba = Integer.parseInt(request.getParameter(&quot;id_limba&quot;));&#xD;
         int nivel = Integer.parseInt(request.getParameter(&quot;nivel&quot;));&#xD;
         &#xD;
         String sql = &quot;INSERT INTO limbi_ang (id_limba, nivel, id_ang) VALUES (?, ?, ?)&quot;;&#xD;
         &#xD;
         PreparedStatement ps = conn.prepareStatement(sql);&#xD;
         ps.setInt(1, id_limba);&#xD;
         ps.setInt(2, nivel);&#xD;
         ps.setInt(3, userId);&#xD;
         &#xD;
         ps.executeUpdate();&#xD;
         response.sendRedirect(&quot;CVServlet?action=view&quot;);&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIgkpkVdEfCS7cth2SLu0w" name="addProject" specification="_UD38QEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIgkp0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIgkqEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         HttpSession session = request.getSession();&#xD;
         int userId = (Integer) session.getAttribute(&quot;user_id&quot;);&#xD;
         &#xD;
         String nume = request.getParameter(&quot;nume&quot;);&#xD;
         String descriere = request.getParameter(&quot;descriere&quot;);&#xD;
         String start = request.getParameter(&quot;start&quot;);&#xD;
         String end = request.getParameter(&quot;end&quot;);&#xD;
         &#xD;
         String sql = &quot;INSERT INTO proiecte2 (nume, descriere, start, end, id_ang) &quot; +&#xD;
                      &quot;VALUES (?, ?, ?, ?, ?)&quot;;&#xD;
         &#xD;
         PreparedStatement ps = conn.prepareStatement(sql);&#xD;
         ps.setString(1, nume);&#xD;
         ps.setString(2, descriere);&#xD;
         ps.setString(3, start);&#xD;
         ps.setString(4, end);&#xD;
         ps.setInt(5, userId);&#xD;
         &#xD;
         ps.executeUpdate();&#xD;
         response.sendRedirect(&quot;CVServlet?action=view&quot;);&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UDzDwEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UIfWgEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDzDwUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDzDwkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UDzDw0VdEfCS7cth2SLu0w" name="createCV" visibility="private" method="_UIfWg0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDzDxEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDzq0EVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UDzq0UVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIfWhkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDzq0kVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UD0R4EVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UD0R4UVdEfCS7cth2SLu0w" name="viewCV" visibility="private" method="_UIfWiUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UD0R4kVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UD0R40VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UD048EVdEfCS7cth2SLu0w" name="editCV" visibility="private" method="_UIf9kEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UD048UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UD048kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UD1gAEVdEfCS7cth2SLu0w" name="saveCV" visibility="private" method="_UIf9k0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UD1gAUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UD1gAkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UD2HEEVdEfCS7cth2SLu0w" name="addExperience" visibility="private" method="_UIf9lkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UD2HEUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UD2HEkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UD2uIEVdEfCS7cth2SLu0w" name="addEducation" visibility="private" method="_UIgkoEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UD2uIUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UD2uIkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UD3VMEVdEfCS7cth2SLu0w" name="addLanguage" visibility="private" method="_UIgko0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UD3VMUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UD3VMkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UD38QEVdEfCS7cth2SLu0w" name="addProject" visibility="private" method="_UIgkpkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UD38QUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UD38QkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S8hSoEVdEfCS7cth2SLu0w" name="CerereAdeverintaServlet">
        <generalization xmi:id="_UD7mokVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGpjcUVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGpjckVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIgkqUVdEfCS7cth2SLu0w" name="doPost" specification="_UD5KYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIgkqkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIgkq0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;currentUser&quot;) == null) {&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);&#xD;
     int userId = currentUser.getId();&#xD;
     int tipUser = currentUser.getTip();&#xD;
     &#xD;
     // Parametrii cererii&#xD;
     String tipAdeverintaStr = request.getParameter(&quot;tip&quot;);&#xD;
     String pentruServi = request.getParameter(&quot;pentru_servi&quot;);&#xD;
     &#xD;
     if (tipAdeverintaStr == null || tipAdeverintaStr.isEmpty() || pentruServi == null || pentruServi.isEmpty()) {&#xD;
         response.sendRedirect(&quot;cerere_adeverinta.jsp?error=true&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     int tipAdeverinta = Integer.parseInt(tipAdeverintaStr);&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         conn.setAutoCommit(false);&#xD;
         &#xD;
         // Determinăm status-ul inițial bazat pe tipul angajatului&#xD;
         int initialStatus = 0; // Implicit pentru angajați obișnuiți&#xD;
         &#xD;
         // Pentru șefi și manageri (tip == 3 sau 10 &lt;= tip &lt;= 15), statusul inițial este 1 (merge direct la director)&#xD;
         if (tipUser == 3 || (tipUser >= 10 &amp;&amp; tipUser &lt;= 15)) {&#xD;
             initialStatus = 1;&#xD;
         }&#xD;
         &#xD;
         // Obține un ID nou pentru adeverință&#xD;
         String getMaxIdSql = &quot;SELECT MAX(id) as max_id FROM adeverinte&quot;;&#xD;
         int newId = 1; // Valoare implicită dacă tabela este goală&#xD;
&#xD;
         try (PreparedStatement maxIdStmt = conn.prepareStatement(getMaxIdSql);&#xD;
             ResultSet maxIdRs = maxIdStmt.executeQuery()) {&#xD;
             if (maxIdRs.next() &amp;&amp; maxIdRs.getObject(&quot;max_id&quot;) != null) {&#xD;
                 newId = maxIdRs.getInt(&quot;max_id&quot;) + 1;&#xD;
             }&#xD;
         }&#xD;
&#xD;
         // Inserează adeverința cu ID-ul generat manual&#xD;
         String sql = &quot;INSERT INTO adeverinte (id, id_ang, tip, pentru_servi, status, creare, modif) &quot; +&#xD;
                     &quot;VALUES (?, ?, ?, ?, ?, CURDATE(), CURDATE())&quot;;&#xD;
&#xD;
         try (PreparedStatement pstmt = conn.prepareStatement(sql)) {&#xD;
             pstmt.setInt(1, newId);&#xD;
             pstmt.setInt(2, userId);&#xD;
             pstmt.setInt(3, tipAdeverinta);&#xD;
             pstmt.setString(4, pentruServi);&#xD;
             pstmt.setInt(5, initialStatus);&#xD;
             &#xD;
             int affectedRows = pstmt.executeUpdate();&#xD;
             &#xD;
             if (affectedRows > 0) {&#xD;
                 // Folosim newId în loc de generatedKeys deoarece am furnizat ID-ul manual&#xD;
                 int idAdeverinta = newId;&#xD;
                 &#xD;
                 // Notificăm persoana care trebuie să aprobe cererea&#xD;
                 if (initialStatus == 0) {&#xD;
                     // Notificăm șeful departamentului&#xD;
                     notificaSef(conn, userId, idAdeverinta);&#xD;
                 } else if (initialStatus == 1) {&#xD;
                     // Notificăm directorul direct&#xD;
                     notificaDirector(conn, idAdeverinta);&#xD;
                 }&#xD;
                 &#xD;
                 conn.commit();&#xD;
                 response.sendRedirect(&quot;cerere_adeverinta.jsp?success=true&quot;);&#xD;
             } else {&#xD;
                 conn.rollback();&#xD;
                 response.sendRedirect(&quot;cerere_adeverinta.jsp?error=true&quot;);&#xD;
             }&#xD;
         }&#xD;
     } catch (Exception e) {&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             ex.printStackTrace();&#xD;
         }&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;cerere_adeverinta.jsp?error=true&amp;message=&quot; + e.getMessage());&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { &#xD;
                 conn.setAutoCommit(true);&#xD;
                 conn.close(); &#xD;
             } catch (SQLException e) { &#xD;
                 e.printStackTrace(); &#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIgkrEVdEfCS7cth2SLu0w" name="notificaSef" specification="_UD5xckVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIgkrUVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIgkrkVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIgkr0VdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// Găsim șeful departamentului angajatului&#xD;
     String sql = &quot;SELECT u.id FROM useri u &quot; +&#xD;
                 &quot;JOIN useri a ON u.id_dep = a.id_dep &quot; +&#xD;
                 &quot;WHERE a.id = ? AND u.tip = 3&quot;;&#xD;
     &#xD;
     try (PreparedStatement pstmt = conn.prepareStatement(sql)) {&#xD;
         pstmt.setInt(1, idAngajat);&#xD;
         try (ResultSet rs = pstmt.executeQuery()) {&#xD;
             if (rs.next()) {&#xD;
                 int idSef = rs.getInt(&quot;id&quot;);&#xD;
                 &#xD;
                 // Obține informații despre cerere pentru un mesaj mai descriptiv&#xD;
                 String adeverintaInfo = getAdeverintaInfo(conn, idAdeverinta);&#xD;
                 &#xD;
                 // Verificăm și creăm tabela de notificări dacă nu există&#xD;
                 createNotificationsTableIfNeeded(conn);&#xD;
                 &#xD;
                 // Trimite notificare&#xD;
                 String notifSql = &quot;INSERT INTO notificari_general (id_destinatar, tip, mesaj) &quot; +&#xD;
                                  &quot;VALUES (?, 'CERERE_ADEVERINTA', ?)&quot;;&#xD;
                 try (PreparedStatement notifPstmt = conn.prepareStatement(notifSql)) {&#xD;
                     notifPstmt.setInt(1, idSef);&#xD;
                     notifPstmt.setString(2, &quot;Aveți o nouă cerere de adeverință de aprobat: &quot; + adeverintaInfo);&#xD;
                     notifPstmt.executeUpdate();&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIgksEVdEfCS7cth2SLu0w" name="notificaDirector" specification="_UD6Yg0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIgksUVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIgkskVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// Găsim directorul&#xD;
     String sql = &quot;SELECT id FROM useri WHERE tip = 0&quot;;&#xD;
     &#xD;
     try (PreparedStatement pstmt = conn.prepareStatement(sql)) {&#xD;
         try (ResultSet rs = pstmt.executeQuery()) {&#xD;
             if (rs.next()) {&#xD;
                 int idDirector = rs.getInt(&quot;id&quot;);&#xD;
                 &#xD;
                 // Obține informații despre cerere pentru un mesaj mai descriptiv&#xD;
                 String adeverintaInfo = getAdeverintaInfo(conn, idAdeverinta);&#xD;
                 &#xD;
                 // Verificăm și creăm tabela de notificări dacă nu există&#xD;
                 createNotificationsTableIfNeeded(conn);&#xD;
                 &#xD;
                 // Trimite notificare&#xD;
                 String notifSql = &quot;INSERT INTO notificari_general (id_destinatar, tip, mesaj) &quot; +&#xD;
                                  &quot;VALUES (?, 'CERERE_ADEVERINTA', ?)&quot;;&#xD;
                 try (PreparedStatement notifPstmt = conn.prepareStatement(notifSql)) {&#xD;
                     notifPstmt.setInt(1, idDirector);&#xD;
                     notifPstmt.setString(2, &quot;Aveți o nouă cerere de adeverință de aprobat: &quot; + adeverintaInfo);&#xD;
                     notifPstmt.executeUpdate();&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIhLsEVdEfCS7cth2SLu0w" name="getAdeverintaInfo" specification="_UD6_kEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIhLsUVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIhLskVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIhLs0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>// Obține detalii despre adeverință pentru mesaje mai descriptive&#xD;
     String info = &quot;&quot;;&#xD;
     String sql = &quot;SELECT u.nume, u.prenume, ta.denumire, a.pentru_servi &quot; +&#xD;
                 &quot;FROM adeverinte a &quot; +&#xD;
                 &quot;JOIN tip_adev ta ON a.tip = ta.id &quot; +&#xD;
                 &quot;JOIN useri u ON a.id_ang = u.id &quot; +&#xD;
                 &quot;WHERE a.id = ?&quot;;&#xD;
     &#xD;
     try (PreparedStatement pstmt = conn.prepareStatement(sql)) {&#xD;
         pstmt.setInt(1, idAdeverinta);&#xD;
         try (ResultSet rs = pstmt.executeQuery()) {&#xD;
             if (rs.next()) {&#xD;
                 String numePrenume = rs.getString(&quot;nume&quot;) + &quot; &quot; + rs.getString(&quot;prenume&quot;);&#xD;
                 info = numePrenume + &quot; - &quot; + rs.getString(&quot;denumire&quot;) + &quot; pentru &quot; + rs.getString(&quot;pentru_servi&quot;);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return info;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIhLtEVdEfCS7cth2SLu0w" name="createNotificationsTableIfNeeded" specification="_UD7moEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIhLtUVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Verifică dacă tabela notificari_general există&#xD;
     try (PreparedStatement checkStmt = conn.prepareStatement(&quot;SHOW TABLES LIKE 'notificari_general'&quot;)) {&#xD;
         ResultSet rs = checkStmt.executeQuery();&#xD;
         if (!rs.next()) {&#xD;
             // Dacă tabela nu există, o creăm&#xD;
             try (PreparedStatement createStmt = conn.prepareStatement(&#xD;
                     &quot;CREATE TABLE notificari_general (&quot; +&#xD;
                     &quot;id INT AUTO_INCREMENT PRIMARY KEY, &quot; +&#xD;
                     &quot;id_destinatar INT NOT NULL, &quot; +&#xD;
                     &quot;tip VARCHAR(50) NOT NULL, &quot; +&#xD;
                     &quot;mesaj VARCHAR(255) NOT NULL, &quot; +&#xD;
                     &quot;data_creare TIMESTAMP DEFAULT CURRENT_TIMESTAMP, &quot; +&#xD;
                     &quot;citit BOOLEAN DEFAULT FALSE, &quot; +&#xD;
                     &quot;FOREIGN KEY (id_destinatar) REFERENCES useri(id))&quot;)) {&#xD;
                 createStmt.executeUpdate();&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UD5KYEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIgkqUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UD5xcEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UD5xcUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UD5xckVdEfCS7cth2SLu0w" name="notificaSef" visibility="private" method="_UIgkrEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UD6YgEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UD6YgUVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UD6YgkVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UD6Yg0VdEfCS7cth2SLu0w" name="notificaDirector" visibility="private" method="_UIgksEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UD6YhEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UD6YhUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UD6_kEVdEfCS7cth2SLu0w" name="getAdeverintaInfo" visibility="private" method="_UIhLsEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UD6_kUVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UD6_kkVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UD6_k0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UD7moEVdEfCS7cth2SLu0w" name="createNotificationsTableIfNeeded" visibility="private" method="_UIhLtEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UD7moUVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S8nZQEVdEfCS7cth2SLu0w" name="CerereDemisieServlet">
        <generalization xmi:id="_UD9b0EVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGpjc0VdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGpjdEVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIhLtkVdEfCS7cth2SLu0w" name="doPost" specification="_UD80wEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIhywEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIhywUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;currentUser&quot;) == null) {&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);&#xD;
     int userId = currentUser.getId();&#xD;
     &#xD;
     // Validare parametri&#xD;
     String motiv = request.getParameter(&quot;motiv&quot;);&#xD;
     Date dataUltimaZi;&#xD;
     try {&#xD;
         dataUltimaZi = Date.valueOf(request.getParameter(&quot;data_ultima_zi&quot;));&#xD;
         &#xD;
         // Verificare dacă data ultimei zile este în viitor&#xD;
         if (dataUltimaZi.before(new Date(System.currentTimeMillis()))) {&#xD;
             response.sendRedirect(&quot;cerere_demisie.jsp?error=invalidDate&quot;);&#xD;
             return;&#xD;
         }&#xD;
     } catch (IllegalArgumentException e) {&#xD;
         response.sendRedirect(&quot;cerere_demisie.jsp?error=invalidDate&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         conn.setAutoCommit(false);&#xD;
         &#xD;
         // Verificăm dacă tabela cereri_demisie există&#xD;
         boolean tabelaExista = false;&#xD;
         try (PreparedStatement checkStmt = conn.prepareStatement(&quot;SHOW TABLES LIKE 'cereri_demisie'&quot;);&#xD;
              ResultSet rsCheck = checkStmt.executeQuery()) {&#xD;
             tabelaExista = rsCheck.next();&#xD;
         }&#xD;
         &#xD;
         // Dacă tabela nu există, o creăm&#xD;
         if (!tabelaExista) {&#xD;
             try (PreparedStatement createStmt = conn.prepareStatement(&#xD;
                     &quot;CREATE TABLE cereri_demisie (&quot; +&#xD;
                     &quot;id INT AUTO_INCREMENT PRIMARY KEY, &quot; +&#xD;
                     &quot;id_ang INT NOT NULL, &quot; +&#xD;
                     &quot;motiv VARCHAR(500), &quot; +&#xD;
                     &quot;data_cerere DATE NOT NULL, &quot; +&#xD;
                     &quot;data_ultima_zi DATE NOT NULL, &quot; +&#xD;
                     &quot;status VARCHAR(20) NOT NULL, &quot; +&#xD;
                     &quot;data_procesare DATE, &quot; +&#xD;
                     &quot;observatii VARCHAR(500), &quot; +&#xD;
                     &quot;FOREIGN KEY (id_ang) REFERENCES useri(id))&quot;)) {&#xD;
                 createStmt.executeUpdate();&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // Verificăm dacă utilizatorul are deja o cerere de demisie activă&#xD;
         try (PreparedStatement checkDemisieStmt = conn.prepareStatement(&#xD;
                 &quot;SELECT COUNT(*) FROM cereri_demisie WHERE id_ang = ? AND status = 'IN_ASTEPTARE'&quot;)) {&#xD;
             checkDemisieStmt.setInt(1, userId);&#xD;
             try (ResultSet rs = checkDemisieStmt.executeQuery()) {&#xD;
                 if (rs.next() &amp;&amp; rs.getInt(1) > 0) {&#xD;
                     response.sendRedirect(&quot;cerere_demisie.jsp?error=existingRequest&quot;);&#xD;
                     return;&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // Înregistrează cererea de demisie&#xD;
         try (PreparedStatement pstmt = conn.prepareStatement(&#xD;
                 &quot;INSERT INTO cereri_demisie (id_ang, motiv, data_cerere, data_ultima_zi, status) &quot; +&#xD;
                 &quot;VALUES (?, ?, CURDATE(), ?, 'IN_ASTEPTARE')&quot;)) {&#xD;
             pstmt.setInt(1, userId);&#xD;
             pstmt.setString(2, motiv);&#xD;
             pstmt.setDate(3, dataUltimaZi);&#xD;
             pstmt.executeUpdate();&#xD;
         }&#xD;
         &#xD;
         // Notifică șeful de departament și HR&#xD;
         notificaSefSiHR(conn, userId);&#xD;
         &#xD;
         conn.commit();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
		    out.println(&quot;alert('Cerere trimisa cu succes!');&quot;);&#xD;
		    out.println(&quot;window.location.href = 'actiuni2.jsp';&quot;);&#xD;
		    out.println(&quot;&lt;/script>&quot;);&#xD;
		    out.close();&#xD;
         return;&#xD;
         &#xD;
     } catch (SQLException | ClassNotFoundException e) {&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             ex.printStackTrace();&#xD;
         }&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;cerere_demisie.jsp?error=database&amp;message=&quot; + e.getMessage());&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { &#xD;
                 conn.setAutoCommit(true);&#xD;
                 conn.close(); &#xD;
             } catch (SQLException e) { &#xD;
                 e.printStackTrace(); &#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIhywkVdEfCS7cth2SLu0w" name="notificaSefSiHR" specification="_UD80w0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIhyw0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIhyxEVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// Verificăm dacă tabela notificari_general există&#xD;
     boolean tabelaExista = false;&#xD;
     try (PreparedStatement checkStmt = conn.prepareStatement(&quot;SHOW TABLES LIKE 'notificari_general'&quot;);&#xD;
          ResultSet rsCheck = checkStmt.executeQuery()) {&#xD;
         tabelaExista = rsCheck.next();&#xD;
     }&#xD;
     &#xD;
     // Dacă tabela nu există, o creăm&#xD;
     if (!tabelaExista) {&#xD;
         try (PreparedStatement createStmt = conn.prepareStatement(&#xD;
                 &quot;CREATE TABLE notificari_general (&quot; +&#xD;
                 &quot;id INT AUTO_INCREMENT PRIMARY KEY, &quot; +&#xD;
                 &quot;id_destinatar INT NOT NULL, &quot; +&#xD;
                 &quot;tip VARCHAR(50) NOT NULL, &quot; +&#xD;
                 &quot;mesaj VARCHAR(255) NOT NULL, &quot; +&#xD;
                 &quot;data_creare TIMESTAMP DEFAULT CURRENT_TIMESTAMP, &quot; +&#xD;
                 &quot;citit BOOLEAN DEFAULT FALSE, &quot; +&#xD;
                 &quot;FOREIGN KEY (id_destinatar) REFERENCES useri(id))&quot;)) {&#xD;
             createStmt.executeUpdate();&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     // Obținem numele și prenumele angajatului pentru a personaliza mesajul&#xD;
     String numeAngajat = &quot;Un angajat&quot;;&#xD;
     try (PreparedStatement getUserStmt = conn.prepareStatement(&quot;SELECT nume, prenume FROM useri WHERE id = ?&quot;)) {&#xD;
         getUserStmt.setInt(1, idAngajat);&#xD;
         try (ResultSet rs = getUserStmt.executeQuery()) {&#xD;
             if (rs.next()) {&#xD;
                 numeAngajat = rs.getString(&quot;nume&quot;) + &quot; &quot; + rs.getString(&quot;prenume&quot;);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     // Notifică șeful de departament&#xD;
     try (PreparedStatement pstmt = conn.prepareStatement(&#xD;
             &quot;SELECT u2.id FROM useri u1 &quot; +&#xD;
             &quot;JOIN useri u2 ON u1.id_dep = u2.id_dep &quot; +&#xD;
             &quot;WHERE u1.id = ? AND u2.tip = 3&quot;)) {&#xD;
         pstmt.setInt(1, idAngajat);&#xD;
         try (ResultSet rs = pstmt.executeQuery()) {&#xD;
             if (rs.next()) {&#xD;
                 int idSef = rs.getInt(&quot;id&quot;);&#xD;
                 &#xD;
                 try (PreparedStatement insertStmt = conn.prepareStatement(&#xD;
                         &quot;INSERT INTO notificari_general (id_destinatar, tip, mesaj) &quot; +&#xD;
                         &quot;VALUES (?, 'CERERE_DEMISIE', ?)&quot;)) {&#xD;
                     insertStmt.setInt(1, idSef);&#xD;
                     insertStmt.setString(2, numeAngajat + &quot; a depus cerere de demisie.&quot;);&#xD;
                     insertStmt.executeUpdate();&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     // Notifică HR&#xD;
     try (PreparedStatement pstmt = conn.prepareStatement(&#xD;
             &quot;SELECT id FROM useri WHERE tip = 3 AND id_dep = 1&quot;)) {&#xD;
         try (ResultSet rs = pstmt.executeQuery()) {&#xD;
             while (rs.next()) {&#xD;
                 int idHR = rs.getInt(&quot;id&quot;);&#xD;
                 &#xD;
                 try (PreparedStatement insertStmt = conn.prepareStatement(&#xD;
                         &quot;INSERT INTO notificari_general (id_destinatar, tip, mesaj) &quot; +&#xD;
                         &quot;VALUES (?, 'CERERE_DEMISIE', ?)&quot;)) {&#xD;
                     insertStmt.setInt(1, idHR);&#xD;
                     insertStmt.setString(2, numeAngajat + &quot; a depus cerere de demisie.&quot;);&#xD;
                     insertStmt.executeUpdate();&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UD80wEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIhLtkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UD80wUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UD80wkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UD80w0VdEfCS7cth2SLu0w" name="notificaSefSiHR" visibility="private" method="_UIhywkVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UD80xEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UD80xUVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S8qckEVdEfCS7cth2SLu0w" name="DeleteEchipaServlet">
        <generalization xmi:id="_UD-p8UVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGqKgEVdEfCS7cth2SLu0w" name="DB_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGqKgUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGqKgkVdEfCS7cth2SLu0w" name="DB_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGqKg0VdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGqKhEVdEfCS7cth2SLu0w" name="DB_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGqKhUVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIiZ0EVdEfCS7cth2SLu0w" name="doPost" specification="_UD-C4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIiZ0UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIiZ0kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession();&#xD;
   &#xD;
&#xD;
     int idEchipa = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
&#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         // Disable auto-commit for transaction&#xD;
         conn.setAutoCommit(false);&#xD;
&#xD;
         // Mai întâi ștergem relațiile cu membrii din tabela membrii_echipe&#xD;
         String sqlDeleteMembri = &quot;DELETE FROM membrii_echipe WHERE id_echipa = ?&quot;;&#xD;
         try (PreparedStatement pstmtDeleteMembri = conn.prepareStatement(sqlDeleteMembri)) {&#xD;
             pstmtDeleteMembri.setInt(1, idEchipa);&#xD;
             pstmtDeleteMembri.executeUpdate();&#xD;
             getServletContext().log(&quot;Membrii echipei &quot; + idEchipa + &quot; au fost șterși&quot;);&#xD;
         }&#xD;
&#xD;
         // Apoi ștergem echipa&#xD;
         String sqlDeleteEchipa = &quot;DELETE FROM echipe WHERE id = ?&quot;;&#xD;
         try (PreparedStatement pstmtDeleteEchipa = conn.prepareStatement(sqlDeleteEchipa)) {&#xD;
             pstmtDeleteEchipa.setInt(1, idEchipa);&#xD;
             int rowsAffected = pstmtDeleteEchipa.executeUpdate();&#xD;
             &#xD;
             if (rowsAffected > 0) {&#xD;
                 conn.commit();&#xD;
                 getServletContext().log(&quot;Echipa &quot; + idEchipa + &quot; a fost ștearsă cu succes&quot;);&#xD;
                 &#xD;
                 // Returnează un răspuns JSON de succes&#xD;
                 response.setContentType(&quot;application/json&quot;);&#xD;
                 response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
                 response.getWriter().write(&quot;{\&quot;success\&quot;: true, \&quot;message\&quot;: \&quot;Echipa a fost ștearsă cu succes.\&quot;}&quot;);&#xD;
             } else {&#xD;
                 conn.rollback();&#xD;
                 getServletContext().log(&quot;Eroare la ștergerea echipei &quot; + idEchipa + &quot; - niciun rând afectat&quot;);&#xD;
                 &#xD;
                 // Returnează un răspuns JSON de eroare&#xD;
                 response.setContentType(&quot;application/json&quot;);&#xD;
                 response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
                 response.getWriter().write(&quot;{\&quot;success\&quot;: false, \&quot;message\&quot;: \&quot;Nu s-a putut șterge echipa.\&quot;}&quot;);&#xD;
             }&#xD;
         }&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;JDBC Driver not found&quot;, e);&#xD;
         &#xD;
         // Rollback transaction if needed&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             getServletContext().log(&quot;Error during rollback&quot;, ex);&#xD;
         }&#xD;
         &#xD;
         // Returnează un răspuns JSON de eroare&#xD;
         response.setContentType(&quot;application/json&quot;);&#xD;
         response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
         response.getWriter().write(&quot;{\&quot;success\&quot;: false, \&quot;message\&quot;: \&quot;Eroare la încărcarea driver-ului JDBC.\&quot;}&quot;);&#xD;
     } catch (SQLException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Database error&quot;, e);&#xD;
         &#xD;
         // Rollback transaction&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             getServletContext().log(&quot;Error during rollback&quot;, ex);&#xD;
         }&#xD;
         &#xD;
         // Returnează un răspuns JSON de eroare&#xD;
         response.setContentType(&quot;application/json&quot;);&#xD;
         response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
         response.getWriter().write(&quot;{\&quot;success\&quot;: false, \&quot;message\&quot;: \&quot;Eroare la baza de date: &quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
     } catch (Exception e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Unexpected error&quot;, e);&#xD;
         &#xD;
         // Rollback transaction&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             getServletContext().log(&quot;Error during rollback&quot;, ex);&#xD;
         }&#xD;
         &#xD;
         // Returnează un răspuns JSON de eroare&#xD;
         response.setContentType(&quot;application/json&quot;);&#xD;
         response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
         response.getWriter().write(&quot;{\&quot;success\&quot;: false, \&quot;message\&quot;: \&quot;Eroare neașteptată: &quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
     } finally {&#xD;
         // Reset auto-commit and close connection&#xD;
         if (conn != null) {&#xD;
             try {&#xD;
                 conn.setAutoCommit(true);&#xD;
                 conn.close();&#xD;
             } catch (SQLException e) {&#xD;
                 getServletContext().log(&quot;Error closing connection&quot;, e);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UD-C4EVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIiZ0EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UD-C4UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UD-p8EVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S8s40EVdEfCS7cth2SLu0w" name="CheckInServlet">
        <generalization xmi:id="_UD_4FEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGqxkEVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGqxkUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGqxkkVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGqxk0VdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGqxlEVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGqxlUVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIiZ00VdEfCS7cth2SLu0w" name="doPost" specification="_UD_RAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIiZ1EVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIiZ1UVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json;charset=UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     JSONObject json = new JSONObject();&#xD;
     &#xD;
     HttpSession session = request.getSession();&#xD;
     Integer userId = (Integer) session.getAttribute(&quot;userId&quot;);&#xD;
     &#xD;
     if (userId == null) {&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Utilizator neautentificat&quot;);&#xD;
         out.print(json.toString());&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     String comentariu = request.getParameter(&quot;comentariu&quot;);&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         String sql = &quot;INSERT INTO prezenta (id_ang, data, ora, comentariu) VALUES (?, ?, ?, ?)&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setInt(1, userId);&#xD;
         pstmt.setDate(2, java.sql.Date.valueOf(LocalDate.now()));&#xD;
         pstmt.setTime(3, java.sql.Time.valueOf(LocalTime.now()));&#xD;
         pstmt.setString(4, comentariu);&#xD;
         &#xD;
         pstmt.executeUpdate();&#xD;
         pstmt.close();&#xD;
         &#xD;
         json.put(&quot;success&quot;, true);&#xD;
         &#xD;
         // Trimite notificare către HR dacă este o întârziere&#xD;
         if (LocalTime.now().isAfter(LocalTime.of(9, 0))) {&#xD;
             notificaHRIntarziere(conn, userId, comentariu);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Eroare la înregistrarea prezenței&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Eroare la încărcarea driver-ului JDBC&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     out.print(json.toString());&#xD;
     out.flush();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIiZ1kVdEfCS7cth2SLu0w" name="notificaHRIntarziere" specification="_UD_4EEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIiZ10VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIiZ2EVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIiZ2UVdEfCS7cth2SLu0w" name="comentariu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>// Găsește toți utilizatorii HR&#xD;
     String sql = &quot;SELECT id FROM useri WHERE tip = 3 AND id_dep = 1&quot;;&#xD;
     PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
     ResultSet rs = pstmt.executeQuery();&#xD;
     &#xD;
     while (rs.next()) {&#xD;
         // Trimite notificare către fiecare HR&#xD;
         String notificareSql = &quot;INSERT INTO notificari_general (id_destinatar, tip, mesaj) &quot; +&#xD;
                               &quot;VALUES (?, 'INTARZIERE', ?)&quot;;&#xD;
         PreparedStatement nPstmt = conn.prepareStatement(notificareSql);&#xD;
         nPstmt.setInt(1, rs.getInt(&quot;id&quot;));&#xD;
         nPstmt.setString(2, &quot;Angajatul cu ID &quot; + userId + &quot; a întârziat. &quot; +&#xD;
                         (comentariu != null ? &quot;Motiv: &quot; + comentariu : &quot;&quot;));&#xD;
         nPstmt.executeUpdate();&#xD;
         nPstmt.close();&#xD;
     }&#xD;
     &#xD;
     rs.close();&#xD;
     pstmt.close();&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UD_RAEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIiZ00VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UD_RAUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UD_RAkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UD_4EEVdEfCS7cth2SLu0w" name="notificaHRIntarziere" visibility="private" method="_UIiZ1kVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UD_4EUVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UD_4EkVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UD_4E0VdEfCS7cth2SLu0w" name="comentariu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S8xKQEVdEfCS7cth2SLu0w" name="DeleteDenumireServlet">
        <generalization xmi:id="_UEBGM0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGrYoEVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGrYoUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGrYokVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGrYo0VdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGrYpEVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGr_sEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIjA4EVdEfCS7cth2SLu0w" name="doPost" specification="_UEBGMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIjA4UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIjA4kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json;charset=UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     JSONObject json = new JSONObject();&#xD;
     &#xD;
//        HttpSession session = request.getSession();&#xD;
//        Integer userTip = (Integer) session.getAttribute(&quot;userTip&quot;);&#xD;
//        Integer userDep = (Integer) session.getAttribute(&quot;userDep&quot;);&#xD;
//        &#xD;
//        // Verificare permisiuni - doar Admin HR sau Director&#xD;
//        if (userTip == null || (userTip != 0 &amp;&amp; (userTip != 3 &amp;&amp; userDep != 1))) {&#xD;
//            json.put(&quot;success&quot;, false);&#xD;
//            json.put(&quot;message&quot;, &quot;Nu aveți permisiuni pentru această operațiune!&quot;);&#xD;
//            out.print(json.toString());&#xD;
//            return;&#xD;
//        }&#xD;
//        &#xD;
     int id = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         // Șterge denumirea&#xD;
         String sql = &quot;DELETE FROM denumiri_pozitii WHERE id = ?&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setInt(1, id);&#xD;
         &#xD;
         int rowsAffected = pstmt.executeUpdate();&#xD;
         &#xD;
         if (rowsAffected > 0) {&#xD;
             json.put(&quot;success&quot;, true);&#xD;
             json.put(&quot;message&quot;, &quot;Denumirea a fost ștearsă cu succes!&quot;);&#xD;
         } else {&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Nu s-a putut șterge denumirea!&quot;);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Eroare la ștergerea denumirii: &quot; + e.getMessage());&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Eroare la încărcarea driverului JDBC!&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     out.print(json.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UEBGMEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIjA4EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEBGMUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEBGMkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S80NkEVdEfCS7cth2SLu0w" name="ConcediiSuplimentareServlet">
        <generalization xmi:id="_UECUU0VdEfCS7cth2SLu0w" general="_T_nHUUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIjA40VdEfCS7cth2SLu0w" name="doPost" specification="_UECUUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIjA5EVdEfCS7cth2SLu0w" name="request" type="_T_nuYUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIjA5UVdEfCS7cth2SLu0w" name="response" type="_T_oVcUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     try {&#xD;
         // Încărcare driver MySQL&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Creare conexiune directă&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         conn.setAutoCommit(false);&#xD;
         &#xD;
         // Criterii pentru zile suplimentare de concediu&#xD;
         String[] sqlCriteria = {&#xD;
             // Productivitate 50% în ultimul trimestru&#xD;
             &quot;SELECT u.id, 5 as zile_extra FROM useri u &quot; +&#xD;
             &quot;WHERE u.activ = 1 AND &quot; +&#xD;
             &quot;(SELECT AVG(procent) FROM tasks t JOIN statusuri2 s ON t.status = s.id &quot; +&#xD;
             &quot;WHERE t.id_ang = u.id AND t.end >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)) >= 50&quot;,&#xD;
             &#xD;
             // 5 activități în ultimul an&#xD;
             &quot;SELECT u.id, 3 as zile_extra FROM useri u &quot; +&#xD;
             &quot;WHERE u.activ = 1 AND &quot; +&#xD;
             &quot;(SELECT COUNT(*) FROM tasks t WHERE t.id_ang = u.id &quot; +&#xD;
             &quot;AND t.end >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) >= 5&quot;,&#xD;
             &#xD;
             // Prezență 100% în ultimul trimestru&#xD;
             &quot;SELECT u.id, 2 as zile_extra FROM useri u &quot; +&#xD;
             &quot;WHERE u.activ = 1 AND &quot; +&#xD;
             &quot;(SELECT COUNT(*) FROM concedii c WHERE c.id_ang = u.id &quot; +&#xD;
             &quot;AND c.start_c >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND c.status = 2) = 0&quot;&#xD;
         };&#xD;
         &#xD;
         for (String sql : sqlCriteria) {&#xD;
             PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
             ResultSet rs = pstmt.executeQuery();&#xD;
             &#xD;
             while (rs.next()) {&#xD;
                 int idAng = rs.getInt(&quot;id&quot;);&#xD;
                 int zileExtra = rs.getInt(&quot;zile_extra&quot;);&#xD;
                 &#xD;
                 // Adaugă zile suplimentare&#xD;
                 String updateSql = &quot;UPDATE useri SET zileramase = zileramase + ? WHERE id = ?&quot;;&#xD;
                 PreparedStatement updatePstmt = conn.prepareStatement(updateSql);&#xD;
                 updatePstmt.setInt(1, zileExtra);&#xD;
                 updatePstmt.setInt(2, idAng);&#xD;
                 updatePstmt.executeUpdate();&#xD;
                 updatePstmt.close();&#xD;
                 &#xD;
                 // Înregistrează în istoric&#xD;
                 String historicSql = &quot;INSERT INTO istoric_concedii_suplimentare &quot; +&#xD;
                                    &quot;(id_ang, zile_acordate, motiv, data_acordare) VALUES (?, ?, ?, CURDATE())&quot;;&#xD;
                 PreparedStatement historicPstmt = conn.prepareStatement(historicSql);&#xD;
                 historicPstmt.setInt(1, idAng);&#xD;
                 historicPstmt.setInt(2, zileExtra);&#xD;
                 historicPstmt.setString(3, &quot;Criterii performanță îndeplinite&quot;);&#xD;
                 historicPstmt.executeUpdate();&#xD;
                 historicPstmt.close();&#xD;
             }&#xD;
             &#xD;
             rs.close();&#xD;
             pstmt.close();&#xD;
         }&#xD;
         &#xD;
         conn.commit();&#xD;
         response.sendRedirect(&quot;concedii_suplimentare.jsp?success=true&quot;);&#xD;
         &#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;concedii_suplimentare.jsp?error=driverError&quot;);&#xD;
     } catch (SQLException e) {&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             ex.printStackTrace();&#xD;
         }&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;concedii_suplimentare.jsp?error=true&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { &#xD;
                 conn.setAutoCommit(true);&#xD;
                 conn.close(); &#xD;
             } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UECUUEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIjA40VdEfCS7cth2SLu0w" raisedException="_T_mgQEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UECUUUVdEfCS7cth2SLu0w" name="request" type="_T_nuYUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UECUUkVdEfCS7cth2SLu0w" name="response" type="_T_oVcUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S83Q4EVdEfCS7cth2SLu0w" name="DelAdevServlet">
        <ownedComment xmi:id="_UJVEAEVdEfCS7cth2SLu0w">
          <body>Servlet implementation class DelAdevServlet</body>
        </ownedComment>
        <generalization xmi:id="_UEEJgkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGr_sUVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGr_skVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIjA5kVdEfCS7cth2SLu0w" name="DelAdevServlet" specification="_S84fAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIjA50VdEfCS7cth2SLu0w" type="_S83Q4EVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
     // TODO Auto-generated constructor stub&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIjA6EVdEfCS7cth2SLu0w" name="doGet" specification="_UEC7YEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIjn8EVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIjn8UVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Verificare sesiune&#xD;
     HttpSession sesiune = request.getSession(false);&#xD;
     if (sesiune == null) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Nu există sesiune activă!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'login.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     MyUser currentUser = (MyUser) sesiune.getAttribute(&quot;currentUser&quot;);&#xD;
     if (currentUser == null) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Utilizator neconectat!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'login.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Extragere parametru idadev&#xD;
     int idAdeverinta;&#xD;
     try {&#xD;
         idAdeverinta = Integer.parseInt(request.getParameter(&quot;idadev&quot;));&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('ID adeverință invalid!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'adeverintenoiuser.jsp?pag=1';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Verificare permisiuni&#xD;
     Connection conn = null;&#xD;
     PreparedStatement verificareStmt = null;&#xD;
     PreparedStatement stergereStmt = null;&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         conn.setAutoCommit(false); // Începem o tranzacție&#xD;
         &#xD;
         // Verificare existență adeverință și permisiune de ștergere&#xD;
         String sqlVerificare = &quot;SELECT a.id_ang, a.status, u.tip FROM adeverinte a JOIN useri u ON a.id_ang = u.id WHERE a.id = ?&quot;;&#xD;
         verificareStmt = conn.prepareStatement(sqlVerificare);&#xD;
         verificareStmt.setInt(1, idAdeverinta);&#xD;
         &#xD;
         ResultSet rs = verificareStmt.executeQuery();&#xD;
         &#xD;
         if (!rs.next()) {&#xD;
             conn.rollback();&#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Adeverința nu există!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp?pag=1';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         int idAngajat = rs.getInt(&quot;id_ang&quot;);&#xD;
         int status = rs.getInt(&quot;status&quot;);&#xD;
         int tipAngajat = rs.getInt(&quot;tip&quot;);&#xD;
         &#xD;
         int currentUserId = currentUser.getId();&#xD;
         int userType = currentUser.getTip();&#xD;
         &#xD;
         // Verificare dacă utilizatorul are dreptul să șteargă adeverința&#xD;
         boolean hasPermission = false;&#xD;
         &#xD;
         // Utilizatorul poate șterge adeverințele proprii doar dacă sunt în status 0 (neaprobate)&#xD;
         if (idAngajat == currentUserId &amp;&amp; status == 0) {&#xD;
             hasPermission = true;&#xD;
         }&#xD;
         &#xD;
         // Șeful (tip=3) poate șterge adeverințele angajaților din departamentul său&#xD;
         if (userType == 3 &amp;&amp; status &lt;= 1) {&#xD;
             // Verificăm dacă angajatul este în același departament&#xD;
             String sqlDep = &quot;SELECT 1 FROM useri WHERE id = ? AND id_dep = (SELECT id_dep FROM useri WHERE id = ?)&quot;;&#xD;
             try (PreparedStatement depStmt = conn.prepareStatement(sqlDep)) {&#xD;
                 depStmt.setInt(1, idAngajat);&#xD;
                 depStmt.setInt(2, currentUserId);&#xD;
                 ResultSet rsDep = depStmt.executeQuery();&#xD;
                 if (rsDep.next()) {&#xD;
                     hasPermission = true;&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // Directorul (tip=0) poate șterge orice adeverință&#xD;
         if (userType == 0) {&#xD;
             hasPermission = true;&#xD;
         }&#xD;
         &#xD;
         if (!hasPermission) {&#xD;
             conn.rollback();&#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Nu aveți permisiunea de a șterge această adeverință!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp?pag=1';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Ștergerea adeverinței&#xD;
         String sqlStergere = &quot;DELETE FROM adeverinte WHERE id = ?&quot;;&#xD;
         stergereStmt = conn.prepareStatement(sqlStergere);&#xD;
         stergereStmt.setInt(1, idAdeverinta);&#xD;
         &#xD;
         int rezultat = stergereStmt.executeUpdate();&#xD;
         &#xD;
         if (rezultat > 0) {&#xD;
             conn.commit(); // Confirmăm tranzacția&#xD;
             &#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Adeverința a fost ștearsă cu succes!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp?pag=1';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
         } else {&#xD;
             conn.rollback();&#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Nu s-a putut șterge adeverința!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp?pag=1';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             ex.printStackTrace();&#xD;
         }&#xD;
         &#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Eroare la ștergerea adeverinței: &quot; + e.getMessage() + &quot;');&quot;);&#xD;
         out.println(&quot;window.location.href = 'adeverintenoiuser.jsp?pag=1';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
     } finally {&#xD;
         try {&#xD;
             if (verificareStmt != null) verificareStmt.close();&#xD;
             if (stergereStmt != null) stergereStmt.close();&#xD;
             if (conn != null) {&#xD;
                 conn.setAutoCommit(true); // Resetăm autocommit&#xD;
                 conn.close();&#xD;
             }&#xD;
         } catch (SQLException e) {&#xD;
             e.printStackTrace();&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIjn8kVdEfCS7cth2SLu0w" name="doPost" specification="_UEDickVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIjn80VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIjn9EVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doGet(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S84fAEVdEfCS7cth2SLu0w" name="DelAdevServlet" method="_UIjA5kVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S85GEEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S85GEUVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_S85GEkVdEfCS7cth2SLu0w" type="_S83Q4EVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UEC7YEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UIjA6EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEDicEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEDicUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UEDickVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIjn8kVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEEJgEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEEJgUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S87iUEVdEfCS7cth2SLu0w" name="DelConServlet">
        <ownedComment xmi:id="_UJVEAUVdEfCS7cth2SLu0w">
          <body>Implementarea servlet-ului ce se ocupa de stergerea unui concediu</body>
        </ownedComment>
        <generalization xmi:id="_UEF-sEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGr_s0VdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGr_tEVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGsmwEVdEfCS7cth2SLu0w" name="concediu" visibility="private" type="_S32OAEVdEfCS7cth2SLu0w" association="_UKRfMUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIjn9UVdEfCS7cth2SLu0w" name="DelConServlet" specification="_S88wcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIjn9kVdEfCS7cth2SLu0w" type="_S87iUEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIjn90VdEfCS7cth2SLu0w" name="init" specification="_S89-kEVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>concediu = new DelConDao();
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIjn-EVdEfCS7cth2SLu0w" name="doGet" specification="_UEEwkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIjn-UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIjn-kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doPost(request, response);
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIkPAEVdEfCS7cth2SLu0w" name="doPost" specification="_UEFXoEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIkPAUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIkPAkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// declarare si initializare variabile
		int id = Integer.valueOf(request.getParameter(&quot;idcon&quot;));
		String inceput = request.getParameter(&quot;start&quot;);
		String sfarsit = request.getParameter(&quot;end&quot;);
 	String motiv = request.getParameter(&quot;motiv&quot;);
 	String locatie = request.getParameter(&quot;locatie&quot;);
 	
     Concediu concediul = new Concediu();
     
     // setare date de clasa a obiectului concediu
     concediul.setId(id);
     concediul.setInceput(inceput);
     concediul.setSfarsit(sfarsit);
     concediul.setMotiv(motiv);
     concediul.setLocatie(locatie);
     
     try {
         concediu.stergere(concediul);
        
         // trimitere asincrona
         jakarta.servlet.AsyncContext asyncContext = request.startAsync();
          
         asyncContext.start(() -> {
             try {
             	// am facut o clasa/un obiect separat ce trimite mailuri, separat de un mail sender, ci efectiv ceva ce pregatste un email
                 MailAsincron.send9(id);
                 asyncContext.complete();  // Completarea actiunii asincrone
             } catch (Exception e) {
                 e.printStackTrace();  // in caz de eroare, afisez in concola serverului sa vad de ce + redirectare la pagina de adaugare/modificare concediu + alerta
                 asyncContext.complete();  // Context asincron finalizat indiferent de situatie
                 response.setContentType(&quot;text/html;charset=UTF-8&quot;);
     	        PrintWriter out = null;
					try {
						out = response.getWriter();
					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
     	        out.println(&quot;&lt;script type='text/javascript'>&quot;);
     	        out.println(&quot;alert('eroare din cauze necunoscute!');&quot;);
     	        out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
     	        out.println(&quot;&lt;/script>&quot;);
     	        out.close();
     	        return; 
                 
             }
         });
         
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);
         PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Stergere cu succes!');&quot;);
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
     } catch (Exception e) {
     	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
		    PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Nu s-a putut sterge concediul din motive necunoscute.');&quot;);
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
			e.printStackTrace();
     }
	</body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S88wcEVdEfCS7cth2SLu0w" name="DelConServlet" method="_UIjn9UVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S89XgEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S89XgUVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedComment xmi:id="_UJVEAkVdEfCS7cth2SLu0w">
            <body>@see HttpServlet#HttpServlet()</body>
          </ownedComment>
          <ownedParameter xmi:id="_S89XgkVdEfCS7cth2SLu0w" type="_S87iUEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S89-kEVdEfCS7cth2SLu0w" name="init" method="_UIjn90VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJVEA0VdEfCS7cth2SLu0w">
            <body>initializare DAO</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:id="_UEEwkEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UIjn-EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJVEBEVdEfCS7cth2SLu0w">
            <body>@see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</body>
          </ownedComment>
          <ownedParameter xmi:id="_UEEwkUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEEwkkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UEFXoEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIkPAEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJVEBUVdEfCS7cth2SLu0w">
            <body>@see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</body>
          </ownedComment>
          <ownedParameter xmi:id="_UEFXoUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEFXokVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S9CQAEVdEfCS7cth2SLu0w" name="DelDepServlet">
        <ownedComment xmi:id="_UJVEBkVdEfCS7cth2SLu0w">
          <body>Servlet ce se ocupa de stergerea unui departament</body>
        </ownedComment>
        <generalization xmi:id="_UEHz4EVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGtN0EVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGtN0UVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGtN0kVdEfCS7cth2SLu0w" name="employeeDao" visibility="private" type="_S42TkEVdEfCS7cth2SLu0w" association="_UKSGQUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIkPA0VdEfCS7cth2SLu0w" name="init" specification="_S9C3EEVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>try {
         employeeDao = new StergereDepartamentDAO();
     } catch (Exception e) {
         throw new ServletException(&quot;Failed to initialize DelUsrDao&quot;, e);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIkPBEVdEfCS7cth2SLu0w" name="doGet" specification="_UEGlwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIkPBUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIkPBkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doPost(request, response);
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIk2EEVdEfCS7cth2SLu0w" name="doPost" specification="_UEHM0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIk2EUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIk2EkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String departament = request.getParameter(&quot;username&quot;);
     if (departament == null) {
     	// daca nu a primit de la form departamentul
     	 response.setContentType(&quot;text/html;charset=UTF-8&quot;);
     	PrintWriter out = response.getWriter();
 		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
 		    out.println(&quot;alert('Nu e nimeni logat?!');&quot;);
 		    out.println(&quot;window.location.href = 'modifdeldep.jsp';&quot;);
 		    out.println(&quot;&lt;/script>&quot;);
 		    out.close();
     }
     int id = fetchId(departament);
     try {
         employeeDao.stergere(departament, id);
         // trimit notificare la angajati

         
         
         // apoi redirectionez la pagina care listeaza si permite modificarea si stergerea departamentelor
         // acest lucru il fac pentru ca utilizatorul sa poata vedea ce departamente sunt la un moment dat in institutie 
         // + sa vada ca departamanetul nu mai exista printre departamentele existente
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);
         PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Stergere cu succes!');&quot;);
		    out.println(&quot;window.location.href = 'modifdeldep.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
		    // Cea mai simplă alternativă
		    new Thread(() -> {
		        try {
		            // Codul operațiunii asincrone (ex: trimitere email)
		            MailAsincron.send5(departament);
		        } catch (Exception e) {
		            e.printStackTrace();
		        }
		    }).start();

     } catch (Exception e) {
     	// in caz de eroare redirectionez la aceeasi pagina, ca sa poata vedea toate departamentele existente, dar cu alerta diefrita
     	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
		    PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Nu s-a putut sterge departamentul din motive necunoscute.');&quot;);
		    out.println(&quot;window.location.href = 'modifdeldep.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
			e.printStackTrace();
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIk2E0VdEfCS7cth2SLu0w" name="fetchId" specification="_S9EFMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIk2FEVdEfCS7cth2SLu0w" name="departament">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIk2FUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile
     int id = -1;
     try {
     	// creare conexiune cu baza de date
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
         try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
              PreparedStatement preparedStatement = connection.prepareStatement(&quot;SELECT id_dep FROM departament WHERE nume_dep = ?&quot;)) {
             preparedStatement.setString(1, departament);
             try (ResultSet rs = preparedStatement.executeQuery()) {
                 if (rs.next()) {
                 	// extragere id
                     id = rs.getInt(&quot;id_dep&quot;);
                 }
             }
         }
     } catch (ClassNotFoundException | SQLException e) {
         e.printStackTrace();
     }
     return id;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S9C3EEVdEfCS7cth2SLu0w" name="init" method="_UIkPA0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJVEB0VdEfCS7cth2SLu0w">
            <body>initializare DAO</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:id="_S9EFMEVdEfCS7cth2SLu0w" name="fetchId" method="_UIk2E0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJVECUVdEfCS7cth2SLu0w">
            <body>Functie ce afla id-ul unui departament in functie de numele acestuia. departamentele au nume unic
     * @param departament
     * @return id departament cautat</body>
          </ownedComment>
          <ownedParameter xmi:id="_S9EFMUVdEfCS7cth2SLu0w" name="departament">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S9EFMkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UEGlwEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UIkPBEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJVECEVdEfCS7cth2SLu0w">
            <body>pentru cazul in care se face actiune GET</body>
          </ownedComment>
          <ownedParameter xmi:id="_UEGlwUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEGlwkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UEHM0EVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIk2EEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEHM0UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEHM0kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S9GhcEVdEfCS7cth2SLu0w" name="DelUsrServlet">
        <ownedComment xmi:id="_UJVECkVdEfCS7cth2SLu0w">
          <body>Clasa ce implementeaza servlet-ul de stergere al unui utilizator</body>
        </ownedComment>
        <generalization xmi:id="_UEJpE0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGt04UVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGt04kVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGub8EVdEfCS7cth2SLu0w" name="employeeDao" visibility="private" type="_S35RUEVdEfCS7cth2SLu0w" association="_UKStUUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIldIEVdEfCS7cth2SLu0w" name="init" specification="_S9HvkEVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>try {
         employeeDao = new DelUsrDao();
     } catch (Exception e) {
         throw new ServletException(&quot;Failed to initialize DeldDao&quot;, e);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIldIUVdEfCS7cth2SLu0w" name="doGet" specification="_UEJCAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIldIkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIldI0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doPost(request, response);
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIldJEVdEfCS7cth2SLu0w" name="doPost" specification="_UEJpEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIldJUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIldJkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// declarare si initializare variabile
 	int id = Integer.parseInt(request.getParameter(&quot;id&quot;));
 	String numeutilizator = getNumeUtilizatorDinId(id);
     if (numeutilizator == null) {
     	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
     	PrintWriter out = response.getWriter();
 		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
 		    out.println(&quot;alert('Nu se stie cine sa fie sters');&quot;);
 		    out.println(&quot;window.location.href = 'modifdel.jsp';&quot;);
 		    out.println(&quot;&lt;/script>&quot;);
 		    out.close();
     }

     try {
         employeeDao.deleteUser(numeutilizator, id);
         
         // Cea mai simplă alternativă
		    new Thread(() -> {
		        try {
		            // Codul operațiunii asincrone (ex: trimitere email)
		            MailAsincron.send10(id, numeutilizator);
		        } catch (Exception e) {
		            e.printStackTrace();
		        }
		    }).start();

         
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);
         // daca s-a facut stergerea cu succes -> redirectare la pagina in care afiseaza utilizatorii sa vada ca s-a sters
         PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Stergere cu succes!');&quot;);
		    out.println(&quot;window.location.href = 'modifdel.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
     } catch (Exception e) {
     	// daca nu s-a putut realiza actiunea -> redirectare la pagina in care afiseaza utilizatorii sa vada ca NU s-a sters
     	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
		    PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Nu s-a putut sterge utilizatorul din motive necunoscute.');&quot;);
		    out.println(&quot;window.location.href = 'modifdel.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
			e.printStackTrace();
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIldJ0VdEfCS7cth2SLu0w" name="getNumeUtilizatorDinId" specification="_S9IWoEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIldKEVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIldKUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>String numeutilizator = &quot;&quot;;
     try {
     	// incarcare driver
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
         // creare conexiune
         try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
         		// pregatire interogare
              PreparedStatement interogare = conexiune.prepareStatement(&quot;SELECT username FROM useri WHERE id = ?&quot;)) {
             interogare.setInt(1, userId);
             // executare interogare
             try (ResultSet rezultat = interogare.executeQuery()) {
                 if (rezultat.next()) {
                 	// daca s-au intors niste linii, atunci se alege coloana username ca sa extragem datele de care avem nevoie
                     numeutilizator = rezultat.getString(&quot;username&quot;);
                 }
             }
         }
     } catch (ClassNotFoundException | SQLException e) {
         e.printStackTrace();
     }
     return numeutilizator;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S9HvkEVdEfCS7cth2SLu0w" name="init" method="_UIldIEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJVEC0VdEfCS7cth2SLu0w">
            <body>initializare DAO</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:id="_S9IWoEVdEfCS7cth2SLu0w" name="getNumeUtilizatorDinId" visibility="private" method="_UIldJ0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJVrEEVdEfCS7cth2SLu0w">
            <body>Metoda care ajuta la aflarea numelui unui utilizator dupa id
     * @param userId
     * @return nume de utilizator sau &quot;&quot; daca nu a gasit nimic</body>
          </ownedComment>
          <ownedParameter xmi:id="_S9I9sEVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S9I9sUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UEJCAEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UIldIUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEJCAUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEJCAkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UEJpEEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIldJEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEJpEUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEJpEkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S9LZ8EVdEfCS7cth2SLu0w" name="CompanyPolicyProcessor">
        <ownedComment xmi:id="_UJVrEUVdEfCS7cth2SLu0w">
          <body>Procesor pentru politicile companiei și regulament&#xD;
Gestionează rezumatul regulamentului și verificarea permisiunilor</body>
        </ownedComment>
        <ownedAttribute xmi:id="_UGub8kVdEfCS7cth2SLu0w" name="COMPANY_REGULATION" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGvDAEVdEfCS7cth2SLu0w" value="&quot;REGULAMENTUL INTERN AL COMPANIEI &quot; + &#xD;&#xA;        &#xD;&#xA;        &quot;CAPITOLUL I - DISPOZIȚII GENERALE&quot; +&#xD;&#xA;        &quot;Prezentul regulament se aplică tuturor angajaților companiei și reglementează drepturile și obligațiile acestora în cadrul relației de muncă.&quot; +&#xD;&#xA;        &#xD;&#xA;        &quot;CAPITOLUL II - PROGRAMUL DE LUCRU&quot; +&#xD;&#xA;        &quot;Programul normal de lucru este de 8 ore pe zi, între orele 09:00-17:00, cu pauza de masă de 1 oră între 12:00-13:00.&quot; +&#xD;&#xA;        &quot;Angajații pot beneficia de program flexibil între orele 08:00-18:00, cu acordul managerului direct.&quot; +&#xD;&#xA;        &quot;Munca de acasă (remote work) este permisă maximum 3 zile pe săptămână, cu aprobarea prealabilă.&quot; +&#xD;&#xA;        &quot;Orele suplimentare se compensează cu timp liber sau se plătesc cu spor de 75%.&quot; +&#xD;&#xA;        &#xD;&#xA;        &quot;CAPITOLUL III - CONCEDII ȘI ABSENȚE&quot; +&#xD;&#xA;        &quot;Concediul de odihnă anual este de 21 zile lucrătoare pentru angajații cu peste 5 ani vechime și 25 zile pentru cei cu peste 10 ani.&quot; +&#xD;&#xA;        &quot;Concediul medical se acordă pe baza certificatului medical, fără limită de timp.&quot; +&#xD;&#xA;        &quot;Concediul fără plată poate fi acordat maximum 30 zile pe an, cu acordul managerului.&quot; +&#xD;&#xA;        &quot;Absențele nemotivate se sancționează conform legislației în vigoare.&quot; +&#xD;&#xA;        &#xD;&#xA;        &quot;CAPITOLUL IV - DREPTURI ȘI OBLIGAȚII&quot; +&#xD;&#xA;        &quot;Angajații au dreptul la formare profesională continuă, promovare pe bază de merit și mediu de lucru sigur.&quot; +&#xD;&#xA;        &quot;Angajații au obligația să respecte confidențialitatea datelor companiei și să nu divulge informații comerciale.&quot; +&#xD;&#xA;        &quot;Este interzisă folosirea echipamentelor companiei în scopuri personale în timpul programului de lucru.&quot; +&#xD;&#xA;        &quot;Consumul de alcool și substanțe interzise pe proprietatea companiei este strict interzis.&quot; +&#xD;&#xA;        &#xD;&#xA;        &quot;CAPITOLUL V - EVALUAREA PERFORMANȚEI&quot; +&#xD;&#xA;        &quot;Evaluarea performanței se face anual și poate duce la majorări salariale sau promovări.&quot; +&#xD;&#xA;        &quot;Angajații cu performanțe scăzute vor fi incluși în programe de îmbunătățire.&quot; +&#xD;&#xA;        &quot;Performanțele excepționale sunt recompensate cu bonusuri și recunoaștere publică.&quot; +&#xD;&#xA;        &#xD;&#xA;        &quot;CAPITOLUL VI - DISCIPLINA MUNCII&quot; +&#xD;&#xA;        &quot;Întârzierea sistematică (peste 3 întârzieri pe lună) se sancționează cu avertisment scris.&quot; +&#xD;&#xA;        &quot;Lipsele nemotivate se sancționează cu rețineri salariale sau avertisment disciplinar.&quot; +&#xD;&#xA;        &quot;Nerespectarea confidențialității poate duce la desfacerea contractului de muncă.&quot; +&#xD;&#xA;        &quot;Violența fizică sau verbală este motiv de concediere imediată.&quot; +&#xD;&#xA;        &#xD;&#xA;        &quot;CAPITOLUL VII - BENEFICII ȘI FACILITĂȚI&quot; +&#xD;&#xA;        &quot;Angajații beneficiază de asigurare medicală privată după 6 luni de vechime.&quot; +&#xD;&#xA;        &quot;Tichetele de masă se acordă pentru zilele lucrate efectiv.&quot; +&#xD;&#xA;        &quot;Programele de formare sunt gratuite și încurajate.&quot; +&#xD;&#xA;        &quot;Facilități pentru părinți: program redus și zile libere suplimentare pentru îngrijirea copiilor.&quot; +&#xD;&#xA;        &#xD;&#xA;        &quot;CAPITOLUL VIII - TEHNOLOGIA ȘI SECURITATEA&quot; +&#xD;&#xA;        &quot;Accesul la internet este monitorizat și trebuie folosit responsabil.&quot; +&#xD;&#xA;        &quot;Parolele trebuie schimbate la fiecare 3 luni și să conțină caractere speciale.&quot; +&#xD;&#xA;        &quot;Descărcarea de software neautorizat este interzisă.&quot; +&#xD;&#xA;        &quot;Datele companiei trebuie salvate doar pe servere autorizate.&quot; +&#xD;&#xA;        &#xD;&#xA;        &quot;CAPITOLUL IX - COMUNICAREA INTERNĂ&quot; +&#xD;&#xA;        &quot;Comunicarea oficială se face prin email corporativ sau platformele aprobate.&quot; +&#xD;&#xA;        &quot;Reclamațiile se depun la departamentul HR sau prin sistemul de feedback anonim.&quot; +&#xD;&#xA;        &quot;Reuniunile de echipă sunt obligatorii și se țin săptămânal.&quot; +&#xD;&#xA;        &#xD;&#xA;        &quot;CAPITOLUL X - DISPOZIȚII FINALE&quot; +&#xD;&#xA;        &quot;Prezentul regulament intră în vigoare de la data semnării și poate fi modificat cu acordul părților.&quot; +&#xD;&#xA;        &quot;Nerespectarea regulamentului atrage răspunderea disciplinară conform legislației muncii.&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGvDAUVdEfCS7cth2SLu0w" name="POLICY_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" type="_T9_9wUVdEfCS7cth2SLu0w" isReadOnly="true" association="_UKTUYUVdEfCS7cth2SLu0w">
          <qualifier xmi:id="_UGwRIEVdEfCS7cth2SLu0w">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </qualifier>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGvqEUVdEfCS7cth2SLu0w" value="new HashMap&lt;>()"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGwRIUVdEfCS7cth2SLu0w" name="PERMISSION_PATTERN" visibility="private" isLeaf="true" isStatic="true" type="_T-aNcUVdEfCS7cth2SLu0w" isReadOnly="true" association="_UKT7cUVdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGw4MEVdEfCS7cth2SLu0w" value="Pattern.compile(&#xD;&#xA;        &quot;\\b(pot sa|pot să|am voie|este permis|se poate|este legal|am dreptul)\\b&quot;,&#xD;&#xA;        Pattern.CASE_INSENSITIVE&#xD;&#xA;    )"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UImEMEVdEfCS7cth2SLu0w" name="_initializer1" specification="_S9MoEEVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>POLICY_KEYWORDS.put(&quot;ALLOWED&quot;, Arrays.asList(&#xD;
         &quot;lucru acasa&quot;, &quot;remote&quot;, &quot;program flexibil&quot;, &quot;formare&quot;, &quot;cursuri&quot;, &quot;concediu medical&quot;,&#xD;
         &quot;concediu fara plata&quot;, &quot;pauza masa&quot;, &quot;tichet masa&quot;, &quot;asigurare medicala&quot;, &quot;bonus&quot;,&#xD;
         &quot;evaluare&quot;, &quot;promovare&quot;, &quot;reclamatii&quot;, &quot;feedback&quot;, &quot;ore suplimentare&quot;, &quot;compensare&quot;,&#xD;
         &quot;schimbare parola&quot;, &quot;reuniuni echipa&quot;, &quot;zile libere parinti&quot;&#xD;
     ));&#xD;
     &#xD;
     // Acțiuni interzise (răspuns negativ)&#xD;
     POLICY_KEYWORDS.put(&quot;FORBIDDEN&quot;, Arrays.asList(&#xD;
         &quot;alcool&quot;, &quot;substante&quot;, &quot;violenta&quot;, &quot;echipamente personale&quot;, &quot;software neautorizat&quot;,&#xD;
         &quot;divulgare informatii&quot;, &quot;confidentialitate&quot;, &quot;absente nemotivate&quot;, &quot;intarzieri&quot;,&#xD;
         &quot;internet personal&quot;, &quot;date externe&quot;, &quot;comunicare neoficiala&quot;&#xD;
     ));&#xD;
     &#xD;
     // Acțiuni condiționate (răspuns cu condiții)&#xD;
     POLICY_KEYWORDS.put(&quot;CONDITIONAL&quot;, Arrays.asList(&#xD;
         &quot;munca acasa&quot;, &quot;program flexibil&quot;, &quot;ore suplimentare&quot;, &quot;concediu&quot;, &quot;formare externa&quot;,&#xD;
         &quot;acces internet&quot;, &quot;utilizare echipamente&quot;, &quot;comunicare&quot;&#xD;
     ));&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UImEMUVdEfCS7cth2SLu0w" name="generateRegulationSummary" specification="_S9N2MEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UImEMkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder summary = new StringBuilder();&#xD;
     &#xD;
     summary.append(&quot;**📋 REZUMAT REGULAMENT COMPANIE**\n\n&quot;);&#xD;
     &#xD;
     summary.append(&quot;**🕒 PROGRAM LUCRU:**\n&quot;);&#xD;
     summary.append(&quot;• Program standard: 09:00-17:00 cu pauză 12:00-13:00\n&quot;);&#xD;
     summary.append(&quot;• Program flexibil: 08:00-18:00 (cu aprobare manager)\n&quot;);&#xD;
     summary.append(&quot;• Remote work: max 3 zile/săptămână\n&quot;);&#xD;
     summary.append(&quot;• Ore suplimentare: compensare timp liber sau +75% plată\n\n&quot;);&#xD;
     &#xD;
     summary.append(&quot;**🏖️ CONCEDII:**\n&quot;);&#xD;
     summary.append(&quot;• Concediu anual: 21 zile (5+ ani vechime), 25 zile (10+ ani)\n&quot;);&#xD;
     summary.append(&quot;• Concediu medical: nelimitat cu certificat\n&quot;);&#xD;
     summary.append(&quot;• Concediu fără plată: max 30 zile/an cu aprobare\n\n&quot;);&#xD;
     &#xD;
     summary.append(&quot;**💰 BENEFICII:**\n&quot;);&#xD;
     summary.append(&quot;• Asigurare medicală privată (după 6 luni)\n&quot;);&#xD;
     summary.append(&quot;• Tichete de masă pentru zilele lucrate\n&quot;);&#xD;
     summary.append(&quot;• Programe formare gratuite\n&quot;);&#xD;
     summary.append(&quot;• Facilități pentru părinți\n\n&quot;);&#xD;
     &#xD;
     summary.append(&quot;**⚠️ OBLIGAȚII PRINCIPALE:**\n&quot;);&#xD;
     summary.append(&quot;• Respectarea confidențialității datelor\n&quot;);&#xD;
     summary.append(&quot;• Folosirea responsabilă a echipamentelor\n&quot;);&#xD;
     summary.append(&quot;• Participarea la reuniunile de echipă\n&quot;);&#xD;
     summary.append(&quot;• Schimbarea parolelor la 3 luni\n\n&quot;);&#xD;
     &#xD;
     summary.append(&quot;**🚫 INTERZIS:**\n&quot;);&#xD;
     summary.append(&quot;• Alcool și substanțe pe proprietatea companiei\n&quot;);&#xD;
     summary.append(&quot;• Divulgarea informațiilor confidențiale\n&quot;);&#xD;
     summary.append(&quot;• Software neautorizat\n&quot;);&#xD;
     summary.append(&quot;• Violența fizică sau verbală\n\n&quot;);&#xD;
     &#xD;
     summary.append(&quot;**📊 EVALUARE &amp; SANCȚIUNI:**\n&quot;);&#xD;
     summary.append(&quot;• Evaluare anuală pentru promovări/majorări\n&quot;);&#xD;
     summary.append(&quot;• Întârzieri sistematice: avertisment scris\n&quot;);&#xD;
     summary.append(&quot;• Absențe nemotivate: rețineri salariale\n&quot;);&#xD;
     summary.append(&quot;• Încălcare confidențialitate: desfacere contract\n\n&quot;);&#xD;
     &#xD;
     summary.append(&quot;*Pentru detalii complete, consultați regulamentul intern complet.*&quot;);&#xD;
     &#xD;
     return summary.toString();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UImrQEVdEfCS7cth2SLu0w" name="checkPolicyPermission" specification="_S9OdQEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UImrQUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UImrQkVdEfCS7cth2SLu0w" type="_S9SusEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>String normalizedQuery = query.toLowerCase()&#xD;
         .replace(&quot;ă&quot;, &quot;a&quot;)&#xD;
         .replace(&quot;â&quot;, &quot;a&quot;)&#xD;
         .replace(&quot;î&quot;, &quot;i&quot;)&#xD;
         .replace(&quot;ș&quot;, &quot;s&quot;)&#xD;
         .replace(&quot;ț&quot;, &quot;t&quot;);&#xD;
     &#xD;
     // Verifică dacă este o întrebare de tip permisiune&#xD;
     if (!PERMISSION_PATTERN.matcher(normalizedQuery).find()) {&#xD;
         return new PolicyResponse(&#xD;
             PolicyResult.UNCLEAR,&#xD;
             &quot;Nu am detectat o întrebare despre permisiuni. Încercați să reformulați cu 'pot să...' sau 'am voie să...'?&quot;&#xD;
         );&#xD;
     }&#xD;
     &#xD;
     // Analizează cuvintele cheie&#xD;
     PolicyResult result = analyzePolicyKeywords(normalizedQuery);&#xD;
     String explanation = generatePolicyExplanation(normalizedQuery, result);&#xD;
     &#xD;
     return new PolicyResponse(result, explanation);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UImrQ0VdEfCS7cth2SLu0w" name="analyzePolicyKeywords" specification="_S9PrYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UImrREVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UImrRUVdEfCS7cth2SLu0w" type="_S9QScEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>int allowedScore = 0;&#xD;
     int forbiddenScore = 0;&#xD;
     int conditionalScore = 0;&#xD;
     &#xD;
     // Calculează scorurile pentru fiecare categorie&#xD;
     for (String keyword : POLICY_KEYWORDS.get(&quot;ALLOWED&quot;)) {&#xD;
         if (query.contains(keyword)) {&#xD;
             allowedScore += keyword.split(&quot; &quot;).length; // Cuvinte compuse = scor mai mare&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     for (String keyword : POLICY_KEYWORDS.get(&quot;FORBIDDEN&quot;)) {&#xD;
         if (query.contains(keyword)) {&#xD;
             forbiddenScore += keyword.split(&quot; &quot;).length;&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     for (String keyword : POLICY_KEYWORDS.get(&quot;CONDITIONAL&quot;)) {&#xD;
         if (query.contains(keyword)) {&#xD;
             conditionalScore += keyword.split(&quot; &quot;).length;&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     // Determină rezultatul pe baza scorurilor&#xD;
     if (forbiddenScore > 0) {&#xD;
         return PolicyResult.NO;&#xD;
     } else if (allowedScore > conditionalScore) {&#xD;
         return PolicyResult.YES;&#xD;
     } else if (conditionalScore > 0) {&#xD;
         return PolicyResult.CONDITIONAL;&#xD;
     } else {&#xD;
         return PolicyResult.UNCLEAR;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UInSUEVdEfCS7cth2SLu0w" name="generatePolicyExplanation" specification="_T_z7oEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UInSUUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UInSUkVdEfCS7cth2SLu0w" name="result" type="_S9QScEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UInSU0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder explanation = new StringBuilder();&#xD;
     &#xD;
     switch (result) {&#xD;
         case YES:&#xD;
             explanation.append(&quot;**✅ DA** - Această acțiune este permisă conform regulamentului companiei.\n\n&quot;);&#xD;
             &#xD;
             if (query.contains(&quot;remote&quot;) || query.contains(&quot;acasa&quot;)) {&#xD;
                 explanation.append(&quot;🏠 **Munca de acasă**: Permisă maximum 3 zile pe săptămână cu aprobarea managerului direct.&quot;);&#xD;
             } else if (query.contains(&quot;flexibil&quot;)) {&#xD;
                 explanation.append(&quot;⏰ **Program flexibil**: Permis între orele 08:00-18:00 cu acordul managerului.&quot;);&#xD;
             } else if (query.contains(&quot;formare&quot;) || query.contains(&quot;cursuri&quot;)) {&#xD;
                 explanation.append(&quot;📚 **Formare profesională**: Programele de formare sunt gratuite și încurajate.&quot;);&#xD;
             } else if (query.contains(&quot;concediu&quot;)) {&#xD;
                 explanation.append(&quot;🏖️ **Concediu**: Concediul de odihnă și medical sunt drepturi garantate.&quot;);&#xD;
             } else if (query.contains(&quot;ore suplimentare&quot;)) {&#xD;
                 explanation.append(&quot;⏳ **Ore suplimentare**: Se compensează cu timp liber sau se plătesc cu spor de 75%.&quot;);&#xD;
             } else {&#xD;
                 explanation.append(&quot;Această acțiune este în conformitate cu politicile companiei.&quot;);&#xD;
             }&#xD;
             break;&#xD;
             &#xD;
         case NO:&#xD;
             explanation.append(&quot;**❌ NU** - Această acțiune este interzisă conform regulamentului companiei.\n\n&quot;);&#xD;
             &#xD;
             if (query.contains(&quot;alcool&quot;) || query.contains(&quot;substante&quot;)) {&#xD;
                 explanation.append(&quot;🚫 **Substanțe interzise**: Consumul de alcool și substanțe interzise pe proprietatea companiei este strict interzis.&quot;);&#xD;
             } else if (query.contains(&quot;confidential&quot;) || query.contains(&quot;divulg&quot;)) {&#xD;
                 explanation.append(&quot;🔒 **Confidențialitate**: Divulgarea informațiilor comerciale confidențiale este interzisă și poate duce la desfacerea contractului.&quot;);&#xD;
             } else if (query.contains(&quot;software&quot;) || query.contains(&quot;download&quot;)) {&#xD;
                 explanation.append(&quot;💻 **Software neautorizat**: Descărcarea și instalarea de software neautorizat este interzisă.&quot;);&#xD;
             } else if (query.contains(&quot;violenta&quot;)) {&#xD;
                 explanation.append(&quot;⚠️ **Violența**: Violența fizică sau verbală este motiv de concediere imediată.&quot;);&#xD;
             } else {&#xD;
                 explanation.append(&quot;Această acțiune încalcă regulamentul intern al companiei.&quot;);&#xD;
             }&#xD;
             break;&#xD;
             &#xD;
         case CONDITIONAL:&#xD;
             explanation.append(&quot;**⚠️ CONDIȚIONAT** - Această acțiune este permisă doar în anumite condiții.\n\n&quot;);&#xD;
             explanation.append(&quot;Pentru a obține o aprobare, contactați managerul direct sau departamentul HR pentru detalii specifice.&quot;);&#xD;
             break;&#xD;
             &#xD;
         case UNCLEAR:&#xD;
             explanation.append(&quot;**❓ NU SUNT SIGUR** - Nu am găsit informații specifice în regulament despre această situație.\n\n&quot;);&#xD;
             explanation.append(&quot;📞 **Recomandare**: Contactați departamentul HR la extensia 100 sau email hr@companie.ro pentru clarificări.\n&quot;);&#xD;
             explanation.append(&quot;💡 **Alternativ**: Verificați regulamentul intern complet disponibil în sistemul intern al companiei.&quot;);&#xD;
             break;&#xD;
     }&#xD;
     &#xD;
     return explanation.toString();&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S9MoEEVdEfCS7cth2SLu0w" name="_initializer1" isStatic="true" method="_UImEMEVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S9MoEUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S9NPIEVdEfCS7cth2SLu0w" key="init"/>
          </eAnnotations>
        </ownedOperation>
        <ownedOperation xmi:id="_S9N2MEVdEfCS7cth2SLu0w" name="generateRegulationSummary" isStatic="true" method="_UImEMUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJVrEkVdEfCS7cth2SLu0w">
            <body>Generează un rezumat al regulamentului companiei</body>
          </ownedComment>
          <ownedParameter xmi:id="_S9N2MUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S9OdQEVdEfCS7cth2SLu0w" name="checkPolicyPermission" isStatic="true" method="_UImrQEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJVrE0VdEfCS7cth2SLu0w">
            <body>Verifică dacă o acțiune este permisă conform politicilor companiei</body>
          </ownedComment>
          <ownedParameter xmi:id="_S9PEUEVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_T_zUkEVdEfCS7cth2SLu0w" type="_S9SusEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S9PrYEVdEfCS7cth2SLu0w" name="analyzePolicyKeywords" visibility="private" isStatic="true" method="_UImrQ0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJVrFEVdEfCS7cth2SLu0w">
            <body>Analizează cuvintele cheie pentru a determina răspunsul</body>
          </ownedComment>
          <ownedParameter xmi:id="_S9PrYUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_T_zUkUVdEfCS7cth2SLu0w" type="_S9QScEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_T_z7oEVdEfCS7cth2SLu0w" name="generatePolicyExplanation" visibility="private" isStatic="true" method="_UInSUEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJVrFUVdEfCS7cth2SLu0w">
            <body>Generează explicația pentru răspunsul dat</body>
          </ownedComment>
          <ownedParameter xmi:id="_T_z7oUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_T_z7okVdEfCS7cth2SLu0w" name="result" type="_S9QScEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_T_z7o0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <nestedClassifier xmi:type="uml:Enumeration" xmi:id="_S9QScEVdEfCS7cth2SLu0w" name="PolicyResult">
          <ownedComment xmi:id="_UJVrFkVdEfCS7cth2SLu0w">
            <body>Enum pentru rezultatele verificării politicilor</body>
          </ownedComment>
          <ownedLiteral xmi:id="_S9RgkEVdEfCS7cth2SLu0w" name="YES"/>
          <ownedLiteral xmi:id="_S9RgkUVdEfCS7cth2SLu0w" name="NO"/>
          <ownedLiteral xmi:id="_S9SHoEVdEfCS7cth2SLu0w" name="CONDITIONAL"/>
          <ownedLiteral xmi:id="_S9SHoUVdEfCS7cth2SLu0w" name="UNCLEAR"/>
        </nestedClassifier>
        <nestedClassifier xmi:type="uml:Class" xmi:id="_S9SusEVdEfCS7cth2SLu0w" name="PolicyResponse">
          <eAnnotations xmi:id="_S9SusUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S9SuskVdEfCS7cth2SLu0w" key="static"/>
          </eAnnotations>
          <ownedComment xmi:id="_UJVrF0VdEfCS7cth2SLu0w">
            <body>Clasa pentru răspunsul verificării politicilor</body>
          </ownedComment>
          <ownedAttribute xmi:id="_UGw4MUVdEfCS7cth2SLu0w" name="result" type="_S9QScEVdEfCS7cth2SLu0w" isReadOnly="true"/>
          <ownedAttribute xmi:id="_UGw4MkVdEfCS7cth2SLu0w" name="explanation" isReadOnly="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UInSVEVdEfCS7cth2SLu0w" name="PolicyResponse" specification="_T_0isEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_UInSVUVdEfCS7cth2SLu0w" name="result" type="_S9QScEVdEfCS7cth2SLu0w"/>
            <ownedParameter xmi:id="_UInSVkVdEfCS7cth2SLu0w" name="explanation">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_UInSV0VdEfCS7cth2SLu0w" type="_S9SusEVdEfCS7cth2SLu0w" direction="return"/>
            <language>java</language>
            <body>this.result = result;&#xD;
         this.explanation = explanation;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UInSWEVdEfCS7cth2SLu0w" name="getFormattedResponse" specification="_S9TVwEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_UInSWUVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <language>java</language>
            <body>return explanation;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UInSWkVdEfCS7cth2SLu0w" name="getSimpleAnswer" specification="_S9T80UVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_UInSW0VdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <language>java</language>
            <body>switch (result) {&#xD;
             case YES: return &quot;DA&quot;;&#xD;
             case NO: return &quot;NU&quot;;&#xD;
             case CONDITIONAL: return &quot;CONDIȚIONAT&quot;;&#xD;
             case UNCLEAR: return &quot;NECLAR&quot;;&#xD;
             default: return &quot;NECUNOSCUT&quot;;&#xD;
         }&#xD;
     </body>
          </ownedBehavior>
          <ownedOperation xmi:id="_S9TVwEVdEfCS7cth2SLu0w" name="getFormattedResponse" method="_UInSWEVdEfCS7cth2SLu0w">
            <ownedComment xmi:id="_UJVrGEVdEfCS7cth2SLu0w">
              <body>Returnează răspunsul formatat pentru chat</body>
            </ownedComment>
            <ownedParameter xmi:id="_S9T80EVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_S9T80UVdEfCS7cth2SLu0w" name="getSimpleAnswer" method="_UInSWkVdEfCS7cth2SLu0w">
            <ownedComment xmi:id="_UJWSIEVdEfCS7cth2SLu0w">
              <body>Returnează răspunsul simplu (DA/NU/CONDIȚIONAT/NECLAR)</body>
            </ownedComment>
            <ownedParameter xmi:id="_S9T80kVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_T_0isEVdEfCS7cth2SLu0w" name="PolicyResponse" method="_UInSVEVdEfCS7cth2SLu0w">
            <eAnnotations xmi:id="_T_1JwUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_T_1JwkVdEfCS7cth2SLu0w" key="create"/>
            </eAnnotations>
            <ownedParameter xmi:id="_T_0isUVdEfCS7cth2SLu0w" name="result" type="_S9QScEVdEfCS7cth2SLu0w"/>
            <ownedParameter xmi:id="_T_1JwEVdEfCS7cth2SLu0w" name="explanation">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_T_1Jw0VdEfCS7cth2SLu0w" type="_S9SusEVdEfCS7cth2SLu0w" direction="return"/>
          </ownedOperation>
        </nestedClassifier>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S9YOQEVdEfCS7cth2SLu0w" name="GetTeamMembersServlet">
        <generalization xmi:id="_UEMFU0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGxfQEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGxfQUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIn5YEVdEfCS7cth2SLu0w" name="doGet" specification="_UEMFUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIn5YUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIn5YkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     String projectId = request.getParameter(&quot;projectId&quot;);&#xD;
     String userIerarhieStr = request.getParameter(&quot;userIerarhie&quot;);&#xD;
     int userIerarhie = 0; // Default ierarhie&#xD;
     &#xD;
     if (userIerarhieStr != null &amp;&amp; !userIerarhieStr.isEmpty()) {&#xD;
         try {&#xD;
             userIerarhie = Integer.parseInt(userIerarhieStr);&#xD;
         } catch (NumberFormatException e) {&#xD;
             // Ignorăm eroarea de parsare și folosim valoarea default&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     if (projectId == null || projectId.isEmpty()) {&#xD;
         out.println(&quot;&lt;option value=''>-- Selectați mai întâi un proiect --&lt;/option>&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     Connection connection = null;&#xD;
     PreparedStatement stmt = null;&#xD;
     ResultSet rs = null;&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         &#xD;
         // Prima încercăm să obținem membrii echipei bazat pe relația din baza de date și ierarhie&#xD;
         String sql = &#xD;
             &quot;SELECT DISTINCT u.id, u.nume, u.prenume &quot; +&#xD;
             &quot;FROM useri u &quot; +&#xD;
             &quot;JOIN membrii_echipe me ON u.id = me.id_ang &quot; +&#xD;
             &quot;JOIN echipe e ON me.id_echipa = e.id &quot; +&#xD;
             &quot;JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
             &quot;WHERE e.id_prj = ? AND t.ierarhie > ? &quot; + // Doar utilizatori cu ierarhie mai mică&#xD;
             &quot;ORDER BY u.nume, u.prenume&quot;;&#xD;
         &#xD;
         stmt = connection.prepareStatement(sql);&#xD;
         stmt.setInt(1, Integer.parseInt(projectId));&#xD;
         stmt.setInt(2, userIerarhie);&#xD;
         rs = stmt.executeQuery();&#xD;
         &#xD;
         boolean foundMembers = false;&#xD;
         StringBuilder results = new StringBuilder();&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             foundMembers = true;&#xD;
             results.append(&quot;&lt;option value='&quot;)&#xD;
                    .append(rs.getInt(&quot;id&quot;))&#xD;
                    .append(&quot;'>&quot;)&#xD;
                    .append(rs.getString(&quot;nume&quot;))&#xD;
                    .append(&quot; &quot;)&#xD;
                    .append(rs.getString(&quot;prenume&quot;))&#xD;
                    .append(&quot;&lt;/option>&quot;);&#xD;
         }&#xD;
         &#xD;
         if (foundMembers) {&#xD;
             // Adaugă o opțiune implicită la început&#xD;
             out.println(&quot;&lt;option value=''>-- Selectați un membru --&lt;/option>&quot;);&#xD;
             out.println(results.toString());&#xD;
         } else {&#xD;
             // Dacă nu s-au găsit membri pentru proiect, returnam toți utilizatorii cu ierarhie mai mică&#xD;
             out.println(&quot;&lt;option value=''>-- Nu există membri în echipă - Selectați orice utilizator --&lt;/option>&quot;);&#xD;
             &#xD;
             String sqlAllUsers = &quot;SELECT id, nume, prenume FROM useri JOIN tipuri t ON useri.tip = t.tip &quot; +&#xD;
                                 &quot;WHERE t.ierarhie > ? ORDER BY nume, prenume&quot;;&#xD;
             try (PreparedStatement stmtAll = connection.prepareStatement(sqlAllUsers)) {&#xD;
                 stmtAll.setInt(1, userIerarhie);&#xD;
                 try (ResultSet rsAll = stmtAll.executeQuery()) {&#xD;
                     while (rsAll.next()) {&#xD;
                         out.println(&quot;&lt;option value='&quot; + rsAll.getInt(&quot;id&quot;) + &quot;'>&quot; +&#xD;
                                 rsAll.getString(&quot;nume&quot;) + &quot; &quot; + &#xD;
                                 rsAll.getString(&quot;prenume&quot;) + &quot;&lt;/option>&quot;);&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         out.println(&quot;&lt;option value=''>Eroare: &quot; + e.getMessage() + &quot;&lt;/option>&quot;);&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         try {&#xD;
             if (rs != null) rs.close();&#xD;
             if (stmt != null) stmt.close();&#xD;
             if (connection != null) connection.close();&#xD;
         } catch (SQLException e) {&#xD;
             e.printStackTrace();&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UEMFUEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UIn5YEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEMFUUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEMFUkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S9aqgEVdEfCS7cth2SLu0w" name="CVManagementServlet">
        <generalization xmi:id="_UEbV4EVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGyGUEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGyGUUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGytYEVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGytYUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGytYkVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGytY0VdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGytZEVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGytZUVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIn5Y0VdEfCS7cth2SLu0w" name="doGet" specification="_UENTcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIn5ZEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIn5ZUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;currentUser&quot;) == null) {&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
     MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);&#xD;
&#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
             // rol/ierarhie&#xD;
             try (PreparedStatement psRole = conn.prepareStatement(&#xD;
                     &quot;SELECT t.ierarhie, t.denumire AS functie FROM useri u JOIN tipuri t ON u.tip = t.tip WHERE u.id = ?&quot;)) {&#xD;
                 psRole.setInt(1, currentUser.getId());&#xD;
                 try (ResultSet rs = psRole.executeQuery()) {&#xD;
                     if (!rs.next()) {&#xD;
                         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
                         return;&#xD;
                     }&#xD;
                     int ierarhie = rs.getInt(&quot;ierarhie&quot;);&#xD;
                     String functie = rs.getString(&quot;functie&quot;);&#xD;
                     boolean isDirector = (ierarhie &lt; 3);&#xD;
                     if (!isDirector) {&#xD;
                         // redirect după rol&#xD;
                         if (&quot;Administrator&quot;.equals(functie))      response.sendRedirect(&quot;adminok.jsp&quot;);&#xD;
                         else if (ierarhie >= 4 &amp;&amp; ierarhie &lt;=5)  response.sendRedirect(&quot;sefok.jsp&quot;);&#xD;
                         else if (ierarhie >= 10)                 response.sendRedirect(&quot;tip2ok.jsp&quot;);&#xD;
                         else                                     response.sendRedirect(&quot;tip1ok.jsp&quot;);&#xD;
                         return;&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
&#xD;
             // dispatch acțiune&#xD;
             String action = request.getParameter(&quot;action&quot;);&#xD;
             if (action == null) action = &quot;view&quot;;&#xD;
             switch (action) {&#xD;
                 case &quot;view&quot;:&#xD;
                     viewCV(request, response, conn, currentUser.getId());&#xD;
                     break;&#xD;
                 case &quot;edit&quot;:&#xD;
                     editCV(request, response, conn, currentUser.getId());&#xD;
                     break;&#xD;
                 case &quot;delete&quot;:&#xD;
                     deleteCV(request, response, conn, currentUser.getId());&#xD;
                     break;&#xD;
                 case &quot;deleteExperience&quot;:&#xD;
                     deleteExperience(request, response, conn);&#xD;
                     break;&#xD;
                 case &quot;deleteEducation&quot;:&#xD;
                     deleteEducation(request, response, conn);&#xD;
                     break;&#xD;
                 case &quot;deleteLanguage&quot;:&#xD;
                     deleteLanguage(request, response, conn);&#xD;
                     break;&#xD;
                 case &quot;deleteProject&quot;:&#xD;
                     deleteProject(request, response, conn);&#xD;
                     break;&#xD;
                 default:&#xD;
                     viewCV(request, response, conn, currentUser.getId());&#xD;
             }&#xD;
         }&#xD;
     } catch (ClassNotFoundException | SQLException e) {&#xD;
         throw new ServletException(&quot;Eroare la gestionarea CV-ului: &quot; + e.getMessage(), e);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIogcEVdEfCS7cth2SLu0w" name="doPost" specification="_UEOhkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIogcUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIogckVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;currentUser&quot;) == null) {&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
     MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);&#xD;
&#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
             String action = request.getParameter(&quot;action&quot;);&#xD;
             switch (action) {&#xD;
                 case &quot;save&quot;:&#xD;
                     saveCV(request, response, conn, currentUser.getId());&#xD;
                     break;&#xD;
                 case &quot;addExperience&quot;:&#xD;
                     addExperience(request, response, conn, currentUser.getId());&#xD;
                     break;&#xD;
                 case &quot;updateExperience&quot;:&#xD;
                     updateExperience(request, response, conn);&#xD;
                     break;&#xD;
                 case &quot;addEducation&quot;:&#xD;
                     addEducation(request, response, conn, currentUser.getId());&#xD;
                     break;&#xD;
                 case &quot;updateEducation&quot;:&#xD;
                     updateEducation(request, response, conn);&#xD;
                     break;&#xD;
                 case &quot;addLanguage&quot;:&#xD;
                     addLanguage(request, response, conn, currentUser.getId());&#xD;
                     break;&#xD;
                 case &quot;updateLanguage&quot;:&#xD;
                     updateLanguage(request, response, conn);&#xD;
                     break;&#xD;
                 case &quot;addProject&quot;:&#xD;
                     addProject(request, response, conn, currentUser.getId());&#xD;
                     break;&#xD;
                 case &quot;updateProject&quot;:&#xD;
                     updateProject(request, response, conn);&#xD;
                     break;&#xD;
                 default:&#xD;
                     response.sendRedirect(&quot;CVManagementServlet&quot;);&#xD;
             }&#xD;
         }&#xD;
     } catch (ClassNotFoundException | SQLException e) {&#xD;
         throw new ServletException(&quot;Eroare la procesarea cererii CV: &quot; + e.getMessage(), e);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIogc0VdEfCS7cth2SLu0w" name="viewCV" specification="_UEPIokVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIogdEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIogdUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIogdkVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIogd0VdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// date personale&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT u.*, d.nume_dep, t.denumire AS pozitie &quot; +&#xD;
             &quot;FROM useri u &quot; +&#xD;
             &quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
             &quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
             &quot;WHERE u.id = ?&quot;)) {&#xD;
         ps.setInt(1, userId);&#xD;
         try (ResultSet rs = ps.executeQuery()) {&#xD;
             request.setAttribute(&quot;userRs&quot;, rs);&#xD;
             // notă: jsp va parcurge ResultSet&#xD;
         }&#xD;
     }&#xD;
     // experienta&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT * FROM experienta WHERE id_ang = ? ORDER BY start DESC&quot;)) {&#xD;
         ps.setInt(1, userId);&#xD;
         try (ResultSet rs = ps.executeQuery()) {&#xD;
             request.setAttribute(&quot;expRs&quot;, rs);&#xD;
         }&#xD;
     }&#xD;
     // educatie&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT * FROM studii WHERE id_ang = ? ORDER BY start DESC&quot;)) {&#xD;
         ps.setInt(1, userId);&#xD;
         try (ResultSet rs = ps.executeQuery()) {&#xD;
             request.setAttribute(&quot;eduRs&quot;, rs);&#xD;
         }&#xD;
     }&#xD;
     // limbi&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT la.*, l.limba, n.semnificatie AS nivel_denumire &quot; +&#xD;
             &quot;FROM limbi_ang la &quot; +&#xD;
             &quot;JOIN limbi l ON la.id_limba = l.id &quot; +&#xD;
             &quot;JOIN nivel n ON la.nivel = n.id &quot; +&#xD;
             &quot;WHERE la.id_ang = ?&quot;)) {&#xD;
         ps.setInt(1, userId);&#xD;
         try (ResultSet rs = ps.executeQuery()) {&#xD;
             request.setAttribute(&quot;langRs&quot;, rs);&#xD;
         }&#xD;
     }&#xD;
     // proiecte&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT * FROM proiecte2 WHERE id_ang = ? ORDER BY start DESC&quot;)) {&#xD;
         ps.setInt(1, userId);&#xD;
         try (ResultSet rs = ps.executeQuery()) {&#xD;
             request.setAttribute(&quot;projRs&quot;, rs);&#xD;
         }&#xD;
     }&#xD;
     // calitati/interese&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT * FROM cv WHERE id_ang = ?&quot;)) {&#xD;
         ps.setInt(1, userId);&#xD;
         try (ResultSet rs = ps.executeQuery()) {&#xD;
             request.setAttribute(&quot;cvRs&quot;, rs);&#xD;
         }&#xD;
     }&#xD;
&#xD;
     request.getRequestDispatcher(&quot;cv-management.jsp&quot;).forward(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIogeEVdEfCS7cth2SLu0w" name="saveCV" specification="_UEPvskVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIogeUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIogekVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIoge0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIogfEVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>String calitati = request.getParameter(&quot;calitati&quot;);&#xD;
     String interese = request.getParameter(&quot;interese&quot;);&#xD;
     // dacă există, update, altfel insert&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;REPLACE INTO cv (id_ang, calitati, interese) VALUES (?, ?, ?)&quot;)) {&#xD;
         ps.setInt(1, userId);&#xD;
         ps.setString(2, calitati);&#xD;
         ps.setString(3, interese);&#xD;
         ps.executeUpdate();&#xD;
     }&#xD;
     response.sendRedirect(&quot;CVManagementServlet?action=view&amp;success=true&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIpHgEVdEfCS7cth2SLu0w" name="addExperience" specification="_UEQ90EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIpHgUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIpHgkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIpHg0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIpHhEVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;INSERT INTO experienta (den_job, instit, tip, id_dep, domeniu, subdomeniu, start, end, descriere, id_ang) &quot; +&#xD;
             &quot;VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;)) {&#xD;
         ps.setString(1, request.getParameter(&quot;den_job&quot;));&#xD;
         ps.setString(2, request.getParameter(&quot;instit&quot;));&#xD;
         ps.setInt(3, Integer.parseInt(request.getParameter(&quot;tip&quot;)));&#xD;
         ps.setInt(4, Integer.parseInt(request.getParameter(&quot;id_dep&quot;)));&#xD;
         ps.setString(5, request.getParameter(&quot;domeniu&quot;));&#xD;
         ps.setString(6, request.getParameter(&quot;subdomeniu&quot;));&#xD;
         ps.setDate(7, Date.valueOf(request.getParameter(&quot;start&quot;)));&#xD;
         ps.setDate(8, Date.valueOf(request.getParameter(&quot;end&quot;)));&#xD;
         ps.setString(9, request.getParameter(&quot;descriere&quot;));&#xD;
         ps.setInt(10, userId);&#xD;
         ps.executeUpdate();&#xD;
     }&#xD;
     response.sendRedirect(&quot;CVManagementServlet?action=view&amp;success=true&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIpHhUVdEfCS7cth2SLu0w" name="updateExperience" specification="_UERk4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIpHhkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIpHh0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIpHiEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;UPDATE experienta SET den_job=?, instit=?, tip=?, id_dep=?, domeniu=?, subdomeniu=?, start=?, end=?, descriere=? &quot; +&#xD;
             &quot;WHERE id = ?&quot;)) {&#xD;
         ps.setString(1, request.getParameter(&quot;den_job&quot;));&#xD;
         ps.setString(2, request.getParameter(&quot;instit&quot;));&#xD;
         ps.setInt(3, Integer.parseInt(request.getParameter(&quot;tip&quot;)));&#xD;
         ps.setInt(4, Integer.parseInt(request.getParameter(&quot;id_dep&quot;)));&#xD;
         ps.setString(5, request.getParameter(&quot;domeniu&quot;));&#xD;
         ps.setString(6, request.getParameter(&quot;subdomeniu&quot;));&#xD;
         ps.setDate(7, Date.valueOf(request.getParameter(&quot;start&quot;)));&#xD;
         ps.setDate(8, Date.valueOf(request.getParameter(&quot;end&quot;)));&#xD;
         ps.setString(9, request.getParameter(&quot;descriere&quot;));&#xD;
         ps.setInt(10, Integer.parseInt(request.getParameter(&quot;id&quot;)));&#xD;
         ps.executeUpdate();&#xD;
     }&#xD;
     response.sendRedirect(&quot;CVManagementServlet?action=view&amp;success=true&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIpHiUVdEfCS7cth2SLu0w" name="deleteExperience" specification="_UESL8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIpHikVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIpHi0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIpHjEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;DELETE FROM experienta WHERE id = ?&quot;)) {&#xD;
         ps.setInt(1, Integer.parseInt(request.getParameter(&quot;id&quot;)));&#xD;
         ps.executeUpdate();&#xD;
     }&#xD;
     response.sendRedirect(&quot;CVManagementServlet?action=view&amp;success=true&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIpukEVdEfCS7cth2SLu0w" name="addEducation" specification="_UESzAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIpukUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIpukkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIpuk0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIpulEVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;INSERT INTO studii (institutie, ciclu, specializare, start, end, id_ang) VALUES (?, ?, ?, ?, ?, ?)&quot;)) {&#xD;
         ps.setString(1, request.getParameter(&quot;institutie&quot;));&#xD;
         ps.setInt(2, Integer.parseInt(request.getParameter(&quot;ciclu&quot;)));&#xD;
         ps.setString(3, request.getParameter(&quot;specializare&quot;));&#xD;
         ps.setDate(4, Date.valueOf(request.getParameter(&quot;start&quot;)));&#xD;
         ps.setDate(5, Date.valueOf(request.getParameter(&quot;end&quot;)));&#xD;
         ps.setInt(6, userId);&#xD;
         ps.executeUpdate();&#xD;
     }&#xD;
     response.sendRedirect(&quot;CVManagementServlet?action=view&amp;success=true&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIpulUVdEfCS7cth2SLu0w" name="updateEducation" specification="_UETaEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIpulkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIpul0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIpumEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;UPDATE studii SET institutie=?, ciclu=?, specializare=?, start=?, end=? WHERE id = ?&quot;)) {&#xD;
         ps.setString(1, request.getParameter(&quot;institutie&quot;));&#xD;
         ps.setInt(2, Integer.parseInt(request.getParameter(&quot;ciclu&quot;)));&#xD;
         ps.setString(3, request.getParameter(&quot;specializare&quot;));&#xD;
         ps.setDate(4, Date.valueOf(request.getParameter(&quot;start&quot;)));&#xD;
         ps.setDate(5, Date.valueOf(request.getParameter(&quot;end&quot;)));&#xD;
         ps.setInt(6, Integer.parseInt(request.getParameter(&quot;id&quot;)));&#xD;
         ps.executeUpdate();&#xD;
     }&#xD;
     response.sendRedirect(&quot;CVManagementServlet?action=view&amp;success=true&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIpumUVdEfCS7cth2SLu0w" name="deleteEducation" specification="_UEUBIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIpumkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIpum0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIpunEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;DELETE FROM studii WHERE id = ?&quot;)) {&#xD;
         ps.setInt(1, Integer.parseInt(request.getParameter(&quot;id&quot;)));&#xD;
         ps.executeUpdate();&#xD;
     }&#xD;
     response.sendRedirect(&quot;CVManagementServlet?action=view&amp;success=true&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIpunUVdEfCS7cth2SLu0w" name="addLanguage" specification="_UEUoMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIpunkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIpun0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIpuoEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIpuoUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;INSERT INTO limbi_ang (id_limba, nivel, id_ang) VALUES (?, ?, ?)&quot;)) {&#xD;
         ps.setInt(1, Integer.parseInt(request.getParameter(&quot;id_limba&quot;)));&#xD;
         ps.setInt(2, Integer.parseInt(request.getParameter(&quot;nivel&quot;)));&#xD;
         ps.setInt(3, userId);&#xD;
         ps.executeUpdate();&#xD;
     }&#xD;
     response.sendRedirect(&quot;CVManagementServlet?action=view&amp;success=true&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIq8sEVdEfCS7cth2SLu0w" name="updateLanguage" specification="_UEV2UEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIq8sUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIq8skVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIq8s0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;UPDATE limbi_ang SET id_limba=?, nivel=? WHERE id = ?&quot;)) {&#xD;
         ps.setInt(1, Integer.parseInt(request.getParameter(&quot;id_limba&quot;)));&#xD;
         ps.setInt(2, Integer.parseInt(request.getParameter(&quot;nivel&quot;)));&#xD;
         ps.setInt(3, Integer.parseInt(request.getParameter(&quot;id&quot;)));&#xD;
         ps.executeUpdate();&#xD;
     }&#xD;
     response.sendRedirect(&quot;CVManagementServlet?action=view&amp;success=true&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIq8tEVdEfCS7cth2SLu0w" name="deleteLanguage" specification="_UEWdYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIq8tUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIq8tkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIq8t0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;DELETE FROM limbi_ang WHERE id = ?&quot;)) {&#xD;
         ps.setInt(1, Integer.parseInt(request.getParameter(&quot;id&quot;)));&#xD;
         ps.executeUpdate();&#xD;
     }&#xD;
     response.sendRedirect(&quot;CVManagementServlet?action=view&amp;success=true&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIq8uEVdEfCS7cth2SLu0w" name="addProject" specification="_UEXEcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIq8uUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIq8ukVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIq8u0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIq8vEVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;INSERT INTO proiecte2 (titlu, descriere, start, end, id_ang) VALUES (?, ?, ?, ?, ?)&quot;)) {&#xD;
         ps.setString(1, request.getParameter(&quot;titlu&quot;));&#xD;
         ps.setString(2, request.getParameter(&quot;descriere&quot;));&#xD;
         ps.setDate(3, Date.valueOf(request.getParameter(&quot;start&quot;)));&#xD;
         ps.setDate(4, Date.valueOf(request.getParameter(&quot;end&quot;)));&#xD;
         ps.setInt(5, userId);&#xD;
         ps.executeUpdate();&#xD;
     }&#xD;
     response.sendRedirect(&quot;CVManagementServlet?action=view&amp;success=true&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIq8vUVdEfCS7cth2SLu0w" name="updateProject" specification="_UEXrgEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIq8vkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIq8v0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIq8wEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;UPDATE proiecte2 SET titlu=?, descriere=?, start=?, end=? WHERE id = ?&quot;)) {&#xD;
         ps.setString(1, request.getParameter(&quot;titlu&quot;));&#xD;
         ps.setString(2, request.getParameter(&quot;descriere&quot;));&#xD;
         ps.setDate(3, Date.valueOf(request.getParameter(&quot;start&quot;)));&#xD;
         ps.setDate(4, Date.valueOf(request.getParameter(&quot;end&quot;)));&#xD;
         ps.setInt(5, Integer.parseInt(request.getParameter(&quot;id&quot;)));&#xD;
         ps.executeUpdate();&#xD;
     }&#xD;
     response.sendRedirect(&quot;CVManagementServlet?action=view&amp;success=true&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIrjwEVdEfCS7cth2SLu0w" name="deleteProject" specification="_UEYSkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIrjwUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIrjwkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIrjw0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;DELETE FROM proiecte2 WHERE id = ?&quot;)) {&#xD;
         ps.setInt(1, Integer.parseInt(request.getParameter(&quot;id&quot;)));&#xD;
         ps.executeUpdate();&#xD;
     }&#xD;
     response.sendRedirect(&quot;CVManagementServlet?action=view&amp;success=true&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIrjxEVdEfCS7cth2SLu0w" name="editCV" specification="_UEZgsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIrjxUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIrjxkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIrjx0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIrjyEVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// încarcă datele existente EXACT ca viewCV și forward la edit JSP&#xD;
     viewCV(request, response, conn, userId);&#xD;
     request.getRequestDispatcher(&quot;cv-edit.jsp&quot;).forward(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIrjyUVdEfCS7cth2SLu0w" name="deleteCV" specification="_UEau0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIrjykVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIrjy0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIrjzEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIrjzUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>String[] tables = {&quot;cv&quot;,&quot;experienta&quot;,&quot;studii&quot;,&quot;limbi_ang&quot;,&quot;proiecte2&quot;};&#xD;
     for (String t: tables) {&#xD;
         try (PreparedStatement ps = conn.prepareStatement(&#xD;
                 &quot;DELETE FROM &quot; + t + &quot; WHERE id_ang = ?&quot;)) {&#xD;
             ps.setInt(1, userId);&#xD;
             ps.executeUpdate();&#xD;
         }&#xD;
     }&#xD;
     response.sendRedirect(&quot;CVManagementServlet?action=view&amp;deleted=true&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UENTcEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UIn5Y0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UENTcUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UENTckVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UEOhkEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIogcEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEOhkUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEOhkkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UEPIokVdEfCS7cth2SLu0w" name="viewCV" visibility="private" method="_UIogc0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEPIo0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEPIpEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEPvsEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEPvsUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UEPvskVdEfCS7cth2SLu0w" name="saveCV" visibility="private" method="_UIogeEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEQWwEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEQWwUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEQWwkVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEQWw0VdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UEQ90EVdEfCS7cth2SLu0w" name="addExperience" visibility="private" method="_UIpHgEVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEQ90UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEQ90kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEQ900VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEQ91EVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UERk4EVdEfCS7cth2SLu0w" name="updateExperience" visibility="private" method="_UIpHhUVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UERk4UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UERk4kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UERk40VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UESL8EVdEfCS7cth2SLu0w" name="deleteExperience" visibility="private" method="_UIpHiUVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UESL8UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UESL8kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UESL80VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UESzAEVdEfCS7cth2SLu0w" name="addEducation" visibility="private" method="_UIpukEVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UESzAUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UESzAkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UESzA0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UESzBEVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UETaEEVdEfCS7cth2SLu0w" name="updateEducation" visibility="private" method="_UIpulUVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UETaEUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UETaEkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UETaE0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UEUBIEVdEfCS7cth2SLu0w" name="deleteEducation" visibility="private" method="_UIpumUVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEUBIUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEUBIkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEUBI0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UEUoMEVdEfCS7cth2SLu0w" name="addLanguage" visibility="private" method="_UIpunUVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEUoMUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEUoMkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEUoM0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEUoNEVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UEV2UEVdEfCS7cth2SLu0w" name="updateLanguage" visibility="private" method="_UIq8sEVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEV2UUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEV2UkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEV2U0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UEWdYEVdEfCS7cth2SLu0w" name="deleteLanguage" visibility="private" method="_UIq8tEVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEWdYUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEWdYkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEWdY0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UEXEcEVdEfCS7cth2SLu0w" name="addProject" visibility="private" method="_UIq8uEVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEXEcUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEXEckVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEXEc0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEXEdEVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UEXrgEVdEfCS7cth2SLu0w" name="updateProject" visibility="private" method="_UIq8vUVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEXrgUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEXrgkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEXrg0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UEYSkEVdEfCS7cth2SLu0w" name="deleteProject" visibility="private" method="_UIrjwEVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEYSkUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEY5oEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEY5oUVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UEZgsEVdEfCS7cth2SLu0w" name="editCV" visibility="private" method="_UIrjxEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEZgsUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEZgskVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEZgs0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEZgtEVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UEau0EVdEfCS7cth2SLu0w" name="deleteCV" visibility="private" method="_UIrjyUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEau0UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEau0kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEau00VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEau1EVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S9yd8EVdEfCS7cth2SLu0w" name="AddConServlet">
        <ownedComment xmi:id="_UJW5MEVdEfCS7cth2SLu0w">
          <body>&#xD;
Acest Servlet se ocupa cu adaugarea de concedii</body>
        </ownedComment>
        <generalization xmi:id="_UEiqokVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGz7gEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGz7gUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGz7gkVdEfCS7cth2SLu0w" name="concediu" visibility="private" type="_S3b-UEVdEfCS7cth2SLu0w" association="_UKUigUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIsK0EVdEfCS7cth2SLu0w" name="AddConServlet" specification="_S9zsEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIsK0UVdEfCS7cth2SLu0w" type="_S9yd8EVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIsK0kVdEfCS7cth2SLu0w" name="init" specification="_S90TI0VdEfCS7cth2SLu0w">
          <language>java</language>
          <body>concediu = new AdaugaConcediuDAO();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIsx4EVdEfCS7cth2SLu0w" name="doGet" specification="_UEdLEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIsx4UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIsx4kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.getWriter().append(&quot;Nu se poate face get =(&quot;);&#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIsx40VdEfCS7cth2SLu0w" name="toData" specification="_S91hQEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIsx5EVdEfCS7cth2SLu0w" name="data">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIsx5UVdEfCS7cth2SLu0w" type="_UAIrwEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>String[] parts = data.split(&quot;-&quot;);&#xD;
	        int an = Integer.parseInt(parts[0]);&#xD;
	        int luna = Integer.parseInt(parts[1]);&#xD;
	        int zi = Integer.parseInt(parts[2]);&#xD;
	        return new Data(zi, luna, an);&#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIsx5kVdEfCS7cth2SLu0w" name="doPost" specification="_UEdyIUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIsx50VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIsx6EVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// declarare si initializare date&#xD;
		int id = Integer.valueOf(request.getParameter(&quot;userId&quot;)); // pentru interogari urmatoare&#xD;
		&#xD;
		// pentru a crea concediul&#xD;
		String inceput = request.getParameter(&quot;start&quot;);&#xD;
		String sfarsit = request.getParameter(&quot;end&quot;);&#xD;
 	String motiv = request.getParameter(&quot;motiv&quot;);&#xD;
 	String locatie = request.getParameter(&quot;locatie&quot;);&#xD;
 	int tip = Integer.valueOf(request.getParameter(&quot;tip&quot;));&#xD;
 	&#xD;
 	// extra date despre concediu&#xD;
 	int durata = 0;&#xD;
 	LocalDate inceput2 = LocalDate.parse(inceput);&#xD;
		LocalDate sfarsit2 = LocalDate.parse(sfarsit);&#xD;
		long diferenta1 = ChronoUnit.DAYS.between(inceput2, sfarsit2) + 1; &#xD;
		Set&lt;LocalDate> libere = new HashSet&lt;>();&#xD;
	    int an = inceput2.getYear(); &#xD;
	    &#xD;
	    // concediu ca sa il incarc in Dao&#xD;
	    Concediu concediul = new Concediu();&#xD;
	    &#xD;
	    // verificari coerenta planificare concediu a datelor de inceput si final&#xD;
	    durata = (int) diferenta1 + 1;&#xD;
	    if (sfarsit2.isBefore(inceput2)) {&#xD;
	        throw new IOException(&quot;Data de final nu poate fi inaintea celei de inceput!&quot;);&#xD;
	    }&#xD;
	    final int durata2 = durata;&#xD;
	    &#xD;
	    // verificare daca concediul este in liberele legale, ca sa nu se numere&#xD;
	    libere.add(LocalDate.of(an, 1, 1)); &#xD;
	    libere.add(LocalDate.of(an, 1, 2)); &#xD;
	    libere.add(LocalDate.of(an, 1, 6)); &#xD;
	    libere.add(LocalDate.of(an, 1, 7));&#xD;
	    libere.add(LocalDate.of(an, 1, 24)); &#xD;
	    libere.add(LocalDate.of(an, 5, 1)); &#xD;
	    libere.add(LocalDate.of(an, 6, 1)); &#xD;
	    libere.add(LocalDate.of(an, 8, 15));&#xD;
	    libere.add(LocalDate.of(an, 11, 30)); &#xD;
	    libere.add(LocalDate.of(an, 12, 1));&#xD;
	    libere.add(LocalDate.of(an, 12, 25));&#xD;
	    libere.add(LocalDate.of(an, 12, 26)); &#xD;
		    &#xD;
     // incarcare date in obiect de tip Concediu&#xD;
     concediul.setId_ang(id);&#xD;
     concediul.setInceput(inceput);&#xD;
     concediul.setSfarsit(sfarsit);&#xD;
     concediul.setMotiv(motiv);&#xD;
     concediul.setLocatie(locatie);&#xD;
     concediul.setTip(tip);&#xD;
     concediul.setDurata((durata + 1));&#xD;
   &#xD;
     // verificari concordanta date concediu -> majoritatea sunt cu try&amp;catch pentru ca se bazeaza pe request, response, concediu&#xD;
     // cum majoritatea metodelor implementate pentru verificarea concordantei concediului sunt similare, &#xD;
     // au acelasi tip de erori, functioneaza dupa acelasi principiu, difera numai interogarea in baza de date, alte cateva variabile&#xD;
     try {&#xD;
     	// verificare daca are mai mult de 3 concedii pe an&#xD;
			if (maimulteconcedii(request)) {&#xD;
				response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
				PrintWriter out = response.getWriter();&#xD;
				out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
			    out.println(&quot;alert('Utilizatorul nu poate avea mai mult de 3 perioade diefrite de concediu!');&quot;);&#xD;
			    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
			    out.println(&quot;&lt;/script>&quot;);&#xD;
			    out.close();&#xD;
				return;&#xD;
			}&#xD;
		} catch (ClassNotFoundException e) {&#xD;
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu&#xD;
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
		    PrintWriter out = response.getWriter();&#xD;
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
		    out.println(&quot;alert('Nu a gasit clasa - debug only!');&quot;);&#xD;
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
		    out.println(&quot;&lt;/script>&quot;);&#xD;
		    out.close();&#xD;
		    e.printStackTrace();&#xD;
		} catch (IOException e) {&#xD;
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu&#xD;
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
			PrintWriter out = response.getWriter();&#xD;
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
		    out.println(&quot;alert('Eroare IO - debug only!');&quot;);&#xD;
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
		    out.println(&quot;&lt;/script>&quot;);&#xD;
		    out.close();&#xD;
		    e.printStackTrace();&#xD;
		}&#xD;
     &#xD;
     try {&#xD;
			if (!maimultezile(request)) {&#xD;
				// verificare daca are mai mult de 30 sau 40 de zile de concediu pe an&#xD;
				response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
				PrintWriter out = response.getWriter();&#xD;
				out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
			    out.println(&quot;alert('Utilizatorul are deja prea multe zile de concediu!');&quot;);&#xD;
			    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
			    out.println(&quot;&lt;/script>&quot;);&#xD;
			    out.close();&#xD;
				return;&#xD;
			}&#xD;
		} catch (ClassNotFoundException e) {&#xD;
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu&#xD;
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
		    PrintWriter out = response.getWriter();&#xD;
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
		    out.println(&quot;alert('Nu a gasit clasa - debug only!');&quot;);&#xD;
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
		    out.println(&quot;&lt;/script>&quot;);&#xD;
		    out.close();&#xD;
		    e.printStackTrace();&#xD;
		} catch (IOException e) {&#xD;
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu&#xD;
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
			PrintWriter out = response.getWriter();&#xD;
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
		    out.println(&quot;alert('Eroare IO - debug only!');&quot;);&#xD;
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
		    out.println(&quot;&lt;/script>&quot;);&#xD;
		    out.close();&#xD;
		    e.printStackTrace();&#xD;
		}&#xD;
     &#xD;
     try {&#xD;
			if (!odatavara(request) &amp;&amp; (toData(concediul.getInceput()).getLuna() >= 6 &amp;&amp; toData(concediul.getInceput()).getLuna() &lt;= 8)) {&#xD;
				// verificare daca are deja un concediu pe perioada verii&#xD;
				response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
				PrintWriter out = response.getWriter();&#xD;
				out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
			    out.println(&quot;alert('Utilizatorul nu poate avea mai mult de un concediu pe timpul verii!');&quot;);&#xD;
			    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
			    out.println(&quot;&lt;/script>&quot;);&#xD;
			    out.close();&#xD;
				return;&#xD;
			}&#xD;
		} catch (ClassNotFoundException e) {&#xD;
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu&#xD;
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
		    PrintWriter out = response.getWriter();&#xD;
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
		    out.println(&quot;alert('Off, a crapat =(!');&quot;);&#xD;
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
		    out.println(&quot;&lt;/script>&quot;);&#xD;
		    out.close();&#xD;
		    e.printStackTrace();&#xD;
		} catch (IOException e) {&#xD;
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu&#xD;
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
			PrintWriter out = response.getWriter();&#xD;
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
		    out.println(&quot;alert('Off, a crapat =(!');&quot;);&#xD;
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
		    out.println(&quot;&lt;/script>&quot;);&#xD;
		    out.close();&#xD;
		    e.printStackTrace();&#xD;
		}&#xD;
     &#xD;
     if (!maimultezileodata(concediul)) {&#xD;
     	// verificare daca are mai mult de 21 de concediu pe o perioada de concediu&#xD;
     	response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
     	PrintWriter out = response.getWriter();&#xD;
			out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
		    out.println(&quot;alert('Utilizatorul nu poate avea mai mult de 21 de zile / concediu!');&quot;);&#xD;
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
		    out.println(&quot;&lt;/script>&quot;);&#xD;
		    out.close();&#xD;
			return;&#xD;
		}&#xD;
     &#xD;
     try {&#xD;
			if (!preamulti(concediul, request)) {&#xD;
				// verificare daca sunt prea multi angajati (mai mult de jumatate) dintr-un departament plecati in concediu&#xD;
				response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
				PrintWriter out = response.getWriter();&#xD;
				out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
			    out.println(&quot;alert('Au concediu prea multi utilizatori dintr-un singur departament!');&quot;);&#xD;
			    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
			    out.println(&quot;&lt;/script>&quot;);&#xD;
			    out.close();&#xD;
				return;&#xD;
			}&#xD;
		} catch (ClassNotFoundException e) {&#xD;
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu&#xD;
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
		    PrintWriter out = response.getWriter();&#xD;
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
		    out.println(&quot;alert('Off, a crapat =(!');&quot;);&#xD;
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
		    out.println(&quot;&lt;/script>&quot;);&#xD;
		    out.close();&#xD;
		    e.printStackTrace();&#xD;
		} catch (IOException e) {&#xD;
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu&#xD;
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
			PrintWriter out = response.getWriter();&#xD;
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
		    out.println(&quot;alert('Off, a crapat =(!');&quot;);&#xD;
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
		    out.println(&quot;&lt;/script>&quot;);&#xD;
		    out.close();&#xD;
		    e.printStackTrace();&#xD;
		}&#xD;
     &#xD;
     // acum, diferit de celalte metode, se verifica tipul de utilizator pentru ca daca este sef (3) sau director (0), nu pot fi 2/departament&#xD;
     String sql2 = &quot;select * from useri where id = ?;&quot;; // interogarea este un string&#xD;
	    int tip2 = -1; // pentru cazul in care nu se gaseste nimic in baza de date sau introgarea nu este corecta, ar ramane -1&#xD;
	    try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;); &#xD;
	    		// se creaza conexiune (uneori mai puneam si Class.forName pentru driver, acum a mers si asa&#xD;
		        PreparedStatement stm = conexiune.prepareStatement(sql2)) { //se pregateste pentru a face interogarea&#xD;
		        stm.setInt(1, id); // adaug variabile&#xD;
		        try (ResultSet rezultat = stm.executeQuery()) { // se executa interogarea&#xD;
		            if (rezultat.next()) { // se extrag date din rezultatul interogarii, mai exact tipul de utilizator care a adaugat concediul&#xD;
		                tip2 = rezultat.getInt(&quot;tip&quot;);&#xD;
		            }&#xD;
		        }&#xD;
		    } catch (SQLException e) { // interogarile pot arunca exceptii si daca da, atunci semnalizez cu alerta si redirectare la pagina de adaugare/modificare concediu&#xD;
		        printSQLException(e);&#xD;
		        response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
				PrintWriter out = response.getWriter();&#xD;
			    out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
			    out.println(&quot;alert('Eroare la baza de date - debug only!');&quot;);&#xD;
			    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
			    out.println(&quot;&lt;/script>&quot;);&#xD;
			    out.close();&#xD;
			    e.printStackTrace();&#xD;
		        throw new IOException(&quot;Eroare la baza de date =(&quot;, e);&#xD;
		    }&#xD;
	    &#xD;
	    if (tip2 == 0) {&#xD;
	    	// daca utilizatorul este director, pot face verificarea sa nu fie mai mult de 2 directori plecati&#xD;
	    	 try {&#xD;
	 			if (!preamultid(concediul, request)) {&#xD;
	 				response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	 				PrintWriter out = response.getWriter();&#xD;
					out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
				    out.println(&quot;alert('Au concediu prea multi directori!');&quot;);&#xD;
				    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
				    out.println(&quot;&lt;/script>&quot;);&#xD;
				    out.close();&#xD;
					return;&#xD;
				}&#xD;
			} catch (ClassNotFoundException e) {&#xD;
				// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu&#xD;
				response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
			    PrintWriter out = response.getWriter();&#xD;
			    out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
			    out.println(&quot;alert('Off, a crapat =(!');&quot;);&#xD;
			    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
			    out.println(&quot;&lt;/script>&quot;);&#xD;
			    out.close();&#xD;
			    e.printStackTrace();&#xD;
			} catch (IOException e) {&#xD;
				// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu&#xD;
				response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
				PrintWriter out = response.getWriter();&#xD;
			    out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
			    out.println(&quot;alert('Eroare IO - debug only!');&quot;);&#xD;
			    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
			    out.println(&quot;&lt;/script>&quot;);&#xD;
			    out.close();&#xD;
			    e.printStackTrace();&#xD;
			}&#xD;
	    }&#xD;
	    try {&#xD;
			Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;).newInstance();&#xD;
		} catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {&#xD;
			// TODO Auto-generated catch block&#xD;
			e.printStackTrace();&#xD;
		}&#xD;
     try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;); // conexiune bd&#xD;
             PreparedStatement preparedStatement = connection.prepareStatement(&quot;SELECT DISTINCT u.*, t.denumire AS functie, d.nume_dep, t.ierarhie as ierarhie,&quot; +&#xD;
                     &quot;dp.denumire_completa AS denumire FROM useri u &quot; +&#xD;
                     &quot;JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                     &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                     &quot;LEFT JOIN denumiri_pozitii dp ON t.tip = dp.tip_pozitie AND d.id_dep = dp.id_dep &quot; +&#xD;
                     &quot;WHERE u.id = ?&quot;)) {&#xD;
             preparedStatement.setInt(1, id);&#xD;
             ResultSet rs = preparedStatement.executeQuery();&#xD;
             if (rs.next()) {&#xD;
             	// extrag date despre userul curent&#xD;
                 &#xD;
                 int userType = rs.getInt(&quot;tip&quot;);&#xD;
                 int userDep = rs.getInt(&quot;id_dep&quot;);&#xD;
                 String functie = rs.getString(&quot;functie&quot;);&#xD;
                 int ierarhie = rs.getInt(&quot;ierarhie&quot;);&#xD;
&#xD;
                 // Funcție helper pentru a determina rolul utilizatorului&#xD;
                 boolean isDirector = (ierarhie &lt; 3) ;&#xD;
                 boolean isSef = (ierarhie >= 4 &amp;&amp; ierarhie &lt;=5);&#xD;
                 boolean isIncepator = (ierarhie >= 10);&#xD;
                 boolean isUtilizatorNormal = !isDirector &amp;&amp; !isSef &amp;&amp; !isIncepator; // tipuri 1, 2, 5-9&#xD;
                 boolean isAdmin = (functie.compareTo(&quot;Administrator&quot;) == 0);&#xD;
                 &#xD;
     &#xD;
     // Dacă utilizatorul este șef (tip = 3), director (tip = 4) sau alt rol superior (tip >= 9),&#xD;
     // statusul va fi direct 1 (aprobat de șef)&#xD;
     if (isDirector || isSef) {&#xD;
     	concediul.setStatus(1); // Aprobat de șef&#xD;
     } else {&#xD;
	    	concediul.setStatus(0);&#xD;
	    }&#xD;
	    &#xD;
	    // daca exista deja un concediu cu aceleasi date in baza de date, atunci e duplicat si, deci, nu se adauga&#xD;
	    if (concediuExista(id, inceput2, sfarsit2)) {&#xD;
	        response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	        PrintWriter out = response.getWriter();&#xD;
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
	        out.println(&quot;alert('Concediul specificat există deja!');&quot;);&#xD;
	        out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
	        out.println(&quot;&lt;/script>&quot;);&#xD;
	        out.close();&#xD;
	        return; &#xD;
	    }&#xD;
	    &#xD;
	    // verificare daca se incareaza in numarul de zile conform tipului de concediu (concediu medical, concediu de odihna, concediu fara plata etc)&#xD;
	    try {&#xD;
			if (oktip(concediul)) {&#xD;
			    response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
			    PrintWriter out = response.getWriter();&#xD;
			    out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
			    out.println(&quot;alert('Nu poate avea mai multe zile decat tipul concediului!');&quot;);&#xD;
			    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
			    out.println(&quot;&lt;/script>&quot;);&#xD;
			    out.close();&#xD;
			    return; &#xD;
			}&#xD;
		} catch (SQLException e) {&#xD;
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu&#xD;
			e.printStackTrace();&#xD;
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	        PrintWriter out = response.getWriter();&#xD;
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
	        out.println(&quot;alert('Eroare la baza de date!');&quot;);&#xD;
	        out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
	        out.println(&quot;&lt;/script>&quot;);&#xD;
	        out.close();&#xD;
	        return; &#xD;
		} catch (IOException e) {&#xD;
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu&#xD;
			e.printStackTrace();&#xD;
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	        PrintWriter out = response.getWriter();&#xD;
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
	        out.println(&quot;alert('Off, a crapat =(!');&quot;);&#xD;
	        out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
	        out.println(&quot;&lt;/script>&quot;);&#xD;
	        out.close();&#xD;
	        return; &#xD;
		}&#xD;
	    &#xD;
	    // cum la neindeplinirea unei reguli de verificare a concediului se intampla redirectare si return, &#xD;
	    // daca a ajuns in acest punct inseamna ca concediul este valid si, deci, se poate incarca in baza de date&#xD;
	   &#xD;
	    &#xD;
	    try {&#xD;
	        int result = concediu.incarca(concediul);&#xD;
	        &#xD;
	        if (result > 0) {&#xD;
	            // Mai întâi trimite răspunsul către client&#xD;
	            response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	            PrintWriter out = response.getWriter();&#xD;
	            out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
	            out.println(&quot;alert('Adaugare cu succes!');&quot;);&#xD;
	            out.println(&quot;window.location.href = 'concediinoisef.jsp?pag=1';&quot;);&#xD;
	            out.println(&quot;&lt;/script>&quot;);&#xD;
	            out.close();&#xD;
	            &#xD;
	            // Apoi trimite emailul în mod asincron (fără a mai folosi response)&#xD;
	            Thread mailThread = new Thread(() -> {&#xD;
	                try {&#xD;
	                    MailAsincron.send(id, tip, inceput, sfarsit, motiv, locatie, durata2);&#xD;
	                } catch (Exception e) {&#xD;
	                    e.printStackTrace();&#xD;
	                    System.out.println(&quot;Eroare la trimiterea email-ului: &quot; + e.getMessage());&#xD;
	                }&#xD;
	            });&#xD;
	            mailThread.start();&#xD;
	        } else {&#xD;
	            throw new SQLException(&quot;Nu s-a putut adăuga concediul în baza de date&quot;);&#xD;
	        }&#xD;
	    } catch (Exception e) {&#xD;
	        e.printStackTrace();&#xD;
	        response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	        PrintWriter out = response.getWriter();&#xD;
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
	        out.println(&quot;alert('Eroare la adăugarea concediului: &quot; + e.getMessage() + &quot;');&quot;);&#xD;
	        out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);&#xD;
	        out.println(&quot;&lt;/script>&quot;);&#xD;
	        out.close();&#xD;
	    }&#xD;
	} &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Eroare la adăugarea adeverinței: &quot; + e.getMessage() + &quot;');&quot;);&#xD;
         out.println(&quot;window.location.href = 'addadev.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
     }&#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIsx6UVdEfCS7cth2SLu0w" name="oktip" specification="_UEeZMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIsx6kVdEfCS7cth2SLu0w" name="concediul" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIsx60VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile&#xD;
		String inceput = concediul.getInceput();&#xD;
		String sfarsit = concediul.getSfarsit();&#xD;
		LocalDate inceput2 = LocalDate.parse(inceput);&#xD;
	    LocalDate sfarsit2 = LocalDate.parse(sfarsit);&#xD;
	    long durata = ChronoUnit.DAYS.between(inceput2, sfarsit2) + 1; // ultimul - primul + 1&#xD;
	    int durata2 = 0;&#xD;
	    durata2 = (int) durata + 1;&#xD;
	    int durata3 = 0;&#xD;
	    &#xD;
		String sql = &quot;select nr_zile from tipcon;&quot;;&#xD;
	   &#xD;
	    try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
		        PreparedStatement stm = conexiune.prepareStatement(sql)) {&#xD;
		        try (ResultSet rezultat = stm.executeQuery()) {&#xD;
		            if (rezultat.next()) {&#xD;
		                durata3 = rezultat.getInt(&quot;nr_zile&quot;);&#xD;
		            }&#xD;
		        }&#xD;
		    } &#xD;
	    &#xD;
	    return durata3 &lt; durata2;&#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UItY8EVdEfCS7cth2SLu0w" name="concediuExista" specification="_UEeZM0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UItY8UVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UItY8kVdEfCS7cth2SLu0w" name="inceput" type="_T_hnwEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UItY80VdEfCS7cth2SLu0w" name="sfarsit" type="_T_hnwEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UItY9EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
	    		&#xD;
	        PreparedStatement stmt = conexiune.prepareStatement(&quot;SELECT COUNT(*) FROM concedii WHERE id_ang = ? AND start_c = ? AND end_c = ? and status >= 0&quot;)) {&#xD;
	    	&#xD;
	        stmt.setInt(1, id);&#xD;
	        stmt.setDate(2, java.sql.Date.valueOf(inceput));&#xD;
	        stmt.setDate(3, java.sql.Date.valueOf(sfarsit));&#xD;
	        &#xD;
	        ResultSet rs = stmt.executeQuery();&#xD;
	        if (rs.next()) {&#xD;
	            return rs.getInt(1) > 0;&#xD;
	        }	&#xD;
	        &#xD;
	    } catch (SQLException e) {&#xD;
	        throw new ServletException(&quot;Database error checking for existing leave&quot;, e);&#xD;
	    }&#xD;
	    return false;&#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UItY9UVdEfCS7cth2SLu0w" name="maimulteconcedii" specification="_UEfAREVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UItY9kVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UItY90VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile&#xD;
		    int nr = 0;&#xD;
		    &#xD;
		    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
		    &#xD;
		    String sql = &quot;SELECT * FROM useri WHERE useri.id = ?;&quot;;&#xD;
		    int id = Integer.valueOf(request.getParameter(&quot;userId&quot;));&#xD;
&#xD;
		    try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
		        PreparedStatement stm = conexiune.prepareStatement(sql)) {&#xD;
		        stm.setInt(1, id);&#xD;
		        try (ResultSet rs = stm.executeQuery()) {&#xD;
		            if (rs.next()) {&#xD;
		                nr = rs.getInt(&quot;conramase&quot;); // aici da, le ia pe alea cu status pozitiv sau 0&#xD;
		            }&#xD;
		        }&#xD;
		    } catch (SQLException e) {&#xD;
		        printSQLException(e);&#xD;
		        throw new IOException(&quot;Eroare la baza de date&quot;, e);&#xD;
		    }&#xD;
&#xD;
		    return nr > 3;&#xD;
		</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UItY-EVdEfCS7cth2SLu0w" name="maimultezile" specification="_UEfnUUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UItY-UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UItY-kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>// initializare si declarare variabile&#xD;
		    int nr = 0;&#xD;
		    int id = Integer.valueOf(request.getParameter(&quot;userId&quot;));&#xD;
		    Set&lt;LocalDate> libere = getLibereLegale();&#xD;
		    String sql = &quot;SELECT start_c, end_c FROM concedii WHERE id_ang = ? and status >= 0;&quot;;&#xD;
		    String sql2 = &quot;select * from useri where id = ?;&quot;;&#xD;
		    int tip = 0;&#xD;
		    &#xD;
		    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
		    &#xD;
		    try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
		    	PreparedStatement stm = conexiune.prepareStatement(sql);  &#xD;
		    	PreparedStatement stm2 = conexiune.prepareStatement(sql2)) {&#xD;
		        stm2.setInt(1, id);&#xD;
		        try (ResultSet rezultat = stm2.executeQuery()) {&#xD;
		            if (rezultat.next()) {&#xD;
		                tip = rezultat.getInt(&quot;tip&quot;);&#xD;
		            }&#xD;
		        }&#xD;
		        &#xD;
		        stm.setInt(1, id);&#xD;
		        try (ResultSet rezultat = stm.executeQuery()) {&#xD;
		            while (rezultat.next()) {&#xD;
		                LocalDate inceput = rezultat.getDate(&quot;start_c&quot;).toLocalDate();&#xD;
		                LocalDate sfarsit = rezultat.getDate(&quot;end_c&quot;).toLocalDate();&#xD;
		                while (!inceput.isAfter(sfarsit)) {&#xD;
		                    if (!libere.contains(inceput)) {&#xD;
		                        nr++;&#xD;
		                    }&#xD;
		                    inceput = inceput.plusDays(1);&#xD;
		                }&#xD;
		            }&#xD;
		        }&#xD;
		        &#xD;
		    } catch (SQLException e) {&#xD;
		        printSQLException(e);&#xD;
		        throw new IOException(&quot;Eroare la baza de date&quot;, e);&#xD;
		    }&#xD;
		    &#xD;
		    // daca e utilizator de tip 2, atunci nu are voie mai mult de 30 zile, altfel are 40&#xD;
		    if (tip == 2) {&#xD;
		        return nr &lt; 30;&#xD;
		    }&#xD;
		    &#xD;
		    return nr &lt; 40;&#xD;
		</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UItY-0VdEfCS7cth2SLu0w" name="getLibereLegale" specification="_S93WcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UItY_EVdEfCS7cth2SLu0w" type="_T_hnwEVdEfCS7cth2SLu0w" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UItY_UVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>return new HashSet&lt;>(Arrays.asList(&#xD;
		        LocalDate.of(LocalDate.now().getYear(), 1, 1),&#xD;
		        LocalDate.of(LocalDate.now().getYear(), 1, 2),&#xD;
		        LocalDate.of(LocalDate.now().getYear(), 1, 6),&#xD;
		        LocalDate.of(LocalDate.now().getYear(), 1, 7),&#xD;
		        LocalDate.of(LocalDate.now().getYear(), 1, 24),&#xD;
		        LocalDate.of(LocalDate.now().getYear(), 5, 1),&#xD;
		        LocalDate.of(LocalDate.now().getYear(), 6, 1),&#xD;
		        LocalDate.of(LocalDate.now().getYear(), 8, 15),&#xD;
		        LocalDate.of(LocalDate.now().getYear(), 11, 30),&#xD;
		        LocalDate.of(LocalDate.now().getYear(), 12, 1),&#xD;
		        LocalDate.of(LocalDate.now().getYear(), 12, 25),&#xD;
		        LocalDate.of(LocalDate.now().getYear(), 12, 26)&#xD;
		    ));&#xD;
		</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UItY_kVdEfCS7cth2SLu0w" name="odatavara" specification="_UEgOYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UItY_0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UItZAEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>// initializare si declarare variabile&#xD;
			int nr = 0;&#xD;
			int id = Integer.valueOf(request.getParameter(&quot;userId&quot;));&#xD;
			&#xD;
		    String sql = &quot;SELECT count(*) as total FROM concedii JOIN useri ON concedii.id_ang = useri.id WHERE id_ang = ? AND MONTH(start_c) >=6 AND MONTH(start_c) &lt;= 8 and YEAR(start_c) = YEAR(CURRENT_DATE()) and concedii.status >= 0;&quot;;&#xD;
		    &#xD;
		    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
		    try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
		        PreparedStatement stm = conexiune.prepareStatement(sql)) {&#xD;
		        stm.setInt(1, id);&#xD;
		        try (ResultSet rezultat = stm.executeQuery()) {&#xD;
		            if (rezultat.next()) {&#xD;
		                nr = rezultat.getInt(&quot;total&quot;);&#xD;
		            }&#xD;
		        }&#xD;
		    } catch (SQLException e) {&#xD;
		        printSQLException(e);&#xD;
		        throw new IOException(&quot;Eroare la baza de date =(&quot;, e);&#xD;
		    }&#xD;
&#xD;
		    return nr &lt; 1;&#xD;
		</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UItZAUVdEfCS7cth2SLu0w" name="maimultezileodata" specification="_UEg1cUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UItZAkVdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UItZA0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile&#xD;
		    LocalDate inceput = LocalDate.parse(concediu.getInceput());&#xD;
		    LocalDate sfarsit = LocalDate.parse(concediu.getSfarsit());&#xD;
		    Set&lt;LocalDate> libere = getLibereLegale();&#xD;
		    int nr = 0;&#xD;
		    LocalDate datacurenta = inceput;&#xD;
		    &#xD;
		    while (!datacurenta.isAfter(sfarsit)) {&#xD;
		    	// ca sa nu am diferenta de zile negativa&#xD;
		        if (!libere.contains(datacurenta)) {&#xD;
		        	// efectiv numar&#xD;
		            nr++;&#xD;
		        }&#xD;
		        datacurenta = datacurenta.plusDays(1);&#xD;
		    }&#xD;
&#xD;
		    return nr &lt; 21;&#xD;
		</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UItZBEVdEfCS7cth2SLu0w" name="stringToDate" specification="_S94kkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UItZBUVdEfCS7cth2SLu0w" name="dateString">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UItZBkVdEfCS7cth2SLu0w" type="_UAIrwEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>// declarare si initializare variabile&#xD;
	        String[] parts = dateString.split(&quot;-&quot;);&#xD;
	        int an = Integer.parseInt(parts[0]);&#xD;
	        int luna = Integer.parseInt(parts[1]);&#xD;
	        int zi = Integer.parseInt(parts[2]);&#xD;
	        &#xD;
	       return new Data(zi, luna, an);&#xD;
	    </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UItZB0VdEfCS7cth2SLu0w" name="preamulti" specification="_UEhcgUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UItZCEVdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UItZCUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UItZCkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>String sql = &quot;SELECT u.id_dep, &quot; +&#xD;
		                 &quot;COUNT(DISTINCT c.id_ang) as plecati, &quot; +&#xD;
		                 &quot;(SELECT COUNT(*) FROM useri WHERE id_dep = u.id_dep) as total &quot; +&#xD;
		                 &quot;FROM useri u &quot; +&#xD;
		                 &quot;LEFT JOIN concedii c ON u.id = c.id_ang &quot; +&#xD;
		                 &quot;WHERE u.id = ? &quot; +&#xD;
		                 &quot;AND c.start_c &lt;= ? &quot; +&#xD;
		                 &quot;AND c.end_c >= ? &quot; +&#xD;
		                 &quot;AND c.status >= 0 &quot; +&#xD;
		                 &quot;GROUP BY u.id_dep&quot;;&#xD;
		&#xD;
		    try (Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
		         PreparedStatement pstmt = conn.prepareStatement(sql)) {&#xD;
		&#xD;
		        pstmt.setInt(1, concediu.getId_ang());&#xD;
		        pstmt.setString(2, concediu.getSfarsit());&#xD;
		        pstmt.setString(3, concediu.getInceput());&#xD;
		&#xD;
		        try (ResultSet rs = pstmt.executeQuery()) {&#xD;
		            if (rs.next()) {&#xD;
		                int plecati = rs.getInt(&quot;plecati&quot;);&#xD;
		                int total = rs.getInt(&quot;total&quot;);&#xD;
		                &#xD;
		                System.out.println(&quot;Angajați plecați: &quot; + plecati);&#xD;
		                System.out.println(&quot;Total angajați în departament: &quot; + total);&#xD;
		                &#xD;
		                // Verificăm dacă mai mult de jumătate sunt plecați&#xD;
		                return plecati &lt; (total / 2);&#xD;
		            }&#xD;
		        }&#xD;
		    } catch (SQLException e) {&#xD;
		        e.printStackTrace();&#xD;
		        throw new IOException(&quot;Eroare la baza de date: &quot; + e.getMessage());&#xD;
		    }&#xD;
		&#xD;
		    return true;&#xD;
		</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIuAAEVdEfCS7cth2SLu0w" name="preamultid" specification="_UEiDkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIuAAUVdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIuAAkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIuAA0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile&#xD;
			int nr = 0;&#xD;
			Data inceput = stringToDate(concediu.getInceput());&#xD;
	        Data sfarsit = stringToDate(concediu.getSfarsit());&#xD;
	        &#xD;
			String sql = &quot;select count(*) as total from concedii join useri on useri.id = concedii.id_ang where day(start_c) >= ? and month(start_c) = ?&quot;&#xD;
					+ &quot; and day(start_c) &lt;= ? and month(start_c) &lt;= ? and status > 0 group by useri.tip having useri.tip = 0;&quot;;&#xD;
			&#xD;
			Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
		    &#xD;
		    try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
		        PreparedStatement stm = conexiune.prepareStatement(sql)) {&#xD;
	&#xD;
		        stm.setInt(1, inceput.getZi());&#xD;
		        stm.setInt(2, inceput.getLuna());&#xD;
		        stm.setInt(3, sfarsit.getZi());&#xD;
		        stm.setInt(4, sfarsit.getLuna());&#xD;
		        try (ResultSet rezultat = stm.executeQuery() ) {&#xD;
		            if (rezultat.next()) {&#xD;
		                nr = rezultat.getInt(&quot;total&quot;);&#xD;
		            }&#xD;
		        }&#xD;
		    } catch (SQLException e) {&#xD;
		        printSQLException(e);&#xD;
		        throw new IOException(&quot;Eroare la baza de date&quot;, e);&#xD;
		    }&#xD;
&#xD;
		    return nr &lt; 2;&#xD;
			</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIuABEVdEfCS7cth2SLu0w" name="printSQLException" specification="_UEiqoEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIuABUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {&#xD;
		            if (e instanceof SQLException) {&#xD;
		                e.printStackTrace(System.err);&#xD;
		                System.err.println(&quot;Stare: &quot; + ((SQLException) e).getSQLState());&#xD;
		                System.err.println(&quot;Cod eroare: &quot; + ((SQLException) e).getErrorCode());&#xD;
		                System.err.println(&quot;Explicatie: &quot; + e.getMessage());&#xD;
		                Throwable t = ex.getCause();&#xD;
		                while (t != null) {&#xD;
		                    System.out.println(&quot;Cauza: &quot; + t);&#xD;
		                    t = t.getCause();&#xD;
		                }&#xD;
		            }&#xD;
		        }&#xD;
		    </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S9zsEEVdEfCS7cth2SLu0w" name="AddConServlet" method="_UIsK0EVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S90TIEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S90TIUVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedComment xmi:id="_UJW5MUVdEfCS7cth2SLu0w">
            <body>constructor</body>
          </ownedComment>
          <ownedParameter xmi:id="_S90TIkVdEfCS7cth2SLu0w" type="_S9yd8EVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S90TI0VdEfCS7cth2SLu0w" name="init" method="_UIsK0kVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJW5MkVdEfCS7cth2SLu0w">
            <body>initializare</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:id="_S91hQEVdEfCS7cth2SLu0w" name="toData" visibility="protected" method="_UIsx40VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJW5NEVdEfCS7cth2SLu0w">
            <body>Functie care se ocupa cu transformarea unui String &quot;YYYY-MM-DD&quot; in data din java.util&#xD;
	 * @param data&#xD;
	 * @return Data Java</body>
          </ownedComment>
          <ownedParameter xmi:id="_S91hQUVdEfCS7cth2SLu0w" name="data">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UEdyIEVdEfCS7cth2SLu0w" type="_UAIrwEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S93WcEVdEfCS7cth2SLu0w" name="getLibereLegale" isStatic="true" method="_UItY-0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJW5OkVdEfCS7cth2SLu0w">
            <body>&#xD;
		 * @return map cu liberele legale</body>
          </ownedComment>
          <ownedParameter xmi:id="_S93WcUVdEfCS7cth2SLu0w" type="_T_hnwEVdEfCS7cth2SLu0w" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S93WckVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S94kkEVdEfCS7cth2SLu0w" name="stringToDate" isStatic="true" method="_UItZBEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJXgQkVdEfCS7cth2SLu0w">
            <body>Transformare tip de date din String in date&#xD;
		 * @param dateString&#xD;
		 * @return data in format Data</body>
          </ownedComment>
          <ownedParameter xmi:id="_S94kkUVdEfCS7cth2SLu0w" name="dateString">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UEhcgEVdEfCS7cth2SLu0w" type="_UAIrwEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UEdLEEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UIsx4EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJW5M0VdEfCS7cth2SLu0w">
            <body>In cazul in care se face get pe server</body>
          </ownedComment>
          <ownedParameter xmi:id="_UEdLEUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEdLEkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UEdyIUVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIsx5kVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJW5NUVdEfCS7cth2SLu0w">
            <body>metoda post din server</body>
          </ownedComment>
          <ownedParameter xmi:id="_UEdyIkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEdyI0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UEeZMEVdEfCS7cth2SLu0w" name="oktip" visibility="private" method="_UIsx6UVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJW5NkVdEfCS7cth2SLu0w">
            <body>Pasii urmati la celelate functii ajutatoare sunt in mare&#xD;
	 * declarare si initializare variabile&#xD;
	 * incarcare driver baza de date&#xD;
	 * creare conexiune baza de date&#xD;
	 * pregatirea unei interogari&#xD;
	 * executia unei interogari&#xD;
	 * returnare false sau true sau returnare un numar de la un count sau -1</body>
          </ownedComment>
          <ownedParameter xmi:id="_UEeZMUVdEfCS7cth2SLu0w" name="concediul" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEeZMkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UEeZM0VdEfCS7cth2SLu0w" name="concediuExista" visibility="private" method="_UItY8EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJW5N0VdEfCS7cth2SLu0w">
            <body>verificare daca are deja acelasi concediu (conform datelor de inceput si final) incarcat&#xD;
	 * @param id&#xD;
	 * @param inceput&#xD;
	 * @param sfarsit&#xD;
	 * @return true daca a numarat deja un concediu al acelei persoane in aceeasi perioada&#xD;
	 * @throws ServletException</body>
          </ownedComment>
          <ownedParameter xmi:id="_UEfAQEVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UEfAQUVdEfCS7cth2SLu0w" name="inceput" type="_T_hnwEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEfAQkVdEfCS7cth2SLu0w" name="sfarsit" type="_T_hnwEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEfAQ0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UEfAREVdEfCS7cth2SLu0w" name="maimulteconcedii" isStatic="true" method="_UItY9UVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJW5OEVdEfCS7cth2SLu0w">
            <body>verificare daca are deja mai mult de 3 concedii pe an&#xD;
		 * @param request&#xD;
		 * @return true daca are mai mult de 3 perioade diferite de concediu pe an&#xD;
		 * @throws ClassNotFoundException&#xD;
		 * @throws IOException</body>
          </ownedComment>
          <ownedParameter xmi:id="_UEfARUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEfnUEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UEfnUUVdEfCS7cth2SLu0w" name="maimultezile" isStatic="true" method="_UItY-EVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJW5OUVdEfCS7cth2SLu0w">
            <body>verificare daca are deja mai multe zile pe an&#xD;
		 * @param request&#xD;
		 * @return true daca are mai mult de 30/40 zile de concediu luate per total pe an&#xD;
		 * @throws ClassNotFoundException&#xD;
		 * @throws IOException</body>
          </ownedComment>
          <ownedParameter xmi:id="_UEfnUkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEfnU0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UEgOYEVdEfCS7cth2SLu0w" name="odatavara" isStatic="true" method="_UItY_kVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJXgQEVdEfCS7cth2SLu0w">
            <body>verificare daca are deja un concediu pe timpul verii&#xD;
		 * @param request&#xD;
		 * @return true daca are deja un concediu, diferit de acesta, pe timpul verii&#xD;
		 * @throws ClassNotFoundException&#xD;
		 * @throws IOException</body>
          </ownedComment>
          <ownedParameter xmi:id="_UEgOYUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEg1cEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UEg1cUVdEfCS7cth2SLu0w" name="maimultezileodata" isStatic="true" method="_UItZAUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJXgQUVdEfCS7cth2SLu0w">
            <body>verificare numar de zile / concediu&#xD;
		 * @param concediu&#xD;
		 * @return daca un concediu are mai mult de 21 de zile</body>
          </ownedComment>
          <ownedParameter xmi:id="_UEg1ckVdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEg1c0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UEhcgUVdEfCS7cth2SLu0w" name="preamulti" visibility="private" method="_UItZB0VdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJXgQ0VdEfCS7cth2SLu0w">
            <body>Verificare daca intr-un departament sunt plecati mai mult de jumatate de angajati&#xD;
		 * @param concediu&#xD;
		 * @param request&#xD;
		 * @return&#xD;
		 * @throws ClassNotFoundException&#xD;
		 * @throws IOException</body>
          </ownedComment>
          <ownedParameter xmi:id="_UEhcgkVdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEhcg0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEhchEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UEiDkEVdEfCS7cth2SLu0w" name="preamultid" isStatic="true" method="_UIuAAEVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJXgREVdEfCS7cth2SLu0w">
            <body>Verificare daca mai mult de 2 directori sunt plecati in concediu&#xD;
		 * @param concediu&#xD;
		 * @param request&#xD;
		 * @return true, daca daca mai mult de 2 directori sunt plecati in concediu&#xD;
		 * @throws ClassNotFoundException&#xD;
		 * @throws IOException</body>
          </ownedComment>
          <ownedParameter xmi:id="_UEiDkUVdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEiDkkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEiDk0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UEiqoEVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" isStatic="true" method="_UIuABEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJXgRUVdEfCS7cth2SLu0w">
            <body>Afiseaza frumos / Pretty print o eroare dintr-o baza de date&#xD;
		 * @param ex</body>
          </ownedComment>
          <ownedParameter xmi:id="_UEiqoUVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S-DjsEVdEfCS7cth2SLu0w" name="DeleteProiectServlet">
        <generalization xmi:id="_UEkf0EVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UG1JoEVdEfCS7cth2SLu0w" name="DB_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG1JoUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UG1JokVdEfCS7cth2SLu0w" name="DB_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG1Jo0VdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UG1wsEVdEfCS7cth2SLu0w" name="DB_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG1wsUVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIuABkVdEfCS7cth2SLu0w" name="doPost" specification="_UEj4wEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIuAB0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIuACEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession();&#xD;
     &#xD;
     int idProiect = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
     getServletContext().log(&quot;Început procesul de ștergere pentru proiectul ID: &quot; + idProiect);&#xD;
&#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         // Disable auto-commit for transaction&#xD;
         conn.setAutoCommit(false);&#xD;
         getServletContext().log(&quot;Conexiune stabilită și autocommit dezactivat&quot;);&#xD;
&#xD;
         // 1. Găsește toate echipele asociate proiectului&#xD;
         String sqlFindEchipe = &quot;SELECT id FROM echipe WHERE id_prj = ?&quot;;&#xD;
         try (PreparedStatement pstmtFindEchipe = conn.prepareStatement(sqlFindEchipe)) {&#xD;
             pstmtFindEchipe.setInt(1, idProiect);&#xD;
             try (ResultSet rsEchipe = pstmtFindEchipe.executeQuery()) {&#xD;
                 // Pentru fiecare echipă, șterge relațiile din membrii_echipe&#xD;
                 String sqlDeleteMembri = &quot;DELETE FROM membrii_echipe WHERE id_echipa = ?&quot;;&#xD;
                 try (PreparedStatement pstmtDeleteMembri = conn.prepareStatement(sqlDeleteMembri)) {&#xD;
                     while (rsEchipe.next()) {&#xD;
                         int idEchipa = rsEchipe.getInt(&quot;id&quot;);&#xD;
                         pstmtDeleteMembri.setInt(1, idEchipa);&#xD;
                         pstmtDeleteMembri.executeUpdate();&#xD;
                         getServletContext().log(&quot;Șters membrii pentru echipa ID: &quot; + idEchipa);&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
&#xD;
         // 2. Șterge echipele asociate proiectului&#xD;
         String sqlDeleteEchipe = &quot;DELETE FROM echipe WHERE id_prj = ?&quot;;&#xD;
         try (PreparedStatement pstmtDeleteEchipe = conn.prepareStatement(sqlDeleteEchipe)) {&#xD;
             pstmtDeleteEchipe.setInt(1, idProiect);&#xD;
             int affectedTeams = pstmtDeleteEchipe.executeUpdate();&#xD;
             getServletContext().log(&quot;Echipe șterse: &quot; + affectedTeams);&#xD;
         }&#xD;
&#xD;
         // 3. Șterge task-urile asociate proiectului (dacă există)&#xD;
         String sqlDeleteTasks = &quot;DELETE FROM tasks WHERE id_prj = ?&quot;;&#xD;
         try {&#xD;
             PreparedStatement pstmtDeleteTasks = conn.prepareStatement(sqlDeleteTasks);&#xD;
             pstmtDeleteTasks.setInt(1, idProiect);&#xD;
             int affectedTasks = pstmtDeleteTasks.executeUpdate();&#xD;
             pstmtDeleteTasks.close();&#xD;
             getServletContext().log(&quot;Task-uri șterse: &quot; + affectedTasks);&#xD;
         } catch (SQLException e) {&#xD;
             // Ignorăm eroarea dacă tabela nu există&#xD;
             getServletContext().log(&quot;Info: tabela tasks probabil nu există: &quot; + e.getMessage());&#xD;
         }&#xD;
&#xD;
         // 4. În final, șterge proiectul&#xD;
         String sqlDeleteProiect = &quot;DELETE FROM proiecte WHERE id = ?&quot;;&#xD;
         try (PreparedStatement pstmtDeleteProiect = conn.prepareStatement(sqlDeleteProiect)) {&#xD;
             pstmtDeleteProiect.setInt(1, idProiect);&#xD;
             int rowsAffected = pstmtDeleteProiect.executeUpdate();&#xD;
             &#xD;
             if (rowsAffected > 0) {&#xD;
                 conn.commit();&#xD;
                 getServletContext().log(&quot;Tranzacția a fost confirmată, proiectul a fost șters cu succes&quot;);&#xD;
                 &#xD;
                 // Returnează un răspuns JSON de succes&#xD;
                 response.setContentType(&quot;application/json&quot;);&#xD;
                 response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
                 response.getWriter().write(&quot;{\&quot;success\&quot;: true, \&quot;message\&quot;: \&quot;Proiectul a fost șters cu succes.\&quot;}&quot;);&#xD;
             } else {&#xD;
                 conn.rollback();&#xD;
                 getServletContext().log(&quot;Proiectul nu a fost găsit, tranzacția a fost anulată&quot;);&#xD;
                 &#xD;
                 // Returnează un răspuns JSON de eroare&#xD;
                 response.setContentType(&quot;application/json&quot;);&#xD;
                 response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
                 response.getWriter().write(&quot;{\&quot;success\&quot;: false, \&quot;message\&quot;: \&quot;Nu s-a putut șterge proiectul. Proiectul nu a fost găsit.\&quot;}&quot;);&#xD;
             }&#xD;
         }&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;JDBC Driver not found&quot;, e);&#xD;
         &#xD;
         // Rollback transaction if needed&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             getServletContext().log(&quot;Error during rollback&quot;, ex);&#xD;
         }&#xD;
         &#xD;
         // Returnează un răspuns JSON de eroare&#xD;
         response.setContentType(&quot;application/json&quot;);&#xD;
         response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
         response.getWriter().write(&quot;{\&quot;success\&quot;: false, \&quot;message\&quot;: \&quot;Eroare la încărcarea driver-ului JDBC.\&quot;}&quot;);&#xD;
     } catch (SQLException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Database error&quot;, e);&#xD;
         &#xD;
         // Rollback transaction&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             getServletContext().log(&quot;Error during rollback&quot;, ex);&#xD;
         }&#xD;
         &#xD;
         // Returnează un răspuns JSON de eroare&#xD;
         response.setContentType(&quot;application/json&quot;);&#xD;
         response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
         response.getWriter().write(&quot;{\&quot;success\&quot;: false, \&quot;message\&quot;: \&quot;Eroare la baza de date: &quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
     } catch (Exception e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Unexpected error&quot;, e);&#xD;
         &#xD;
         // Rollback transaction&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             getServletContext().log(&quot;Error during rollback&quot;, ex);&#xD;
         }&#xD;
         &#xD;
         // Returnează un răspuns JSON de eroare&#xD;
         response.setContentType(&quot;application/json&quot;);&#xD;
         response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
         response.getWriter().write(&quot;{\&quot;success\&quot;: false, \&quot;message\&quot;: \&quot;Eroare neașteptată: &quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
     } finally {&#xD;
         // Reset auto-commit and close connection&#xD;
         if (conn != null) {&#xD;
             try {&#xD;
                 conn.setAutoCommit(true);&#xD;
                 conn.close();&#xD;
                 getServletContext().log(&quot;Conexiune închisă&quot;);&#xD;
             } catch (SQLException e) {&#xD;
                 getServletContext().log(&quot;Error closing connection&quot;, e);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UEj4wEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIuABkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEj4wUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEj4wkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S-fokEVdEfCS7cth2SLu0w" name="DescarcaAdeverintaServlet">
        <generalization xmi:id="_UEp_YkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UG9FcEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG9sgEVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIyRcEVdEfCS7cth2SLu0w" name="doGet" specification="_UEoxQEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIyRcUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIyRckVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Verificare sesiune&#xD;
     HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;currentUser&quot;) == null) {&#xD;
         response.sendError(HttpServletResponse.SC_UNAUTHORIZED, &quot;Sesiune invalida sau utilizator neautentificat&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Preia informatii utilizator&#xD;
     MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);&#xD;
     &#xD;
     // Verifica ambele posibile nume de parametri (id si idadev)&#xD;
     String idAdeverintaStr = request.getParameter(&quot;id&quot;);&#xD;
     if (idAdeverintaStr == null || idAdeverintaStr.isEmpty()) {&#xD;
         idAdeverintaStr = request.getParameter(&quot;idadev&quot;);&#xD;
     }&#xD;
     &#xD;
     if (idAdeverintaStr == null || idAdeverintaStr.isEmpty()) {&#xD;
         response.sendError(HttpServletResponse.SC_BAD_REQUEST, &quot;ID adeverinta lipsa sau invalid&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Log pentru debugging&#xD;
     System.out.println(&quot;ID Adeverinta pentru descarcare: &quot; + idAdeverintaStr);&#xD;
     &#xD;
     int idAdeverinta;&#xD;
     try {&#xD;
         idAdeverinta = Integer.parseInt(idAdeverintaStr);&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.sendError(HttpServletResponse.SC_BAD_REQUEST, &quot;ID adeverinta nu este un numar valid&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Variabile pentru preluarea datelor&#xD;
     String numePrenume = &quot;&quot;;&#xD;
     String cnp = &quot;&quot;;&#xD;
     String functie = &quot;&quot;;&#xD;
     String departament = &quot;&quot;;&#xD;
     String motiv = &quot;&quot;;&#xD;
     int tipAdeverinta = 0;&#xD;
     int salariu = 0;&#xD;
     String dataAngajarii = &quot;&quot;;&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Conectare la baza de date&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         &#xD;
         // Interogare pentru adeverinta&#xD;
         String sql = &quot;SELECT a.*, ta.denumire as tip_adeverinta, u.nume, u.prenume, u.cnp, &quot; +&#xD;
                     &quot;tp.salariu, u.data_ang, d.nume_dep, tp.denumire as pozitie, a.pentru_servi &quot; +&#xD;
                     &quot;FROM adeverinte a &quot; +&#xD;
                     &quot;JOIN tip_adev ta ON a.tip = ta.id &quot; +&#xD;
                     &quot;JOIN useri u ON a.id_ang = u.id &quot; +&#xD;
                     &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                     &quot;JOIN tipuri tp ON u.tip = tp.tip &quot; +&#xD;
                     &quot;WHERE a.id = ? AND a.status = 2&quot;;&#xD;
         &#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setInt(1, idAdeverinta);&#xD;
         &#xD;
         ResultSet rs = pstmt.executeQuery();&#xD;
         if (rs.next()) {&#xD;
             // Preia datele necesare&#xD;
             numePrenume = rs.getString(&quot;nume&quot;) + &quot; &quot; + rs.getString(&quot;prenume&quot;);&#xD;
             cnp = rs.getString(&quot;cnp&quot;);&#xD;
             functie = rs.getString(&quot;pozitie&quot;);&#xD;
             departament = rs.getString(&quot;nume_dep&quot;);&#xD;
             motiv = rs.getString(&quot;pentru_servi&quot;);&#xD;
             tipAdeverinta = rs.getInt(&quot;tip&quot;);&#xD;
             salariu = rs.getInt(&quot;salariu&quot;);&#xD;
             dataAngajarii = rs.getString(&quot;data_ang&quot;) != null ? rs.getString(&quot;data_ang&quot;) : &quot;N/A&quot;;&#xD;
             &#xD;
         } else {&#xD;
            &#xD;
             response.sendError(HttpServletResponse.SC_NOT_FOUND, &quot;Adeverinta nu a fost gasita sau nu aveti acces la ea&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Inchidere resurse&#xD;
         rs.close();&#xD;
         pstmt.close();&#xD;
         &#xD;
         // Genereaza PDF-ul direct in response&#xD;
         generarePDFDirect(response, idAdeverinta, numePrenume, cnp, functie, departament, &#xD;
                    motiv, tipAdeverinta, salariu, dataAngajarii);&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         System.err.println(&quot;Eroare: &quot; + e.getMessage());&#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;html>&lt;head>&lt;title>Eroare&lt;/title>&lt;/head>&lt;body>&quot;);&#xD;
         out.println(&quot;&lt;h1>A aparut o eroare la generarea adeverintei&lt;/h1>&quot;);&#xD;
         out.println(&quot;&lt;p>Detalii eroare: &quot; + e.getMessage() + &quot;&lt;/p>&quot;);&#xD;
         out.println(&quot;&lt;p>&lt;a href='adeverintenoiuser.jsp'>inapoi la adeverintele mele&lt;/a>&lt;/p>&quot;);&#xD;
         out.println(&quot;&lt;/body>&lt;/html>&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { /* ignored */ }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIyRc0VdEfCS7cth2SLu0w" name="generarePDFDirect" specification="_UEpYUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIyRdEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIyRdUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIyRdkVdEfCS7cth2SLu0w" name="numePrenume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIyRd0VdEfCS7cth2SLu0w" name="cnp">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIyReEVdEfCS7cth2SLu0w" name="functie">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIyReUVdEfCS7cth2SLu0w" name="departament">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIyRekVdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIyRe0VdEfCS7cth2SLu0w" name="tipAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIyRfEVdEfCS7cth2SLu0w" name="salariu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIyRfUVdEfCS7cth2SLu0w" name="dataAngajarii">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>try {&#xD;
         // Configuram response pentru a servi un PDF&#xD;
         response.setContentType(&quot;application/pdf&quot;);&#xD;
         response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=\&quot;adeverinta_&quot; + idAdeverinta + &quot;.pdf\&quot;&quot;);&#xD;
         &#xD;
         // Cream documentul PDF direct in output stream-ul response-ului&#xD;
         Document document = new Document(PageSize.A4);&#xD;
         PdfWriter writer = PdfWriter.getInstance(document, response.getOutputStream());&#xD;
         document.open();&#xD;
         &#xD;
         // Adaugam continutul&#xD;
         Font titleFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);&#xD;
         Font headerFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);&#xD;
         Font normalFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);&#xD;
         &#xD;
         // Titlu&#xD;
         Paragraph title = new Paragraph(&quot;ADEVERINTA&quot;, titleFont);&#xD;
         title.setAlignment(Element.ALIGN_CENTER);&#xD;
         document.add(title);&#xD;
         &#xD;
         // Data si numar&#xD;
         java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat(&quot;dd.MM.yyyy&quot;);&#xD;
         String dataEmitere = dateFormat.format(new java.util.Date());&#xD;
         Paragraph nrAdeverinta = new Paragraph(&quot;Nr. &quot; + idAdeverinta + &quot; / &quot; + dataEmitere, normalFont);&#xD;
         nrAdeverinta.setAlignment(Element.ALIGN_RIGHT);&#xD;
         document.add(nrAdeverinta);&#xD;
         &#xD;
         document.add(Chunk.NEWLINE);&#xD;
         document.add(Chunk.NEWLINE);&#xD;
         &#xD;
         // Continut adeverinta&#xD;
         Paragraph content = new Paragraph();&#xD;
         content.setAlignment(Element.ALIGN_JUSTIFIED);&#xD;
         &#xD;
         switch (tipAdeverinta) {&#xD;
             case 1: // Adeverinta de salariat&#xD;
                 content.add(new Chunk(&quot;Prin prezenta, se adevereste faptul ca &quot;, normalFont));&#xD;
                 content.add(new Chunk(numePrenume, headerFont));&#xD;
                 content.add(new Chunk(&quot;, CNP &quot; + cnp + &quot;, este angajat(a) al(a) companiei noastre, in functia de &quot;, normalFont));&#xD;
                 content.add(new Chunk(functie, headerFont));&#xD;
                 content.add(new Chunk(&quot; in cadrul departamentului &quot;, normalFont));&#xD;
                 content.add(new Chunk(departament, headerFont));&#xD;
                 content.add(new Chunk(&quot;.\n\nAceasta adeverinta se elibereaza pentru a-i servi la &quot; + motiv + &quot;.&quot;, normalFont));&#xD;
                 break;&#xD;
                 &#xD;
             case 2: // Adeverinta de venit&#xD;
                 content.add(new Chunk(&quot;Prin prezenta, se adevereste faptul ca &quot;, normalFont));&#xD;
                 content.add(new Chunk(numePrenume, headerFont));&#xD;
                 content.add(new Chunk(&quot;, CNP &quot; + cnp + &quot;, angajat(a) al(a) companiei noastre, in functia de &quot;, normalFont));&#xD;
                 content.add(new Chunk(functie, headerFont));&#xD;
                 content.add(new Chunk(&quot; in cadrul departamentului &quot;, normalFont));&#xD;
                 content.add(new Chunk(departament, headerFont));&#xD;
                 content.add(new Chunk(&quot;, are un salariu brut de &quot;, normalFont));&#xD;
                 content.add(new Chunk(String.format(&quot;%,d&quot;, salariu) + &quot; RON&quot;, headerFont));&#xD;
                 content.add(new Chunk(&quot;.\n\nAceasta adeverinta se elibereaza pentru a-i servi la &quot; + motiv + &quot;.&quot;, normalFont));&#xD;
                 break;&#xD;
                 &#xD;
             // Restul cazurilor (aceleasi ca anterior)&#xD;
             default:&#xD;
                 content.add(new Chunk(&quot;Prin prezenta, adeverim ca &quot;, normalFont));&#xD;
                 content.add(new Chunk(numePrenume, headerFont));&#xD;
                 content.add(new Chunk(&quot;, CNP &quot; + cnp + &quot;, este angajat(a) al(a) companiei noastre, in functia de &quot;, normalFont));&#xD;
                 content.add(new Chunk(functie, headerFont));&#xD;
                 content.add(new Chunk(&quot; in cadrul departamentului &quot;, normalFont));&#xD;
                 content.add(new Chunk(departament, headerFont));&#xD;
                 content.add(new Chunk(&quot;.\n\nAceasta adeverinta se elibereaza pentru a-i servi la &quot; + motiv + &quot;.&quot;, normalFont));&#xD;
                 break;&#xD;
         }&#xD;
         &#xD;
         document.add(content);&#xD;
         document.add(Chunk.NEWLINE);&#xD;
         document.add(Chunk.NEWLINE);&#xD;
         &#xD;
         // Data si semnatura&#xD;
         Paragraph dataEmitereParagraph = new Paragraph(&quot;Data: &quot; + dataEmitere, normalFont);&#xD;
         dataEmitereParagraph.setAlignment(Element.ALIGN_LEFT);&#xD;
         document.add(dataEmitereParagraph);&#xD;
         &#xD;
         document.add(Chunk.NEWLINE);&#xD;
         document.add(Chunk.NEWLINE);&#xD;
         &#xD;
         Paragraph semnatura = new Paragraph(&quot;Director Resurse Umane,&quot;, normalFont);&#xD;
         semnatura.setAlignment(Element.ALIGN_RIGHT);&#xD;
         document.add(semnatura);&#xD;
         &#xD;
         document.add(Chunk.NEWLINE);&#xD;
         &#xD;
         Paragraph numeSemnatura = new Paragraph(&quot;_____________________&quot;, normalFont);&#xD;
         numeSemnatura.setAlignment(Element.ALIGN_RIGHT);&#xD;
         document.add(numeSemnatura);&#xD;
         &#xD;
         // Footer&#xD;
         Paragraph footer = new Paragraph(&#xD;
                 &quot;Acest document este valabil 30 de zile de la data emiterii.&quot;, &#xD;
                 new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.ITALIC));&#xD;
         footer.setAlignment(Element.ALIGN_CENTER);&#xD;
         document.add(footer);&#xD;
         &#xD;
//            // Informatii juridice&#xD;
//            Paragraph legal = new Paragraph(&#xD;
//                    &quot;Acest document a fost generat automat si nu necesita semnatura olografa conform art. 5 din Legea 455/2001.&quot;, &#xD;
//                    new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.ITALIC));&#xD;
//            legal.setAlignment(Element.ALIGN_CENTER);&#xD;
//            document.add(legal);&#xD;
         &#xD;
         // Finalizare document&#xD;
         document.close();&#xD;
         writer.close();&#xD;
         &#xD;
         System.out.println(&quot;PDF generat cu succes pentru adeverinta &quot; + idAdeverinta);&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         System.err.println(&quot;Eroare la generarea PDF direct: &quot; + e.getMessage());&#xD;
         e.printStackTrace();&#xD;
         throw new IOException(&quot;Nu s-a putut genera adeverinta PDF: &quot; + e.getMessage(), e);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UEoxQEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UIyRcEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEoxQUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEoxQkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UEpYUEVdEfCS7cth2SLu0w" name="generarePDFDirect" visibility="private" method="_UIyRc0VdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEpYUUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEpYUkVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UEpYU0VdEfCS7cth2SLu0w" name="numePrenume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UEpYVEVdEfCS7cth2SLu0w" name="cnp">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UEpYVUVdEfCS7cth2SLu0w" name="functie">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UEpYVkVdEfCS7cth2SLu0w" name="departament">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UEpYV0VdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UEpYWEVdEfCS7cth2SLu0w" name="tipAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UEp_YEVdEfCS7cth2SLu0w" name="salariu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UEp_YUVdEfCS7cth2SLu0w" name="dataAngajarii">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S-jS8EVdEfCS7cth2SLu0w" name="EditDenumireServlet">
        <generalization xmi:id="_UErNgEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UG9sgUVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG9sgkVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UG9sg0VdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG-TkEVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UG-TkUVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG-TkkVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIy4gEVdEfCS7cth2SLu0w" name="doPost" specification="_UEqmcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIy4gUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIy4gkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>//        HttpSession session = request.getSession();&#xD;
//        Integer userTip = (Integer) session.getAttribute(&quot;userTip&quot;);&#xD;
//        Integer userDep = (Integer) session.getAttribute(&quot;userDep&quot;);&#xD;
//        &#xD;
//        // Verificare permisiuni - doar Admin HR sau Director&#xD;
//        if (userTip == null || (userTip != 0 &amp;&amp; (userTip != 3 &amp;&amp; userDep != 1))) {&#xD;
//            response.sendRedirect(&quot;Access.jsp?error=accessDenied&quot;);&#xD;
//            return;&#xD;
//        }&#xD;
     &#xD;
     int id = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
     int tipPozitie = Integer.parseInt(request.getParameter(&quot;tip_pozitie&quot;));&#xD;
     int idDep = Integer.parseInt(request.getParameter(&quot;id_dep&quot;));&#xD;
     String denumireCompleta = request.getParameter(&quot;denumire_completa&quot;);&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         String sql = &quot;UPDATE denumiri_pozitii SET tip_pozitie = ?, id_dep = ?, denumire_completa = ? WHERE id = ?&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setInt(1, tipPozitie);&#xD;
         pstmt.setInt(2, idDep);&#xD;
         pstmt.setString(3, denumireCompleta);&#xD;
         pstmt.setInt(4, id);&#xD;
         &#xD;
         pstmt.executeUpdate();&#xD;
         &#xD;
         response.sendRedirect(&quot;administrare_pozitii.jsp?success=updated&quot;);&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         if (e.getMessage().contains(&quot;Duplicate&quot;)) {&#xD;
             response.sendRedirect(&quot;administrare_pozitii.jsp?error=duplicate&quot;);&#xD;
         } else {&#xD;
             e.printStackTrace();&#xD;
             response.sendRedirect(&quot;administrare_pozitii.jsp?error=updateFailed&quot;);&#xD;
         }&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;administrare_pozitii.jsp?error=driverNotFound&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UEqmcEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIy4gEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEqmcUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEqmckVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S-mWQEVdEfCS7cth2SLu0w" name="EditPostServlet">
        <generalization xmi:id="_UEsboEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIy4g0VdEfCS7cth2SLu0w" name="doPost" specification="_UEr0kEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIy4hEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIy4hUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Obținerea parametrilor postului&#xD;
     int idPost = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
     String titlu = request.getParameter(&quot;titlu&quot;);&#xD;
     String req = request.getParameter(&quot;req&quot;);&#xD;
     String resp = request.getParameter(&quot;resp&quot;);&#xD;
     String dom = request.getParameter(&quot;dom&quot;);&#xD;
     String subdom = request.getParameter(&quot;subdom&quot;);&#xD;
     int pozitie = Integer.parseInt(request.getParameter(&quot;pozitie&quot;));&#xD;
     int departament = Integer.parseInt(request.getParameter(&quot;departament&quot;));&#xD;
     Date start = Date.valueOf(request.getParameter(&quot;start&quot;));&#xD;
     Date end = Date.valueOf(request.getParameter(&quot;end&quot;));&#xD;
     boolean activ = &quot;1&quot;.equals(request.getParameter(&quot;activ&quot;));&#xD;
     int ore = Integer.parseInt(request.getParameter(&quot;ore&quot;));&#xD;
     boolean tip = &quot;1&quot;.equals(request.getParameter(&quot;tip&quot;));&#xD;
     String keywords = request.getParameter(&quot;keywords&quot;);&#xD;
     &#xD;
     // Obținerea parametrilor de locație&#xD;
     String judet = request.getParameter(&quot;judet&quot;);&#xD;
     String localitate = request.getParameter(&quot;localitate&quot;);&#xD;
     String strada = request.getParameter(&quot;strada&quot;);&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         &#xD;
         // Începem o tranzacție pentru a asigura consistența&#xD;
         conn.setAutoCommit(false);&#xD;
//            &#xD;
//            // 1. Mai întâi verificăm ID-ul locației curente a postului&#xD;
//            String sqlCheckLoc = &quot;SELECT id_locatie FROM joburi WHERE id = ?&quot;;&#xD;
//            PreparedStatement pstmtCheck = conn.prepareStatement(sqlCheckLoc);&#xD;
//            pstmtCheck.setInt(1, idPost);&#xD;
//            ResultSet rsCheck = pstmtCheck.executeQuery();&#xD;
//            &#xD;
//            int idLocatie = 0;&#xD;
//            if (rsCheck.next()) {&#xD;
//                idLocatie = rsCheck.getInt(&quot;id_locatie&quot;);&#xD;
//            }&#xD;
//            rsCheck.close();&#xD;
//            pstmtCheck.close();&#xD;
//            &#xD;
//            // 2. Actualizăm locația existentă sau creăm una nouă&#xD;
//            if (idLocatie > 0) {&#xD;
//                // Actualizăm locația existentă&#xD;
//                String sqlUpdateLoc = &quot;UPDATE locatii_joburi SET strada = ?, oras = ?, judet = ? WHERE id_locatie = ?&quot;;&#xD;
//                PreparedStatement pstmtUpdateLoc = conn.prepareStatement(sqlUpdateLoc);&#xD;
//                pstmtUpdateLoc.setString(1, strada);&#xD;
//                pstmtUpdateLoc.setString(2, localitate);&#xD;
//                pstmtUpdateLoc.setString(3, judet);&#xD;
//                pstmtUpdateLoc.setInt(4, idLocatie);&#xD;
//                pstmtUpdateLoc.executeUpdate();&#xD;
//                pstmtUpdateLoc.close();&#xD;
//            } else {&#xD;
//                // Creăm o locație nouă&#xD;
//                String sqlNewLoc = &quot;INSERT INTO locatii_joburi (strada, oras, judet, tara, cod) VALUES (?, ?, ?, 'România', ?)&quot;;&#xD;
//                PreparedStatement pstmtNewLoc = conn.prepareStatement(sqlNewLoc, Statement.RETURN_GENERATED_KEYS);&#xD;
//                pstmtNewLoc.setString(1, strada);&#xD;
//                pstmtNewLoc.setString(2, localitate);&#xD;
//                pstmtNewLoc.setString(3, judet);&#xD;
//                pstmtNewLoc.setString(4, &quot;&quot;); // Cod poștal, îl lăsăm gol pentru exemplul acesta&#xD;
//                pstmtNewLoc.executeUpdate();&#xD;
//                &#xD;
//                // Obținem ID-ul generat pentru locație&#xD;
//                ResultSet generatedKeys = pstmtNewLoc.getGeneratedKeys();&#xD;
//                if (generatedKeys.next()) {&#xD;
//                    idLocatie = generatedKeys.getInt(1);&#xD;
//                } else {&#xD;
//                    throw new SQLException(&quot;Eroare la crearea locației, nu s-a obținut ID-ul.&quot;);&#xD;
//                }&#xD;
//                pstmtNewLoc.close();&#xD;
//            }&#xD;
//            &#xD;
//            // 3. Actualizăm postul&#xD;
         String sql = &quot;UPDATE joburi SET titlu = ?, req = ?, resp = ?, dom = ?, subdom = ?, &quot; +&#xD;
                     &quot;pozitie = ?, departament = ?, start = ?, end = ?, &quot; +&#xD;
                     &quot;activ = ?, keywords = ?, ore = ?, tip = ? WHERE id = ?&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setString(1, titlu);&#xD;
         pstmt.setString(2, req);&#xD;
         pstmt.setString(3, resp);&#xD;
         pstmt.setString(4, dom);&#xD;
         pstmt.setString(5, subdom);&#xD;
         pstmt.setInt(6, pozitie);&#xD;
         pstmt.setInt(7, departament);&#xD;
         pstmt.setDate(8, start);&#xD;
         pstmt.setDate(9, end);&#xD;
        // pstmt.setInt(10, idLocatie);&#xD;
         pstmt.setBoolean(10, activ);&#xD;
         pstmt.setString(11, keywords);&#xD;
         pstmt.setInt(12, ore);&#xD;
         pstmt.setBoolean(13, tip);&#xD;
         pstmt.setInt(14, idPost);&#xD;
         &#xD;
         pstmt.executeUpdate();&#xD;
         pstmt.close();&#xD;
         &#xD;
         // Confirmăm tranzacția&#xD;
         conn.commit();&#xD;
         &#xD;
         response.sendRedirect(&quot;administrare_posturi.jsp?action=list&amp;success=true&quot;);&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         // Rollback în caz de eroare&#xD;
         if (conn != null) {&#xD;
             try {&#xD;
                 conn.rollback();&#xD;
             } catch (SQLException ex) {&#xD;
                 ex.printStackTrace();&#xD;
             }&#xD;
         }&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;administrare_posturi.jsp?action=edit&amp;id=&quot; + idPost + &quot;&amp;error=true&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;administrare_posturi.jsp?action=edit&amp;id=&quot; + idPost + &quot;&amp;error=true&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { &#xD;
                 conn.setAutoCommit(true);&#xD;
                 conn.close(); &#xD;
             } catch (SQLException e) { &#xD;
                 e.printStackTrace(); &#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UEr0kEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIy4g0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEr0kUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEr0kkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S-oLcEVdEfCS7cth2SLu0w" name="EditPozitieServlet">
        <generalization xmi:id="_UEtCsEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UG-Tk0VdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG-TlEVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UG-TlUVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG-6oEVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UG-6oUVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG-6okVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIy4hkVdEfCS7cth2SLu0w" name="doPost" specification="_UEsboUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIy4h0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIy4iEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>//        HttpSession session = request.getSession();&#xD;
//        Integer userTip = (Integer) session.getAttribute(&quot;userTip&quot;);&#xD;
//        Integer userDep = (Integer) session.getAttribute(&quot;userDep&quot;);&#xD;
//        &#xD;
//        // Verificare permisiuni - doar Admin HR sau Director&#xD;
//        if (userTip == null || (userTip != 0 &amp;&amp; (userTip != 3 &amp;&amp; userDep != 1))) {&#xD;
//            response.sendRedirect(&quot;Access.jsp?error=accessDenied&quot;);&#xD;
//            return;&#xD;
//        }&#xD;
     &#xD;
     int tipId = Integer.parseInt(request.getParameter(&quot;tip_id&quot;));&#xD;
     String denumire = request.getParameter(&quot;denumire&quot;);&#xD;
     int salariu = Integer.parseInt(request.getParameter(&quot;salariu&quot;));&#xD;
     int ierarhie = Integer.parseInt(request.getParameter(&quot;ierarhie&quot;));&#xD;
     &#xD;
     // Handling potentially null departament_specific parameter&#xD;
     int departamentSpecific = 20; // Default to General department (20)&#xD;
     String departamentSpecificParam = request.getParameter(&quot;departament_specific&quot;);&#xD;
     if (departamentSpecificParam != null &amp;&amp; !departamentSpecificParam.isEmpty()) {&#xD;
         departamentSpecific = Integer.parseInt(departamentSpecificParam);&#xD;
     }&#xD;
     &#xD;
     String descriere = request.getParameter(&quot;descriere&quot;);&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         String sql = &quot;UPDATE tipuri SET denumire = ?, salariu = ?, ierarhie = ?, departament_specific = ?, descriere = ? WHERE tip = ?&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setString(1, denumire);&#xD;
         pstmt.setInt(2, salariu);&#xD;
         pstmt.setInt(3, ierarhie);&#xD;
         pstmt.setInt(4, departamentSpecific);&#xD;
         pstmt.setString(5, descriere);&#xD;
         pstmt.setInt(6, tipId);&#xD;
         &#xD;
         pstmt.executeUpdate();&#xD;
         &#xD;
         response.sendRedirect(&quot;administrare_pozitii.jsp?success=updated&quot;);&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;administrare_pozitii.jsp?error=updateFailed&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;administrare_pozitii.jsp?error=driverNotFound&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UEsboUVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIy4hkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEsbokVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEsbo0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S-qnsEVdEfCS7cth2SLu0w" name="EditProiectServlet">
        <generalization xmi:id="_UEuQ0EVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UG-6o0VdEfCS7cth2SLu0w" name="DB_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG-6pEVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UG_hsEVdEfCS7cth2SLu0w" name="DB_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG_hsUVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UG_hskVdEfCS7cth2SLu0w" name="DB_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UG_hs0VdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIzfkEVdEfCS7cth2SLu0w" name="doPost" specification="_UEtpwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIzfkUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIzfkkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Obține parametrii din formular&#xD;
     int idProiect = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
     String nume = request.getParameter(&quot;nume&quot;);&#xD;
     String descriere = request.getParameter(&quot;descriere&quot;);&#xD;
     Date dataStart = Date.valueOf(request.getParameter(&quot;start&quot;));&#xD;
     Date dataEnd = Date.valueOf(request.getParameter(&quot;end&quot;));&#xD;
     int supervizor = Integer.parseInt(request.getParameter(&quot;supervizor&quot;));&#xD;
&#xD;
     // Validări de bază&#xD;
     if (nume == null || nume.trim().isEmpty() || &#xD;
         descriere == null || descriere.trim().isEmpty() ||&#xD;
         dataStart == null || dataEnd == null) {&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=edit&amp;id=&quot; + idProiect + &quot;&amp;error=invalidData&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     // Verifică dacă data de început este înainte de data de sfârșit&#xD;
     if (dataStart.after(dataEnd)) {&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=edit&amp;id=&quot; + idProiect + &quot;&amp;error=invalidDates&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish the connection using DriverManager&#xD;
         try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {&#xD;
             &#xD;
             String sql = &quot;UPDATE proiecte SET nume = ?, descriere = ?, start = ?, end = ?, supervizor = ? WHERE id = ?&quot;;&#xD;
             &#xD;
             try (PreparedStatement pstmt = conn.prepareStatement(sql)) {&#xD;
                 pstmt.setString(1, nume);&#xD;
                 pstmt.setString(2, descriere);&#xD;
                 pstmt.setDate(3, dataStart);&#xD;
                 pstmt.setDate(4, dataEnd);&#xD;
                 pstmt.setInt(5, supervizor);&#xD;
                 pstmt.setInt(6, idProiect);&#xD;
&#xD;
                 int rowsAffected = pstmt.executeUpdate();&#xD;
                 &#xD;
                 if (rowsAffected > 0) {&#xD;
                     response.sendRedirect(&quot;administrare_proiecte.jsp?action=list&amp;success=true&quot;);&#xD;
                 } else {&#xD;
                     response.sendRedirect(&quot;administrare_proiecte.jsp?action=edit&amp;id=&quot; + idProiect + &quot;&amp;error=updateFailed&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;JDBC Driver not found&quot;, e);&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=edit&amp;id=&quot; + idProiect + &quot;&amp;error=driverNotFound&quot;);&#xD;
     } catch (SQLException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Database error&quot;, e);&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=edit&amp;id=&quot; + idProiect + &quot;&amp;error=databaseError&quot;);&#xD;
     } catch (Exception e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Unexpected error&quot;, e);&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=edit&amp;id=&quot; + idProiect + &quot;&amp;error=unexpectedError&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UEtpwEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIzfkEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEtpwUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEtpwkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S-trAEVdEfCS7cth2SLu0w" name="EditSediuServlet">
        <generalization xmi:id="_UEu340VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIzfk0VdEfCS7cth2SLu0w" name="doPost" specification="_UEu34EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIzflEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIzflUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>int idSediu = Integer.parseInt(request.getParameter(&quot;id_sediu&quot;));&#xD;
     String numeSediu = request.getParameter(&quot;nume_sediu&quot;);&#xD;
     String tipSediu = request.getParameter(&quot;tip_sediu&quot;);&#xD;
     &#xD;
     String telefon = request.getParameter(&quot;telefon&quot;);&#xD;
     String email = request.getParameter(&quot;email&quot;);&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Utilizare DriverManager în locul DBConn&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         &#xD;
         String sql = &quot;UPDATE sedii SET nume_sediu = ?, tip_sediu = ?, &quot; +&#xD;
                     &quot; telefon = ?, email = ? &quot; +&#xD;
                     &quot; WHERE id_sediu = ?&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setString(1, numeSediu);&#xD;
         pstmt.setString(2, tipSediu);&#xD;
        &#xD;
         pstmt.setString(3, telefon);&#xD;
         pstmt.setString(4, email);&#xD;
         &#xD;
         pstmt.setInt(12, idSediu);&#xD;
         &#xD;
         pstmt.executeUpdate();&#xD;
         pstmt.close();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	        PrintWriter out = response.getWriter();&#xD;
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
	        out.println(&quot;alert('Editare sediu cu succes!');&quot;);&#xD;
	        out.println(&quot;window.location.href = 'administrare_sedii.jsp?success=true';&quot;);&#xD;
	        out.println(&quot;&lt;/script>&quot;);&#xD;
	        out.close();&#xD;
	        return;            &#xD;
     } catch (SQLException | ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	        PrintWriter out = response.getWriter();&#xD;
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
	        out.println(&quot;alert('Nu s-a putut edita sediul!');&quot;);&#xD;
	        out.println(&quot;window.location.href = 'administrare_sedii.jsp?error=true';&quot;);&#xD;
	        out.println(&quot;&lt;/script>&quot;);&#xD;
	        out.close();&#xD;
	        return; &#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UEu34EVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UIzfk0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEu34UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEu34kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S-wHQEVdEfCS7cth2SLu0w" name="EditTaskServlet">
        <generalization xmi:id="_UEve80VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UG_htEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHAIwEVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI0GoEVdEfCS7cth2SLu0w" name="doPost" specification="_UEve8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI0GoUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI0GokVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String id = request.getParameter(&quot;id&quot;);&#xD;
     String nume = request.getParameter(&quot;nume&quot;);&#xD;
     String idPrj = request.getParameter(&quot;id_prj&quot;);&#xD;
     String idAng = request.getParameter(&quot;id_ang&quot;);&#xD;
     String supervizor = request.getParameter(&quot;supervizor&quot;);&#xD;
     String start = request.getParameter(&quot;start&quot;);&#xD;
     String end = request.getParameter(&quot;end&quot;);&#xD;
     String status = request.getParameter(&quot;status&quot;);&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {&#xD;
             // Verificarea statusului anterior&#xD;
             String oldStatus = &quot;&quot;;&#xD;
             String sqlGetOldStatus = &quot;SELECT status, id_ang FROM tasks WHERE id = ?&quot;;&#xD;
             try (PreparedStatement stmt = connection.prepareStatement(sqlGetOldStatus)) {&#xD;
                 stmt.setString(1, id);&#xD;
                 ResultSet rs = stmt.executeQuery();&#xD;
                 if (rs.next()) {&#xD;
                     oldStatus = rs.getString(&quot;status&quot;);&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             // Actualizarea task-ului&#xD;
             String sql = &quot;UPDATE tasks SET nume = ?, id_prj = ?, id_ang = ?, supervizor = ?, start = ?, end = ?, status = ? WHERE id = ?&quot;;&#xD;
             try (PreparedStatement pstmt = connection.prepareStatement(sql)) {&#xD;
                 pstmt.setString(1, nume);&#xD;
                 pstmt.setString(2, idPrj);&#xD;
                 pstmt.setString(3, idAng);&#xD;
                 pstmt.setString(4, supervizor);&#xD;
                 pstmt.setString(5, start);&#xD;
                 pstmt.setString(6, end);&#xD;
                 pstmt.setString(7, status);&#xD;
                 pstmt.setString(8, id);&#xD;
                 &#xD;
                 int rowsAffected = pstmt.executeUpdate();&#xD;
                 &#xD;
                 if (rowsAffected > 0) {&#xD;
                     // Notificare pentru modificarea statusului&#xD;
                     if (!oldStatus.equals(status)) {&#xD;
                         String sqlNotification = &quot;INSERT INTO notificari_task (id_task, id_ang, tip_notificare, mesaj) VALUES (?, ?, ?, ?)&quot;;&#xD;
                         try (PreparedStatement pstmtNotif = connection.prepareStatement(sqlNotification)) {&#xD;
                             pstmtNotif.setString(1, id);&#xD;
                             pstmtNotif.setString(2, supervizor); // Notifică supervizorul&#xD;
                             pstmtNotif.setString(3, &quot;STATUS_SCHIMBAT&quot;);&#xD;
                             pstmtNotif.setString(4, &quot;Statusul task-ului \&quot;&quot; + nume + &quot;\&quot; a fost modificat în &quot; + getStatusText(Integer.parseInt(status)));&#xD;
                             pstmtNotif.executeUpdate();&#xD;
                         } catch (SQLException e) {&#xD;
                             // Ignoră eroarea de notificare - continua fluxul&#xD;
                             e.printStackTrace();&#xD;
                         }&#xD;
                     }&#xD;
                     &#xD;
                     response.sendRedirect(&quot;administrare_taskuri.jsp?action=list&amp;success=true&quot;);&#xD;
                 } else {&#xD;
                     response.sendRedirect(&quot;administrare_taskuri.jsp?action=edit&amp;id=&quot; + id + &quot;&amp;error=true&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     } catch (ClassNotFoundException | SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;administrare_taskuri.jsp?action=edit&amp;id=&quot; + id + &quot;&amp;error=&quot; + e.getMessage());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI0Go0VdEfCS7cth2SLu0w" name="getStatusText" specification="_S-wuUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI0GpEVdEfCS7cth2SLu0w" name="status">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI0GpUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>switch (status) {&#xD;
         case 0: return &quot;0% - Neînceput&quot;;&#xD;
         case 1: return &quot;25% - În lucru&quot;;&#xD;
         case 2: return &quot;50% - La jumătate&quot;;&#xD;
         case 3: return &quot;75% - Aproape gata&quot;;&#xD;
         case 4: return &quot;100% - Finalizat&quot;;&#xD;
         default: return &quot;Necunoscut&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S-wuUEVdEfCS7cth2SLu0w" name="getStatusText" visibility="private" method="_UI0Go0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S-xVYEVdEfCS7cth2SLu0w" name="status">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S-xVYUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UEve8EVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UI0GoEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEve8UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEve8kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S-zKkEVdEfCS7cth2SLu0w" name="GetTasksCalendarServlet">
        <generalization xmi:id="_UEwtE0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHAIwUVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHAIwkVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHAIw0VdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHBW4EVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHBW4UVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHBW4kVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI0GpkVdEfCS7cth2SLu0w" name="doGet" specification="_UEwGAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI0Gp0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI0GqEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json;charset=UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
&#xD;
     // 1) Verificare sesiune și autentificare&#xD;
     HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;currentUser&quot;) == null) {&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
     MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);&#xD;
     int userId = currentUser.getId();&#xD;
&#xD;
     Connection conn = null;&#xD;
     JSONArray events = new JSONArray();&#xD;
&#xD;
     try {&#xD;
         // 2) Încarcă driver-ul JDBC și deschide conexiunea cu DriverManager&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
&#xD;
         // 3) Verificare rol/ierarhie utilizator&#xD;
         String userSql = &#xD;
             &quot;SELECT t.ierarhie, t.denumire AS functie &quot; +&#xD;
             &quot;FROM useri u JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
             &quot;WHERE u.id = ?&quot;;&#xD;
         try (PreparedStatement userPs = conn.prepareStatement(userSql)) {&#xD;
             userPs.setInt(1, userId);&#xD;
             try (ResultSet urs = userPs.executeQuery()) {&#xD;
                 if (!urs.next()) {&#xD;
                     // utilizator inexistent în baza de date&#xD;
                     response.sendRedirect(&quot;login.jsp&quot;);&#xD;
                     return;&#xD;
                 }&#xD;
                 int ierarhie = urs.getInt(&quot;ierarhie&quot;);&#xD;
                 String functie = urs.getString(&quot;functie&quot;);&#xD;
&#xD;
                 boolean isDirector         = (ierarhie &lt; 3);&#xD;
                 boolean isSef              = (ierarhie >= 4 &amp;&amp; ierarhie &lt;= 5);&#xD;
                 boolean isIncepator        = (ierarhie >= 10);&#xD;
                 boolean isUtilizatorNormal = !isDirector &amp;&amp; !isSef &amp;&amp; !isIncepator;&#xD;
                 boolean isAdmin            = &quot;Administrator&quot;.equals(functie);&#xD;
&#xD;
                 if (!isDirector) {&#xD;
                     // redirect conform rolului&#xD;
                     if (isAdmin) {&#xD;
                         response.sendRedirect(&quot;adminok.jsp&quot;);&#xD;
                     } else if (isUtilizatorNormal) {&#xD;
                         response.sendRedirect(&quot;tip1ok.jsp&quot;);&#xD;
                     } else if (isSef) {&#xD;
                         response.sendRedirect(&quot;sefok.jsp&quot;);&#xD;
                     } else if (isIncepator) {&#xD;
                         response.sendRedirect(&quot;tip2ok.jsp&quot;);&#xD;
                     } else {&#xD;
                         response.sendRedirect(&quot;dashboard.jsp&quot;);&#xD;
                     }&#xD;
                     return;&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
&#xD;
         // 4) Preluare task-uri pentru calendar&#xD;
         String sql = &#xD;
             &quot;SELECT t.*, p.nume AS proiect_nume, s.procent &quot; +&#xD;
             &quot;FROM tasks t &quot; +&#xD;
             &quot;JOIN proiecte p ON t.id_prj = p.id &quot; +&#xD;
             &quot;JOIN statusuri2 s ON t.status = s.id &quot; +&#xD;
             &quot;WHERE t.id_ang = ? OR t.supervizor = ?&quot;;&#xD;
         try (PreparedStatement pstmt = conn.prepareStatement(sql)) {&#xD;
             pstmt.setInt(1, userId);&#xD;
             pstmt.setInt(2, userId);&#xD;
             try (ResultSet rs = pstmt.executeQuery()) {&#xD;
                 while (rs.next()) {&#xD;
                     JSONObject event = new JSONObject();&#xD;
                     event.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                     event.put(&quot;title&quot;, rs.getString(&quot;nume&quot;) &#xD;
                         + &quot; (&quot; + rs.getInt(&quot;procent&quot;) + &quot;%)&quot;);&#xD;
                     event.put(&quot;start&quot;, rs.getDate(&quot;start&quot;).toString());&#xD;
                     event.put(&quot;end&quot;, rs.getDate(&quot;end&quot;).toString());&#xD;
                     event.put(&quot;description&quot;, rs.getString(&quot;proiect_nume&quot;));&#xD;
                     event.put(&quot;status&quot;, rs.getInt(&quot;status&quot;));&#xD;
                     event.put(&quot;color&quot;, getStatusColor(rs.getInt(&quot;status&quot;)));&#xD;
                     events.put(event);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, &#xD;
             &quot;Driver JDBC neidentificat!&quot;);&#xD;
         return;&#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, &#xD;
             &quot;Eroare la baza de date: &quot; + e.getMessage());&#xD;
         return;&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException ignore) {}&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // 5) Trimite răspunsul JSON&#xD;
     out.print(events.toString());&#xD;
     out.flush();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI0tsEVdEfCS7cth2SLu0w" name="getStatusColor" specification="_S-0_wEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI0tsUVdEfCS7cth2SLu0w" name="status">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI0tskVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>switch (status) {&#xD;
         case 0: return &quot;#6c757d&quot;;&#xD;
         case 1: return &quot;#17a2b8&quot;;&#xD;
         case 2: return &quot;#ffc107&quot;;&#xD;
         case 3: return &quot;#fd7e14&quot;;&#xD;
         case 4: return &quot;#28a745&quot;;&#xD;
         default: return &quot;#6c757d&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S-0_wEVdEfCS7cth2SLu0w" name="getStatusColor" visibility="private" method="_UI0tsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S-0_wUVdEfCS7cth2SLu0w" name="status">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S-0_wkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UEwGAEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI0GpkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEwGAUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEwGAkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S-3cAEVdEfCS7cth2SLu0w" name="GenerareCarteServlet">
        <generalization xmi:id="_UEx7M0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHBW40VdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHB98EVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI0ts0VdEfCS7cth2SLu0w" name="doGet" specification="_UEx7MEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI0ttEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI0ttUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;currentUser&quot;) == null) {&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);&#xD;
     int userId = currentUser.getId();&#xD;
     &#xD;
     response.setContentType(&quot;application/pdf&quot;);&#xD;
     response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=carte_munca.pdf&quot;);&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         &#xD;
         // Date personale&#xD;
         String sql = &quot;SELECT * FROM useri WHERE id = ?&quot;;&#xD;
         try (PreparedStatement pstmt = conn.prepareStatement(sql)) {&#xD;
             pstmt.setInt(1, userId);&#xD;
             try (ResultSet rs = pstmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     Document document = new Document();&#xD;
                     PdfWriter.getInstance(document, response.getOutputStream());&#xD;
                     document.open();&#xD;
                     &#xD;
                     // Antet&#xD;
                     Font headerFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);&#xD;
                     Paragraph header = new Paragraph(&quot;CARTE DE MUNCĂ&quot;, headerFont);&#xD;
                     header.setAlignment(Element.ALIGN_CENTER);&#xD;
                     document.add(header);&#xD;
                     &#xD;
                     document.add(new Paragraph(&quot; &quot;));&#xD;
                     &#xD;
                     // Logo firmă (dacă există)&#xD;
                     // Image logo = Image.getInstance(getServletContext().getRealPath(&quot;/images/logo.png&quot;));&#xD;
                     // logo.scaleToFit(100, 100);&#xD;
                     // document.add(logo);&#xD;
                     &#xD;
                     // Date personale&#xD;
                     PdfPTable personalData = new PdfPTable(2);&#xD;
                     personalData.setWidthPercentage(100);&#xD;
                     &#xD;
                     personalData.addCell(&quot;Nume:&quot;);&#xD;
                     personalData.addCell(rs.getString(&quot;nume&quot;));&#xD;
                     personalData.addCell(&quot;Prenume:&quot;);&#xD;
                     personalData.addCell(rs.getString(&quot;prenume&quot;));&#xD;
                     personalData.addCell(&quot;Data nașterii:&quot;);&#xD;
                     personalData.addCell(rs.getString(&quot;data_nasterii&quot;));&#xD;
                     personalData.addCell(&quot;CNP:&quot;);&#xD;
                     personalData.addCell(rs.getString(&quot;cnp&quot;));&#xD;
                     personalData.addCell(&quot;Adresa:&quot;);&#xD;
                     personalData.addCell(rs.getString(&quot;adresa&quot;));&#xD;
                     personalData.addCell(&quot;Email:&quot;);&#xD;
                     personalData.addCell(rs.getString(&quot;email&quot;));&#xD;
                     personalData.addCell(&quot;Telefon:&quot;);&#xD;
                     personalData.addCell(rs.getString(&quot;telefon&quot;));&#xD;
                     &#xD;
                     document.add(personalData);&#xD;
                     document.add(new Paragraph(&quot; &quot;));&#xD;
                     &#xD;
                     // Verifică dacă există tabela istoric_pozitii&#xD;
                     boolean tabelaExista = false;&#xD;
                     try (PreparedStatement checkStmt = conn.prepareStatement(&quot;SHOW TABLES LIKE 'istoric_pozitii'&quot;);&#xD;
                          ResultSet rsCheck = checkStmt.executeQuery()) {&#xD;
                         tabelaExista = rsCheck.next();&#xD;
                     }&#xD;
                     &#xD;
                     // Adaugă istoric poziții doar dacă tabela există&#xD;
                     if (tabelaExista) {&#xD;
                         // Istoric poziții&#xD;
                         String istoricSql = &quot;SELECT h.*, t.denumire as pozitie, d.nume_dep &quot; +&#xD;
                               &quot;FROM istoric_pozitii h &quot; +&#xD;
                               &quot;JOIN tipuri t ON h.tip_nou = t.tip &quot; +&#xD;
                               &quot;JOIN departament d ON h.id_dep_nou = d.id_dep &quot; +&#xD;
                               &quot;WHERE h.id_ang = ? &quot; +&#xD;
                               &quot;ORDER BY h.data_schimbare ASC&quot;;&#xD;
                         try (PreparedStatement istoricStmt = conn.prepareStatement(istoricSql)) {&#xD;
                             istoricStmt.setInt(1, userId);&#xD;
                             try (ResultSet rsIstoric = istoricStmt.executeQuery()) {&#xD;
                                 PdfPTable istoricTable = new PdfPTable(4);&#xD;
                                 istoricTable.setWidthPercentage(100);&#xD;
                                 istoricTable.setWidths(new float[]{3, 3, 3, 3});&#xD;
                                 &#xD;
                                 // Antet tabel&#xD;
                                 istoricTable.addCell(&quot;Începând de la&quot;);&#xD;
                                 istoricTable.addCell(&quot;Denumire&quot;);&#xD;
                                 istoricTable.addCell(&quot;Companie&quot;);&#xD;
                                 istoricTable.addCell(&quot;Departament&quot;);&#xD;
                                 &#xD;
                                 boolean hasRows = false;&#xD;
                                 while (rsIstoric.next()) {&#xD;
                                     hasRows = true;&#xD;
                                     istoricTable.addCell(rsIstoric.getDate(&quot;data_schimbare&quot;).toString());&#xD;
                                     istoricTable.addCell(rsIstoric.getString(&quot;pozitie&quot;));&#xD;
                                     istoricTable.addCell(&quot;Compania X SRL&quot;); // Poate fi parametrizat&#xD;
                                     istoricTable.addCell(rsIstoric.getString(&quot;nume_dep&quot;));&#xD;
                                 }&#xD;
                                 &#xD;
                                 // Adaugă tabela doar dacă există date de istoric&#xD;
                                 if (hasRows) {&#xD;
                                     document.add(new Paragraph(&quot;ISTORIC ANGAJARE&quot;, headerFont));&#xD;
                                     document.add(new Paragraph(&quot; &quot;));&#xD;
                                     document.add(istoricTable);&#xD;
                                 } else {&#xD;
                                     document.add(new Paragraph(&quot;ISTORIC ANGAJARE&quot;, headerFont));&#xD;
                                     document.add(new Paragraph(&quot; &quot;));&#xD;
                                     document.add(new Paragraph(&quot;Nu există informații despre istoricul de angajare.&quot;));&#xD;
                                 }&#xD;
                             }&#xD;
                         }&#xD;
                     } else {&#xD;
                         // Adaugă pozitia curenta a angajatului daca nu exista tabela de istoric&#xD;
                         String pozitieSQL = &quot;SELECT t.denumire as pozitie, d.nume_dep &quot; +&#xD;
                                            &quot;FROM useri u &quot; +&#xD;
                                            &quot;JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                                            &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                                            &quot;WHERE u.id = ?&quot;;&#xD;
                         try (PreparedStatement pozitieStmt = conn.prepareStatement(pozitieSQL)) {&#xD;
                             pozitieStmt.setInt(1, userId);&#xD;
                             try (ResultSet rsPozitie = pozitieStmt.executeQuery()) {&#xD;
                                 if (rsPozitie.next()) {&#xD;
                                     document.add(new Paragraph(&quot;POZIȚIE CURENTĂ&quot;, headerFont));&#xD;
                                     document.add(new Paragraph(&quot; &quot;));&#xD;
                                     &#xD;
                                     PdfPTable pozitieTable = new PdfPTable(2);&#xD;
                                     pozitieTable.setWidthPercentage(100);&#xD;
                                     &#xD;
                                     pozitieTable.addCell(&quot;Denumire funcție:&quot;);&#xD;
                                     pozitieTable.addCell(rsPozitie.getString(&quot;pozitie&quot;));&#xD;
                                     pozitieTable.addCell(&quot;Departament:&quot;);&#xD;
                                     pozitieTable.addCell(rsPozitie.getString(&quot;nume_dep&quot;));&#xD;
                                     &#xD;
                                     document.add(pozitieTable);&#xD;
                                 }&#xD;
                             }&#xD;
                         }&#xD;
                     }&#xD;
                     &#xD;
                     // Adaugă experiență si studii dacă există tabela&#xD;
                     boolean existaExperienta = false;&#xD;
                     try (PreparedStatement checkStmt = conn.prepareStatement(&quot;SHOW TABLES LIKE 'experienta'&quot;);&#xD;
                          ResultSet rsCheck = checkStmt.executeQuery()) {&#xD;
                         existaExperienta = rsCheck.next();&#xD;
                     }&#xD;
                     &#xD;
                     if (existaExperienta) {&#xD;
                         String expSql = &quot;SELECT e.*, t.denumire as pozitie, d.nume_dep &quot; +&#xD;
                                        &quot;FROM experienta e &quot; +&#xD;
                                        &quot;LEFT JOIN tipuri t ON e.tip = t.tip &quot; +&#xD;
                                        &quot;LEFT JOIN departament d ON e.id_dep = d.id_dep &quot; +&#xD;
                                        &quot;WHERE e.id_ang = ? &quot; +&#xD;
                                        &quot;ORDER BY e.start DESC&quot;;&#xD;
                         try (PreparedStatement expStmt = conn.prepareStatement(expSql)) {&#xD;
                             expStmt.setInt(1, userId);&#xD;
                             try (ResultSet rsExp = expStmt.executeQuery()) {&#xD;
                                 if (rsExp.next()) {&#xD;
                                     document.add(new Paragraph(&quot; &quot;));&#xD;
                                     document.add(new Paragraph(&quot;EXPERIENȚĂ ANTERIOARĂ&quot;, headerFont));&#xD;
                                     document.add(new Paragraph(&quot; &quot;));&#xD;
                                     &#xD;
                                     PdfPTable expTable = new PdfPTable(4);&#xD;
                                     expTable.setWidthPercentage(100);&#xD;
                                     expTable.setWidths(new float[]{3, 3, 2, 4});&#xD;
                                     &#xD;
                                     expTable.addCell(&quot;Perioada&quot;);&#xD;
                                     expTable.addCell(&quot;Funcție&quot;);&#xD;
                                     expTable.addCell(&quot;Instituție&quot;);&#xD;
                                     expTable.addCell(&quot;Descriere&quot;);&#xD;
                                     &#xD;
                                     do {&#xD;
                                         String perioada = rsExp.getDate(&quot;start&quot;) + &quot; - &quot; + &#xD;
                                                          (rsExp.getDate(&quot;end&quot;) != null ? rsExp.getDate(&quot;end&quot;) : &quot;Prezent&quot;);&#xD;
                                         expTable.addCell(perioada);&#xD;
                                         expTable.addCell(rsExp.getString(&quot;pozitie&quot;) != null ? rsExp.getString(&quot;pozitie&quot;) : rsExp.getString(&quot;den_job&quot;));&#xD;
                                         expTable.addCell(rsExp.getString(&quot;instit&quot;));&#xD;
                                         expTable.addCell(rsExp.getString(&quot;descriere&quot;));&#xD;
                                     } while (rsExp.next());&#xD;
                                     &#xD;
                                     document.add(expTable);&#xD;
                                 }&#xD;
                             }&#xD;
                         }&#xD;
                     }&#xD;
                     &#xD;
                     boolean existaStudii = false;&#xD;
                     try (PreparedStatement checkStmt = conn.prepareStatement(&quot;SHOW TABLES LIKE 'studii'&quot;);&#xD;
                          ResultSet rsCheck = checkStmt.executeQuery()) {&#xD;
                         existaStudii = rsCheck.next();&#xD;
                     }&#xD;
                     &#xD;
                     if (existaStudii) {&#xD;
                         String studiiSql = &quot;SELECT s.*, c.semnificatie as nivel_studii &quot; +&#xD;
                                           &quot;FROM studii s &quot; +&#xD;
                                           &quot;JOIN cicluri c ON s.ciclu = c.id &quot; +&#xD;
                                           &quot;WHERE s.id_ang = ? &quot; +&#xD;
                                           &quot;ORDER BY s.start DESC&quot;;&#xD;
                         try (PreparedStatement studiiStmt = conn.prepareStatement(studiiSql)) {&#xD;
                             studiiStmt.setInt(1, userId);&#xD;
                             try (ResultSet rsStudii = studiiStmt.executeQuery()) {&#xD;
                                 if (rsStudii.next()) {&#xD;
                                     document.add(new Paragraph(&quot; &quot;));&#xD;
                                     document.add(new Paragraph(&quot;STUDII&quot;, headerFont));&#xD;
                                     document.add(new Paragraph(&quot; &quot;));&#xD;
                                     &#xD;
                                     PdfPTable studiiTable = new PdfPTable(4);&#xD;
                                     studiiTable.setWidthPercentage(100);&#xD;
                                     studiiTable.setWidths(new float[]{3, 3, 2, 3});&#xD;
                                     &#xD;
                                     studiiTable.addCell(&quot;Perioada&quot;);&#xD;
                                     studiiTable.addCell(&quot;Instituție&quot;);&#xD;
                                     studiiTable.addCell(&quot;Nivel&quot;);&#xD;
                                     studiiTable.addCell(&quot;Facultate/Specializare&quot;);&#xD;
                                     &#xD;
                                     do {&#xD;
                                         String perioada = rsStudii.getDate(&quot;start&quot;) + &quot; - &quot; + &#xD;
                                                          (rsStudii.getDate(&quot;end&quot;) != null ? rsStudii.getDate(&quot;end&quot;) : &quot;Prezent&quot;);&#xD;
                                         studiiTable.addCell(perioada);&#xD;
                                         studiiTable.addCell(rsStudii.getString(&quot;universitate&quot;));&#xD;
                                         studiiTable.addCell(rsStudii.getString(&quot;nivel_studii&quot;));&#xD;
                                         studiiTable.addCell(rsStudii.getString(&quot;facultate&quot;));&#xD;
                                     } while (rsStudii.next());&#xD;
                                     &#xD;
                                     document.add(studiiTable);&#xD;
                                 }&#xD;
                             }&#xD;
                         }&#xD;
                     }&#xD;
                     &#xD;
                     // Footer&#xD;
                     document.add(new Paragraph(&quot; &quot;));&#xD;
                     document.add(new Paragraph(&quot; &quot;));&#xD;
                     Font footerFont = new Font(Font.FontFamily.HELVETICA, 10, Font.ITALIC);&#xD;
                     Paragraph footer = new Paragraph(&quot;Document generat la data: &quot; + new java.util.Date(), footerFont);&#xD;
                     footer.setAlignment(Element.ALIGN_CENTER);&#xD;
                     document.add(footer);&#xD;
                     &#xD;
                     document.close();&#xD;
                 } else {&#xD;
                     response.sendError(HttpServletResponse.SC_NOT_FOUND, &quot;Nu s-au găsit datele utilizatorului&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     } catch (ClassNotFoundException | SQLException | DocumentException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, &quot;Eroare la generarea cărții de muncă: &quot; + e.getMessage());&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UEx7MEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI0ts0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEx7MUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEx7MkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S-54QEVdEfCS7cth2SLu0w" name="GetAdeverinteServlet">
        <generalization xmi:id="_UEzJUkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHB98UVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHB98kVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI0ttkVdEfCS7cth2SLu0w" name="doGet" specification="_UEyiQEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI0tt0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI0tuEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json;charset=UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     JSONObject json = new JSONObject();&#xD;
     &#xD;
     HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;currentUser&quot;) == null) {&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Sesiune invalidă&quot;);&#xD;
         out.print(json.toString());&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);&#xD;
     int userTip = currentUser.getTip();&#xD;
     &#xD;
     // Verificare permisiuni - doar director și șefi de departament pot vedea cererile&#xD;
     if (userTip != 0 &amp;&amp; userTip != 3) {&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Nu aveți permisiuni&quot;);&#xD;
         out.print(json.toString());&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Parametri pentru paginare&#xD;
     int page = 1;&#xD;
     int itemsPerPage = 10;&#xD;
     &#xD;
     try {&#xD;
         if (request.getParameter(&quot;page&quot;) != null) {&#xD;
             page = Integer.parseInt(request.getParameter(&quot;page&quot;));&#xD;
         }&#xD;
         &#xD;
         if (request.getParameter(&quot;itemsPerPage&quot;) != null) {&#xD;
             itemsPerPage = Integer.parseInt(request.getParameter(&quot;itemsPerPage&quot;));&#xD;
         }&#xD;
     } catch (NumberFormatException e) {&#xD;
         // Folosim valorile implicite în caz de eroare&#xD;
         page = 1;&#xD;
         itemsPerPage = 10;&#xD;
     }&#xD;
     &#xD;
     // Calculăm offset-ul pentru SQL&#xD;
     int offset = (page - 1) * itemsPerPage;&#xD;
     &#xD;
     // Departamentul pentru șefi&#xD;
     Integer departamentId = null;&#xD;
     if (userTip == 3 &amp;&amp; request.getParameter(&quot;departament&quot;) != null) {&#xD;
         try {&#xD;
             departamentId = Integer.parseInt(request.getParameter(&quot;departament&quot;));&#xD;
         } catch (NumberFormatException e) {&#xD;
             // Ignorăm valoarea incorectă&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         try (Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {&#xD;
             &#xD;
             // Construim query-ul în funcție de tipul utilizatorului&#xD;
             StringBuilder sqlCount = new StringBuilder(&quot;SELECT COUNT(*) as total FROM adeverinte a&quot;);&#xD;
             StringBuilder sql = new StringBuilder(&#xD;
                     &quot;SELECT a.id, a.id_ang, a.tip, a.pentru_servi, a.status, a.creare, &quot; +&#xD;
                     &quot;u.nume, u.prenume, d.nume_dep, t.denumire as tip_denumire, s.nume_status &quot; +&#xD;
                     &quot;FROM adeverinte a &quot; +&#xD;
                     &quot;JOIN useri u ON a.id_ang = u.id &quot; +&#xD;
                     &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                     &quot;JOIN tip_adev t ON a.tip = t.id &quot; +&#xD;
                     &quot;JOIN statusuri s ON a.status = s.status &quot;&#xD;
             );&#xD;
             &#xD;
             // Adăugăm condiții în funcție de tipul utilizatorului&#xD;
             if (userTip == 3) {&#xD;
                 // Șef de departament vede doar cererile din departamentul său cu status 0 (neaprobate)&#xD;
                 sqlCount.append(&quot; JOIN useri u ON a.id_ang = u.id WHERE u.id_dep = ? AND a.status = 0&quot;);&#xD;
                 sql.append(&quot;WHERE u.id_dep = ? AND a.status = 0 &quot;);&#xD;
             } else if (userTip == 0) {&#xD;
                 // Directorul vede doar cererile aprobate de șefi (status 1)&#xD;
                 sqlCount.append(&quot; WHERE a.status = 1&quot;);&#xD;
                 sql.append(&quot;WHERE a.status = 1 &quot;);&#xD;
             }&#xD;
             &#xD;
             // Adăugăm ordinea și limitarea&#xD;
             sql.append(&quot;ORDER BY a.creare DESC LIMIT ? OFFSET ?&quot;);&#xD;
             &#xD;
             // Obținem numărul total de înregistrări&#xD;
             int totalItems = 0;&#xD;
             try (PreparedStatement countStmt = conn.prepareStatement(sqlCount.toString())) {&#xD;
                 if (userTip == 3) {&#xD;
                     countStmt.setInt(1, departamentId != null ? departamentId : currentUser.getDepartament());&#xD;
                 }&#xD;
                 &#xD;
                 try (ResultSet rsCount = countStmt.executeQuery()) {&#xD;
                     if (rsCount.next()) {&#xD;
                         totalItems = rsCount.getInt(&quot;total&quot;);&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             // Obținem înregistrările pentru pagina curentă&#xD;
             JSONArray adeverinteArray = new JSONArray();&#xD;
             try (PreparedStatement stmt = conn.prepareStatement(sql.toString())) {&#xD;
                 int paramIndex = 1;&#xD;
                 &#xD;
                 if (userTip == 3) {&#xD;
                     stmt.setInt(paramIndex++, departamentId != null ? departamentId : currentUser.getDepartament());&#xD;
                 }&#xD;
                 &#xD;
                 stmt.setInt(paramIndex++, itemsPerPage);&#xD;
                 stmt.setInt(paramIndex++, offset);&#xD;
                 &#xD;
                 try (ResultSet rs = stmt.executeQuery()) {&#xD;
                     while (rs.next()) {&#xD;
                         JSONObject adeverinta = new JSONObject();&#xD;
                         &#xD;
                         adeverinta.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                         adeverinta.put(&quot;idAngajat&quot;, rs.getInt(&quot;id_ang&quot;));&#xD;
                         adeverinta.put(&quot;numeAngajat&quot;, rs.getString(&quot;nume&quot;) + &quot; &quot; + rs.getString(&quot;prenume&quot;));&#xD;
                         adeverinta.put(&quot;departament&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
                         adeverinta.put(&quot;tipAdeverinta&quot;, rs.getString(&quot;tip_denumire&quot;));&#xD;
                         adeverinta.put(&quot;motiv&quot;, rs.getString(&quot;pentru_servi&quot;));&#xD;
                         adeverinta.put(&quot;status&quot;, rs.getInt(&quot;status&quot;));&#xD;
                         adeverinta.put(&quot;statusText&quot;, rs.getString(&quot;nume_status&quot;));&#xD;
                         adeverinta.put(&quot;dataCerere&quot;, rs.getDate(&quot;creare&quot;).toString());&#xD;
                         &#xD;
                         adeverinteArray.put(adeverinta);&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             // Construim răspunsul&#xD;
             json.put(&quot;success&quot;, true);&#xD;
             json.put(&quot;adeverinte&quot;, adeverinteArray);&#xD;
             json.put(&quot;totalItems&quot;, totalItems);&#xD;
             json.put(&quot;page&quot;, page);&#xD;
             json.put(&quot;itemsPerPage&quot;, itemsPerPage);&#xD;
             json.put(&quot;totalPages&quot;, (int) Math.ceil((double) totalItems / itemsPerPage));&#xD;
         }&#xD;
     } catch (ClassNotFoundException | SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Eroare la încărcare: &quot; + e.getMessage());&#xD;
     }&#xD;
     &#xD;
     out.print(json.toString());&#xD;
     out.flush();&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UEyiQEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI0ttkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEzJUEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UEzJUUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S-8UgEVdEfCS7cth2SLu0w" name="GetConcediiPersonaleServlet">
        <ownedComment xmi:id="_UJYuYEVdEfCS7cth2SLu0w">
          <body>Servlet pentru obținerea concediilor personale ale unui utilizator, inclusiv informații despre locația geografică</body>
        </ownedComment>
        <generalization xmi:id="_UE0-gEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHB980VdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHClAEVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHClAUVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHClAkVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHClA0VdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHClBEVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHClBUVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHClBkVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI1UwEVdEfCS7cth2SLu0w" name="GetConcediiPersonaleServlet" specification="_S-9ioEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI1UwUVdEfCS7cth2SLu0w" type="_S-8UgEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI1UwkVdEfCS7cth2SLu0w" name="doGet" specification="_UEzwYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI1Uw0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI1UxEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Obținem ID-ul utilizatorului din parametrii cererii&#xD;
     String userIdStr = request.getParameter(&quot;userId&quot;);&#xD;
     if (userIdStr == null || userIdStr.isEmpty()) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator lipsă\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     int userId;&#xD;
     try {&#xD;
         userId = Integer.parseInt(userIdStr);&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator invalid\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         List&lt;Map&lt;String, Object>> concedii = getConcediiPersonale(userId);&#xD;
         &#xD;
         // Convertim lista de concedii în JSON și o trimitem ca răspuns&#xD;
         ObjectMapper objectMapper = new ObjectMapper();&#xD;
         out.print(objectMapper.writeValueAsString(concedii));&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI1UxUVdEfCS7cth2SLu0w" name="getConcediiPersonale" specification="_S--wwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI1UxkVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI1Ux0VdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UI1UyEVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;Map&lt;String, Object>> concedii = new ArrayList&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     // Query pentru a obține concediile utilizatorului împreună cu locațiile lor geografice&#xD;
     String sql = &quot;SELECT c.id, c.start_c, c.end_c, c.motiv, c.locatie, tc.motiv as tip_concediu, &quot; +&#xD;
                  &quot;s.nume_status as status, lc.latitudine, lc.longitudine, &quot; +&#xD;
                  &quot;CONCAT(lc.strada, ', ', lc.oras, ', ', lc.judet, ', ', lc.tara) as adresa_completa &quot; +&#xD;
                  &quot;FROM concedii c &quot; +&#xD;
                  &quot;JOIN tipcon tc ON c.tip = tc.tip &quot; +&#xD;
                  &quot;JOIN statusuri s ON c.status = s.status &quot; +&#xD;
                  &quot;LEFT JOIN locatii_concedii lc ON c.id = lc.id_concediu &quot; +&#xD;
                  &quot;WHERE c.id_ang = ? &quot; +&#xD;
                  &quot;ORDER BY c.start_c DESC&quot;;&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
          PreparedStatement stmt = conn.prepareStatement(sql)) {&#xD;
         &#xD;
         stmt.setInt(1, userId);&#xD;
         &#xD;
         try (ResultSet rs = stmt.executeQuery()) {&#xD;
             while (rs.next()) {&#xD;
                 Map&lt;String, Object> concediu = new HashMap&lt;>();&#xD;
                 &#xD;
                 concediu.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                 concediu.put(&quot;start_c&quot;, rs.getString(&quot;start_c&quot;));&#xD;
                 concediu.put(&quot;end_c&quot;, rs.getString(&quot;end_c&quot;));&#xD;
                 concediu.put(&quot;motiv&quot;, rs.getString(&quot;motiv&quot;));&#xD;
                 concediu.put(&quot;locatie&quot;, rs.getString(&quot;locatie&quot;));&#xD;
                 concediu.put(&quot;tip&quot;, rs.getString(&quot;tip_concediu&quot;));&#xD;
                 concediu.put(&quot;status&quot;, rs.getString(&quot;status&quot;));&#xD;
                 &#xD;
                 // Adăugăm coordonatele geografice dacă există&#xD;
                 double lat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                 double lon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                 &#xD;
                 if (!rs.wasNull() &amp;&amp; lat != 0 &amp;&amp; lon != 0) {&#xD;
                     concediu.put(&quot;latitudine&quot;, lat);&#xD;
                     concediu.put(&quot;longitudine&quot;, lon);&#xD;
                     concediu.put(&quot;adresa_completa&quot;, rs.getString(&quot;adresa_completa&quot;));&#xD;
                 }&#xD;
                 &#xD;
                 concedii.add(concediu);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     System.out.println(concedii);&#xD;
     return concedii;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S-9ioEVdEfCS7cth2SLu0w" name="GetConcediiPersonaleServlet" method="_UI1UwEVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S-9ioUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S--JsEVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_S--JsUVdEfCS7cth2SLu0w" type="_S-8UgEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S--wwEVdEfCS7cth2SLu0w" name="getConcediiPersonale" visibility="private" method="_UI1UxUVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S--wwUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S--wwkVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S--ww0VdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UEzwYEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI1UwkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UEzwYUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UE0XcEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S_DpQEVdEfCS7cth2SLu0w" name="GetDenumireServlet">
        <generalization xmi:id="_UE2MoUVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHDMEEVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHDMEUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHDMEkVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHDME0VdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHDzIEVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHDzIUVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI170EVdEfCS7cth2SLu0w" name="doGet" specification="_UE1lkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI170UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI170kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json;charset=UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     JSONObject json = new JSONObject();&#xD;
     &#xD;
     int id = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         String sql = &quot;SELECT * FROM denumiri_pozitii WHERE id = ?&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setInt(1, id);&#xD;
         ResultSet rs = pstmt.executeQuery();&#xD;
         &#xD;
         if (rs.next()) {&#xD;
             json.put(&quot;success&quot;, true);&#xD;
             json.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
             json.put(&quot;tip_pozitie&quot;, rs.getInt(&quot;tip_pozitie&quot;));&#xD;
             json.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
             json.put(&quot;denumire_completa&quot;, rs.getString(&quot;denumire_completa&quot;));&#xD;
             json.put(&quot;activ&quot;, rs.getBoolean(&quot;activ&quot;));&#xD;
         } else {&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Denumirea nu a fost găsită!&quot;);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Eroare la obținerea datelor denumirii: &quot; + e.getMessage());&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Eroare la încărcarea driverului JDBC!&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     out.print(json.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UE1lkEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI170EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UE1lkUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UE2MoEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S_GFgEVdEfCS7cth2SLu0w" name="GetSediuToSelectedDepartmentServlet">
        <ownedComment xmi:id="_UJZVcEVdEfCS7cth2SLu0w">
          <body>Servlet pentru obținerea locațiilor sediului utilizatorului și sediului unui departament selectat</body>
        </ownedComment>
        <generalization xmi:id="_UE3awUVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHDzIkVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHDzI0VdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHEaMEVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHEaMUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHEaMkVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHEaM0VdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHEaNEVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHEaNUVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI1700VdEfCS7cth2SLu0w" name="GetSediuToSelectedDepartmentServlet" specification="_S_HToEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI171EVdEfCS7cth2SLu0w" type="_S_GFgEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI171UVdEfCS7cth2SLu0w" name="doGet" specification="_UE2zsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI171kVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI1710VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Obținem ID-ul utilizatorului și ID-ul departamentului din parametrii cererii&#xD;
     String userIdStr = request.getParameter(&quot;userId&quot;);&#xD;
     String depIdStr = request.getParameter(&quot;depId&quot;);&#xD;
     &#xD;
     if (userIdStr == null || userIdStr.isEmpty() || depIdStr == null || depIdStr.isEmpty()) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator sau ID departament lipsă\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     int userId, depId;&#xD;
     try {&#xD;
         userId = Integer.parseInt(userIdStr);&#xD;
         depId = Integer.parseInt(depIdStr);&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator sau ID departament invalid\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         // Obținem locațiile sediului utilizatorului și sediului departamentului&#xD;
         Map&lt;String, Object> result = getUserAndSelectedDepartmentLocations(userId, depId);&#xD;
         &#xD;
         // Verificăm dacă am găsit locațiile&#xD;
         if (result.isEmpty() || !result.containsKey(&quot;user_sediu_location&quot;) || !result.containsKey(&quot;selected_dep_location&quot;)) {&#xD;
             response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
             out.print(&quot;{\&quot;error\&quot;: \&quot;Nu s-au găsit locațiile necesare pentru rută.\&quot;}&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Convertim rezultatul în JSON și îl trimitem ca răspuns&#xD;
         ObjectMapper objectMapper = new ObjectMapper();&#xD;
         out.print(objectMapper.writeValueAsString(result));&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI2i4EVdEfCS7cth2SLu0w" name="getUserAndSelectedDepartmentLocations" specification="_S_IhwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI2i4UVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI2i4kVdEfCS7cth2SLu0w" name="depId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI2i40VdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Object> result = new HashMap&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
         // Obținem informațiile utilizatorului și departamentului său&#xD;
         String userSediuSql = &quot;SELECT u.id, u.nume, u.prenume, u.id_dep, d.nume_dep, u.id_sediu, &quot; +&#xD;
                           &quot;su.id_sediu as user_sediu_id, su.nume_sediu as user_sediu_nume, &quot; +&#xD;
                           &quot;su.tip_sediu as user_sediu_tip, su.strada as user_sediu_strada, &quot; +&#xD;
                           &quot;su.oras as user_sediu_oras, su.judet as user_sediu_judet, &quot; +&#xD;
                           &quot;su.tara as user_sediu_tara, su.latitudine as user_sediu_lat, &quot; +&#xD;
                           &quot;su.longitudine as user_sediu_long &quot; +&#xD;
                           &quot;FROM useri u &quot; +&#xD;
                           &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                           &quot;JOIN sedii su ON u.id_sediu = su.id_sediu &quot; +&#xD;
                           &quot;WHERE u.id = ?&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> userInfo = new HashMap&lt;>();&#xD;
         Map&lt;String, Object> userSediuLocation = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(userSediuSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     // Informații utilizator&#xD;
                     userInfo.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                     userInfo.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
                     userInfo.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
                     userInfo.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
                     userInfo.put(&quot;nume_dep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
                     userInfo.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                     &#xD;
                     // Informații sediu utilizator&#xD;
                     userSediuLocation.put(&quot;id_sediu&quot;, rs.getInt(&quot;user_sediu_id&quot;));&#xD;
                     userSediuLocation.put(&quot;nume_sediu&quot;, rs.getString(&quot;user_sediu_nume&quot;));&#xD;
                     userSediuLocation.put(&quot;tip_sediu&quot;, rs.getString(&quot;user_sediu_tip&quot;));&#xD;
                     userSediuLocation.put(&quot;strada&quot;, rs.getString(&quot;user_sediu_strada&quot;));&#xD;
                     userSediuLocation.put(&quot;oras&quot;, rs.getString(&quot;user_sediu_oras&quot;));&#xD;
                     userSediuLocation.put(&quot;judet&quot;, rs.getString(&quot;user_sediu_judet&quot;));&#xD;
                     userSediuLocation.put(&quot;tara&quot;, rs.getString(&quot;user_sediu_tara&quot;));&#xD;
                     userSediuLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;user_sediu_lat&quot;));&#xD;
                     userSediuLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;user_sediu_long&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă a sediului utilizator&#xD;
                     String adresaCompletaUserSediu = rs.getString(&quot;user_sediu_strada&quot;) + &quot;, &quot; + &#xD;
                                                 rs.getString(&quot;user_sediu_oras&quot;) + &quot;, &quot; + &#xD;
                                                 rs.getString(&quot;user_sediu_judet&quot;) + &quot;, &quot; + &#xD;
                                                 rs.getString(&quot;user_sediu_tara&quot;);&#xD;
                     userSediuLocation.put(&quot;adresa_completa&quot;, adresaCompletaUserSediu);&#xD;
                 } else {&#xD;
                     throw new SQLException(&quot;Utilizatorul cu ID-ul &quot; + userId + &quot; nu a fost găsit sau nu are un sediu asociat.&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;user_info&quot;, userInfo);&#xD;
         result.put(&quot;user_sediu_location&quot;, userSediuLocation);&#xD;
         &#xD;
         // Obținem informațiile departamentului selectat&#xD;
         String depSql = &quot;SELECT id_dep, nume_dep FROM departament WHERE id_dep = ?&quot;;&#xD;
         Map&lt;String, Object> selectedDepInfo = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(depSql)) {&#xD;
             stmt.setInt(1, depId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     selectedDepInfo.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
                     selectedDepInfo.put(&quot;nume_dep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
                 } else {&#xD;
                     throw new SQLException(&quot;Departamentul cu ID-ul &quot; + depId + &quot; nu a fost găsit.&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;selected_dep_info&quot;, selectedDepInfo);&#xD;
         &#xD;
         // Obținem locația departamentului selectat&#xD;
         // Mai întâi verificăm dacă există o locație a departamentului în locatii_departamente&#xD;
         String depLocSql = &quot;SELECT id_dep, strada, longitudine, latitudine, cod, oras, judet, tara &quot; +&#xD;
                           &quot;FROM locatii_departamente &quot; +&#xD;
                           &quot;WHERE id_dep = ? AND latitudine IS NOT NULL AND longitudine IS NOT NULL&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> selectedDepLocation = new HashMap&lt;>();&#xD;
         boolean hasDepLocation = false;&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(depLocSql)) {&#xD;
             stmt.setInt(1, depId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     hasDepLocation = true;&#xD;
                     &#xD;
                     selectedDepLocation.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
                     selectedDepLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     selectedDepLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                     selectedDepLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                     selectedDepLocation.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                     selectedDepLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     selectedDepLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     selectedDepLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     selectedDepLocation.put(&quot;nume_sediu&quot;, selectedDepInfo.get(&quot;nume_dep&quot;) + &quot; - Sediu&quot;); // Numele departamentului ca nume de sediu&#xD;
                     &#xD;
                     // Construim adresa completă a locației departamentului&#xD;
                     String adresaCompletaDepLoc = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                                   rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                                   rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                                   rs.getString(&quot;tara&quot;);&#xD;
                     selectedDepLocation.put(&quot;adresa_completa&quot;, adresaCompletaDepLoc);&#xD;
                     &#xD;
                     // Calculăm distanța dintre sediul utilizatorului și sediul departamentului&#xD;
                     double userSediuLat = (double) userSediuLocation.get(&quot;latitudine&quot;);&#xD;
                     double userSediuLon = (double) userSediuLocation.get(&quot;longitudine&quot;);&#xD;
                     double depLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                     double depLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                     &#xD;
                     double distanta = calculateDistance(userSediuLat, userSediuLon, depLat, depLon);&#xD;
                     selectedDepLocation.put(&quot;distanta_km&quot;, distanta);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // Dacă nu am găsit locația departamentului în locatii_departamente, căutăm sedii asociate acestui departament&#xD;
         if (!hasDepLocation) {&#xD;
             // Căutăm sedii cu numele departamentului&#xD;
             String depSediuSql = &quot;SELECT id_sediu, nume_sediu, tip_sediu, strada, oras, judet, tara, &quot; +&#xD;
                                 &quot;latitudine, longitudine &quot; +&#xD;
                                 &quot;FROM sedii &quot; +&#xD;
                                 &quot;WHERE (nume_sediu LIKE ? OR LOWER(nume_sediu) LIKE ?) &quot; +&#xD;
                                 &quot;AND latitudine IS NOT NULL AND longitudine IS NOT NULL &quot; +&#xD;
                                 &quot;LIMIT 1&quot;;&#xD;
             &#xD;
             try (PreparedStatement stmt = conn.prepareStatement(depSediuSql)) {&#xD;
                 String depName = (String) selectedDepInfo.get(&quot;nume_dep&quot;);&#xD;
                 stmt.setString(1, &quot;%&quot; + depName + &quot;%&quot;);&#xD;
                 stmt.setString(2, &quot;%&quot; + depName.toLowerCase() + &quot;%&quot;);&#xD;
                 &#xD;
                 try (ResultSet rs = stmt.executeQuery()) {&#xD;
                     if (rs.next()) {&#xD;
                         hasDepLocation = true;&#xD;
                         &#xD;
                         selectedDepLocation.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                         selectedDepLocation.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;));&#xD;
                         selectedDepLocation.put(&quot;tip_sediu&quot;, rs.getString(&quot;tip_sediu&quot;));&#xD;
                         selectedDepLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                         selectedDepLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                         selectedDepLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                         selectedDepLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                         selectedDepLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                         selectedDepLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                         &#xD;
                         // Construim adresa completă a sediului departamentului&#xD;
                         String adresaCompletaDepSediu = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                                       rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                                       rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                                       rs.getString(&quot;tara&quot;);&#xD;
                         selectedDepLocation.put(&quot;adresa_completa&quot;, adresaCompletaDepSediu);&#xD;
                         &#xD;
                         // Calculăm distanța dintre sediul utilizatorului și sediul departamentului&#xD;
                         double userSediuLat = (double) userSediuLocation.get(&quot;latitudine&quot;);&#xD;
                         double userSediuLon = (double) userSediuLocation.get(&quot;longitudine&quot;);&#xD;
                         double depSediuLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                         double depSediuLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                         &#xD;
                         double distanta = calculateDistance(userSediuLat, userSediuLon, depSediuLat, depSediuLon);&#xD;
                         selectedDepLocation.put(&quot;distanta_km&quot;, distanta);&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             // Dacă nu am găsit sediu asociat departamentului, căutăm locații ale angajaților din acest departament&#xD;
             if (!hasDepLocation) {&#xD;
                 String depUsersSql = &quot;SELECT lu.strada, lu.longitudine, lu.latitudine, lu.cod, lu.oras, lu.judet, lu.tara &quot; +&#xD;
                                   &quot;FROM locatii_useri lu &quot; +&#xD;
                                   &quot;JOIN useri u ON lu.id_user = u.id &quot; +&#xD;
                                   &quot;WHERE u.id_dep = ? AND lu.latitudine IS NOT NULL AND lu.longitudine IS NOT NULL &quot; +&#xD;
                                   &quot;LIMIT 1&quot;;&#xD;
                 &#xD;
                 try (PreparedStatement stmt = conn.prepareStatement(depUsersSql)) {&#xD;
                     stmt.setInt(1, depId);&#xD;
                     &#xD;
                     try (ResultSet rs = stmt.executeQuery()) {&#xD;
                         if (rs.next()) {&#xD;
                             hasDepLocation = true;&#xD;
                             &#xD;
                             selectedDepLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                             selectedDepLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                             selectedDepLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                             selectedDepLocation.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                             selectedDepLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                             selectedDepLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                             selectedDepLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                             selectedDepLocation.put(&quot;nume_sediu&quot;, selectedDepInfo.get(&quot;nume_dep&quot;) + &quot; - Locație angajați&quot;);&#xD;
                             &#xD;
                             // Construim adresa completă a locației angajaților departamentului&#xD;
                             String adresaCompletaDepUseri = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                                            rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                                            rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                                            rs.getString(&quot;tara&quot;);&#xD;
                             selectedDepLocation.put(&quot;adresa_completa&quot;, adresaCompletaDepUseri);&#xD;
                             &#xD;
                             // Calculăm distanța dintre sediul utilizatorului și locația angajaților departamentului&#xD;
                             double userSediuLat = (double) userSediuLocation.get(&quot;latitudine&quot;);&#xD;
                             double userSediuLon = (double) userSediuLocation.get(&quot;longitudine&quot;);&#xD;
                             double depUseriLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                             double depUseriLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                             &#xD;
                             double distanta = calculateDistance(userSediuLat, userSediuLon, depUseriLat, depUseriLon);&#xD;
                             selectedDepLocation.put(&quot;distanta_km&quot;, distanta);&#xD;
                         }&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             // Dacă tot nu am găsit, folosim un sediu principal sau alt sediu relevant&#xD;
             if (!hasDepLocation) {&#xD;
                 String fallbackSediuSql = &quot;SELECT id_sediu, nume_sediu, tip_sediu, strada, oras, judet, tara, &quot; +&#xD;
                                          &quot;latitudine, longitudine &quot; +&#xD;
                                          &quot;FROM sedii &quot; +&#xD;
                                          &quot;WHERE (tip_sediu = 'principal' OR id_sediu &lt;> ?) &quot; +&#xD;
                                          &quot;AND latitudine IS NOT NULL AND longitudine IS NOT NULL &quot; +&#xD;
                                          &quot;LIMIT 1&quot;;&#xD;
                 &#xD;
                 try (PreparedStatement stmt = conn.prepareStatement(fallbackSediuSql)) {&#xD;
                     stmt.setInt(1, (int) userSediuLocation.get(&quot;id_sediu&quot;)); // Excludem sediul utilizatorului&#xD;
                     &#xD;
                     try (ResultSet rs = stmt.executeQuery()) {&#xD;
                         if (rs.next()) {&#xD;
                             hasDepLocation = true;&#xD;
                             &#xD;
                             selectedDepLocation.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                             selectedDepLocation.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;) + &quot; (&quot; + selectedDepInfo.get(&quot;nume_dep&quot;) + &quot;)&quot;);&#xD;
                             selectedDepLocation.put(&quot;tip_sediu&quot;, rs.getString(&quot;tip_sediu&quot;));&#xD;
                             selectedDepLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                             selectedDepLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                             selectedDepLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                             selectedDepLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                             selectedDepLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                             selectedDepLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                             &#xD;
                             // Construim adresa completă a sediului departamentului&#xD;
                             String adresaCompletaFallbackSediu = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                                                rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                                                rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                                                rs.getString(&quot;tara&quot;);&#xD;
                             selectedDepLocation.put(&quot;adresa_completa&quot;, adresaCompletaFallbackSediu);&#xD;
                             &#xD;
                             // Calculăm distanța dintre sediul utilizatorului și sediul departamentului&#xD;
                             double userSediuLat = (double) userSediuLocation.get(&quot;latitudine&quot;);&#xD;
                             double userSediuLon = (double) userSediuLocation.get(&quot;longitudine&quot;);&#xD;
                             double fallbackSediuLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                             double fallbackSediuLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                             &#xD;
                             double distanta = calculateDistance(userSediuLat, userSediuLon, fallbackSediuLat, fallbackSediuLon);&#xD;
                             selectedDepLocation.put(&quot;distanta_km&quot;, distanta);&#xD;
                         }&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         if (!hasDepLocation) {&#xD;
             throw new SQLException(&quot;Nu s-a găsit locația pentru departamentul cu ID-ul &quot; + depId + &quot;.&quot;);&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;selected_dep_location&quot;, selectedDepLocation);&#xD;
         &#xD;
         // Adăugăm un log pentru a verifica ce date au fost returnate&#xD;
         System.out.println(&quot;Date returnate pentru utilizatorul &quot; + userId + &quot; și departamentul &quot; + depId + &quot;:&quot;);&#xD;
         System.out.println(&quot;User info: &quot; + userInfo);&#xD;
         System.out.println(&quot;User sediu location: &quot; + userSediuLocation);&#xD;
         System.out.println(&quot;Selected dep info: &quot; + selectedDepInfo);&#xD;
         System.out.println(&quot;Selected dep location: &quot; + selectedDepLocation);&#xD;
     }&#xD;
     &#xD;
     return result;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI2i5EVdEfCS7cth2SLu0w" name="calculateDistance" specification="_S_KW8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI2i5UVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI2i5kVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI2i50VdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI2i6EVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI2i6UVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>// Convertim din grade în radiani&#xD;
     lat1 = Math.toRadians(lat1);&#xD;
     lon1 = Math.toRadians(lon1);&#xD;
     lat2 = Math.toRadians(lat2);&#xD;
     lon2 = Math.toRadians(lon2);&#xD;
     &#xD;
     // Raza Pământului în kilometri&#xD;
     double R = 6371.0;&#xD;
     &#xD;
     // Formula Haversine&#xD;
     double dlon = lon2 - lon1;&#xD;
     double dlat = lat2 - lat1;&#xD;
     double a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);&#xD;
     double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));&#xD;
     double distance = R * c;&#xD;
     &#xD;
     // Returnăm distanța rotunjită la 2 zecimale&#xD;
     return Math.round(distance * 100.0) / 100.0;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S_HToEVdEfCS7cth2SLu0w" name="GetSediuToSelectedDepartmentServlet" method="_UI1700VdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S_HToUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S_H6sEVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_S_H6sUVdEfCS7cth2SLu0w" type="_S_GFgEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S_IhwEVdEfCS7cth2SLu0w" name="getUserAndSelectedDepartmentLocations" visibility="private" method="_UI2i4EVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S_IhwUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_IhwkVdEfCS7cth2SLu0w" name="depId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UE3awEVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S_KW8EVdEfCS7cth2SLu0w" name="calculateDistance" visibility="private" method="_UI2i5EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S_K-AEVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_K-AUVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_K-AkVdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_K-A0VdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_K-BEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UE2zsEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI171UVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UE2zsUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UE2zskVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S_OBUEVdEfCS7cth2SLu0w" name="GetNextConcediuAndHomeServlet">
        <ownedComment xmi:id="_UJZVcUVdEfCS7cth2SLu0w">
          <body>Servlet pentru obținerea celui mai apropiat concediu ca dată și locația utilizatorului</body>
        </ownedComment>
        <generalization xmi:id="_UE5P8UVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHFBQEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHFoUEVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHFoUUVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHFoUkVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHFoU0VdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHFoVEVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHFoVUVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHFoVkVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI2i6kVdEfCS7cth2SLu0w" name="GetNextConcediuAndHomeServlet" specification="_S_PPcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI2i60VdEfCS7cth2SLu0w" type="_S_OBUEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI2i7EVdEfCS7cth2SLu0w" name="doGet" specification="_UE4B0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI2i7UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI2i7kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Obținem ID-ul utilizatorului din parametrii cererii&#xD;
     String userIdStr = request.getParameter(&quot;userId&quot;);&#xD;
     if (userIdStr == null || userIdStr.isEmpty()) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator lipsă\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     int userId;&#xD;
     try {&#xD;
         userId = Integer.parseInt(userIdStr);&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator invalid\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         // Obținem locația de acasă a utilizatorului și cel mai apropiat concediu&#xD;
         Map&lt;String, Object> result = getUserHomeAndNextConcediu(userId);&#xD;
         &#xD;
         // Verificăm dacă am găsit datele necesare&#xD;
         if (result.isEmpty() || !result.containsKey(&quot;user_location&quot;) || !result.containsKey(&quot;next_concediu&quot;)) {&#xD;
             if (result.containsKey(&quot;error&quot;)) {&#xD;
                 response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
                 out.print(&quot;{\&quot;error\&quot;: \&quot;&quot; + result.get(&quot;error&quot;) + &quot;\&quot;}&quot;);&#xD;
             } else {&#xD;
                 response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
                 out.print(&quot;{\&quot;error\&quot;: \&quot;Nu s-au găsit locațiile necesare.\&quot;}&quot;);&#xD;
             }&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Convertim rezultatul în JSON și îl trimitem ca răspuns&#xD;
         ObjectMapper objectMapper = new ObjectMapper();&#xD;
         out.print(objectMapper.writeValueAsString(result));&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI3J8EVdEfCS7cth2SLu0w" name="getUserHomeAndNextConcediu" specification="_S_QdkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI3J8UVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI3J8kVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Object> result = new HashMap&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
         // Obținem informațiile utilizatorului&#xD;
         String userSql = &quot;SELECT u.id, u.nume, u.prenume, u.id_dep, d.nume_dep FROM useri u &quot; +&#xD;
                          &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                          &quot;WHERE u.id = ?&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> userInfo = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(userSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     userInfo.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                     userInfo.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
                     userInfo.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
                     userInfo.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
                     userInfo.put(&quot;nume_dep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
                 } else {&#xD;
                     result.put(&quot;error&quot;, &quot;Utilizatorul nu a fost găsit.&quot;);&#xD;
                     return result;&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;user_info&quot;, userInfo);&#xD;
         &#xD;
         // Obținem locația utilizatorului (adresa de acasă)&#xD;
         String userLocationSql = &quot;SELECT id_locatie, strada, longitudine, latitudine, cod, oras, judet, tara &quot; +&#xD;
                                 &quot;FROM locatii_useri &quot; +&#xD;
                                 &quot;WHERE id_user = ? AND latitudine IS NOT NULL AND longitudine IS NOT NULL&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> userLocation = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(userLocationSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     userLocation.put(&quot;id_locatie&quot;, rs.getInt(&quot;id_locatie&quot;));&#xD;
                     userLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     userLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                     userLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                     userLocation.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                     userLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     userLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     userLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă&#xD;
                     String adresaCompleta = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;tara&quot;);&#xD;
                     userLocation.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
                 } else {&#xD;
                     result.put(&quot;error&quot;, &quot;Locația utilizatorului nu a fost găsită.&quot;);&#xD;
                     return result;&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;user_location&quot;, userLocation);&#xD;
         &#xD;
         // Obținem cel mai apropiat concediu ca dată&#xD;
         // Data curentă în format SQL&#xD;
         String currentDate = LocalDate.now().toString();&#xD;
         &#xD;
         String concediuSql = &quot;SELECT c.id, c.start_c, c.end_c, c.motiv, c.locatie, c.status, c.tip, c.durata, &quot; +&#xD;
                              &quot;s.nume_status, tc.motiv as tip_concediu, &quot; +&#xD;
                              &quot;lc.strada, lc.longitudine, lc.latitudine, lc.cod, lc.oras, lc.judet, lc.tara &quot; +&#xD;
                              &quot;FROM concedii c &quot; +&#xD;
                              &quot;JOIN statusuri s ON c.status = s.status &quot; +&#xD;
                              &quot;JOIN tipcon tc ON c.tip = tc.tip &quot; +&#xD;
                              &quot;LEFT JOIN locatii_concedii lc ON c.id = lc.id_concediu &quot; +&#xD;
                              &quot;WHERE c.id_ang = ? &quot; +&#xD;
                              &quot;AND c.start_c >= ? &quot; +   // Doar concedii viitoare sau care încep astăzi&#xD;
                              &quot;AND (c.status = 1 OR c.status = 2) &quot; +  // Doar concedii aprobate de șef sau director&#xD;
                              &quot;AND lc.latitudine IS NOT NULL AND lc.longitudine IS NOT NULL &quot; +&#xD;
                              &quot;ORDER BY c.start_c ASC &quot; +  // Cel mai apropiat concediu&#xD;
                              &quot;LIMIT 1&quot;;                  // Doar primul rezultat&#xD;
         &#xD;
         Map&lt;String, Object> nextConcediu = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(concediuSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             stmt.setString(2, currentDate);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     nextConcediu.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                     nextConcediu.put(&quot;start_c&quot;, rs.getString(&quot;start_c&quot;));&#xD;
                     nextConcediu.put(&quot;end_c&quot;, rs.getString(&quot;end_c&quot;));&#xD;
                     nextConcediu.put(&quot;motiv&quot;, rs.getString(&quot;motiv&quot;));&#xD;
                     nextConcediu.put(&quot;locatie&quot;, rs.getString(&quot;locatie&quot;));&#xD;
                     nextConcediu.put(&quot;status&quot;, rs.getInt(&quot;status&quot;));&#xD;
                     nextConcediu.put(&quot;status_text&quot;, rs.getString(&quot;nume_status&quot;));&#xD;
                     nextConcediu.put(&quot;tip&quot;, rs.getInt(&quot;tip&quot;));&#xD;
                     nextConcediu.put(&quot;tip_text&quot;, rs.getString(&quot;tip_concediu&quot;));&#xD;
                     nextConcediu.put(&quot;durata&quot;, rs.getInt(&quot;durata&quot;));&#xD;
                     &#xD;
                     // Adăugăm locația concediului&#xD;
                     nextConcediu.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     nextConcediu.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                     nextConcediu.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                     nextConcediu.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                     nextConcediu.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     nextConcediu.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     nextConcediu.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă&#xD;
                     String adresaCompleta = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;tara&quot;);&#xD;
                     nextConcediu.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
                     &#xD;
                     // Calculăm distanța de la locația utilizatorului&#xD;
                     double userLat = (double) userLocation.get(&quot;latitudine&quot;);&#xD;
                     double userLon = (double) userLocation.get(&quot;longitudine&quot;);&#xD;
                     double concediuLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                     double concediuLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                     &#xD;
                     double distanta = calculateDistance(userLat, userLon, concediuLat, concediuLon);&#xD;
                     nextConcediu.put(&quot;distanta_km&quot;, distanta);&#xD;
                     &#xD;
                     // Calculăm zilele rămase până la concediu&#xD;
                     LocalDate startDate = LocalDate.parse(rs.getString(&quot;start_c&quot;));&#xD;
                     LocalDate today = LocalDate.now();&#xD;
                     long daysUntil = java.time.temporal.ChronoUnit.DAYS.between(today, startDate);&#xD;
                     &#xD;
                     nextConcediu.put(&quot;zile_ramase&quot;, daysUntil);&#xD;
                 } else {&#xD;
                     result.put(&quot;error&quot;, &quot;Nu s-a găsit niciun concediu viitor pentru utilizator.&quot;);&#xD;
                     return result;&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;next_concediu&quot;, nextConcediu);&#xD;
     }&#xD;
     &#xD;
     return result;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI3J80VdEfCS7cth2SLu0w" name="calculateDistance" specification="_S_SSwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI3J9EVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI3J9UVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI3J9kVdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI3J90VdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI3J-EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>// Convertim din grade în radiani&#xD;
     lat1 = Math.toRadians(lat1);&#xD;
     lon1 = Math.toRadians(lon1);&#xD;
     lat2 = Math.toRadians(lat2);&#xD;
     lon2 = Math.toRadians(lon2);&#xD;
     &#xD;
     // Raza Pământului în kilometri&#xD;
     double R = 6371.0;&#xD;
     &#xD;
     // Formula Haversine&#xD;
     double dlon = lon2 - lon1;&#xD;
     double dlat = lat2 - lat1;&#xD;
     double a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);&#xD;
     double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));&#xD;
     double distance = R * c;&#xD;
     &#xD;
     // Returnăm distanța rotunjită la 2 zecimale&#xD;
     return Math.round(distance * 100.0) / 100.0;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S_PPcEVdEfCS7cth2SLu0w" name="GetNextConcediuAndHomeServlet" method="_UI2i6kVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S_PPcUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S_PPckVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_S_PPc0VdEfCS7cth2SLu0w" type="_S_OBUEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S_QdkEVdEfCS7cth2SLu0w" name="getUserHomeAndNextConcediu" visibility="private" method="_UI3J8EVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S_QdkUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UE5P8EVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S_SSwEVdEfCS7cth2SLu0w" name="calculateDistance" visibility="private" method="_UI3J80VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S_SSwUVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_SSwkVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_SSw0VdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_SSxEVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_S50EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UE4B0EVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI2i7EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UE4o4EVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UE4o4UVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S_V9IEVdEfCS7cth2SLu0w" name="GetNextConcediuServlet">
        <ownedComment xmi:id="_UJZVckVdEfCS7cth2SLu0w">
          <body>Servlet pentru obținerea următorului concediu programat pentru un utilizator</body>
        </ownedComment>
        <generalization xmi:id="_UE7FIEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHGPYEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHGPYUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHGPYkVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHGPY0VdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHGPZEVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHGPZUVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHGPZkVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHG2cEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI3J-UVdEfCS7cth2SLu0w" name="GetNextConcediuServlet" specification="_S_XLQEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI3J-kVdEfCS7cth2SLu0w" type="_S_V9IEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI3J-0VdEfCS7cth2SLu0w" name="doGet" specification="_UE6eEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI3xAEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI3xAUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Obținem ID-ul utilizatorului din parametrii cererii&#xD;
     String userIdStr = request.getParameter(&quot;userId&quot;);&#xD;
     if (userIdStr == null || userIdStr.isEmpty()) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator lipsă\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     int userId;&#xD;
     try {&#xD;
         userId = Integer.parseInt(userIdStr);&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator invalid\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         Map&lt;String, Object> nextConcediu = getNextConcediu(userId);&#xD;
         &#xD;
         // Verificăm dacă am găsit un concediu&#xD;
         if (nextConcediu.isEmpty()) {&#xD;
             // Returnăm un obiect gol, nu null&#xD;
             out.print(&quot;{}&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Convertim concediul în JSON și îl trimitem ca răspuns&#xD;
         ObjectMapper objectMapper = new ObjectMapper();&#xD;
         out.print(objectMapper.writeValueAsString(nextConcediu));&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI3xAkVdEfCS7cth2SLu0w" name="getNextConcediu" specification="_S_XyU0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI3xA0VdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI3xBEVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Object> concediu = new HashMap&lt;>();&#xD;
     &#xD;
     // Data curentă în format SQL&#xD;
     String currentDate = LocalDate.now().toString();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     // Query pentru a obține următorul concediu al utilizatorului&#xD;
     String sql = &quot;SELECT c.id, c.start_c, c.end_c, c.motiv, c.locatie, tc.motiv as tip_concediu, &quot; +&#xD;
                  &quot;s.nume_status as status, lc.latitudine, lc.longitudine, &quot; +&#xD;
                  &quot;CONCAT(IFNULL(lc.strada, ''), ', ', IFNULL(lc.oras, ''), ', ', IFNULL(lc.judet, ''), ', ', IFNULL(lc.tara, '')) as adresa_completa &quot; +&#xD;
                  &quot;FROM concedii c &quot; +&#xD;
                  &quot;JOIN tipcon tc ON c.tip = tc.tip &quot; +&#xD;
                  &quot;JOIN statusuri s ON c.status = s.status &quot; +&#xD;
                  &quot;LEFT JOIN locatii_concedii lc ON c.id = lc.id_concediu &quot; +&#xD;
                  &quot;WHERE c.id_ang = ? &quot; +&#xD;
                  &quot;AND c.start_c >= ? &quot; +   // Doar concedii viitoare sau care încep astăzi&#xD;
                  &quot;AND (c.status = 1 OR c.status = 2) &quot; +  // Doar concedii aprobate de șef sau director&#xD;
                  &quot;ORDER BY c.start_c ASC &quot; +  // Cel mai apropiat concediu&#xD;
                  &quot;LIMIT 1&quot;;                  // Doar primul rezultat&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
          PreparedStatement stmt = conn.prepareStatement(sql)) {&#xD;
         &#xD;
         stmt.setInt(1, userId);&#xD;
         stmt.setString(2, currentDate);&#xD;
         &#xD;
         try (ResultSet rs = stmt.executeQuery()) {&#xD;
             if (rs.next()) {&#xD;
                 concediu.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                 concediu.put(&quot;start_c&quot;, rs.getString(&quot;start_c&quot;));&#xD;
                 concediu.put(&quot;end_c&quot;, rs.getString(&quot;end_c&quot;));&#xD;
                 concediu.put(&quot;motiv&quot;, rs.getString(&quot;motiv&quot;));&#xD;
                 concediu.put(&quot;locatie&quot;, rs.getString(&quot;locatie&quot;));&#xD;
                 concediu.put(&quot;tip&quot;, rs.getString(&quot;tip_concediu&quot;));&#xD;
                 concediu.put(&quot;status&quot;, rs.getString(&quot;status&quot;));&#xD;
                 &#xD;
                 // Adăugăm coordonatele geografice dacă există&#xD;
                 try {&#xD;
                     double lat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                     double lon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                     &#xD;
                     if (!rs.wasNull() &amp;&amp; lat != 0 &amp;&amp; lon != 0) {&#xD;
                         concediu.put(&quot;latitudine&quot;, lat);&#xD;
                         concediu.put(&quot;longitudine&quot;, lon);&#xD;
                         &#xD;
                         // Verificăm dacă adresa are conținut real, nu doar virgule&#xD;
                         String adresaCompleta = rs.getString(&quot;adresa_completa&quot;);&#xD;
                         if (adresaCompleta != null &amp;&amp; !adresaCompleta.replaceAll(&quot;[,\\s]+&quot;, &quot;&quot;).isEmpty()) {&#xD;
                             concediu.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
                         } else if (rs.getString(&quot;locatie&quot;) != null &amp;&amp; !rs.getString(&quot;locatie&quot;).isEmpty()) {&#xD;
                             // Folosim locația ca adresă de rezervă&#xD;
                             concediu.put(&quot;adresa_completa&quot;, rs.getString(&quot;locatie&quot;));&#xD;
                         }&#xD;
                     }&#xD;
                 } catch (SQLException e) {&#xD;
                     // Gestionăm cazul în care coordonatele nu sunt valide&#xD;
                     System.out.println(&quot;Avertisment: Coordonate invalide pentru concediul cu ID &quot; + rs.getInt(&quot;id&quot;));&#xD;
                 }&#xD;
                 &#xD;
                 // Verificăm campurile null și le înlocuim cu valori implicite&#xD;
                 for (String key : concediu.keySet()) {&#xD;
                     if (concediu.get(key) == null) {&#xD;
                         if (key.equals(&quot;locatie&quot;) || key.equals(&quot;adresa_completa&quot;)) {&#xD;
                             concediu.put(key, &quot;Nedefinită&quot;);&#xD;
                         } else if (key.equals(&quot;motiv&quot;) || key.equals(&quot;tip&quot;) || key.equals(&quot;status&quot;)) {&#xD;
                             concediu.put(key, &quot;Nedefinit&quot;);&#xD;
                         }&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
             // Dacă nu există un concediu viitor, întoarcem un Map gol&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return concediu;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S_XLQEVdEfCS7cth2SLu0w" name="GetNextConcediuServlet" method="_UI3J-UVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S_XyUEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S_XyUUVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_S_XyUkVdEfCS7cth2SLu0w" type="_S_V9IEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S_XyU0VdEfCS7cth2SLu0w" name="getNextConcediu" visibility="private" method="_UI3xAkVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S_YZYEVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UE6eE0VdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UE6eEEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI3J-0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UE6eEUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UE6eEkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S_cq0EVdEfCS7cth2SLu0w" name="GetPozitieServlet">
        <generalization xmi:id="_UE8TQEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHG2cUVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHG2ckVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHG2c0VdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHG2dEVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHHdgEVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHHdgUVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI3xBUVdEfCS7cth2SLu0w" name="doGet" specification="_UE7sMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI3xBkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI3xB0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json;charset=UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     JSONObject json = new JSONObject();&#xD;
     &#xD;
     int tipId = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         String sql = &quot;SELECT t.*, d.nume_dep FROM tipuri t LEFT JOIN departament d ON t.departament_specific = d.id_dep WHERE t.tip = ?&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setInt(1, tipId);&#xD;
         ResultSet rs = pstmt.executeQuery();&#xD;
         &#xD;
         if (rs.next()) {&#xD;
             json.put(&quot;success&quot;, true);&#xD;
             json.put(&quot;tip&quot;, rs.getInt(&quot;tip&quot;));&#xD;
             json.put(&quot;denumire&quot;, rs.getString(&quot;denumire&quot;));&#xD;
             json.put(&quot;salariu&quot;, rs.getInt(&quot;salariu&quot;));&#xD;
             json.put(&quot;ierarhie&quot;, rs.getInt(&quot;ierarhie&quot;));&#xD;
             json.put(&quot;departament_specific&quot;, rs.getInt(&quot;departament_specific&quot;));&#xD;
             json.put(&quot;departament_nume&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
             json.put(&quot;descriere&quot;, rs.getString(&quot;descriere&quot;) != null ? rs.getString(&quot;descriere&quot;) : &quot;&quot;);&#xD;
         } else {&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Poziția nu a fost găsită!&quot;);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Eroare la obținerea datelor poziției: &quot; + e.getMessage());&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Eroare la încărcarea driverului JDBC!&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     out.print(json.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UE7sMEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI3xBUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UE7sMUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UE7sMkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S_fHEEVdEfCS7cth2SLu0w" name="GetPozitiiDepartamentServlet">
        <generalization xmi:id="_UE86U0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHHdgkVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHHdg0VdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHIEkEVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHIEkUVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHIEkkVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHIEk0VdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI3xCEVdEfCS7cth2SLu0w" name="doGet" specification="_UE86UEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI3xCUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI3xCkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     int idDep = Integer.parseInt(request.getParameter(&quot;id_dep&quot;));&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         // Căutăm pozițiile care sunt potrivite pentru departamentul selectat&#xD;
         String sql = &quot;SELECT t.tip, COALESCE(dp.denumire_completa, t.denumire) as denumire_afisata &quot; +&#xD;
                     &quot;FROM tipuri t &quot; +&#xD;
                     &quot;LEFT JOIN denumiri_pozitii dp ON t.tip = dp.tip_pozitie AND dp.id_dep = ? &quot; +&#xD;
                     &quot;WHERE t.departament_specific = ? OR t.departament_specific = 20 &quot; +&#xD;
                     &quot;ORDER BY t.ierarhie, t.denumire&quot;;&#xD;
         &#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setInt(1, idDep);&#xD;
         pstmt.setInt(2, idDep);&#xD;
         ResultSet rs = pstmt.executeQuery();&#xD;
         &#xD;
         out.println(&quot;&lt;option value=''>-- Selectați --&lt;/option>&quot;);&#xD;
         while (rs.next()) {&#xD;
             out.println(&quot;&lt;option value='&quot; + rs.getInt(&quot;tip&quot;) + &quot;'>&quot; + &#xD;
                        rs.getString(&quot;denumire_afisata&quot;) + &quot;&lt;/option>&quot;);&#xD;
         }&#xD;
         &#xD;
         rs.close();&#xD;
         pstmt.close();&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         out.println(&quot;&lt;option value=''>Eroare la încărcarea pozițiilor&lt;/option>&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         out.println(&quot;&lt;option value=''>Eroare la încărcarea driverului JDBC&lt;/option>&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UE86UEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI3xCEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UE86UUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UE86UkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S_hjUEVdEfCS7cth2SLu0w" name="GetRaportPrezentaServlet">
        <generalization xmi:id="_UE-vgkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHIElEVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHIroEVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHIroUVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHIrokVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHIro0VdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHIrpEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI4YEEVdEfCS7cth2SLu0w" name="doGet" specification="_UE9hYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI4YEUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI4YEkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
&#xD;
     // 1) Verificare sesiune și autentificare&#xD;
     HttpSession session = request.getSession(false);&#xD;
     if (session == null) {&#xD;
         out.println(&quot;&lt;script>alert('Nu e nicio sesiune activa!');&lt;/script>&quot;);&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
     MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);&#xD;
     if (currentUser == null) {&#xD;
         out.println(&quot;&lt;script>alert('Utilizator neconectat!');&lt;/script>&quot;);&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // 2) Încarcă driver-ul JDBC și deschide conexiunea cu DriverManager&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
&#xD;
         // 3) Preluare detalii utilizator și verificare rol/ierarhie&#xD;
         int userId = currentUser.getId();&#xD;
         int userDep = -1;&#xD;
         boolean isDirector = false;&#xD;
         try (PreparedStatement userPs = conn.prepareStatement(&#xD;
                 &quot;SELECT u.id_dep, t.ierarhie, t.denumire AS functie &quot; +&#xD;
                 &quot;FROM useri u JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                 &quot;WHERE u.id = ?&quot;)) {&#xD;
             userPs.setInt(1, userId);&#xD;
             try (ResultSet urs = userPs.executeQuery()) {&#xD;
                 if (!urs.next()) {&#xD;
                     out.println(&quot;&lt;script>alert('Utilizator inexistent în baza de date!');&lt;/script>&quot;);&#xD;
                     response.sendRedirect(&quot;login.jsp&quot;);&#xD;
                     return;&#xD;
                 }&#xD;
                 userDep = urs.getInt(&quot;id_dep&quot;);&#xD;
                 int ierarhie = urs.getInt(&quot;ierarhie&quot;);&#xD;
                 String functie = urs.getString(&quot;functie&quot;);&#xD;
&#xD;
                 isDirector = (ierarhie &lt; 3);&#xD;
                 boolean isSef           = (ierarhie >= 4 &amp;&amp; ierarhie &lt;= 5);&#xD;
                 boolean isIncepator     = (ierarhie >= 10);&#xD;
                 boolean isUtilizatorNormal = !isDirector &amp;&amp; !isSef &amp;&amp; !isIncepator;&#xD;
                 boolean isAdmin         = &quot;Administrator&quot;.equals(functie);&#xD;
&#xD;
                 if (!isDirector) {&#xD;
                     // redirect conform rolului&#xD;
                     if (isAdmin) {&#xD;
                         response.sendRedirect(&quot;adminok.jsp&quot;);&#xD;
                     } else if (isUtilizatorNormal) {&#xD;
                         response.sendRedirect(&quot;tip1ok.jsp&quot;);&#xD;
                     } else if (isSef) {&#xD;
                         response.sendRedirect(&quot;sefok.jsp&quot;);&#xD;
                     } else if (isIncepator) {&#xD;
                         response.sendRedirect(&quot;tip2ok.jsp&quot;);&#xD;
                     } else {&#xD;
                         response.sendRedirect(&quot;dashboard.jsp&quot;);&#xD;
                     }&#xD;
                     return;&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
&#xD;
         // 4) Preluare parametru dată&#xD;
         Date data = null;&#xD;
         try {&#xD;
             data = Date.valueOf(request.getParameter(&quot;data&quot;));&#xD;
         } catch (IllegalArgumentException e) {&#xD;
             out.println(&quot;&lt;tr>&lt;td colspan='5'>Dată invalidă!&lt;/td>&lt;/tr>&quot;);&#xD;
             return;&#xD;
         }&#xD;
&#xD;
         // 5) Interogare raport prezență&#xD;
         String sql = &#xD;
             &quot;SELECT u.nume, u.prenume, p.ora, p.comentariu &quot; +&#xD;
             &quot;FROM useri u &quot; +&#xD;
             &quot;LEFT JOIN prezenta p ON u.id = p.id_ang AND p.data = ? &quot; +&#xD;
             &quot;WHERE u.id_dep = ? AND u.activ = 1 &quot; +&#xD;
             &quot;ORDER BY u.nume, u.prenume&quot;;&#xD;
         try (PreparedStatement pstmt = conn.prepareStatement(sql)) {&#xD;
             pstmt.setDate(1, data);&#xD;
             pstmt.setInt(2, userDep);&#xD;
             try (ResultSet rs = pstmt.executeQuery()) {&#xD;
                 while (rs.next()) {&#xD;
                     out.println(&quot;&lt;tr>&quot;);&#xD;
                     out.println(&quot;&lt;td>&quot; + rs.getString(&quot;nume&quot;) + &quot;&lt;/td>&quot;);&#xD;
                     out.println(&quot;&lt;td>&quot; + rs.getString(&quot;prenume&quot;) + &quot;&lt;/td>&quot;);&#xD;
&#xD;
                     java.sql.Time ora = rs.getTime(&quot;ora&quot;);&#xD;
                     if (ora != null) {&#xD;
                         out.println(&quot;&lt;td>&quot; + ora + &quot;&lt;/td>&quot;);&#xD;
                         LocalTime oraTime = ora.toLocalTime();&#xD;
                         String status = oraTime.isAfter(LocalTime.of(9, 0)) ? &quot;Întârziat&quot; : &quot;Prezent&quot;;&#xD;
                         String statusClass = status.equals(&quot;Prezent&quot;) ? &quot;status-prezent&quot; : &quot;status-intarziat&quot;;&#xD;
                         out.println(&quot;&lt;td class='&quot; + statusClass + &quot;'>&quot; + status + &quot;&lt;/td>&quot;);&#xD;
                     } else {&#xD;
                         out.println(&quot;&lt;td>-&lt;/td>&quot;);&#xD;
                         out.println(&quot;&lt;td class='status-absent'>Absent&lt;/td>&quot;);&#xD;
                     }&#xD;
&#xD;
                     String comentariu = rs.getString(&quot;comentariu&quot;);&#xD;
                     out.println(&quot;&lt;td>&quot; + (comentariu != null ? comentariu : &quot;-&quot;) + &quot;&lt;/td>&quot;);&#xD;
                     out.println(&quot;&lt;/tr>&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         out.println(&quot;&lt;tr>&lt;td colspan='5'>Driver JDBC neidentificat!&lt;/td>&lt;/tr>&quot;);&#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         out.println(&quot;&lt;tr>&lt;td colspan='5'>Eroare la încărcarea datelor: &quot; + e.getMessage() + &quot;&lt;/td>&lt;/tr>&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException ignore) {}&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UE9hYEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI4YEEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UE-IcEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UE-IcUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S_lNsEVdEfCS7cth2SLu0w" name="GetSediuToNextConcediuServlet">
        <ownedComment xmi:id="_UJZVc0VdEfCS7cth2SLu0w">
          <body>Servlet pentru obținerea locației sediului utilizatorului și a celui mai apropiat concediu ca dată</body>
        </ownedComment>
        <generalization xmi:id="_UE_9oUVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHJSsEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHJSsUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHJSskVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHJ5wEVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHJ5wUVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHJ5wkVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHJ5w0VdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHJ5xEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI4YE0VdEfCS7cth2SLu0w" name="GetSediuToNextConcediuServlet" specification="_S_mb0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI4YFEVdEfCS7cth2SLu0w" type="_S_lNsEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI4YFUVdEfCS7cth2SLu0w" name="doGet" specification="_UE_WkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI4YFkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI4YF0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Obținem ID-ul utilizatorului din parametrii cererii&#xD;
     String userIdStr = request.getParameter(&quot;userId&quot;);&#xD;
     &#xD;
     if (userIdStr == null || userIdStr.isEmpty()) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator lipsă\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     int userId;&#xD;
     try {&#xD;
         userId = Integer.parseInt(userIdStr);&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator invalid\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         // Obținem locațiile sediului utilizatorului și următorului concediu&#xD;
         Map&lt;String, Object> result = getUserSediuAndNextConcediuLocations(userId);&#xD;
         &#xD;
         // Verificăm dacă am găsit locațiile&#xD;
         if (result.isEmpty() || !result.containsKey(&quot;user_sediu_location&quot;) || !result.containsKey(&quot;next_concediu_location&quot;)) {&#xD;
             response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
             out.print(&quot;{\&quot;error\&quot;: \&quot;Nu s-au găsit locațiile necesare pentru rută.\&quot;}&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Convertim rezultatul în JSON și îl trimitem ca răspuns&#xD;
         ObjectMapper objectMapper = new ObjectMapper();&#xD;
         out.print(objectMapper.writeValueAsString(result));&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI4YGEVdEfCS7cth2SLu0w" name="getUserSediuAndNextConcediuLocations" specification="_S_np8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI4YGUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI4YGkVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Object> result = new HashMap&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
         // Obținem informațiile utilizatorului și sediului său&#xD;
         String userSediuSql = &quot;SELECT u.id, u.nume, u.prenume, u.id_dep, d.nume_dep, u.id_sediu, &quot; +&#xD;
                           &quot;su.id_sediu as user_sediu_id, su.nume_sediu as user_sediu_nume, &quot; +&#xD;
                           &quot;su.tip_sediu as user_sediu_tip, su.strada as user_sediu_strada, &quot; +&#xD;
                           &quot;su.oras as user_sediu_oras, su.judet as user_sediu_judet, &quot; +&#xD;
                           &quot;su.tara as user_sediu_tara, su.latitudine as user_sediu_lat, &quot; +&#xD;
                           &quot;su.longitudine as user_sediu_long &quot; +&#xD;
                           &quot;FROM useri u &quot; +&#xD;
                           &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                           &quot;JOIN sedii su ON u.id_sediu = su.id_sediu &quot; +&#xD;
                           &quot;WHERE u.id = ?&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> userInfo = new HashMap&lt;>();&#xD;
         Map&lt;String, Object> userSediuLocation = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(userSediuSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     // Informații utilizator&#xD;
                     userInfo.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                     userInfo.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
                     userInfo.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
                     userInfo.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
                     userInfo.put(&quot;nume_dep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
                     userInfo.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                     &#xD;
                     // Informații sediu utilizator&#xD;
                     userSediuLocation.put(&quot;id_sediu&quot;, rs.getInt(&quot;user_sediu_id&quot;));&#xD;
                     userSediuLocation.put(&quot;nume_sediu&quot;, rs.getString(&quot;user_sediu_nume&quot;));&#xD;
                     userSediuLocation.put(&quot;tip_sediu&quot;, rs.getString(&quot;user_sediu_tip&quot;));&#xD;
                     userSediuLocation.put(&quot;strada&quot;, rs.getString(&quot;user_sediu_strada&quot;));&#xD;
                     userSediuLocation.put(&quot;oras&quot;, rs.getString(&quot;user_sediu_oras&quot;));&#xD;
                     userSediuLocation.put(&quot;judet&quot;, rs.getString(&quot;user_sediu_judet&quot;));&#xD;
                     userSediuLocation.put(&quot;tara&quot;, rs.getString(&quot;user_sediu_tara&quot;));&#xD;
                     userSediuLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;user_sediu_lat&quot;));&#xD;
                     userSediuLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;user_sediu_long&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă a sediului utilizator&#xD;
                     String adresaCompletaUserSediu = rs.getString(&quot;user_sediu_strada&quot;) + &quot;, &quot; + &#xD;
                                                 rs.getString(&quot;user_sediu_oras&quot;) + &quot;, &quot; + &#xD;
                                                 rs.getString(&quot;user_sediu_judet&quot;) + &quot;, &quot; + &#xD;
                                                 rs.getString(&quot;user_sediu_tara&quot;);&#xD;
                     userSediuLocation.put(&quot;adresa_completa&quot;, adresaCompletaUserSediu);&#xD;
                 } else {&#xD;
                     throw new SQLException(&quot;Utilizatorul cu ID-ul &quot; + userId + &quot; nu a fost găsit sau nu are un sediu asociat.&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;user_info&quot;, userInfo);&#xD;
         result.put(&quot;user_sediu_location&quot;, userSediuLocation);&#xD;
         &#xD;
         // Obținem informațiile despre următorul concediu al utilizatorului&#xD;
         String nextConcediuSql = &quot;SELECT c.id, c.start_c, c.end_c, c.motiv, c.locatie, tc.motiv as tip_concediu, &quot; +&#xD;
                                 &quot;s.nume_status, c.status as status_id &quot; +&#xD;
                                 &quot;FROM concedii c &quot; +&#xD;
                                 &quot;JOIN statusuri s ON c.status = s.status &quot; +&#xD;
                                 &quot;JOIN tipcon tc ON c.tip = tc.tip &quot; +&#xD;
                                 &quot;WHERE c.id_ang = ? AND c.start_c >= CURDATE() AND c.status >= 0 &quot; +&#xD;
                                 &quot;ORDER BY c.start_c ASC &quot; +&#xD;
                                 &quot;LIMIT 1&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> nextConcediuInfo = new HashMap&lt;>();&#xD;
         int nextConcediuId = 0;&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(nextConcediuSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     nextConcediuId = rs.getInt(&quot;id&quot;);&#xD;
                     nextConcediuInfo.put(&quot;id&quot;, nextConcediuId);&#xD;
                     nextConcediuInfo.put(&quot;start_c&quot;, rs.getString(&quot;start_c&quot;));&#xD;
                     nextConcediuInfo.put(&quot;end_c&quot;, rs.getString(&quot;end_c&quot;));&#xD;
                     nextConcediuInfo.put(&quot;motiv&quot;, rs.getString(&quot;motiv&quot;));&#xD;
                     nextConcediuInfo.put(&quot;locatie&quot;, rs.getString(&quot;locatie&quot;));&#xD;
                     nextConcediuInfo.put(&quot;tip_concediu&quot;, rs.getString(&quot;tip_concediu&quot;));&#xD;
                     nextConcediuInfo.put(&quot;nume_status&quot;, rs.getString(&quot;nume_status&quot;));&#xD;
                     nextConcediuInfo.put(&quot;status_id&quot;, rs.getInt(&quot;status_id&quot;));&#xD;
                 } else {&#xD;
                     // Dacă nu avem un concediu viitor, încercăm să luăm ultimul concediu din trecut&#xD;
                     String lastConcediuSql = &quot;SELECT c.id, c.start_c, c.end_c, c.motiv, c.locatie, tc.motiv as tip_concediu, &quot; +&#xD;
                                             &quot;s.nume_status, c.status as status_id &quot; +&#xD;
                                             &quot;FROM concedii c &quot; +&#xD;
                                             &quot;JOIN statusuri s ON c.status = s.status &quot; +&#xD;
                                             &quot;JOIN tipcon tc ON c.tip = tc.tip &quot; +&#xD;
                                             &quot;WHERE c.id_ang = ? AND c.status >= 0 &quot; +&#xD;
                                             &quot;ORDER BY c.start_c DESC &quot; +&#xD;
                                             &quot;LIMIT 1&quot;;&#xD;
                     &#xD;
                     try (PreparedStatement stmt2 = conn.prepareStatement(lastConcediuSql)) {&#xD;
                         stmt2.setInt(1, userId);&#xD;
                         &#xD;
                         try (ResultSet rs2 = stmt2.executeQuery()) {&#xD;
                             if (rs2.next()) {&#xD;
                                 nextConcediuId = rs2.getInt(&quot;id&quot;);&#xD;
                                 nextConcediuInfo.put(&quot;id&quot;, nextConcediuId);&#xD;
                                 nextConcediuInfo.put(&quot;start_c&quot;, rs2.getString(&quot;start_c&quot;));&#xD;
                                 nextConcediuInfo.put(&quot;end_c&quot;, rs2.getString(&quot;end_c&quot;));&#xD;
                                 nextConcediuInfo.put(&quot;motiv&quot;, rs2.getString(&quot;motiv&quot;));&#xD;
                                 nextConcediuInfo.put(&quot;locatie&quot;, rs2.getString(&quot;locatie&quot;));&#xD;
                                 nextConcediuInfo.put(&quot;tip_concediu&quot;, rs2.getString(&quot;tip_concediu&quot;));&#xD;
                                 nextConcediuInfo.put(&quot;nume_status&quot;, rs2.getString(&quot;nume_status&quot;));&#xD;
                                 nextConcediuInfo.put(&quot;status_id&quot;, rs2.getInt(&quot;status_id&quot;));&#xD;
                                 nextConcediuInfo.put(&quot;is_past&quot;, true); // Marcăm că este un concediu din trecut&#xD;
                             } else {&#xD;
                                 throw new SQLException(&quot;Nu s-a găsit niciun concediu pentru utilizatorul cu ID-ul &quot; + userId + &quot;.&quot;);&#xD;
                             }&#xD;
                         }&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;next_concediu_info&quot;, nextConcediuInfo);&#xD;
         &#xD;
         // Obținem locația următorului concediu&#xD;
         String concediuLocationSql = &quot;SELECT lc.id_concediu, lc.strada, lc.longitudine, lc.latitudine, lc.cod, &quot; +&#xD;
                                     &quot;lc.oras, lc.judet, lc.tara &quot; +&#xD;
                                     &quot;FROM locatii_concedii lc &quot; +&#xD;
                                     &quot;WHERE lc.id_concediu = ? AND lc.latitudine IS NOT NULL AND lc.longitudine IS NOT NULL&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> nextConcediuLocation = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(concediuLocationSql)) {&#xD;
             stmt.setInt(1, nextConcediuId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     nextConcediuLocation.put(&quot;id_concediu&quot;, rs.getInt(&quot;id_concediu&quot;));&#xD;
                     nextConcediuLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     nextConcediuLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                     nextConcediuLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                     nextConcediuLocation.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                     nextConcediuLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     nextConcediuLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     nextConcediuLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă a locației concediului&#xD;
                     String adresaCompletaConcediu = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                                   rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                                   rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                                   rs.getString(&quot;tara&quot;);&#xD;
                     nextConcediuLocation.put(&quot;adresa_completa&quot;, adresaCompletaConcediu);&#xD;
                     &#xD;
                     // Calculăm distanța dintre sediul utilizatorului și locația concediului&#xD;
                     double userSediuLat = (double) userSediuLocation.get(&quot;latitudine&quot;);&#xD;
                     double userSediuLon = (double) userSediuLocation.get(&quot;longitudine&quot;);&#xD;
                     double concediuLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                     double concediuLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                     &#xD;
                     double distanta = calculateDistance(userSediuLat, userSediuLon, concediuLat, concediuLon);&#xD;
                     nextConcediuLocation.put(&quot;distanta_km&quot;, distanta);&#xD;
                 } else {&#xD;
                     // Dacă nu găsim locația concediului, înseamnă că nu are coordonate înregistrate&#xD;
                     // Încercăm să găsim o locație apropiată de numele locației concediului&#xD;
                     String locationName = (String) nextConcediuInfo.get(&quot;locatie&quot;);&#xD;
                     &#xD;
                     // Încercăm să căutăm în locatii_atractii dacă există o atracție turistică cu același nume sau în același oraș&#xD;
                     String atractiiSql = &quot;SELECT id_locatie, nume, strada, longitudine, latitudine, cod, oras, judet, tara &quot; +&#xD;
                                       &quot;FROM locatii_atractii &quot; +&#xD;
                                       &quot;WHERE nume LIKE ? OR oras LIKE ? &quot; +&#xD;
                                       &quot;AND latitudine IS NOT NULL AND longitudine IS NOT NULL &quot; +&#xD;
                                       &quot;LIMIT 1&quot;;&#xD;
                     &#xD;
                     boolean foundLocation = false;&#xD;
                     &#xD;
                     try (PreparedStatement stmt2 = conn.prepareStatement(atractiiSql)) {&#xD;
                         stmt2.setString(1, &quot;%&quot; + locationName + &quot;%&quot;);&#xD;
                         stmt2.setString(2, &quot;%&quot; + locationName + &quot;%&quot;);&#xD;
                         &#xD;
                         try (ResultSet rs2 = stmt2.executeQuery()) {&#xD;
                             if (rs2.next()) {&#xD;
                                 foundLocation = true;&#xD;
                                 &#xD;
                                 nextConcediuLocation.put(&quot;nume&quot;, rs2.getString(&quot;nume&quot;));&#xD;
                                 nextConcediuLocation.put(&quot;strada&quot;, rs2.getString(&quot;strada&quot;));&#xD;
                                 nextConcediuLocation.put(&quot;longitudine&quot;, rs2.getDouble(&quot;longitudine&quot;));&#xD;
                                 nextConcediuLocation.put(&quot;latitudine&quot;, rs2.getDouble(&quot;latitudine&quot;));&#xD;
                                 nextConcediuLocation.put(&quot;cod&quot;, rs2.getString(&quot;cod&quot;));&#xD;
                                 nextConcediuLocation.put(&quot;oras&quot;, rs2.getString(&quot;oras&quot;));&#xD;
                                 nextConcediuLocation.put(&quot;judet&quot;, rs2.getString(&quot;judet&quot;));&#xD;
                                 nextConcediuLocation.put(&quot;tara&quot;, rs2.getString(&quot;tara&quot;));&#xD;
                                 &#xD;
                                 // Construim adresa completă a locației concediului&#xD;
                                 String adresaCompletaConcediu = rs2.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                                               rs2.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                                               rs2.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                                               rs2.getString(&quot;tara&quot;);&#xD;
                                 nextConcediuLocation.put(&quot;adresa_completa&quot;, adresaCompletaConcediu);&#xD;
                                 &#xD;
                                 // Calculăm distanța dintre sediul utilizatorului și locația concediului&#xD;
                                 double userSediuLat = (double) userSediuLocation.get(&quot;latitudine&quot;);&#xD;
                                 double userSediuLon = (double) userSediuLocation.get(&quot;longitudine&quot;);&#xD;
                                 double concediuLat = rs2.getDouble(&quot;latitudine&quot;);&#xD;
                                 double concediuLon = rs2.getDouble(&quot;longitudine&quot;);&#xD;
                                 &#xD;
                                 double distanta = calculateDistance(userSediuLat, userSediuLon, concediuLat, concediuLon);&#xD;
                                 nextConcediuLocation.put(&quot;distanta_km&quot;, distanta);&#xD;
                             }&#xD;
                         }&#xD;
                     }&#xD;
                     &#xD;
                     // Dacă tot nu am găsit, căutăm coordonate pentru oraș în oricare altă locație&#xD;
                     if (!foundLocation) {&#xD;
                         String citySearchSql = &quot;SELECT strada, longitudine, latitudine, cod, oras, judet, tara &quot; +&#xD;
                                            &quot;FROM (&quot; +&#xD;
                                            &quot;    SELECT strada, longitudine, latitudine, cod, oras, judet, tara FROM locatii_concedii &quot; +&#xD;
                                            &quot;    UNION ALL &quot; +&#xD;
                                            &quot;    SELECT strada, longitudine, latitudine, cod, oras, judet, tara FROM locatii_departamente &quot; +&#xD;
                                            &quot;    UNION ALL &quot; +&#xD;
                                            &quot;    SELECT strada, longitudine, latitudine, cod, oras, judet, tara FROM locatii_useri &quot; +&#xD;
                                            &quot;    UNION ALL &quot; +&#xD;
                                            &quot;    SELECT strada, longitudine, latitudine, cod, oras, judet, tara FROM sedii &quot; +&#xD;
                                            &quot;) AS all_locations &quot; +&#xD;
                                            &quot;WHERE (oras LIKE ? OR judet LIKE ? OR tara LIKE ?) &quot; +&#xD;
                                            &quot;AND latitudine IS NOT NULL AND longitudine IS NOT NULL &quot; +&#xD;
                                            &quot;LIMIT 1&quot;;&#xD;
                         &#xD;
                         try (PreparedStatement stmt3 = conn.prepareStatement(citySearchSql)) {&#xD;
                             stmt3.setString(1, &quot;%&quot; + locationName + &quot;%&quot;);&#xD;
                             stmt3.setString(2, &quot;%&quot; + locationName + &quot;%&quot;);&#xD;
                             stmt3.setString(3, &quot;%&quot; + locationName + &quot;%&quot;);&#xD;
                             &#xD;
                             try (ResultSet rs3 = stmt3.executeQuery()) {&#xD;
                                 if (rs3.next()) {&#xD;
                                     foundLocation = true;&#xD;
                                     &#xD;
                                     nextConcediuLocation.put(&quot;strada&quot;, rs3.getString(&quot;strada&quot;));&#xD;
                                     nextConcediuLocation.put(&quot;longitudine&quot;, rs3.getDouble(&quot;longitudine&quot;));&#xD;
                                     nextConcediuLocation.put(&quot;latitudine&quot;, rs3.getDouble(&quot;latitudine&quot;));&#xD;
                                     nextConcediuLocation.put(&quot;cod&quot;, rs3.getString(&quot;cod&quot;));&#xD;
                                     nextConcediuLocation.put(&quot;oras&quot;, rs3.getString(&quot;oras&quot;));&#xD;
                                     nextConcediuLocation.put(&quot;judet&quot;, rs3.getString(&quot;judet&quot;));&#xD;
                                     nextConcediuLocation.put(&quot;tara&quot;, rs3.getString(&quot;tara&quot;));&#xD;
                                     &#xD;
                                     // Construim adresa completă a locației concediului&#xD;
                                     String adresaCompletaConcediu = rs3.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                                                   rs3.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                                                   rs3.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                                                   rs3.getString(&quot;tara&quot;);&#xD;
                                     nextConcediuLocation.put(&quot;adresa_completa&quot;, adresaCompletaConcediu);&#xD;
                                     &#xD;
                                     // Calculăm distanța dintre sediul utilizatorului și locația concediului&#xD;
                                     double userSediuLat = (double) userSediuLocation.get(&quot;latitudine&quot;);&#xD;
                                     double userSediuLon = (double) userSediuLocation.get(&quot;longitudine&quot;);&#xD;
                                     double concediuLat = rs3.getDouble(&quot;latitudine&quot;);&#xD;
                                     double concediuLon = rs3.getDouble(&quot;longitudine&quot;);&#xD;
                                     &#xD;
                                     double distanta = calculateDistance(userSediuLat, userSediuLon, concediuLat, concediuLon);&#xD;
                                     nextConcediuLocation.put(&quot;distanta_km&quot;, distanta);&#xD;
                                 }&#xD;
                             }&#xD;
                         }&#xD;
                     }&#xD;
                     &#xD;
                     if (!foundLocation) {&#xD;
                         throw new SQLException(&quot;Nu s-a găsit locația pentru concediul cu ID-ul &quot; + nextConcediuId + &quot; sau nu are coordonate configurate.&quot;);&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;next_concediu_location&quot;, nextConcediuLocation);&#xD;
         &#xD;
         // Adăugăm un log pentru a verifica ce date au fost returnate&#xD;
         System.out.println(&quot;Date returnate pentru utilizatorul &quot; + userId + &quot;:&quot;);&#xD;
         System.out.println(&quot;User info: &quot; + userInfo);&#xD;
         System.out.println(&quot;User sediu location: &quot; + userSediuLocation);&#xD;
         System.out.println(&quot;Next concediu info: &quot; + nextConcediuInfo);&#xD;
         System.out.println(&quot;Next concediu location: &quot; + nextConcediuLocation);&#xD;
     }&#xD;
     &#xD;
     return result;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI4_IEVdEfCS7cth2SLu0w" name="calculateDistance" specification="_S_pfIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI4_IUVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI4_IkVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI4_I0VdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI4_JEVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI4_JUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>// Convertim din grade în radiani&#xD;
     lat1 = Math.toRadians(lat1);&#xD;
     lon1 = Math.toRadians(lon1);&#xD;
     lat2 = Math.toRadians(lat2);&#xD;
     lon2 = Math.toRadians(lon2);&#xD;
     &#xD;
     // Raza Pământului în kilometri&#xD;
     double R = 6371.0;&#xD;
     &#xD;
     // Formula Haversine&#xD;
     double dlon = lon2 - lon1;&#xD;
     double dlat = lat2 - lat1;&#xD;
     double a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);&#xD;
     double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));&#xD;
     double distance = R * c;&#xD;
     &#xD;
     // Returnăm distanța rotunjită la 2 zecimale&#xD;
     return Math.round(distance * 100.0) / 100.0;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S_mb0EVdEfCS7cth2SLu0w" name="GetSediuToNextConcediuServlet" method="_UI4YE0VdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S_nC4EVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S_nC4UVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_S_nC4kVdEfCS7cth2SLu0w" type="_S_lNsEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S_np8EVdEfCS7cth2SLu0w" name="getUserSediuAndNextConcediuLocations" visibility="private" method="_UI4YGEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S_np8UVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UE_9oEVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S_pfIEVdEfCS7cth2SLu0w" name="calculateDistance" visibility="private" method="_UI4_IEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S_pfIUVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_pfIkVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_pfI0VdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_pfJEVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_pfJUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UE_WkEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI4YFUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UE_WkUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UE_WkkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S_r7YEVdEfCS7cth2SLu0w" name="GetSediuToDepServlet">
        <ownedComment xmi:id="_UJZ8gEVdEfCS7cth2SLu0w">
          <body>Servlet pentru obținerea locațiilor sediului utilizatorului și sediului departamentului</body>
        </ownedComment>
        <generalization xmi:id="_UFCZ4EVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHKg0EVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHKg0UVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHKg0kVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHKg00VdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHKg1EVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHLH4EVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHLH4UVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHLH4kVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI4_JkVdEfCS7cth2SLu0w" name="GetSediuToDepServlet" specification="_S_tJgEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI4_J0VdEfCS7cth2SLu0w" type="_S_r7YEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI4_KEVdEfCS7cth2SLu0w" name="doGet" specification="_UFBy0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI4_KUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI4_KkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Obținem ID-ul utilizatorului din parametrii cererii&#xD;
     String userIdStr = request.getParameter(&quot;userId&quot;);&#xD;
     &#xD;
     if (userIdStr == null || userIdStr.isEmpty()) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator lipsă\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     int userId;&#xD;
     try {&#xD;
         userId = Integer.parseInt(userIdStr);&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator invalid\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         // Obținem locațiile sediului utilizatorului și sediului departamentului&#xD;
         Map&lt;String, Object> result = getUserAndDepartmentLocations(userId);&#xD;
         &#xD;
         // Verificăm dacă am găsit locațiile&#xD;
         if (result.isEmpty() || !result.containsKey(&quot;user_sediu_location&quot;) || !result.containsKey(&quot;dep_sediu_location&quot;)) {&#xD;
             response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
             out.print(&quot;{\&quot;error\&quot;: \&quot;Nu s-au găsit locațiile necesare pentru rută.\&quot;}&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Convertim rezultatul în JSON și îl trimitem ca răspuns&#xD;
         ObjectMapper objectMapper = new ObjectMapper();&#xD;
         out.print(objectMapper.writeValueAsString(result));&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI5mMEVdEfCS7cth2SLu0w" name="getUserAndDepartmentLocations" specification="_S_uXoEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI5mMUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI5mMkVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Object> result = new HashMap&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
         // Obținem informațiile utilizatorului și departamentului său&#xD;
         String userDepSql = &quot;SELECT u.id, u.nume, u.prenume, u.id_dep, d.nume_dep, u.id_sediu, &quot; +&#xD;
                           &quot;su.id_sediu as user_sediu_id, su.nume_sediu as user_sediu_nume, &quot; +&#xD;
                           &quot;su.tip_sediu as user_sediu_tip, su.strada as user_sediu_strada, &quot; +&#xD;
                           &quot;su.oras as user_sediu_oras, su.judet as user_sediu_judet, &quot; +&#xD;
                           &quot;su.tara as user_sediu_tara, su.latitudine as user_sediu_lat, &quot; +&#xD;
                           &quot;su.longitudine as user_sediu_long &quot; +&#xD;
                           &quot;FROM useri u &quot; +&#xD;
                           &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                           &quot;JOIN sedii su ON u.id_sediu = su.id_sediu &quot; +&#xD;
                           &quot;WHERE u.id = ?&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> userInfo = new HashMap&lt;>();&#xD;
         Map&lt;String, Object> userSediuLocation = new HashMap&lt;>();&#xD;
         int departmentId = 0;&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(userDepSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     // Informații utilizator&#xD;
                     userInfo.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                     userInfo.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
                     userInfo.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
                     departmentId = rs.getInt(&quot;id_dep&quot;);&#xD;
                     userInfo.put(&quot;id_dep&quot;, departmentId);&#xD;
                     userInfo.put(&quot;nume_dep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
                     userInfo.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                     &#xD;
                     // Informații sediu utilizator&#xD;
                     userSediuLocation.put(&quot;id_sediu&quot;, rs.getInt(&quot;user_sediu_id&quot;));&#xD;
                     userSediuLocation.put(&quot;nume_sediu&quot;, rs.getString(&quot;user_sediu_nume&quot;));&#xD;
                     userSediuLocation.put(&quot;tip_sediu&quot;, rs.getString(&quot;user_sediu_tip&quot;));&#xD;
                     userSediuLocation.put(&quot;strada&quot;, rs.getString(&quot;user_sediu_strada&quot;));&#xD;
                     userSediuLocation.put(&quot;oras&quot;, rs.getString(&quot;user_sediu_oras&quot;));&#xD;
                     userSediuLocation.put(&quot;judet&quot;, rs.getString(&quot;user_sediu_judet&quot;));&#xD;
                     userSediuLocation.put(&quot;tara&quot;, rs.getString(&quot;user_sediu_tara&quot;));&#xD;
                     userSediuLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;user_sediu_lat&quot;));&#xD;
                     userSediuLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;user_sediu_long&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă a sediului utilizator&#xD;
                     String adresaCompletaUserSediu = rs.getString(&quot;user_sediu_strada&quot;) + &quot;, &quot; + &#xD;
                                                 rs.getString(&quot;user_sediu_oras&quot;) + &quot;, &quot; + &#xD;
                                                 rs.getString(&quot;user_sediu_judet&quot;) + &quot;, &quot; + &#xD;
                                                 rs.getString(&quot;user_sediu_tara&quot;);&#xD;
                     userSediuLocation.put(&quot;adresa_completa&quot;, adresaCompletaUserSediu);&#xD;
                 } else {&#xD;
                     throw new SQLException(&quot;Utilizatorul cu ID-ul &quot; + userId + &quot; nu a fost găsit sau nu are un sediu asociat.&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;user_info&quot;, userInfo);&#xD;
         result.put(&quot;user_sediu_location&quot;, userSediuLocation);&#xD;
         &#xD;
         // Obținem informațiile sediului departamentului&#xD;
         // Mai întâi verificăm dacă există o locație a departamentului în locatii_departamente&#xD;
         String depLocSql = &quot;SELECT id_dep, strada, longitudine, latitudine, cod, oras, judet, tara &quot; +&#xD;
                           &quot;FROM locatii_departamente &quot; +&#xD;
                           &quot;WHERE id_dep = ? AND latitudine IS NOT NULL AND longitudine IS NOT NULL&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> depSediuLocation = new HashMap&lt;>();&#xD;
         boolean hasDepLocation = false;&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(depLocSql)) {&#xD;
             stmt.setInt(1, departmentId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     hasDepLocation = true;&#xD;
                     &#xD;
                     depSediuLocation.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
                     depSediuLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     depSediuLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                     depSediuLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                     depSediuLocation.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                     depSediuLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     depSediuLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     depSediuLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     depSediuLocation.put(&quot;nume_sediu&quot;, userInfo.get(&quot;nume_dep&quot;) + &quot; - Sediu&quot;); // Numele departamentului ca nume de sediu&#xD;
                     &#xD;
                     // Construim adresa completă a locației departamentului&#xD;
                     String adresaCompletaDepLoc = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                                   rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                                   rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                                   rs.getString(&quot;tara&quot;);&#xD;
                     depSediuLocation.put(&quot;adresa_completa&quot;, adresaCompletaDepLoc);&#xD;
                     &#xD;
                     // Calculăm distanța dintre sediul utilizatorului și sediul departamentului&#xD;
                     double userSediuLat = (double) userSediuLocation.get(&quot;latitudine&quot;);&#xD;
                     double userSediuLon = (double) userSediuLocation.get(&quot;longitudine&quot;);&#xD;
                     double depLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                     double depLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                     &#xD;
                     double distanta = calculateDistance(userSediuLat, userSediuLon, depLat, depLon);&#xD;
                     depSediuLocation.put(&quot;distanta_km&quot;, distanta);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // Dacă nu am găsit locația departamentului în locatii_departamente, căutăm prin alte sedii&#xD;
         if (!hasDepLocation) {&#xD;
             // Căutăm sedii care sunt asociate cu departamentul (printr-o regulă de denumire sau altă logică)&#xD;
             // Exemplu: Căutăm sedii care includ numele departamentului în numele lor&#xD;
             String depSediuSql = &quot;SELECT id_sediu, nume_sediu, tip_sediu, strada, oras, judet, tara, &quot; +&#xD;
                                 &quot;latitudine, longitudine &quot; +&#xD;
                                 &quot;FROM sedii &quot; +&#xD;
                                 &quot;WHERE (nume_sediu LIKE ? OR LOWER(nume_sediu) LIKE ?) &quot; +&#xD;
                                 &quot;AND latitudine IS NOT NULL AND longitudine IS NOT NULL &quot; +&#xD;
                                 &quot;LIMIT 1&quot;;&#xD;
             &#xD;
             try (PreparedStatement stmt = conn.prepareStatement(depSediuSql)) {&#xD;
                 String depName = (String) userInfo.get(&quot;nume_dep&quot;);&#xD;
                 stmt.setString(1, &quot;%&quot; + depName + &quot;%&quot;);&#xD;
                 stmt.setString(2, &quot;%&quot; + depName.toLowerCase() + &quot;%&quot;);&#xD;
                 &#xD;
                 try (ResultSet rs = stmt.executeQuery()) {&#xD;
                     if (rs.next()) {&#xD;
                         depSediuLocation.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                         depSediuLocation.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;));&#xD;
                         depSediuLocation.put(&quot;tip_sediu&quot;, rs.getString(&quot;tip_sediu&quot;));&#xD;
                         depSediuLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                         depSediuLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                         depSediuLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                         depSediuLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                         depSediuLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                         depSediuLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                         &#xD;
                         // Construim adresa completă a sediului departamentului&#xD;
                         String adresaCompletaDepSediu = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                                       rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                                       rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                                       rs.getString(&quot;tara&quot;);&#xD;
                         depSediuLocation.put(&quot;adresa_completa&quot;, adresaCompletaDepSediu);&#xD;
                         &#xD;
                         // Calculăm distanța dintre sediul utilizatorului și sediul departamentului&#xD;
                         double userSediuLat = (double) userSediuLocation.get(&quot;latitudine&quot;);&#xD;
                         double userSediuLon = (double) userSediuLocation.get(&quot;longitudine&quot;);&#xD;
                         double depSediuLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                         double depSediuLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                         &#xD;
                         double distanta = calculateDistance(userSediuLat, userSediuLon, depSediuLat, depSediuLon);&#xD;
                         depSediuLocation.put(&quot;distanta_km&quot;, distanta);&#xD;
                         &#xD;
                         hasDepLocation = true;&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             // Dacă tot nu am găsit, luăm un sediu principal sau alt sediu relevant&#xD;
             if (!hasDepLocation) {&#xD;
                 String fallbackSediuSql = &quot;SELECT id_sediu, nume_sediu, tip_sediu, strada, oras, judet, tara, &quot; +&#xD;
                                          &quot;latitudine, longitudine &quot; +&#xD;
                                          &quot;FROM sedii &quot; +&#xD;
                                          &quot;WHERE (tip_sediu = 'principal' OR id_sediu &lt;> ?) &quot; +&#xD;
                                          &quot;AND latitudine IS NOT NULL AND longitudine IS NOT NULL &quot; +&#xD;
                                          &quot;LIMIT 1&quot;;&#xD;
                 &#xD;
                 try (PreparedStatement stmt = conn.prepareStatement(fallbackSediuSql)) {&#xD;
                     stmt.setInt(1, (int) userSediuLocation.get(&quot;id_sediu&quot;)); // Excludem sediul utilizatorului&#xD;
                     &#xD;
                     try (ResultSet rs = stmt.executeQuery()) {&#xD;
                         if (rs.next()) {&#xD;
                             depSediuLocation.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                             depSediuLocation.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;) + &quot; (Sediu Departament)&quot;);&#xD;
                             depSediuLocation.put(&quot;tip_sediu&quot;, rs.getString(&quot;tip_sediu&quot;));&#xD;
                             depSediuLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                             depSediuLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                             depSediuLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                             depSediuLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                             depSediuLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                             depSediuLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                             &#xD;
                             // Construim adresa completă a sediului departamentului&#xD;
                             String adresaCompletaDepSediu = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                                           rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                                           rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                                           rs.getString(&quot;tara&quot;);&#xD;
                             depSediuLocation.put(&quot;adresa_completa&quot;, adresaCompletaDepSediu);&#xD;
                             &#xD;
                             // Calculăm distanța dintre sediul utilizatorului și sediul departamentului&#xD;
                             double userSediuLat = (double) userSediuLocation.get(&quot;latitudine&quot;);&#xD;
                             double userSediuLon = (double) userSediuLocation.get(&quot;longitudine&quot;);&#xD;
                             double depSediuLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                             double depSediuLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                             &#xD;
                             double distanta = calculateDistance(userSediuLat, userSediuLon, depSediuLat, depSediuLon);&#xD;
                             depSediuLocation.put(&quot;distanta_km&quot;, distanta);&#xD;
                             &#xD;
                             hasDepLocation = true;&#xD;
                         }&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         if (!hasDepLocation) {&#xD;
             throw new SQLException(&quot;Nu s-a găsit locația pentru departamentul cu ID-ul &quot; + departmentId + &quot;.&quot;);&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;dep_sediu_location&quot;, depSediuLocation);&#xD;
         &#xD;
         // Adăugăm un log pentru a verifica ce date au fost returnate&#xD;
         System.out.println(&quot;Date returnate pentru utilizatorul &quot; + userId + &quot;:&quot;);&#xD;
         System.out.println(&quot;User info: &quot; + userInfo);&#xD;
         System.out.println(&quot;User sediu location: &quot; + userSediuLocation);&#xD;
         System.out.println(&quot;Dep sediu location: &quot; + depSediuLocation);&#xD;
     }&#xD;
     &#xD;
     return result;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI5mM0VdEfCS7cth2SLu0w" name="calculateDistance" specification="_S_wM0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI5mNEVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI5mNUVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI5mNkVdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI5mN0VdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI5mOEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>// Convertim din grade în radiani&#xD;
     lat1 = Math.toRadians(lat1);&#xD;
     lon1 = Math.toRadians(lon1);&#xD;
     lat2 = Math.toRadians(lat2);&#xD;
     lon2 = Math.toRadians(lon2);&#xD;
     &#xD;
     // Raza Pământului în kilometri&#xD;
     double R = 6371.0;&#xD;
     &#xD;
     // Formula Haversine&#xD;
     double dlon = lon2 - lon1;&#xD;
     double dlat = lat2 - lat1;&#xD;
     double a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);&#xD;
     double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));&#xD;
     double distance = R * c;&#xD;
     &#xD;
     // Returnăm distanța rotunjită la 2 zecimale&#xD;
     return Math.round(distance * 100.0) / 100.0;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S_tJgEVdEfCS7cth2SLu0w" name="GetSediuToDepServlet" method="_UI4_JkVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S_twkEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S_twkUVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_S_twkkVdEfCS7cth2SLu0w" type="_S_r7YEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S_uXoEVdEfCS7cth2SLu0w" name="getUserAndDepartmentLocations" visibility="private" method="_UI5mMEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S_uXoUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFBy00VdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S_wM0EVdEfCS7cth2SLu0w" name="calculateDistance" visibility="private" method="_UI5mM0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S_wM0UVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_wM0kVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_wM00VdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_wM1EVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_wz4EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UFBy0EVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI4_KEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFBy0UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFBy0kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S_zQIEVdEfCS7cth2SLu0w" name="GetSediuServlet">
        <generalization xmi:id="_UFDoAEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI5mOUVdEfCS7cth2SLu0w" name="doGet" specification="_UFDA8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI5mOkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI5mO0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json;charset=UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     JSONObject json = new JSONObject();&#xD;
     &#xD;
     int idSediu = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Utilizare DriverManager în locul DBConn&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         &#xD;
         String sql = &quot;SELECT * FROM sedii WHERE id_sediu = ?&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setInt(1, idSediu);&#xD;
         &#xD;
         ResultSet rs = pstmt.executeQuery();&#xD;
         &#xD;
         if (rs.next()) {&#xD;
             json.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
             json.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;));&#xD;
             json.put(&quot;tip_sediu&quot;, rs.getString(&quot;tip_sediu&quot;));&#xD;
             json.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
             json.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
             json.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
             json.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
             json.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
             json.put(&quot;telefon&quot;, rs.getString(&quot;telefon&quot;));&#xD;
             json.put(&quot;email&quot;, rs.getString(&quot;email&quot;));&#xD;
             json.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
             json.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
         } else {&#xD;
             json.put(&quot;error&quot;, &quot;Sediul nu a fost găsit!&quot;);&#xD;
         }&#xD;
         &#xD;
         rs.close();&#xD;
         pstmt.close();&#xD;
         &#xD;
     } catch (SQLException | ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         json.put(&quot;error&quot;, &quot;Eroare la obținerea datelor sediului: &quot; + e.getMessage());&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     out.print(json.toString());&#xD;
     out.flush();&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UFDA8EVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI5mOUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFDA8UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFDA8kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S_2TcEVdEfCS7cth2SLu0w" name="GetSediuToConcediuServlet">
        <ownedComment xmi:id="_UJZ8gUVdEfCS7cth2SLu0w">
          <body>Servlet pentru obținerea locațiilor sediului și concediului selectat</body>
        </ownedComment>
        <generalization xmi:id="_UFEPE0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHLH40VdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHLu8EVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHLu8UVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHLu8kVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHLu80VdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHLu9EVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHLu9UVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHLu9kVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI6NQEVdEfCS7cth2SLu0w" name="GetSediuToConcediuServlet" specification="_S_3hkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI6NQUVdEfCS7cth2SLu0w" type="_S_2TcEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI6NQkVdEfCS7cth2SLu0w" name="doGet" specification="_UFDoAUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI6NQ0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI6NREVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Obținem ID-ul utilizatorului și ID-ul concediului din parametrii cererii&#xD;
     String userIdStr = request.getParameter(&quot;userId&quot;);&#xD;
     String concediuIdStr = request.getParameter(&quot;concediuId&quot;);&#xD;
     &#xD;
     if (userIdStr == null || userIdStr.isEmpty() || concediuIdStr == null || concediuIdStr.isEmpty()) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator sau ID concediu lipsă\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     int userId, concediuId;&#xD;
     try {&#xD;
         userId = Integer.parseInt(userIdStr);&#xD;
         concediuId = Integer.parseInt(concediuIdStr);&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator sau ID concediu invalid\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         // Obținem locațiile sediului și concediului&#xD;
         Map&lt;String, Object> result = getSediuAndConcediuLocations(userId, concediuId);&#xD;
         &#xD;
         // Verificăm dacă am găsit locațiile&#xD;
         if (result.isEmpty() || !result.containsKey(&quot;sediu_location&quot;) || !result.containsKey(&quot;concediu_location&quot;)) {&#xD;
             response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
             out.print(&quot;{\&quot;error\&quot;: \&quot;Nu s-au găsit locațiile necesare pentru rută.\&quot;}&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Convertim rezultatul în JSON și îl trimitem ca răspuns&#xD;
         ObjectMapper objectMapper = new ObjectMapper();&#xD;
         out.print(objectMapper.writeValueAsString(result));&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI6NRUVdEfCS7cth2SLu0w" name="getSediuAndConcediuLocations" specification="_S_4IoEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI6NRkVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI6NR0VdEfCS7cth2SLu0w" name="concediuId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI6NSEVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Object> result = new HashMap&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
         // Obținem informațiile utilizatorului și sediului său&#xD;
         String userSediuSql = &quot;SELECT u.id, u.nume, u.prenume, u.id_dep, d.nume_dep, u.id_sediu, s.nume_sediu, &quot; +&#xD;
                               &quot;s.tip_sediu, s.strada as sediu_strada, s.oras as sediu_oras, s.judet as sediu_judet, &quot; +&#xD;
                               &quot;s.tara as sediu_tara, s.latitudine as sediu_lat, s.longitudine as sediu_long &quot; +&#xD;
                               &quot;FROM useri u &quot; +&#xD;
                               &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                               &quot;JOIN sedii s ON u.id_sediu = s.id_sediu &quot; +&#xD;
                               &quot;WHERE u.id = ?&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> userInfo = new HashMap&lt;>();&#xD;
         Map&lt;String, Object> sediuLocation = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(userSediuSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     // Informații utilizator&#xD;
                     userInfo.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                     userInfo.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
                     userInfo.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
                     userInfo.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
                     userInfo.put(&quot;nume_dep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
                     userInfo.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                     &#xD;
                     // Informații sediu&#xD;
                     sediuLocation.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                     sediuLocation.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;));&#xD;
                     sediuLocation.put(&quot;tip_sediu&quot;, rs.getString(&quot;tip_sediu&quot;));&#xD;
                     sediuLocation.put(&quot;strada&quot;, rs.getString(&quot;sediu_strada&quot;));&#xD;
                     sediuLocation.put(&quot;oras&quot;, rs.getString(&quot;sediu_oras&quot;));&#xD;
                     sediuLocation.put(&quot;judet&quot;, rs.getString(&quot;sediu_judet&quot;));&#xD;
                     sediuLocation.put(&quot;tara&quot;, rs.getString(&quot;sediu_tara&quot;));&#xD;
                     sediuLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;sediu_lat&quot;));&#xD;
                     sediuLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;sediu_long&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă a sediului&#xD;
                     String adresaCompletaSediu = rs.getString(&quot;sediu_strada&quot;) + &quot;, &quot; + &#xD;
                                                 rs.getString(&quot;sediu_oras&quot;) + &quot;, &quot; + &#xD;
                                                 rs.getString(&quot;sediu_judet&quot;) + &quot;, &quot; + &#xD;
                                                 rs.getString(&quot;sediu_tara&quot;);&#xD;
                     sediuLocation.put(&quot;adresa_completa&quot;, adresaCompletaSediu);&#xD;
                 } else {&#xD;
                     throw new SQLException(&quot;Utilizatorul cu ID-ul &quot; + userId + &quot; nu a fost găsit sau nu are un sediu asociat.&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;user_info&quot;, userInfo);&#xD;
         result.put(&quot;sediu_location&quot;, sediuLocation);&#xD;
         &#xD;
         // Obținem informațiile concediului&#xD;
         String concediuSql = &quot;SELECT c.id, c.start_c, c.end_c, c.motiv, c.locatie, tc.motiv as tip_concediu, &quot; +&#xD;
                              &quot;s.nume_status FROM concedii c &quot; +&#xD;
                              &quot;JOIN statusuri s ON c.status = s.status &quot; +&#xD;
                              &quot;JOIN tipcon tc ON c.tip = tc.tip &quot; +&#xD;
                              &quot;WHERE c.id = ? AND c.id_ang = ?&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> concediuInfo = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(concediuSql)) {&#xD;
             stmt.setInt(1, concediuId);&#xD;
             stmt.setInt(2, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     concediuInfo.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                     concediuInfo.put(&quot;start_c&quot;, rs.getDate(&quot;start_c&quot;).toString());&#xD;
                     concediuInfo.put(&quot;end_c&quot;, rs.getDate(&quot;end_c&quot;).toString());&#xD;
                     concediuInfo.put(&quot;motiv&quot;, rs.getString(&quot;motiv&quot;));&#xD;
                     concediuInfo.put(&quot;locatie&quot;, rs.getString(&quot;locatie&quot;));&#xD;
                     concediuInfo.put(&quot;tip_concediu&quot;, rs.getString(&quot;tip_concediu&quot;));&#xD;
                     concediuInfo.put(&quot;nume_status&quot;, rs.getString(&quot;nume_status&quot;));&#xD;
                 } else {&#xD;
                     throw new SQLException(&quot;Concediul cu ID-ul &quot; + concediuId + &quot; pentru utilizatorul &quot; + userId + &quot; nu a fost găsit.&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;concediu_info&quot;, concediuInfo);&#xD;
         &#xD;
         // Obținem locația concediului&#xD;
         String concediuLocationSql = &quot;SELECT lc.id_concediu, lc.strada, lc.longitudine, lc.latitudine, lc.cod, &quot; +&#xD;
                                     &quot;lc.oras, lc.judet, lc.tara &quot; +&#xD;
                                     &quot;FROM locatii_concedii lc &quot; +&#xD;
                                     &quot;WHERE lc.id_concediu = ? AND lc.latitudine IS NOT NULL AND lc.longitudine IS NOT NULL&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> concediuLocation = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(concediuLocationSql)) {&#xD;
             stmt.setInt(1, concediuId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     concediuLocation.put(&quot;id_concediu&quot;, rs.getInt(&quot;id_concediu&quot;));&#xD;
                     concediuLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     concediuLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                     concediuLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                     concediuLocation.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                     concediuLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     concediuLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     concediuLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă a locației concediului&#xD;
                     String adresaCompletaConcediu = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                                   rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                                   rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                                   rs.getString(&quot;tara&quot;);&#xD;
                     concediuLocation.put(&quot;adresa_completa&quot;, adresaCompletaConcediu);&#xD;
                     &#xD;
                     // Calculăm distanța dintre sediu și locația concediului&#xD;
                     double sediuLat = (double) sediuLocation.get(&quot;latitudine&quot;);&#xD;
                     double sediuLon = (double) sediuLocation.get(&quot;longitudine&quot;);&#xD;
                     double concediuLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                     double concediuLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                     &#xD;
                     double distanta = calculateDistance(sediuLat, sediuLon, concediuLat, concediuLon);&#xD;
                     concediuLocation.put(&quot;distanta_km&quot;, distanta);&#xD;
                 } else {&#xD;
                     throw new SQLException(&quot;Nu s-a găsit locația pentru concediul cu ID-ul &quot; + concediuId + &quot; sau coordonatele lipsesc.&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;concediu_location&quot;, concediuLocation);&#xD;
         &#xD;
         // Adăugăm un log pentru a verifica ce date au fost returnate&#xD;
         System.out.println(&quot;Date returnate pentru utilizatorul &quot; + userId + &quot; și concediul &quot; + concediuId + &quot;:&quot;);&#xD;
         System.out.println(&quot;User info: &quot; + userInfo);&#xD;
         System.out.println(&quot;Sediu location: &quot; + sediuLocation);&#xD;
         System.out.println(&quot;Concediu info: &quot; + concediuInfo);&#xD;
         System.out.println(&quot;Concediu location: &quot; + concediuLocation);&#xD;
     }&#xD;
     &#xD;
     return result;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI6NSUVdEfCS7cth2SLu0w" name="calculateDistance" specification="_S_6k4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI6NSkVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI6NS0VdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI6NTEVdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI6NTUVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI6NTkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>// Convertim din grade în radiani&#xD;
     lat1 = Math.toRadians(lat1);&#xD;
     lon1 = Math.toRadians(lon1);&#xD;
     lat2 = Math.toRadians(lat2);&#xD;
     lon2 = Math.toRadians(lon2);&#xD;
     &#xD;
     // Raza Pământului în kilometri&#xD;
     double R = 6371.0;&#xD;
     &#xD;
     // Formula Haversine&#xD;
     double dlon = lon2 - lon1;&#xD;
     double dlat = lat2 - lat1;&#xD;
     double a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);&#xD;
     double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));&#xD;
     double distance = R * c;&#xD;
     &#xD;
     // Returnăm distanța rotunjită la 2 zecimale&#xD;
     return Math.round(distance * 100.0) / 100.0;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S_3hkEVdEfCS7cth2SLu0w" name="GetSediuToConcediuServlet" method="_UI6NQEVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S_3hkUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S_3hkkVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_S_3hk0VdEfCS7cth2SLu0w" type="_S_2TcEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S_4IoEVdEfCS7cth2SLu0w" name="getSediuAndConcediuLocations" visibility="private" method="_UI6NRUVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S_4IoUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_4vsEVdEfCS7cth2SLu0w" name="concediuId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFEPEkVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S_6k4EVdEfCS7cth2SLu0w" name="calculateDistance" visibility="private" method="_UI6NSUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S_6k4UVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_6k4kVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_6k40VdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_6k5EVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S_6k5UVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UFDoAUVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI6NQkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFEPEEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFEPEUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S_9oMEVdEfCS7cth2SLu0w" name="GetSediiiServlet">
        <ownedComment xmi:id="_UJZ8gkVdEfCS7cth2SLu0w">
          <body>Servlet pentru obținerea listei de sedii și găsirea celui mai apropiat sediu</body>
        </ownedComment>
        <generalization xmi:id="_UFGEQUVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHMWAEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHMWAUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHMWAkVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHMWA0VdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHMWBEVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHMWBUVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHMWBkVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHM9EEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI60UEVdEfCS7cth2SLu0w" name="GetSediiiServlet" specification="_S_-2UEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI60UUVdEfCS7cth2SLu0w" type="_S_9oMEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI60UkVdEfCS7cth2SLu0w" name="doGet" specification="_UFFdMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI60U0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI60VEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Verificăm dacă s-a cerut cel mai apropiat sediu&#xD;
     String latStr = request.getParameter(&quot;lat&quot;);&#xD;
     String lonStr = request.getParameter(&quot;lon&quot;);&#xD;
     &#xD;
     try {&#xD;
         if (latStr != null &amp;&amp; lonStr != null) {&#xD;
             // Convertim coordonatele&#xD;
             double lat = Double.parseDouble(latStr);&#xD;
             double lon = Double.parseDouble(lonStr);&#xD;
             &#xD;
             // Găsim cel mai apropiat sediu&#xD;
             Map&lt;String, Object> nearestSediu = getNearestSediu(lat, lon);&#xD;
             &#xD;
             // Verificăm dacă am găsit un sediu&#xD;
             if (nearestSediu.isEmpty()) {&#xD;
                 response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
                 out.print(&quot;{\&quot;error\&quot;: \&quot;Nu s-a găsit niciun sediu.\&quot;}&quot;);&#xD;
                 return;&#xD;
             }&#xD;
             &#xD;
             // Convertim sediul în JSON și îl trimitem ca răspuns&#xD;
             ObjectMapper objectMapper = new ObjectMapper();&#xD;
             out.print(objectMapper.writeValueAsString(nearestSediu));&#xD;
         } else {&#xD;
             // Obținem toate sediile&#xD;
             List&lt;Map&lt;String, Object>> sedii = getAllSedii();&#xD;
             &#xD;
             // Verificăm dacă am găsit sedii&#xD;
             if (sedii.isEmpty()) {&#xD;
                 response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
                 out.print(&quot;{\&quot;error\&quot;: \&quot;Nu s-au găsit sedii.\&quot;}&quot;);&#xD;
                 return;&#xD;
             }&#xD;
             &#xD;
             // Convertim lista de sedii în JSON și o trimitem ca răspuns&#xD;
             ObjectMapper objectMapper = new ObjectMapper();&#xD;
             out.print(objectMapper.writeValueAsString(sedii));&#xD;
         }&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;Coordonate invalide.\&quot;}&quot;);&#xD;
         return;&#xD;
     } catch (Exception e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI60VUVdEfCS7cth2SLu0w" name="getAllSedii" specification="_TAAEcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI60VkVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UI60V0VdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;Map&lt;String, Object>> sedii = new ArrayList&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     // Query pentru a obține toate sediile din baza de date&#xD;
     String sql = &quot;SELECT * FROM sedii WHERE latitudine IS NOT NULL AND longitudine IS NOT NULL&quot;;&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
          PreparedStatement stmt = conn.prepareStatement(sql);&#xD;
          ResultSet rs = stmt.executeQuery()) {&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             Map&lt;String, Object> sediu = new HashMap&lt;>();&#xD;
             sediu.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
             sediu.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;));&#xD;
             sediu.put(&quot;tip_sediu&quot;, rs.getString(&quot;tip_sediu&quot;));&#xD;
             sediu.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
             sediu.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
             sediu.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
             sediu.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
             sediu.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
             sediu.put(&quot;telefon&quot;, rs.getString(&quot;telefon&quot;));&#xD;
             sediu.put(&quot;email&quot;, rs.getString(&quot;email&quot;));&#xD;
             sediu.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
             sediu.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
             &#xD;
             // Adăugăm sediul în listă&#xD;
             sedii.add(sediu);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return sedii;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI7bYEVdEfCS7cth2SLu0w" name="getNearestSediu" specification="_TACgsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI7bYUVdEfCS7cth2SLu0w" name="lat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI7bYkVdEfCS7cth2SLu0w" name="lon">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI7bY0VdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>// Obținem toate sediile&#xD;
     List&lt;Map&lt;String, Object>> sedii = getAllSedii();&#xD;
     &#xD;
     // Verificăm dacă există sedii&#xD;
     if (sedii.isEmpty()) {&#xD;
         return new HashMap&lt;>();&#xD;
     }&#xD;
     &#xD;
     // Inițializăm cu primul sediu&#xD;
     Map&lt;String, Object> nearestSediu = sedii.get(0);&#xD;
     double minDistance = calculateDistance(lat, lon, &#xD;
                                           (double) nearestSediu.get(&quot;latitudine&quot;), &#xD;
                                           (double) nearestSediu.get(&quot;longitudine&quot;));&#xD;
     &#xD;
     // Căutăm cel mai apropiat sediu&#xD;
     for (int i = 1; i &lt; sedii.size(); i++) {&#xD;
         Map&lt;String, Object> sediu = sedii.get(i);&#xD;
         double distance = calculateDistance(lat, lon, &#xD;
                                            (double) sediu.get(&quot;latitudine&quot;), &#xD;
                                            (double) sediu.get(&quot;longitudine&quot;));&#xD;
         &#xD;
         if (distance &lt; minDistance) {&#xD;
             minDistance = distance;&#xD;
             nearestSediu = sediu;&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     // Adăugăm distanța în kilometri&#xD;
     nearestSediu.put(&quot;distanta_km&quot;, minDistance);&#xD;
     &#xD;
     return nearestSediu;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI7bZEVdEfCS7cth2SLu0w" name="calculateDistance" specification="_TAEV4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI7bZUVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI7bZkVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI7bZ0VdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI7baEVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI7baUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>// Convertim din grade în radiani&#xD;
     lat1 = Math.toRadians(lat1);&#xD;
     lon1 = Math.toRadians(lon1);&#xD;
     lat2 = Math.toRadians(lat2);&#xD;
     lon2 = Math.toRadians(lon2);&#xD;
     &#xD;
     // Raza Pământului în kilometri&#xD;
     double R = 6371.0;&#xD;
     &#xD;
     // Formula Haversine&#xD;
     double dlon = lon2 - lon1;&#xD;
     double dlat = lat2 - lat1;&#xD;
     double a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);&#xD;
     double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));&#xD;
     double distance = R * c;&#xD;
     &#xD;
     // Returnăm distanța rotunjită la 2 zecimale&#xD;
     return Math.round(distance * 100.0) / 100.0;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S_-2UEVdEfCS7cth2SLu0w" name="GetSediiiServlet" method="_UI60UEVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_S__dYEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S__dYUVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_S__dYkVdEfCS7cth2SLu0w" type="_S_9oMEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TAAEcEVdEfCS7cth2SLu0w" name="getAllSedii" visibility="private" method="_UI60VUVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJZ8hEVdEfCS7cth2SLu0w">
            <body>Obține toate sediile din baza de date</body>
          </ownedComment>
          <ownedParameter xmi:id="_TAAEcUVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TAAEckVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_TACgsEVdEfCS7cth2SLu0w" name="getNearestSediu" visibility="private" method="_UI7bYEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJZ8hUVdEfCS7cth2SLu0w">
            <body>Găsește cel mai apropiat sediu de coordonatele date</body>
          </ownedComment>
          <ownedParameter xmi:id="_TACgsUVdEfCS7cth2SLu0w" name="lat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TACgskVdEfCS7cth2SLu0w" name="lon">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFGEQEVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TAEV4EVdEfCS7cth2SLu0w" name="calculateDistance" visibility="private" method="_UI7bZEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJZ8hkVdEfCS7cth2SLu0w">
            <body>Calculează distanța între două puncte geografice folosind formula Haversine&#xD;
     * Returnează distanța în kilometri</body>
          </ownedComment>
          <ownedParameter xmi:id="_TAEV4UVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TAEV4kVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TAEV40VdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TAEV5EVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TAEV5UVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UFFdMEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI60UkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJZ8g0VdEfCS7cth2SLu0w">
            <body>Răspunde la cereri GET pentru a returna lista de sedii sau cel mai apropiat sediu</body>
          </ownedComment>
          <ownedParameter xmi:id="_UFFdMUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFFdMkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TAIAQEVdEfCS7cth2SLu0w" name="GetSediuToHomeServlet">
        <ownedComment xmi:id="_UJZ8h0VdEfCS7cth2SLu0w">
          <body>Servlet pentru obținerea locațiilor sediului și adresei de acasă a utilizatorului</body>
        </ownedComment>
        <generalization xmi:id="_UFHSYkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHM9EUVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHM9EkVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHM9E0VdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHNkIEVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHNkIUVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHNkIkVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHNkI0VdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHNkJEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI7bakVdEfCS7cth2SLu0w" name="GetSediuToHomeServlet" specification="_TAInUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI7ba0VdEfCS7cth2SLu0w" type="_TAIAQEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI7bbEVdEfCS7cth2SLu0w" name="doGet" specification="_UFGrUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI7bbUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI7bbkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Obținem ID-ul utilizatorului din parametrii cererii&#xD;
     String userIdStr = request.getParameter(&quot;userId&quot;);&#xD;
     &#xD;
     if (userIdStr == null || userIdStr.isEmpty()) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator lipsă\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     int userId;&#xD;
     try {&#xD;
         userId = Integer.parseInt(userIdStr);&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator invalid\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         // Obținem locațiile sediului și adresei de acasă a utilizatorului&#xD;
         Map&lt;String, Object> result = getUserSediuAndHomeLocations(userId);&#xD;
         &#xD;
         // Verificăm dacă am găsit locațiile&#xD;
         if (result.isEmpty() || !result.containsKey(&quot;user_sediu_location&quot;) || !result.containsKey(&quot;user_home_location&quot;)) {&#xD;
             response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
             out.print(&quot;{\&quot;error\&quot;: \&quot;Nu s-au găsit locațiile necesare pentru rută.\&quot;}&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Convertim rezultatul în JSON și îl trimitem ca răspuns&#xD;
         ObjectMapper objectMapper = new ObjectMapper();&#xD;
         out.print(objectMapper.writeValueAsString(result));&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI8CcEVdEfCS7cth2SLu0w" name="getUserSediuAndHomeLocations" specification="_TAJOYUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI8CcUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI8CckVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Object> result = new HashMap&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
         // Obținem informațiile utilizatorului și sediului său&#xD;
         String userSediuSql = &quot;SELECT u.id, u.nume, u.prenume, u.id_dep, d.nume_dep, u.id_sediu, &quot; +&#xD;
                           &quot;u.adresa as adresa_user, &quot; +&#xD;
                           &quot;su.id_sediu as user_sediu_id, su.nume_sediu as user_sediu_nume, &quot; +&#xD;
                           &quot;su.tip_sediu as user_sediu_tip, su.strada as user_sediu_strada, &quot; +&#xD;
                           &quot;su.oras as user_sediu_oras, su.judet as user_sediu_judet, &quot; +&#xD;
                           &quot;su.tara as user_sediu_tara, su.latitudine as user_sediu_lat, &quot; +&#xD;
                           &quot;su.longitudine as user_sediu_long &quot; +&#xD;
                           &quot;FROM useri u &quot; +&#xD;
                           &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                           &quot;JOIN sedii su ON u.id_sediu = su.id_sediu &quot; +&#xD;
                           &quot;WHERE u.id = ?&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> userInfo = new HashMap&lt;>();&#xD;
         Map&lt;String, Object> userSediuLocation = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(userSediuSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     // Informații utilizator&#xD;
                     userInfo.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                     userInfo.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
                     userInfo.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
                     userInfo.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
                     userInfo.put(&quot;nume_dep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
                     userInfo.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                     userInfo.put(&quot;adresa&quot;, rs.getString(&quot;adresa_user&quot;));&#xD;
                     &#xD;
                     // Informații sediu utilizator&#xD;
                     userSediuLocation.put(&quot;id_sediu&quot;, rs.getInt(&quot;user_sediu_id&quot;));&#xD;
                     userSediuLocation.put(&quot;nume_sediu&quot;, rs.getString(&quot;user_sediu_nume&quot;));&#xD;
                     userSediuLocation.put(&quot;tip_sediu&quot;, rs.getString(&quot;user_sediu_tip&quot;));&#xD;
                     userSediuLocation.put(&quot;strada&quot;, rs.getString(&quot;user_sediu_strada&quot;));&#xD;
                     userSediuLocation.put(&quot;oras&quot;, rs.getString(&quot;user_sediu_oras&quot;));&#xD;
                     userSediuLocation.put(&quot;judet&quot;, rs.getString(&quot;user_sediu_judet&quot;));&#xD;
                     userSediuLocation.put(&quot;tara&quot;, rs.getString(&quot;user_sediu_tara&quot;));&#xD;
                     userSediuLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;user_sediu_lat&quot;));&#xD;
                     userSediuLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;user_sediu_long&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă a sediului utilizator&#xD;
                     String adresaCompletaUserSediu = rs.getString(&quot;user_sediu_strada&quot;) + &quot;, &quot; + &#xD;
                                                 rs.getString(&quot;user_sediu_oras&quot;) + &quot;, &quot; + &#xD;
                                                 rs.getString(&quot;user_sediu_judet&quot;) + &quot;, &quot; + &#xD;
                                                 rs.getString(&quot;user_sediu_tara&quot;);&#xD;
                     userSediuLocation.put(&quot;adresa_completa&quot;, adresaCompletaUserSediu);&#xD;
                 } else {&#xD;
                     throw new SQLException(&quot;Utilizatorul cu ID-ul &quot; + userId + &quot; nu a fost găsit sau nu are un sediu asociat.&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;user_info&quot;, userInfo);&#xD;
         result.put(&quot;user_sediu_location&quot;, userSediuLocation);&#xD;
         &#xD;
         // Obținem adresa de acasă a utilizatorului din locatii_useri&#xD;
         String userHomeSql = &quot;SELECT id_locatie, id_user, strada, longitudine, latitudine, cod, oras, judet, tara &quot; +&#xD;
                             &quot;FROM locatii_useri &quot; +&#xD;
                             &quot;WHERE id_user = ? AND latitudine IS NOT NULL AND longitudine IS NOT NULL&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> userHomeLocation = new HashMap&lt;>();&#xD;
         boolean foundHomeLocation = false;&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(userHomeSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     foundHomeLocation = true;&#xD;
                     &#xD;
                     userHomeLocation.put(&quot;id_locatie&quot;, rs.getInt(&quot;id_locatie&quot;));&#xD;
                     userHomeLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     userHomeLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                     userHomeLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                     userHomeLocation.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                     userHomeLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     userHomeLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     userHomeLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă a domiciliului utilizatorului&#xD;
                     String adresaCompletaHome = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                              rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                              rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                              rs.getString(&quot;tara&quot;);&#xD;
                     userHomeLocation.put(&quot;adresa_completa&quot;, adresaCompletaHome);&#xD;
                     &#xD;
                     // Calculăm distanța dintre sediul utilizatorului și domiciliul său&#xD;
                     double userSediuLat = (double) userSediuLocation.get(&quot;latitudine&quot;);&#xD;
                     double userSediuLon = (double) userSediuLocation.get(&quot;longitudine&quot;);&#xD;
                     double userHomeLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                     double userHomeLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                     &#xD;
                     double distanta = calculateDistance(userSediuLat, userSediuLon, userHomeLat, userHomeLon);&#xD;
                     userHomeLocation.put(&quot;distanta_km&quot;, distanta);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // Dacă nu găsim locația de acasă în locatii_useri, folosim adresa din tabelul useri și&#xD;
         // încercăm să obținem coordonatele dintr-o altă locație similară&#xD;
         if (!foundHomeLocation) {&#xD;
             // Extragem componentele adresei din adresa utilizatorului (dacă există)&#xD;
             String adresaUser = (String) userInfo.get(&quot;adresa&quot;);&#xD;
             &#xD;
             if (adresaUser != null &amp;&amp; !adresaUser.trim().isEmpty()) {&#xD;
                 userHomeLocation.put(&quot;adresa&quot;, adresaUser);&#xD;
                 &#xD;
                 // Încercăm să găsim o locație similară în baza de date&#xD;
                 String[] adresaParts = adresaUser.split(&quot;[,\\s]+&quot;);&#xD;
                 &#xD;
                 // Construim un query pentru a căuta locații cu componente similare în adresă&#xD;
                 StringBuilder queryBuilder = new StringBuilder(&#xD;
                     &quot;SELECT strada, longitudine, latitudine, cod, oras, judet, tara &quot; +&#xD;
                     &quot;FROM (&quot; +&#xD;
                     &quot;    SELECT strada, longitudine, latitudine, cod, oras, judet, tara FROM locatii_concedii &quot; +&#xD;
                     &quot;    UNION ALL &quot; +&#xD;
                     &quot;    SELECT strada, longitudine, latitudine, cod, oras, judet, tara FROM locatii_departamente &quot; +&#xD;
                     &quot;    UNION ALL &quot; +&#xD;
                     &quot;    SELECT strada, longitudine, latitudine, cod, oras, judet, tara FROM locatii_useri &quot; +&#xD;
                     &quot;    UNION ALL &quot; +&#xD;
                     &quot;    SELECT strada, longitudine, latitudine, cod, oras, judet, tara FROM sedii &quot; +&#xD;
                     &quot;) AS all_locations &quot; +&#xD;
                     &quot;WHERE latitudine IS NOT NULL AND longitudine IS NOT NULL AND (&quot;&#xD;
                 );&#xD;
                 &#xD;
                 // Adăugăm condiții de căutare pentru fiecare componentă a adresei&#xD;
                 boolean firstCondition = true;&#xD;
                 for (String part : adresaParts) {&#xD;
                     if (part.length() >= 3) { // Ignorăm cuvintele prea scurte&#xD;
                         if (!firstCondition) {&#xD;
                             queryBuilder.append(&quot; OR &quot;);&#xD;
                         }&#xD;
                         queryBuilder.append(&quot;strada LIKE ? OR oras LIKE ? OR judet LIKE ?&quot;);&#xD;
                         firstCondition = false;&#xD;
                     }&#xD;
                 }&#xD;
                 &#xD;
                 queryBuilder.append(&quot;) LIMIT 1&quot;);&#xD;
                 &#xD;
                 try (PreparedStatement stmt = conn.prepareStatement(queryBuilder.toString())) {&#xD;
                     // Setăm parametrii pentru query&#xD;
                     int paramIndex = 1;&#xD;
                     for (String part : adresaParts) {&#xD;
                         if (part.length() >= 3) { // Ignorăm cuvintele prea scurte&#xD;
                             stmt.setString(paramIndex++, &quot;%&quot; + part + &quot;%&quot;);&#xD;
                             stmt.setString(paramIndex++, &quot;%&quot; + part + &quot;%&quot;);&#xD;
                             stmt.setString(paramIndex++, &quot;%&quot; + part + &quot;%&quot;);&#xD;
                         }&#xD;
                     }&#xD;
                     &#xD;
                     try (ResultSet rs = stmt.executeQuery()) {&#xD;
                         if (rs.next()) {&#xD;
                             foundHomeLocation = true;&#xD;
                             &#xD;
                             userHomeLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                             userHomeLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                             userHomeLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                             userHomeLocation.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                             userHomeLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                             userHomeLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                             userHomeLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                             &#xD;
                             // Construim adresa completă aproximativă&#xD;
                             String adresaCompletaAprox = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                                       rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                                       rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                                       rs.getString(&quot;tara&quot;);&#xD;
                             userHomeLocation.put(&quot;adresa_completa&quot;, adresaCompletaAprox);&#xD;
                             userHomeLocation.put(&quot;adresa_aproximativa&quot;, true);&#xD;
                             &#xD;
                             // Calculăm distanța între sediu și locația aproximativă&#xD;
                             double userSediuLat = (double) userSediuLocation.get(&quot;latitudine&quot;);&#xD;
                             double userSediuLon = (double) userSediuLocation.get(&quot;longitudine&quot;);&#xD;
                             double userHomeLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                             double userHomeLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                             &#xD;
                             double distanta = calculateDistance(userSediuLat, userSediuLon, userHomeLat, userHomeLon);&#xD;
                             userHomeLocation.put(&quot;distanta_km&quot;, distanta);&#xD;
                         }&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // Dacă tot nu am găsit o locație, folosim un punct din același oraș ca sediul&#xD;
         if (!foundHomeLocation) {&#xD;
             String fallbackLocationSql = &#xD;
                 &quot;SELECT strada, longitudine, latitudine, cod, oras, judet, tara &quot; +&#xD;
                 &quot;FROM (&quot; +&#xD;
                 &quot;    SELECT strada, longitudine, latitudine, cod, oras, judet, tara FROM locatii_useri &quot; +&#xD;
                 &quot;    UNION ALL &quot; +&#xD;
                 &quot;    SELECT strada, longitudine, latitudine, cod, oras, judet, tara FROM locatii_concedii &quot; +&#xD;
                 &quot;) AS all_locations &quot; +&#xD;
                 &quot;WHERE oras = ? AND latitudine IS NOT NULL AND longitudine IS NOT NULL &quot; +&#xD;
                 &quot;AND (latitudine &lt;> ? OR longitudine &lt;> ?) &quot; +&#xD;
                 &quot;LIMIT 1&quot;;&#xD;
             &#xD;
             try (PreparedStatement stmt = conn.prepareStatement(fallbackLocationSql)) {&#xD;
                 stmt.setString(1, (String) userSediuLocation.get(&quot;oras&quot;)); // Același oraș ca sediul&#xD;
                 stmt.setDouble(2, (double) userSediuLocation.get(&quot;latitudine&quot;)); // Excludem sediul&#xD;
                 stmt.setDouble(3, (double) userSediuLocation.get(&quot;longitudine&quot;));&#xD;
                 &#xD;
                 try (ResultSet rs = stmt.executeQuery()) {&#xD;
                     if (rs.next()) {&#xD;
                         foundHomeLocation = true;&#xD;
                         &#xD;
                         userHomeLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                         userHomeLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                         userHomeLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                         userHomeLocation.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                         userHomeLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                         userHomeLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                         userHomeLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                         &#xD;
                         // Construim adresa completă aproximativă&#xD;
                         String adresaCompletaAprox = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                                   rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                                   rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                                   rs.getString(&quot;tara&quot;);&#xD;
                         userHomeLocation.put(&quot;adresa_completa&quot;, adresaCompletaAprox);&#xD;
                         userHomeLocation.put(&quot;adresa_aproximativa&quot;, true);&#xD;
                         userHomeLocation.put(&quot;adresa_foarte_aproximativa&quot;, true); // Marcăm că este o aproximare foarte vagă&#xD;
                         &#xD;
                         // Calculăm distanța între sediu și locația aproximativă&#xD;
                         double userSediuLat = (double) userSediuLocation.get(&quot;latitudine&quot;);&#xD;
                         double userSediuLon = (double) userSediuLocation.get(&quot;longitudine&quot;);&#xD;
                         double userHomeLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                         double userHomeLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                         &#xD;
                         double distanta = calculateDistance(userSediuLat, userSediuLon, userHomeLat, userHomeLon);&#xD;
                         userHomeLocation.put(&quot;distanta_km&quot;, distanta);&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         if (!foundHomeLocation) {&#xD;
             throw new SQLException(&quot;Nu s-a găsit adresa de acasă sau coordonatele acesteia pentru utilizatorul cu ID-ul &quot; + userId + &quot;.&quot;);&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;user_home_location&quot;, userHomeLocation);&#xD;
         &#xD;
         // Adăugăm un log pentru a verifica ce date au fost returnate&#xD;
         System.out.println(&quot;Date returnate pentru utilizatorul &quot; + userId + &quot;:&quot;);&#xD;
         System.out.println(&quot;User info: &quot; + userInfo);&#xD;
         System.out.println(&quot;User sediu location: &quot; + userSediuLocation);&#xD;
         System.out.println(&quot;User home location: &quot; + userHomeLocation);&#xD;
     }&#xD;
     &#xD;
     return result;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI8Cc0VdEfCS7cth2SLu0w" name="calculateDistance" specification="_TALqoEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI8CdEVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI8CdUVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI8CdkVdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI8Cd0VdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI8CeEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>// Convertim din grade în radiani&#xD;
     lat1 = Math.toRadians(lat1);&#xD;
     lon1 = Math.toRadians(lon1);&#xD;
     lat2 = Math.toRadians(lat2);&#xD;
     lon2 = Math.toRadians(lon2);&#xD;
     &#xD;
     // Raza Pământului în kilometri&#xD;
     double R = 6371.0;&#xD;
     &#xD;
     // Formula Haversine&#xD;
     double dlon = lon2 - lon1;&#xD;
     double dlat = lat2 - lat1;&#xD;
     double a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);&#xD;
     double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));&#xD;
     double distance = R * c;&#xD;
     &#xD;
     // Returnăm distanța rotunjită la 2 zecimale&#xD;
     return Math.round(distance * 100.0) / 100.0;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_TAInUEVdEfCS7cth2SLu0w" name="GetSediuToHomeServlet" method="_UI7bakVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_TAInUUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_TAInUkVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_TAJOYEVdEfCS7cth2SLu0w" type="_TAIAQEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TAJOYUVdEfCS7cth2SLu0w" name="getUserSediuAndHomeLocations" visibility="private" method="_UI8CcEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TAJ1cEVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFHSYUVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TALqoEVdEfCS7cth2SLu0w" name="calculateDistance" visibility="private" method="_UI8Cc0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TALqoUVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TALqokVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TALqo0VdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TALqpEVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TAMRsEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UFGrUEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI7bbEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFGrUUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFHSYEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TAPVAEVdEfCS7cth2SLu0w" name="GetSediiSelectServlet">
        <ownedComment xmi:id="_UJZ8iEVdEfCS7cth2SLu0w">
          <body>Servlet pentru obținerea listei de sedii și locațiile acestora</body>
        </ownedComment>
        <generalization xmi:id="_UFKVsEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHOLMEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHOLMUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHOLMkVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHOLM0VdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHOLNEVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHOyQEVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHOyQUVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHOyQkVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI8CeUVdEfCS7cth2SLu0w" name="GetSediiSelectServlet" specification="_TAQjIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI8CekVdEfCS7cth2SLu0w" type="_TAPVAEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI8Ce0VdEfCS7cth2SLu0w" name="doGet" specification="_UFIggEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI8CfEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI8CfUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Verificăm dacă s-a cerut un sediu specific&#xD;
     String sediuIdStr = request.getParameter(&quot;sediuId&quot;);&#xD;
     &#xD;
     try {&#xD;
         if (sediuIdStr != null) {&#xD;
             // Convertim ID-ul sediului&#xD;
             int sediuId = Integer.parseInt(sediuIdStr);&#xD;
             &#xD;
             // Obținem sediul specificat&#xD;
             Map&lt;String, Object> sediu = getSediuById(sediuId, request, response);&#xD;
             &#xD;
             // Verificăm dacă am găsit sediul&#xD;
             if (sediu.isEmpty()) {&#xD;
                 response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
                 out.print(&quot;{\&quot;error\&quot;: \&quot;Sediul nu a fost găsit sau nu are o locație definită.\&quot;}&quot;);&#xD;
                 return;&#xD;
             }&#xD;
             &#xD;
             // Convertim sediul în JSON și îl trimitem ca răspuns&#xD;
             ObjectMapper objectMapper = new ObjectMapper();&#xD;
             out.print(objectMapper.writeValueAsString(sediu));&#xD;
         } else {&#xD;
             // Obținem toate sediile&#xD;
             List&lt;Map&lt;String, Object>> sedii = getAllSedii();&#xD;
             &#xD;
             // Verificăm dacă am găsit sedii&#xD;
             if (sedii.isEmpty()) {&#xD;
                 response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
                 out.print(&quot;{\&quot;error\&quot;: \&quot;Nu s-au găsit sedii.\&quot;}&quot;);&#xD;
                 return;&#xD;
             }&#xD;
             &#xD;
             // Convertim lista de sedii în JSON și o trimitem ca răspuns&#xD;
             ObjectMapper objectMapper = new ObjectMapper();&#xD;
             out.print(objectMapper.writeValueAsString(sedii));&#xD;
         }&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID sediu invalid.\&quot;}&quot;);&#xD;
         return;&#xD;
     } catch (Exception e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI8CfkVdEfCS7cth2SLu0w" name="getAllSedii" specification="_TARKMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI8Cf0VdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UI8CgEVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;Map&lt;String, Object>> sedii = new ArrayList&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     // Query pentru a obține toate sediile cu locațiile lor&#xD;
     String sql = &quot;SELECT * FROM sedii WHERE latitudine IS NOT NULL AND longitudine IS NOT NULL ORDER BY nume_sediu&quot;;&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
          PreparedStatement stmt = conn.prepareStatement(sql);&#xD;
          ResultSet rs = stmt.executeQuery()) {&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             Map&lt;String, Object> sediu = new HashMap&lt;>();&#xD;
             sediu.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
             sediu.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;));&#xD;
             sediu.put(&quot;tip_sediu&quot;, rs.getString(&quot;tip_sediu&quot;));&#xD;
             sediu.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
             sediu.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
             sediu.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
             sediu.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
             sediu.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
             sediu.put(&quot;telefon&quot;, rs.getString(&quot;telefon&quot;));&#xD;
             sediu.put(&quot;email&quot;, rs.getString(&quot;email&quot;));&#xD;
             sediu.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
             sediu.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
             &#xD;
             // Construim adresa completă&#xD;
             String adresaCompleta = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                    rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                    rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                    rs.getString(&quot;tara&quot;);&#xD;
             sediu.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
             &#xD;
             // Adăugăm sediul în listă&#xD;
             sedii.add(sediu);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return sedii;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI8CgUVdEfCS7cth2SLu0w" name="getSediuById" specification="_UFJHkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI8CgkVdEfCS7cth2SLu0w" name="sediuId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI8Cg0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI8ChEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI8ChUVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Object> sediu = new HashMap&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     // Query pentru a obține sediul specificat&#xD;
     String sql = &quot;SELECT * FROM sedii WHERE id_sediu = ? AND latitudine IS NOT NULL AND longitudine IS NOT NULL&quot;;&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
          PreparedStatement stmt = conn.prepareStatement(sql)) {&#xD;
         &#xD;
         stmt.setInt(1, sediuId);&#xD;
         ResultSet rs = stmt.executeQuery();&#xD;
         &#xD;
         if (rs.next()) {&#xD;
             sediu.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
             sediu.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;));&#xD;
             sediu.put(&quot;tip_sediu&quot;, rs.getString(&quot;tip_sediu&quot;));&#xD;
             sediu.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
             sediu.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
             sediu.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
             sediu.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
             sediu.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
             sediu.put(&quot;telefon&quot;, rs.getString(&quot;telefon&quot;));&#xD;
             sediu.put(&quot;email&quot;, rs.getString(&quot;email&quot;));&#xD;
             sediu.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
             sediu.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
             &#xD;
             // Construim adresa completă&#xD;
             String adresaCompleta = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                    rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                    rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                    rs.getString(&quot;tara&quot;);&#xD;
             sediu.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
             &#xD;
             // Calculăm distanța dacă sunt furnizate coordonatele utilizatorului&#xD;
             String latStr = request.getParameter(&quot;lat&quot;);&#xD;
             String lonStr = request.getParameter(&quot;lon&quot;);&#xD;
             if (latStr != null &amp;&amp; lonStr != null) {&#xD;
                 try {&#xD;
                     double userLat = Double.parseDouble(latStr);&#xD;
                     double userLon = Double.parseDouble(lonStr);&#xD;
                     double sediuLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                     double sediuLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                     &#xD;
                     double distanta = calculateDistance(userLat, userLon, sediuLat, sediuLon);&#xD;
                     sediu.put(&quot;distanta_km&quot;, distanta);&#xD;
                 } catch (NumberFormatException e) {&#xD;
                     // Ignorăm în cazul în care coordonatele nu sunt valide&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return sediu;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI8pgEVdEfCS7cth2SLu0w" name="calculateDistance" specification="_TAUNgEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI8pgUVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI8pgkVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI8pg0VdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI8phEVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI8phUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>// Convertim din grade în radiani&#xD;
     lat1 = Math.toRadians(lat1);&#xD;
     lon1 = Math.toRadians(lon1);&#xD;
     lat2 = Math.toRadians(lat2);&#xD;
     lon2 = Math.toRadians(lon2);&#xD;
     &#xD;
     // Raza Pământului în kilometri&#xD;
     double R = 6371.0;&#xD;
     &#xD;
     // Formula Haversine&#xD;
     double dlon = lon2 - lon1;&#xD;
     double dlat = lat2 - lat1;&#xD;
     double a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);&#xD;
     double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));&#xD;
     double distance = R * c;&#xD;
     &#xD;
     // Returnăm distanța rotunjită la 2 zecimale&#xD;
     return Math.round(distance * 100.0) / 100.0;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_TAQjIEVdEfCS7cth2SLu0w" name="GetSediiSelectServlet" method="_UI8CeUVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_TAQjIUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_TAQjIkVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_TAQjI0VdEfCS7cth2SLu0w" type="_TAPVAEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TARKMEVdEfCS7cth2SLu0w" name="getAllSedii" visibility="private" method="_UI8CfkVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJajkUVdEfCS7cth2SLu0w">
            <body>Obține toate sediile și locațiile lor din baza de date</body>
          </ownedComment>
          <ownedParameter xmi:id="_TARKMUVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TARKMkVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_TAUNgEVdEfCS7cth2SLu0w" name="calculateDistance" visibility="private" method="_UI8pgEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJajk0VdEfCS7cth2SLu0w">
            <body>Calculează distanța între două puncte geografice folosind formula Haversine&#xD;
     * Returnează distanța în kilometri</body>
          </ownedComment>
          <ownedParameter xmi:id="_TAUNgUVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TAUNgkVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TAUNg0VdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TAUNhEVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TAUNhUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UFIggEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI8Ce0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJajkEVdEfCS7cth2SLu0w">
            <body>Răspunde la cereri GET pentru a returna lista de sedii sau un sediu specific</body>
          </ownedComment>
          <ownedParameter xmi:id="_UFIggUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFIggkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFJHkEVdEfCS7cth2SLu0w" name="getSediuById" visibility="private" method="_UI8CgUVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJajkkVdEfCS7cth2SLu0w">
            <body>Obține un sediu specific după ID</body>
          </ownedComment>
          <ownedParameter xmi:id="_UFJHkUVdEfCS7cth2SLu0w" name="sediuId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFJHkkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFJHk0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFJuoUVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TAX34EVdEfCS7cth2SLu0w" name="GetSediuToOtherSediuServlet">
        <ownedComment xmi:id="_UJajlEVdEfCS7cth2SLu0w">
          <body>Servlet pentru obținerea locațiilor sediului utilizatorului și sediului selectat</body>
        </ownedComment>
        <generalization xmi:id="_UFMK4UVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHOyQ0VdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHOyREVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHOyRUVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHOyRkVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHPZUEVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHPZUUVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHPZUkVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHPZU0VdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI8phkVdEfCS7cth2SLu0w" name="GetSediuToOtherSediuServlet" specification="_TAZGAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI8ph0VdEfCS7cth2SLu0w" type="_TAX34EVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI8piEVdEfCS7cth2SLu0w" name="doGet" specification="_UFLj0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI8piUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI8pikVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Obținem ID-ul utilizatorului și ID-ul sediului selectat din parametrii cererii&#xD;
     String userIdStr = request.getParameter(&quot;userId&quot;);&#xD;
     String selectedSediuIdStr = request.getParameter(&quot;selectedSediuId&quot;);&#xD;
     &#xD;
     if (userIdStr == null || userIdStr.isEmpty() || selectedSediuIdStr == null || selectedSediuIdStr.isEmpty()) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator sau ID sediu lipsă\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     int userId, selectedSediuId;&#xD;
     try {&#xD;
         userId = Integer.parseInt(userIdStr);&#xD;
         selectedSediuId = Integer.parseInt(selectedSediuIdStr);&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator sau ID sediu invalid\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         // Obținem locațiile sediului utilizatorului și sediului selectat&#xD;
         Map&lt;String, Object> result = getUserAndSelectedSediuLocations(userId, selectedSediuId);&#xD;
         &#xD;
         // Verificăm dacă am găsit locațiile&#xD;
         if (result.isEmpty() || !result.containsKey(&quot;user_sediu_location&quot;) || !result.containsKey(&quot;selected_sediu_location&quot;)) {&#xD;
             response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
             out.print(&quot;{\&quot;error\&quot;: \&quot;Nu s-au găsit locațiile necesare pentru rută.\&quot;}&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Convertim rezultatul în JSON și îl trimitem ca răspuns&#xD;
         ObjectMapper objectMapper = new ObjectMapper();&#xD;
         out.print(objectMapper.writeValueAsString(result));&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI8pi0VdEfCS7cth2SLu0w" name="getUserAndSelectedSediuLocations" specification="_TAaUIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI8pjEVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI8pjUVdEfCS7cth2SLu0w" name="selectedSediuId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI8pjkVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Object> result = new HashMap&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
         // Obținem informațiile utilizatorului și sediului său&#xD;
         String userSediuSql = &quot;SELECT u.id, u.nume, u.prenume, u.id_dep, d.nume_dep, u.id_sediu, &quot; +&#xD;
                           &quot;su.id_sediu as user_sediu_id, su.nume_sediu as user_sediu_nume, &quot; +&#xD;
                           &quot;su.tip_sediu as user_sediu_tip, su.strada as user_sediu_strada, &quot; +&#xD;
                           &quot;su.oras as user_sediu_oras, su.judet as user_sediu_judet, &quot; +&#xD;
                           &quot;su.tara as user_sediu_tara, su.latitudine as user_sediu_lat, &quot; +&#xD;
                           &quot;su.longitudine as user_sediu_long &quot; +&#xD;
                           &quot;FROM useri u &quot; +&#xD;
                           &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                           &quot;JOIN sedii su ON u.id_sediu = su.id_sediu &quot; +&#xD;
                           &quot;WHERE u.id = ?&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> userInfo = new HashMap&lt;>();&#xD;
         Map&lt;String, Object> userSediuLocation = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(userSediuSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     // Informații utilizator&#xD;
                     userInfo.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                     userInfo.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
                     userInfo.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
                     userInfo.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
                     userInfo.put(&quot;nume_dep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
                     userInfo.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                     &#xD;
                     // Informații sediu utilizator&#xD;
                     userSediuLocation.put(&quot;id_sediu&quot;, rs.getInt(&quot;user_sediu_id&quot;));&#xD;
                     userSediuLocation.put(&quot;nume_sediu&quot;, rs.getString(&quot;user_sediu_nume&quot;));&#xD;
                     userSediuLocation.put(&quot;tip_sediu&quot;, rs.getString(&quot;user_sediu_tip&quot;));&#xD;
                     userSediuLocation.put(&quot;strada&quot;, rs.getString(&quot;user_sediu_strada&quot;));&#xD;
                     userSediuLocation.put(&quot;oras&quot;, rs.getString(&quot;user_sediu_oras&quot;));&#xD;
                     userSediuLocation.put(&quot;judet&quot;, rs.getString(&quot;user_sediu_judet&quot;));&#xD;
                     userSediuLocation.put(&quot;tara&quot;, rs.getString(&quot;user_sediu_tara&quot;));&#xD;
                     userSediuLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;user_sediu_lat&quot;));&#xD;
                     userSediuLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;user_sediu_long&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă a sediului utilizator&#xD;
                     String adresaCompletaUserSediu = rs.getString(&quot;user_sediu_strada&quot;) + &quot;, &quot; + &#xD;
                                                 rs.getString(&quot;user_sediu_oras&quot;) + &quot;, &quot; + &#xD;
                                                 rs.getString(&quot;user_sediu_judet&quot;) + &quot;, &quot; + &#xD;
                                                 rs.getString(&quot;user_sediu_tara&quot;);&#xD;
                     userSediuLocation.put(&quot;adresa_completa&quot;, adresaCompletaUserSediu);&#xD;
                 } else {&#xD;
                     throw new SQLException(&quot;Utilizatorul cu ID-ul &quot; + userId + &quot; nu a fost găsit sau nu are un sediu asociat.&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;user_info&quot;, userInfo);&#xD;
         result.put(&quot;user_sediu_location&quot;, userSediuLocation);&#xD;
         &#xD;
         // Obținem informațiile sediului selectat&#xD;
         String selectedSediuSql = &quot;SELECT id_sediu, nume_sediu, tip_sediu, strada, oras, judet, tara, &quot; +&#xD;
                                 &quot;telefon, email, latitudine, longitudine &quot; +&#xD;
                                 &quot;FROM sedii &quot; +&#xD;
                                 &quot;WHERE id_sediu = ?&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> selectedSediuInfo = new HashMap&lt;>();&#xD;
         Map&lt;String, Object> selectedSediuLocation = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(selectedSediuSql)) {&#xD;
             stmt.setInt(1, selectedSediuId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     // Informații sediu selectat&#xD;
                     selectedSediuInfo.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                     selectedSediuInfo.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;));&#xD;
                     selectedSediuInfo.put(&quot;tip_sediu&quot;, rs.getString(&quot;tip_sediu&quot;));&#xD;
                     selectedSediuInfo.put(&quot;telefon&quot;, rs.getString(&quot;telefon&quot;));&#xD;
                     selectedSediuInfo.put(&quot;email&quot;, rs.getString(&quot;email&quot;));&#xD;
                     &#xD;
                     // Informații locație sediu selectat&#xD;
                     selectedSediuLocation.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                     selectedSediuLocation.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;));&#xD;
                     selectedSediuLocation.put(&quot;tip_sediu&quot;, rs.getString(&quot;tip_sediu&quot;));&#xD;
                     selectedSediuLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     selectedSediuLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     selectedSediuLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     selectedSediuLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     &#xD;
                     // Verificăm dacă există coordonate pentru sediul selectat&#xD;
                     if (rs.getObject(&quot;latitudine&quot;) != null &amp;&amp; rs.getObject(&quot;longitudine&quot;) != null) {&#xD;
                         selectedSediuLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                         selectedSediuLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                         &#xD;
                         // Construim adresa completă a sediului selectat&#xD;
                         String adresaCompletaSelectedSediu = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                                           rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                                           rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                                           rs.getString(&quot;tara&quot;);&#xD;
                         selectedSediuLocation.put(&quot;adresa_completa&quot;, adresaCompletaSelectedSediu);&#xD;
                         &#xD;
                         // Calculăm distanța dintre sediul utilizatorului și sediul selectat&#xD;
                         double userSediuLat = (double) userSediuLocation.get(&quot;latitudine&quot;);&#xD;
                         double userSediuLon = (double) userSediuLocation.get(&quot;longitudine&quot;);&#xD;
                         double selectedSediuLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                         double selectedSediuLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                         &#xD;
                         double distanta = calculateDistance(userSediuLat, userSediuLon, selectedSediuLat, selectedSediuLon);&#xD;
                         selectedSediuLocation.put(&quot;distanta_km&quot;, distanta);&#xD;
                     } else {&#xD;
                         throw new SQLException(&quot;Sediul selectat cu ID-ul &quot; + selectedSediuId + &quot; nu are coordonate geografice configurate.&quot;);&#xD;
                     }&#xD;
                 } else {&#xD;
                     throw new SQLException(&quot;Sediul cu ID-ul &quot; + selectedSediuId + &quot; nu a fost găsit.&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;selected_sediu_info&quot;, selectedSediuInfo);&#xD;
         result.put(&quot;selected_sediu_location&quot;, selectedSediuLocation);&#xD;
         &#xD;
         // Adăugăm un log pentru a verifica ce date au fost returnate&#xD;
         System.out.println(&quot;Date returnate pentru utilizatorul &quot; + userId + &quot; și sediul &quot; + selectedSediuId + &quot;:&quot;);&#xD;
         System.out.println(&quot;User info: &quot; + userInfo);&#xD;
         System.out.println(&quot;User sediu location: &quot; + userSediuLocation);&#xD;
         System.out.println(&quot;Selected sediu info: &quot; + selectedSediuInfo);&#xD;
         System.out.println(&quot;Selected sediu location: &quot; + selectedSediuLocation);&#xD;
     }&#xD;
     &#xD;
     return result;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI9QkEVdEfCS7cth2SLu0w" name="calculateDistance" specification="_TAcJUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI9QkUVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI9QkkVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI9Qk0VdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI9QlEVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI9QlUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>// Convertim din grade în radiani&#xD;
     lat1 = Math.toRadians(lat1);&#xD;
     lon1 = Math.toRadians(lon1);&#xD;
     lat2 = Math.toRadians(lat2);&#xD;
     lon2 = Math.toRadians(lon2);&#xD;
     &#xD;
     // Raza Pământului în kilometri&#xD;
     double R = 6371.0;&#xD;
     &#xD;
     // Formula Haversine&#xD;
     double dlon = lon2 - lon1;&#xD;
     double dlat = lat2 - lat1;&#xD;
     double a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);&#xD;
     double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));&#xD;
     double distance = R * c;&#xD;
     &#xD;
     // Returnăm distanța rotunjită la 2 zecimale&#xD;
     return Math.round(distance * 100.0) / 100.0;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_TAZGAEVdEfCS7cth2SLu0w" name="GetSediuToOtherSediuServlet" method="_UI8phkVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_TAZtEEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_TAZtEUVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_TAZtEkVdEfCS7cth2SLu0w" type="_TAX34EVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TAaUIEVdEfCS7cth2SLu0w" name="getUserAndSelectedSediuLocations" visibility="private" method="_UI8pi0VdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TAaUIUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TAaUIkVdEfCS7cth2SLu0w" name="selectedSediuId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFMK4EVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TAcJUEVdEfCS7cth2SLu0w" name="calculateDistance" visibility="private" method="_UI9QkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TAcJUUVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TAcwYEVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TAcwYUVdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TAcwYkVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TAcwY0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UFLj0EVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI8piEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFLj0UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFLj0kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TAfMoEVdEfCS7cth2SLu0w" name="GetDepartamenteServlet">
        <ownedComment xmi:id="_UJajlUVdEfCS7cth2SLu0w">
          <body>Servlet pentru obținerea listei de departamente și locațiile acestora</body>
        </ownedComment>
        <generalization xmi:id="_UFOnIUVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHQAYEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHQAYUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHQAYkVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHQAY0VdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHQAZEVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHQAZUVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHQncEVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHQncUVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI9QlkVdEfCS7cth2SLu0w" name="GetDepartamenteServlet" specification="_TAgawEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI9Ql0VdEfCS7cth2SLu0w" type="_TAfMoEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI93oEVdEfCS7cth2SLu0w" name="doGet" specification="_UFMx8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI93oUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI93okVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Verificăm dacă s-a cerut un departament specific&#xD;
     String depIdStr = request.getParameter(&quot;departamentId&quot;);&#xD;
     &#xD;
     try {&#xD;
         if (depIdStr != null) {&#xD;
             // Convertim ID-ul departamentului&#xD;
             int depId = Integer.parseInt(depIdStr);&#xD;
             &#xD;
             // Obținem departamentul specificat&#xD;
             Map&lt;String, Object> departament = getDepartamentById(depId, request, response);&#xD;
             &#xD;
             // Verificăm dacă am găsit departamentul&#xD;
             if (departament.isEmpty()) {&#xD;
                 response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
                 out.print(&quot;{\&quot;error\&quot;: \&quot;Departamentul nu a fost găsit sau nu are o locație definită.\&quot;}&quot;);&#xD;
                 return;&#xD;
             }&#xD;
             &#xD;
             // Convertim departamentul în JSON și îl trimitem ca răspuns&#xD;
             ObjectMapper objectMapper = new ObjectMapper();&#xD;
             out.print(objectMapper.writeValueAsString(departament));&#xD;
         } else {&#xD;
             // Obținem toate departamentele&#xD;
             List&lt;Map&lt;String, Object>> departamente = getAllDepartamente();&#xD;
             &#xD;
             // Verificăm dacă am găsit departamente&#xD;
             if (departamente.isEmpty()) {&#xD;
                 response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
                 out.print(&quot;{\&quot;error\&quot;: \&quot;Nu s-au găsit departamente.\&quot;}&quot;);&#xD;
                 return;&#xD;
             }&#xD;
             &#xD;
             // Convertim lista de departamente în JSON și o trimitem ca răspuns&#xD;
             ObjectMapper objectMapper = new ObjectMapper();&#xD;
             out.print(objectMapper.writeValueAsString(departamente));&#xD;
         }&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID departament invalid.\&quot;}&quot;);&#xD;
         return;&#xD;
     } catch (Exception e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI93o0VdEfCS7cth2SLu0w" name="getAllDepartamente" specification="_TAho4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI93pEVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UI93pUVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;Map&lt;String, Object>> departamente = new ArrayList&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     // Query pentru a obține toate departamentele cu locațiile lor&#xD;
     String sql = &quot;SELECT d.id_dep, d.nume_dep, ld.strada, ld.longitudine, ld.latitudine, &quot; +&#xD;
                  &quot;ld.cod, ld.oras, ld.judet, ld.tara &quot; +&#xD;
                  &quot;FROM departament d &quot; +&#xD;
                  &quot;JOIN locatii_departamente ld ON d.id_dep = ld.id_dep &quot; +&#xD;
                  &quot;WHERE ld.latitudine IS NOT NULL AND ld.longitudine IS NOT NULL &quot; +&#xD;
                  &quot;ORDER BY d.nume_dep&quot;;&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
          PreparedStatement stmt = conn.prepareStatement(sql);&#xD;
          ResultSet rs = stmt.executeQuery()) {&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             Map&lt;String, Object> departament = new HashMap&lt;>();&#xD;
             departament.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
             departament.put(&quot;nume_dep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
             departament.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
             departament.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
             departament.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
             departament.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
             departament.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
             departament.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
             departament.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
             &#xD;
             // Construim adresa completă&#xD;
             String adresaCompleta = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                    rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                    rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                    rs.getString(&quot;tara&quot;);&#xD;
             departament.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
             &#xD;
             // Adăugăm departamentul în listă&#xD;
             departamente.add(departament);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return departamente;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI-esEVdEfCS7cth2SLu0w" name="getDepartamentById" specification="_UFNZAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI-esUVdEfCS7cth2SLu0w" name="depId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI-eskVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI-es0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI-etEVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Object> departament = new HashMap&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     // Query pentru a obține departamentul specificat&#xD;
     String sql = &quot;SELECT d.id_dep, d.nume_dep, ld.strada, ld.longitudine, ld.latitudine, &quot; +&#xD;
                  &quot;ld.cod, ld.oras, ld.judet, ld.tara &quot; +&#xD;
                  &quot;FROM departament d &quot; +&#xD;
                  &quot;JOIN locatii_departamente ld ON d.id_dep = ld.id_dep &quot; +&#xD;
                  &quot;WHERE d.id_dep = ? AND ld.latitudine IS NOT NULL AND ld.longitudine IS NOT NULL&quot;;&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
          PreparedStatement stmt = conn.prepareStatement(sql)) {&#xD;
         &#xD;
         stmt.setInt(1, depId);&#xD;
         ResultSet rs = stmt.executeQuery();&#xD;
         &#xD;
         if (rs.next()) {&#xD;
             departament.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
             departament.put(&quot;nume_dep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
             departament.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
             departament.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
             departament.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
             departament.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
             departament.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
             departament.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
             departament.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
             &#xD;
             // Construim adresa completă&#xD;
             String adresaCompleta = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                    rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                    rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                    rs.getString(&quot;tara&quot;);&#xD;
             departament.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
             &#xD;
             // Calculăm distanța dacă sunt furnizate coordonatele utilizatorului&#xD;
             String latStr = request.getParameter(&quot;lat&quot;);&#xD;
             String lonStr = request.getParameter(&quot;lon&quot;);&#xD;
             if (latStr != null &amp;&amp; lonStr != null) {&#xD;
                 try {&#xD;
                     double userLat = Double.parseDouble(latStr);&#xD;
                     double userLon = Double.parseDouble(lonStr);&#xD;
                     double depLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                     double depLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                     &#xD;
                     double distanta = calculateDistance(userLat, userLon, depLat, depLon);&#xD;
                     departament.put(&quot;distanta_km&quot;, distanta);&#xD;
                 } catch (NumberFormatException e) {&#xD;
                     // Ignorăm în cazul în care coordonatele nu sunt valide&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return departament;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI-etUVdEfCS7cth2SLu0w" name="calculateDistance" specification="_TAkFIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI-etkVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI-et0VdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI-euEVdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI-euUVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI-eukVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>// Convertim din grade în radiani&#xD;
     lat1 = Math.toRadians(lat1);&#xD;
     lon1 = Math.toRadians(lon1);&#xD;
     lat2 = Math.toRadians(lat2);&#xD;
     lon2 = Math.toRadians(lon2);&#xD;
     &#xD;
     // Raza Pământului în kilometri&#xD;
     double R = 6371.0;&#xD;
     &#xD;
     // Formula Haversine&#xD;
     double dlon = lon2 - lon1;&#xD;
     double dlat = lat2 - lat1;&#xD;
     double a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);&#xD;
     double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));&#xD;
     double distance = R * c;&#xD;
     &#xD;
     // Returnăm distanța rotunjită la 2 zecimale&#xD;
     return Math.round(distance * 100.0) / 100.0;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_TAgawEVdEfCS7cth2SLu0w" name="GetDepartamenteServlet" method="_UI9QlkVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_TAhB0EVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_TAhB0UVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_TAhB0kVdEfCS7cth2SLu0w" type="_TAfMoEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TAho4EVdEfCS7cth2SLu0w" name="getAllDepartamente" visibility="private" method="_UI93o0VdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJajl0VdEfCS7cth2SLu0w">
            <body>Obține toate departamentele și locațiile lor din baza de date</body>
          </ownedComment>
          <ownedParameter xmi:id="_TAho4UVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TAho4kVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_TAkFIEVdEfCS7cth2SLu0w" name="calculateDistance" visibility="private" method="_UI-etUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJajmUVdEfCS7cth2SLu0w">
            <body>Calculează distanța între două puncte geografice folosind formula Haversine&#xD;
     * Returnează distanța în kilometri</body>
          </ownedComment>
          <ownedParameter xmi:id="_TAkFIUVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TAksMEVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TAksMUVdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TAksMkVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TAksM0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UFMx8EVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI93oEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJajlkVdEfCS7cth2SLu0w">
            <body>Răspunde la cereri GET pentru a returna lista de departamente sau un departament specific</body>
          </ownedComment>
          <ownedParameter xmi:id="_UFMx8UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFMx8kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFNZAEVdEfCS7cth2SLu0w" name="getDepartamentById" visibility="private" method="_UI-esEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_UJajmEVdEfCS7cth2SLu0w">
            <body>Obține un departament specific după ID</body>
          </ownedComment>
          <ownedParameter xmi:id="_UFNZAUVdEfCS7cth2SLu0w" name="depId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFOAEEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFOAEUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFOnIEVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TAo9oEVdEfCS7cth2SLu0w" name="LocalitatiProxyServlet">
        <generalization xmi:id="_UFP1Q0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHQnckVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHQnc0VdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHQndEVdEfCS7cth2SLu0w" name="CITIES_BY_COUNTY" visibility="private" isLeaf="true" isStatic="true" type="_UAkwoUVdEfCS7cth2SLu0w" isReadOnly="true" association="_UKbQMEVdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHROgUVdEfCS7cth2SLu0w" value="new HashMap&lt;>()"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI-eu0VdEfCS7cth2SLu0w" name="_initializer1" specification="_TAqLwEVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>CITIES_BY_COUNTY.put(&quot;AB&quot;, new String[]{&quot;Alba Iulia&quot;, &quot;Aiud&quot;, &quot;Blaj&quot;, &quot;Câmpeni&quot;, &quot;Cugir&quot;, &quot;Ocna Mureș&quot;, &quot;Sebeș&quot;, &quot;Teiuș&quot;, &quot;Zlatna&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;AR&quot;, new String[]{&quot;Arad&quot;, &quot;Chișineu-Criș&quot;, &quot;Curtici&quot;, &quot;Ineu&quot;, &quot;Lipova&quot;, &quot;Nădlac&quot;, &quot;Pâncota&quot;, &quot;Sebiș&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;AG&quot;, new String[]{&quot;Pitești&quot;, &quot;Câmpulung&quot;, &quot;Curtea de Argeș&quot;, &quot;Costești&quot;, &quot;Mioveni&quot;, &quot;Ștefănești&quot;, &quot;Topoloveni&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;BC&quot;, new String[]{&quot;Bacău&quot;, &quot;Buhuși&quot;, &quot;Comănești&quot;, &quot;Dărmănești&quot;, &quot;Moinești&quot;, &quot;Onești&quot;, &quot;Slănic-Moldova&quot;, &quot;Târgu Ocna&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;BH&quot;, new String[]{&quot;Oradea&quot;, &quot;Aleșd&quot;, &quot;Beiuș&quot;, &quot;Marghita&quot;, &quot;Nucet&quot;, &quot;Salonta&quot;, &quot;Săcueni&quot;, &quot;Ștei&quot;, &quot;Valea lui Mihai&quot;, &quot;Vașcău&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;BN&quot;, new String[]{&quot;Bistrița&quot;, &quot;Beclean&quot;, &quot;Năsăud&quot;, &quot;Sângeorz-Băi&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;BT&quot;, new String[]{&quot;Botoșani&quot;, &quot;Bucecea&quot;, &quot;Darabani&quot;, &quot;Dorohoi&quot;, &quot;Flămânzi&quot;, &quot;Săveni&quot;, &quot;Ștefănești&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;BR&quot;, new String[]{&quot;Brăila&quot;, &quot;Făurei&quot;, &quot;Ianca&quot;, &quot;Însurăței&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;BV&quot;, new String[]{&quot;Brașov&quot;, &quot;Codlea&quot;, &quot;Făgăraș&quot;, &quot;Ghimbav&quot;, &quot;Predeal&quot;, &quot;Râșnov&quot;, &quot;Rupea&quot;, &quot;Săcele&quot;, &quot;Victoria&quot;, &quot;Zărnești&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;B&quot;, new String[]{&quot;București&quot;, &quot;Sector 1&quot;, &quot;Sector 2&quot;, &quot;Sector 3&quot;, &quot;Sector 4&quot;, &quot;Sector 5&quot;, &quot;Sector 6&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;BZ&quot;, new String[]{&quot;Buzău&quot;, &quot;Nehoiu&quot;, &quot;Pătârlagele&quot;, &quot;Pogoanele&quot;, &quot;Râmnicu Sărat&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;CL&quot;, new String[]{&quot;Călărași&quot;, &quot;Budești&quot;, &quot;Fundulea&quot;, &quot;Lehliu Gară&quot;, &quot;Oltenița&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;CS&quot;, new String[]{&quot;Reșița&quot;, &quot;Anina&quot;, &quot;Băile Herculane&quot;, &quot;Bocșa&quot;, &quot;Caransebeș&quot;, &quot;Moldova Nouă&quot;, &quot;Oravița&quot;, &quot;Oțelu Roșu&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;CJ&quot;, new String[]{&quot;Cluj-Napoca&quot;, &quot;Câmpia Turzii&quot;, &quot;Dej&quot;, &quot;Gherla&quot;, &quot;Huedin&quot;, &quot;Turda&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;CT&quot;, new String[]{&quot;Constanța&quot;, &quot;Cernavodă&quot;, &quot;Eforie&quot;, &quot;Hârșova&quot;, &quot;Mangalia&quot;, &quot;Medgidia&quot;, &quot;Murfatlar&quot;, &quot;Năvodari&quot;, &quot;Negru Vodă&quot;, &quot;Ovidiu&quot;, &quot;Techirghiol&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;CV&quot;, new String[]{&quot;Sfântu Gheorghe&quot;, &quot;Baraolt&quot;, &quot;Covasna&quot;, &quot;Întorsura Buzăului&quot;, &quot;Târgu Secuiesc&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;DB&quot;, new String[]{&quot;Târgoviște&quot;, &quot;Fieni&quot;, &quot;Găești&quot;, &quot;Moreni&quot;, &quot;Pucioasa&quot;, &quot;Răcari&quot;, &quot;Titu&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;DJ&quot;, new String[]{&quot;Craiova&quot;, &quot;Băilești&quot;, &quot;Bechet&quot;, &quot;Calafat&quot;, &quot;Dăbuleni&quot;, &quot;Filiași&quot;, &quot;Segarcea&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;GL&quot;, new String[]{&quot;Galați&quot;, &quot;Berești&quot;, &quot;Târgu Bujor&quot;, &quot;Tecuci&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;GR&quot;, new String[]{&quot;Giurgiu&quot;, &quot;Bolintin-Vale&quot;, &quot;Mihăilești&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;GJ&quot;, new String[]{&quot;Târgu Jiu&quot;, &quot;Bumbești-Jiu&quot;, &quot;Motru&quot;, &quot;Novaci&quot;, &quot;Rovinari&quot;, &quot;Târgu Cărbunești&quot;, &quot;Tismana&quot;, &quot;Turceni&quot;, &quot;Țicleni&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;HR&quot;, new String[]{&quot;Miercurea Ciuc&quot;, &quot;Băile Tușnad&quot;, &quot;Bălan&quot;, &quot;Borsec&quot;, &quot;Cristuru Secuiesc&quot;, &quot;Gheorgheni&quot;, &quot;Odorheiu Secuiesc&quot;, &quot;Toplița&quot;, &quot;Vlăhița&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;HD&quot;, new String[]{&quot;Deva&quot;, &quot;Aninoasa&quot;, &quot;Brad&quot;, &quot;Călan&quot;, &quot;Geoagiu&quot;, &quot;Hațeg&quot;, &quot;Hunedoara&quot;, &quot;Lupeni&quot;, &quot;Orăștie&quot;, &quot;Petrila&quot;, &quot;Petroșani&quot;, &quot;Simeria&quot;, &quot;Uricani&quot;, &quot;Vulcan&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;IL&quot;, new String[]{&quot;Slobozia&quot;, &quot;Amara&quot;, &quot;Căzănești&quot;, &quot;Fetești&quot;, &quot;Fierbinți-Târg&quot;, &quot;Țăndărei&quot;, &quot;Urziceni&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;IS&quot;, new String[]{&quot;Iași&quot;, &quot;Hârlău&quot;, &quot;Pașcani&quot;, &quot;Podu Iloaiei&quot;, &quot;Târgu Frumos&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;IF&quot;, new String[]{&quot;Bragadiru&quot;, &quot;Buftea&quot;, &quot;Chitila&quot;, &quot;Măgurele&quot;, &quot;Otopeni&quot;, &quot;Pantelimon&quot;, &quot;Popești-Leordeni&quot;, &quot;Voluntari&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;MM&quot;, new String[]{&quot;Baia Mare&quot;, &quot;Baia Sprie&quot;, &quot;Borșa&quot;, &quot;Cavnic&quot;, &quot;Dragomirești&quot;, &quot;Săliștea de Sus&quot;, &quot;Seini&quot;, &quot;Sighetu Marmației&quot;, &quot;Șomcuta Mare&quot;, &quot;Tăuții-Măgherăuș&quot;, &quot;Târgu Lăpuș&quot;, &quot;Ulmeni&quot;, &quot;Vișeu de Sus&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;MH&quot;, new String[]{&quot;Drobeta-Turnu Severin&quot;, &quot;Baia de Aramă&quot;, &quot;Orșova&quot;, &quot;Strehaia&quot;, &quot;Vânju Mare&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;MS&quot;, new String[]{&quot;Târgu Mureș&quot;, &quot;Iernut&quot;, &quot;Luduș&quot;, &quot;Miercurea Nirajului&quot;, &quot;Reghin&quot;, &quot;Sângeorgiu de Pădure&quot;, &quot;Sărmașu&quot;, &quot;Sighișoara&quot;, &quot;Sovata&quot;, &quot;Târnăveni&quot;, &quot;Ungheni&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;NT&quot;, new String[]{&quot;Piatra Neamț&quot;, &quot;Bicaz&quot;, &quot;Roznov&quot;, &quot;Roman&quot;, &quot;Târgu Neamț&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;OT&quot;, new String[]{&quot;Slatina&quot;, &quot;Balș&quot;, &quot;Corabia&quot;, &quot;Drăgănești-Olt&quot;, &quot;Piatra-Olt&quot;, &quot;Potcoava&quot;, &quot;Scornicești&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;PH&quot;, new String[]{&quot;Ploiești&quot;, &quot;Azuga&quot;, &quot;Băicoi&quot;, &quot;Boldești-Scăeni&quot;, &quot;Breaza&quot;, &quot;Bușteni&quot;, &quot;Câmpina&quot;, &quot;Comarnic&quot;, &quot;Mizil&quot;, &quot;Plopeni&quot;, &quot;Sinaia&quot;, &quot;Slănic&quot;, &quot;Urlați&quot;, &quot;Vălenii de Munte&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;SJ&quot;, new String[]{&quot;Zalău&quot;, &quot;Cehu Silvaniei&quot;, &quot;Jibou&quot;, &quot;Șimleu Silvaniei&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;SM&quot;, new String[]{&quot;Satu Mare&quot;, &quot;Ardud&quot;, &quot;Carei&quot;, &quot;Livada&quot;, &quot;Negrești-Oaș&quot;, &quot;Tășnad&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;SB&quot;, new String[]{&quot;Sibiu&quot;, &quot;Agnita&quot;, &quot;Avrig&quot;, &quot;Cisnădie&quot;, &quot;Copșa Mică&quot;, &quot;Dumbrăveni&quot;, &quot;Miercurea Sibiului&quot;, &quot;Ocna Sibiului&quot;, &quot;Săliște&quot;, &quot;Tălmaciu&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;SV&quot;, new String[]{&quot;Suceava&quot;, &quot;Broșteni&quot;, &quot;Cajvana&quot;, &quot;Dolhasca&quot;, &quot;Fălticeni&quot;, &quot;Frasin&quot;, &quot;Gura Humorului&quot;, &quot;Liteni&quot;, &quot;Milișăuți&quot;, &quot;Rădăuți&quot;, &quot;Salcea&quot;, &quot;Siret&quot;, &quot;Solca&quot;, &quot;Vicovu de Sus&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;TR&quot;, new String[]{&quot;Alexandria&quot;, &quot;Roșiorii de Vede&quot;, &quot;Turnu Măgurele&quot;, &quot;Videle&quot;, &quot;Zimnicea&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;TM&quot;, new String[]{&quot;Timișoara&quot;, &quot;Buziaș&quot;, &quot;Ciacova&quot;, &quot;Deta&quot;, &quot;Făget&quot;, &quot;Gătaia&quot;, &quot;Jimbolia&quot;, &quot;Lugoj&quot;, &quot;Recaș&quot;, &quot;Sânnicolau Mare&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;TL&quot;, new String[]{&quot;Tulcea&quot;, &quot;Babadag&quot;, &quot;Isaccea&quot;, &quot;Măcin&quot;, &quot;Sulina&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;VL&quot;, new String[]{&quot;Râmnicu Vâlcea&quot;, &quot;Băbeni&quot;, &quot;Bălcești&quot;, &quot;Băile Govora&quot;, &quot;Băile Olănești&quot;, &quot;Berbești&quot;, &quot;Brezoi&quot;, &quot;Călimănești&quot;, &quot;Drăgășani&quot;, &quot;Horezu&quot;, &quot;Ocnele Mari&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;VS&quot;, new String[]{&quot;Vaslui&quot;, &quot;Bârlad&quot;, &quot;Huși&quot;, &quot;Murgeni&quot;, &quot;Negrești&quot;});&#xD;
     CITIES_BY_COUNTY.put(&quot;VN&quot;, new String[]{&quot;Focșani&quot;, &quot;Adjud&quot;, &quot;Mărășești&quot;, &quot;Odobești&quot;, &quot;Panciu&quot;});&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI_FwEVdEfCS7cth2SLu0w" name="doGet" specification="_UFP1QEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI_FwUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI_FwkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json;charset=UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     String county = request.getParameter(&quot;judet&quot;);&#xD;
     &#xD;
     if (county == null || county.trim().isEmpty()) {&#xD;
         out.print(&quot;[]&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Create a JSON array with cities for the selected county&#xD;
     JSONArray citiesArray = new JSONArray();&#xD;
     &#xD;
     // Get cities for the requested county&#xD;
     String[] cities = CITIES_BY_COUNTY.get(county.toUpperCase());&#xD;
     &#xD;
     if (cities != null) {&#xD;
         for (String city : cities) {&#xD;
             JSONObject cityObj = new JSONObject();&#xD;
             cityObj.put(&quot;nume&quot;, city);&#xD;
             citiesArray.put(cityObj);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     // Return the JSON array&#xD;
     out.print(citiesArray.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_TAqLwEVdEfCS7cth2SLu0w" name="_initializer1" isStatic="true" method="_UI-eu0VdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_TAqLwUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_TAqLwkVdEfCS7cth2SLu0w" key="init"/>
          </eAnnotations>
        </ownedOperation>
        <ownedOperation xmi:id="_UFP1QEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI_FwEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFP1QUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFP1QkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TAsoAEVdEfCS7cth2SLu0w" name="LeaveDataServlet">
        <generalization xmi:id="_UFSRgkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHR1kEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHR1kUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI_Fw0VdEfCS7cth2SLu0w" name="doPost" specification="_UFQcUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI_FxEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI_FxUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);
     PrintWriter out = response.getWriter();
     
     HttpSession session = request.getSession(false);
     if (session == null || session.getAttribute(&quot;currentUser&quot;) == null) {
         response.sendError(HttpServletResponse.SC_UNAUTHORIZED, &quot;User not logged in&quot;);
         return;
     }
     
     MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);
     String username = currentUser.getUsername();
     
     // Obținem parametrii din request
     String statusParam = request.getParameter(&quot;status&quot;);
     String departmentParam = request.getParameter(&quot;department&quot;);
     
     System.out.println(&quot;Parameters - Status: &quot; + statusParam + &quot;, Department: &quot; + departmentParam);
     
     // Valori implicite
     int status = 3; // 3 = Oricare
     int departmentId = 0; // 0 = Toate departamentele
     
     try {
         if (statusParam != null &amp;&amp; !statusParam.isEmpty()) {
             status = Integer.parseInt(statusParam);
         }
         if (departmentParam != null &amp;&amp; !departmentParam.isEmpty()) {
             departmentId = Integer.parseInt(departmentParam);
         }
     } catch (NumberFormatException e) {
         System.out.println(&quot;Error parsing parameters: &quot; + e.getMessage());
     }
     
     System.out.println(&quot;Using filters - Status: &quot; + status + &quot;, Department: &quot; + departmentId);
     
     try {
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
         
         try (Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {
             
             int userId = 0;
             int userDepartmentId = 0;
             int ierarhie = 0;
             
             // Obținem informațiile despre utilizator
             String userQuery = &quot;SELECT u.id, u.id_dep, t.ierarhie &quot; +
                                &quot;FROM useri u &quot; +
                                &quot;JOIN tipuri t ON u.tip = t.tip &quot; +
                                &quot;WHERE u.username = ?&quot;;
             
             try (PreparedStatement userStmt = conn.prepareStatement(userQuery)) {
                 userStmt.setString(1, username);
                 try (ResultSet userRs = userStmt.executeQuery()) {
                     if (userRs.next()) {
                         userId = userRs.getInt(&quot;id&quot;);
                         userDepartmentId = userRs.getInt(&quot;id_dep&quot;);
                         ierarhie = userRs.getInt(&quot;ierarhie&quot;);
                         System.out.println(&quot;User info - ID: &quot; + userId + &quot;, Department: &quot; + userDepartmentId + &quot;, Ierarhie: &quot; + ierarhie);
                     } else {
                         response.sendError(HttpServletResponse.SC_NOT_FOUND, &quot;User not found&quot;);
                         return;
                     }
                 }
             }
             
             // Determinăm rolul utilizatorului
             boolean isDirector = (ierarhie &lt; 3);
             boolean isSef = (ierarhie >= 4 &amp;&amp; ierarhie &lt;= 5);
             System.out.println(&quot;User roles - Director: &quot; + isDirector + &quot;, Sef: &quot; + isSef);
             
             // Construim partea comună a query-ului
             StringBuilder queryBuilder = new StringBuilder();
             queryBuilder.append(&quot;SELECT c.id, c.id_ang, u.nume, u.prenume, d.nume_dep, &quot;)
                        .append(&quot;t.denumire AS functie, c.start_c, c.end_c, c.motiv, c.locatie, &quot;)
                        .append(&quot;s.nume_status, u.culoare, tc.motiv AS tip_concediu, c.status &quot;)
                        .append(&quot;FROM concedii c &quot;)
                        .append(&quot;JOIN useri u ON c.id_ang = u.id &quot;)
                        .append(&quot;JOIN departament d ON u.id_dep = d.id_dep &quot;)
                        .append(&quot;JOIN tipuri t ON u.tip = t.tip &quot;)
                        .append(&quot;JOIN statusuri s ON c.status = s.status &quot;)
                        .append(&quot;JOIN tipcon tc ON c.tip = tc.tip &quot;);
             
             // Adăugăm condițiile WHERE în funcție de rol și filtre
             boolean addedWhereClause = false;
             PreparedStatement leaveStmt;
             
             // 1. Filtrare după rol (director, șef, utilizator normal)
             if (!isDirector &amp;&amp; !isSef) {
                 // Utilizator normal/începător - vede doar concediile proprii
                 queryBuilder.append(&quot;WHERE c.id_ang = ? &quot;);
                 addedWhereClause = true;
             } else if (isSef) {
                 // Șef - vede concediile din departamentul său
                 queryBuilder.append(&quot;WHERE u.id_dep = ? &quot;);
                 addedWhereClause = true;
             } else if (isDirector &amp;&amp; departmentId > 0) {
                 // Director cu departament specificat
                 queryBuilder.append(&quot;WHERE u.id_dep = ? &quot;);
                 addedWhereClause = true;
             }
             
             // 2. Filtrare după status (dacă este selectat un status specific)
             if (status != 3) {
                 if (addedWhereClause) {
                     queryBuilder.append(&quot;AND c.status = ? &quot;);
                 } else {
                     queryBuilder.append(&quot;WHERE c.status = ? &quot;);
                     addedWhereClause = true;
                 }
             }
             
             // Query-ul final
             String leaveQuery = queryBuilder.toString();
             System.out.println(&quot;Final query: &quot; + leaveQuery);
             
             // Pregătim statement-ul cu parametrii necesari
             leaveStmt = conn.prepareStatement(leaveQuery);
             
             int paramIndex = 1;
             
             // Adăugăm parametrii în funcție de condițiile din WHERE
             if (!isDirector &amp;&amp; !isSef) {
                 leaveStmt.setInt(paramIndex++, userId);
             } else if (isSef) {
                 leaveStmt.setInt(paramIndex++, userDepartmentId);
             } else if (isDirector &amp;&amp; departmentId > 0) {
                 leaveStmt.setInt(paramIndex++, departmentId);
             }
             
             if (status != 3) {
                 leaveStmt.setInt(paramIndex++, status);
             }
             
             // Executăm query-ul și construim răspunsul JSON
             JSONArray eventsArray = new JSONArray();
             try (ResultSet rs = leaveStmt.executeQuery()) {
                 int count = 0;
                 while (rs.next()) {
                     count++;
                     JSONObject event = new JSONObject();
                     
                     String statusName = rs.getString(&quot;nume_status&quot;);
                     String title = rs.getString(&quot;nume&quot;) + &quot; &quot; + rs.getString(&quot;prenume&quot;) + &quot; - &quot; + rs.getString(&quot;tip_concediu&quot;);
                     String department = rs.getString(&quot;nume_dep&quot;);
                     String color = rs.getString(&quot;culoare&quot;);
                     int eventStatus = rs.getInt(&quot;status&quot;);
                     
                     // Adăugăm detalii suplimentare în titlu în funcție de rol
                     if ((isDirector || isSef) &amp;&amp; rs.getInt(&quot;id_ang&quot;) != userId) {
                         title += &quot; (&quot; + department + &quot;)&quot;;
                     }
                     
                     event.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));
                     event.put(&quot;title&quot;, title);
                     event.put(&quot;start&quot;, rs.getDate(&quot;start_c&quot;).toString());
                     
                     // Asigură-te că end_c nu este null
                     java.sql.Date endDate = rs.getDate(&quot;end_c&quot;);
                     if (endDate != null) {
                         event.put(&quot;end&quot;, endDate.toString());
                     } else {
                         event.put(&quot;end&quot;, rs.getDate(&quot;start_c&quot;).toString());
                     }
                     
                     event.put(&quot;description&quot;, rs.getString(&quot;motiv&quot;));
                     event.put(&quot;location&quot;, rs.getString(&quot;locatie&quot;));
                     event.put(&quot;status&quot;, statusName);
                     event.put(&quot;statusCode&quot;, eventStatus);
                     
                     // Personalizăm culoarea evenimentului în funcție de status
                     switch (eventStatus) {
                         case -2: // Dezaprobat director
                             event.put(&quot;textColor&quot;, &quot;#FFFFFF&quot;);
                             event.put(&quot;backgroundColor&quot;, &quot;#DC3545&quot;);
                             event.put(&quot;borderColor&quot;, &quot;#DC3545&quot;);
                             break;
                         case -1: // Dezaprobat șef
                             event.put(&quot;textColor&quot;, &quot;#FFFFFF&quot;);
                             event.put(&quot;backgroundColor&quot;, &quot;#FD7E14&quot;);
                             event.put(&quot;borderColor&quot;, &quot;#FD7E14&quot;);
                             break;
                         case 0: // Neaprobat
                             event.put(&quot;textColor&quot;, &quot;#212529&quot;);
                             event.put(&quot;backgroundColor&quot;, &quot;#FFC107&quot;);
                             event.put(&quot;borderColor&quot;, &quot;#FFC107&quot;);
                             event.put(&quot;className&quot;, &quot;tentative-event&quot;);
                             break;
                         case 1: // Aprobat șef
                             event.put(&quot;textColor&quot;, &quot;#FFFFFF&quot;);
                             event.put(&quot;backgroundColor&quot;, &quot;#0DCAF0&quot;);
                             event.put(&quot;borderColor&quot;, &quot;#0DCAF0&quot;);
                             break;
                         case 2: // Aprobat director
                             event.put(&quot;textColor&quot;, &quot;#FFFFFF&quot;);
                             event.put(&quot;backgroundColor&quot;, &quot;#198754&quot;);
                             event.put(&quot;borderColor&quot;, &quot;#198754&quot;);
                             break;
                         default:
                             // Culoare implicită (culoarea utilizatorului)
                             event.put(&quot;backgroundColor&quot;, color);
                             event.put(&quot;borderColor&quot;, color);
                             break;
                     }
                     
                     eventsArray.put(event);
                 }
                 System.out.println(&quot;Found &quot; + count + &quot; leave records&quot;);
             }
             
             out.print(eventsArray.toString());
         }
     } catch (Exception e) {
         System.out.println(&quot;Error in servlet: &quot; + e.getMessage());
         e.printStackTrace();
         
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
         JSONObject error = new JSONObject();
         error.put(&quot;error&quot;, e.getMessage());
         out.print(error.toString());
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI_FxkVdEfCS7cth2SLu0w" name="doGet" specification="_UFRqckVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI_Fx0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI_FyEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doPost(request, response);
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UFQcUEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UI_Fw0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFRDYEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFRDYUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFRqckVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI_FxkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFSRgEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFSRgUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TAwSYEVdEfCS7cth2SLu0w" name="GetUserConcediiServlet">
        <ownedComment xmi:id="_UJajmkVdEfCS7cth2SLu0w">
          <body>Servlet pentru obținerea concediilor utilizatorului și a locațiilor acestora</body>
        </ownedComment>
        <generalization xmi:id="_UFUGsUVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHR1kkVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHR1k0VdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHR1lEVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHScoEVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHScoUVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHScokVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHSco0VdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHScpEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI_FyUVdEfCS7cth2SLu0w" name="GetUserConcediiServlet" specification="_TAyHkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI_FykVdEfCS7cth2SLu0w" type="_TAwSYEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI_s0EVdEfCS7cth2SLu0w" name="doGet" specification="_UFS4kEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI_s0UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UI_s0kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Obținem ID-ul utilizatorului din parametrii cererii&#xD;
     String userIdStr = request.getParameter(&quot;userId&quot;);&#xD;
     if (userIdStr == null || userIdStr.isEmpty()) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator lipsă\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     int userId;&#xD;
     try {&#xD;
         userId = Integer.parseInt(userIdStr);&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator invalid\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Verificăm dacă s-a cerut un concediu specific&#xD;
     String concediuIdStr = request.getParameter(&quot;concediuId&quot;);&#xD;
     &#xD;
     try {&#xD;
         if (concediuIdStr != null) {&#xD;
             int concediuId = Integer.parseInt(concediuIdStr);&#xD;
             &#xD;
             // Obținem concediul specific&#xD;
             Map&lt;String, Object> concediu = getConcediuById(userId, concediuId);&#xD;
             &#xD;
             if (concediu.isEmpty()) {&#xD;
                 response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
                 out.print(&quot;{\&quot;error\&quot;: \&quot;Concediul specificat nu a fost găsit sau nu are o locație definită.\&quot;}&quot;);&#xD;
                 return;&#xD;
             }&#xD;
             &#xD;
             // Obținem locația utilizatorului&#xD;
             Map&lt;String, Object> userLocation = getUserLocation(userId);&#xD;
             &#xD;
             if (userLocation.isEmpty()) {&#xD;
                 response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
                 out.print(&quot;{\&quot;error\&quot;: \&quot;Locația utilizatorului nu a fost găsită.\&quot;}&quot;);&#xD;
                 return;&#xD;
             }&#xD;
             &#xD;
             // Construim rezultatul&#xD;
             Map&lt;String, Object> result = new HashMap&lt;>();&#xD;
             result.put(&quot;user_info&quot;, getUserInfo(userId));&#xD;
             result.put(&quot;user_location&quot;, userLocation);&#xD;
             result.put(&quot;concediu&quot;, concediu);&#xD;
             &#xD;
             // Convertim rezultatul în JSON și îl trimitem ca răspuns&#xD;
             ObjectMapper objectMapper = new ObjectMapper();&#xD;
             out.print(objectMapper.writeValueAsString(result));&#xD;
         } else {&#xD;
             // Obținem toate concediile utilizatorului&#xD;
             List&lt;Map&lt;String, Object>> concedii = getUserConcedii(userId);&#xD;
             &#xD;
             if (concedii.isEmpty()) {&#xD;
                 response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
                 out.print(&quot;{\&quot;error\&quot;: \&quot;Nu s-au găsit concedii pentru utilizatorul specificat.\&quot;}&quot;);&#xD;
                 return;&#xD;
             }&#xD;
             &#xD;
             // Obținem locația utilizatorului&#xD;
             Map&lt;String, Object> userLocation = getUserLocation(userId);&#xD;
             &#xD;
             if (userLocation.isEmpty()) {&#xD;
                 response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
                 out.print(&quot;{\&quot;error\&quot;: \&quot;Locația utilizatorului nu a fost găsită.\&quot;}&quot;);&#xD;
                 return;&#xD;
             }&#xD;
             &#xD;
             // Construim rezultatul&#xD;
             Map&lt;String, Object> result = new HashMap&lt;>();&#xD;
             result.put(&quot;user_info&quot;, getUserInfo(userId));&#xD;
             result.put(&quot;user_location&quot;, userLocation);&#xD;
             result.put(&quot;concedii&quot;, concedii);&#xD;
             &#xD;
             // Convertim rezultatul în JSON și îl trimitem ca răspuns&#xD;
             ObjectMapper objectMapper = new ObjectMapper();&#xD;
             out.print(objectMapper.writeValueAsString(result));&#xD;
         }&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID concediu invalid.\&quot;}&quot;);&#xD;
         return;&#xD;
     } catch (Exception e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI_s00VdEfCS7cth2SLu0w" name="getUserInfo" specification="_TAzVsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI_s1EVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI_s1UVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Object> userInfo = new HashMap&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
         String sql = &quot;SELECT u.id, u.nume, u.prenume, u.id_dep, d.nume_dep FROM useri u &quot; +&#xD;
                      &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                      &quot;WHERE u.id = ?&quot;;&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     userInfo.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                     userInfo.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
                     userInfo.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
                     userInfo.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
                     userInfo.put(&quot;nume_dep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return userInfo;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI_s1kVdEfCS7cth2SLu0w" name="getUserLocation" specification="_TA1x8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI_s10VdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI_s2EVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Object> userLocation = new HashMap&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
         String sql = &quot;SELECT id_locatie, strada, longitudine, latitudine, cod, oras, judet, tara &quot; +&#xD;
                      &quot;FROM locatii_useri &quot; +&#xD;
                      &quot;WHERE id_user = ? AND latitudine IS NOT NULL AND longitudine IS NOT NULL&quot;;&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     userLocation.put(&quot;id_locatie&quot;, rs.getInt(&quot;id_locatie&quot;));&#xD;
                     userLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     userLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                     userLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                     userLocation.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                     userLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     userLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     userLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă&#xD;
                     String adresaCompleta = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;tara&quot;);&#xD;
                     userLocation.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return userLocation;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UI_s2UVdEfCS7cth2SLu0w" name="getUserConcedii" specification="_TA4OMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UI_s2kVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UI_s20VdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UI_s3EVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;Map&lt;String, Object>> concedii = new ArrayList&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
         String sql = &quot;SELECT c.id, c.start_c, c.end_c, c.motiv, c.locatie, c.status, c.tip, c.durata, &quot; +&#xD;
                      &quot;s.nume_status, tc.motiv as tip_concediu, &quot; +&#xD;
                      &quot;lc.strada, lc.longitudine, lc.latitudine, lc.cod, lc.oras, lc.judet, lc.tara &quot; +&#xD;
                      &quot;FROM concedii c &quot; +&#xD;
                      &quot;JOIN statusuri s ON c.status = s.status &quot; +&#xD;
                      &quot;JOIN tipcon tc ON c.tip = tc.tip &quot; +&#xD;
                      &quot;LEFT JOIN locatii_concedii lc ON c.id = lc.id_concediu &quot; +&#xD;
                      &quot;WHERE c.id_ang = ? &quot; +&#xD;
                      &quot;AND lc.latitudine IS NOT NULL AND lc.longitudine IS NOT NULL &quot; +&#xD;
                      &quot;ORDER BY c.start_c DESC&quot;;&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 while (rs.next()) {&#xD;
                     Map&lt;String, Object> concediu = new HashMap&lt;>();&#xD;
                     concediu.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                     concediu.put(&quot;start_c&quot;, rs.getString(&quot;start_c&quot;));&#xD;
                     concediu.put(&quot;end_c&quot;, rs.getString(&quot;end_c&quot;));&#xD;
                     concediu.put(&quot;motiv&quot;, rs.getString(&quot;motiv&quot;));&#xD;
                     concediu.put(&quot;locatie&quot;, rs.getString(&quot;locatie&quot;));&#xD;
                     concediu.put(&quot;status&quot;, rs.getInt(&quot;status&quot;));&#xD;
                     concediu.put(&quot;status_text&quot;, rs.getString(&quot;nume_status&quot;));&#xD;
                     concediu.put(&quot;tip&quot;, rs.getInt(&quot;tip&quot;));&#xD;
                     concediu.put(&quot;tip_text&quot;, rs.getString(&quot;tip_concediu&quot;));&#xD;
                     concediu.put(&quot;durata&quot;, rs.getInt(&quot;durata&quot;));&#xD;
                     &#xD;
                     // Adăugăm locația concediului&#xD;
                     concediu.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     concediu.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                     concediu.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                     concediu.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                     concediu.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     concediu.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     concediu.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă&#xD;
                     String adresaCompleta = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;tara&quot;);&#xD;
                     concediu.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
                     &#xD;
                     concedii.add(concediu);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // Calculăm distanța de la locația utilizatorului la fiecare concediu&#xD;
         Map&lt;String, Object> userLocation = getUserLocation(userId);&#xD;
         if (!userLocation.isEmpty() &amp;&amp; !concedii.isEmpty()) {&#xD;
             double userLat = (double) userLocation.get(&quot;latitudine&quot;);&#xD;
             double userLon = (double) userLocation.get(&quot;longitudine&quot;);&#xD;
             &#xD;
             for (Map&lt;String, Object> concediu : concedii) {&#xD;
                 double concediuLat = (double) concediu.get(&quot;latitudine&quot;);&#xD;
                 double concediuLon = (double) concediu.get(&quot;longitudine&quot;);&#xD;
                 &#xD;
                 double distanta = calculateDistance(userLat, userLon, concediuLat, concediuLon);&#xD;
                 concediu.put(&quot;distanta_km&quot;, distanta);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return concedii;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJAT4EVdEfCS7cth2SLu0w" name="getConcediuById" specification="_TA6DYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJAT4UVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJAT4kVdEfCS7cth2SLu0w" name="concediuId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJAT40VdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Object> concediu = new HashMap&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
         String sql = &quot;SELECT c.id, c.start_c, c.end_c, c.motiv, c.locatie, c.status, c.tip, c.durata, &quot; +&#xD;
                      &quot;s.nume_status, tc.motiv as tip_concediu, &quot; +&#xD;
                      &quot;lc.strada, lc.longitudine, lc.latitudine, lc.cod, lc.oras, lc.judet, lc.tara &quot; +&#xD;
                      &quot;FROM concedii c &quot; +&#xD;
                      &quot;JOIN statusuri s ON c.status = s.status &quot; +&#xD;
                      &quot;JOIN tipcon tc ON c.tip = tc.tip &quot; +&#xD;
                      &quot;LEFT JOIN locatii_concedii lc ON c.id = lc.id_concediu &quot; +&#xD;
                      &quot;WHERE c.id_ang = ? AND c.id = ? &quot; +&#xD;
                      &quot;AND lc.latitudine IS NOT NULL AND lc.longitudine IS NOT NULL&quot;;&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             stmt.setInt(2, concediuId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     concediu.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                     concediu.put(&quot;start_c&quot;, rs.getString(&quot;start_c&quot;));&#xD;
                     concediu.put(&quot;end_c&quot;, rs.getString(&quot;end_c&quot;));&#xD;
                     concediu.put(&quot;motiv&quot;, rs.getString(&quot;motiv&quot;));&#xD;
                     concediu.put(&quot;locatie&quot;, rs.getString(&quot;locatie&quot;));&#xD;
                     concediu.put(&quot;status&quot;, rs.getInt(&quot;status&quot;));&#xD;
                     concediu.put(&quot;status_text&quot;, rs.getString(&quot;nume_status&quot;));&#xD;
                     concediu.put(&quot;tip&quot;, rs.getInt(&quot;tip&quot;));&#xD;
                     concediu.put(&quot;tip_text&quot;, rs.getString(&quot;tip_concediu&quot;));&#xD;
                     concediu.put(&quot;durata&quot;, rs.getInt(&quot;durata&quot;));&#xD;
                     &#xD;
                     // Adăugăm locația concediului&#xD;
                     concediu.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     concediu.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                     concediu.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                     concediu.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                     concediu.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     concediu.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     concediu.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă&#xD;
                     String adresaCompleta = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;tara&quot;);&#xD;
                     concediu.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
                     &#xD;
                     // Calculăm distanța de la locația utilizatorului&#xD;
                     Map&lt;String, Object> userLocation = getUserLocation(userId);&#xD;
                     if (!userLocation.isEmpty()) {&#xD;
                         double userLat = (double) userLocation.get(&quot;latitudine&quot;);&#xD;
                         double userLon = (double) userLocation.get(&quot;longitudine&quot;);&#xD;
                         double concediuLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                         double concediuLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                         &#xD;
                         double distanta = calculateDistance(userLat, userLon, concediuLat, concediuLon);&#xD;
                         concediu.put(&quot;distanta_km&quot;, distanta);&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return concediu;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJAT5EVdEfCS7cth2SLu0w" name="calculateDistance" specification="_TA7RgEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJAT5UVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJAT5kVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJAT50VdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJAT6EVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJAT6UVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>// Convertim din grade în radiani&#xD;
     lat1 = Math.toRadians(lat1);&#xD;
     lon1 = Math.toRadians(lon1);&#xD;
     lat2 = Math.toRadians(lat2);&#xD;
     lon2 = Math.toRadians(lon2);&#xD;
     &#xD;
     // Raza Pământului în kilometri&#xD;
     double R = 6371.0;&#xD;
     &#xD;
     // Formula Haversine&#xD;
     double dlon = lon2 - lon1;&#xD;
     double dlat = lat2 - lat1;&#xD;
     double a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);&#xD;
     double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));&#xD;
     double distance = R * c;&#xD;
     &#xD;
     // Returnăm distanța rotunjită la 2 zecimale&#xD;
     return Math.round(distance * 100.0) / 100.0;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_TAyHkEVdEfCS7cth2SLu0w" name="GetUserConcediiServlet" method="_UI_FyUVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_TAyHkUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_TAyHkkVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_TAyuoEVdEfCS7cth2SLu0w" type="_TAwSYEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TAzVsEVdEfCS7cth2SLu0w" name="getUserInfo" visibility="private" method="_UI_s00VdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TAzVsUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFTfoEVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TA1x8EVdEfCS7cth2SLu0w" name="getUserLocation" visibility="private" method="_UI_s1kVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TA2ZAEVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFTfoUVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TA4OMEVdEfCS7cth2SLu0w" name="getUserConcedii" visibility="private" method="_UI_s2UVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TA41QEVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TA41QUVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TA41QkVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_TA6DYEVdEfCS7cth2SLu0w" name="getConcediuById" visibility="private" method="_UJAT4EVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TA6DYUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TA6DYkVdEfCS7cth2SLu0w" name="concediuId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFUGsEVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TA7RgEVdEfCS7cth2SLu0w" name="calculateDistance" visibility="private" method="_UJAT5EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TA7RgUVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TA74kEVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TA74kUVdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TA74kkVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TA8foEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UFS4kEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UI_s0EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFS4kUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFS4kkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TA_i8EVdEfCS7cth2SLu0w" name="GetUserToConcediuServlet">
        <ownedComment xmi:id="_UJbKoEVdEfCS7cth2SLu0w">
          <body>Servlet pentru obținerea locației utilizatorului și a locației concediului său</body>
        </ownedComment>
        <generalization xmi:id="_UFV74UVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHTDsEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHTDsUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHTDskVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHTDs0VdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHTqwEVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHTqwUVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHTqwkVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHTqw0VdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJAT6kVdEfCS7cth2SLu0w" name="GetUserToConcediuServlet" specification="_TBAxEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJAT60VdEfCS7cth2SLu0w" type="_TA_i8EVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJAT7EVdEfCS7cth2SLu0w" name="doGet" specification="_UFVU0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJAT7UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJAT7kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Obținem ID-ul utilizatorului și ID-ul concediului din parametrii cererii&#xD;
     String userIdStr = request.getParameter(&quot;userId&quot;);&#xD;
     String concediuIdStr = request.getParameter(&quot;concediuId&quot;);&#xD;
     &#xD;
     if (userIdStr == null || userIdStr.isEmpty() || concediuIdStr == null || concediuIdStr.isEmpty()) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator sau ID concediu lipsă\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     int userId, concediuId;&#xD;
     try {&#xD;
         userId = Integer.parseInt(userIdStr);&#xD;
         concediuId = Integer.parseInt(concediuIdStr);&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator sau ID concediu invalid\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         // Obținem locațiile utilizatorului și concediului&#xD;
         Map&lt;String, Object> result = getUserAndConcediuLocations(userId, concediuId);&#xD;
         &#xD;
         // Verificăm dacă am găsit locațiile&#xD;
         if (result.isEmpty() || !result.containsKey(&quot;user_location&quot;) || !result.containsKey(&quot;concediu_location&quot;)) {&#xD;
             response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
             out.print(&quot;{\&quot;error\&quot;: \&quot;Nu s-au găsit locațiile necesare pentru rută.\&quot;}&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Convertim rezultatul în JSON și îl trimitem ca răspuns&#xD;
         ObjectMapper objectMapper = new ObjectMapper();&#xD;
         out.print(objectMapper.writeValueAsString(result));&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJA68EVdEfCS7cth2SLu0w" name="getUserAndConcediuLocations" specification="_TBB_MEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJA68UVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJA68kVdEfCS7cth2SLu0w" name="concediuId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJA680VdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Object> result = new HashMap&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
         // Obținem informațiile utilizatorului&#xD;
         String userSql = &quot;SELECT u.id, u.nume, u.prenume, u.id_dep, d.nume_dep FROM useri u &quot; +&#xD;
                          &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                          &quot;WHERE u.id = ?&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> userInfo = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(userSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     userInfo.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                     userInfo.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
                     userInfo.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
                     userInfo.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
                     userInfo.put(&quot;nume_dep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
                 } else {&#xD;
                     return result; // Utilizator negăsit&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;user_info&quot;, userInfo);&#xD;
         &#xD;
         // Obținem locația utilizatorului (adresa de acasă)&#xD;
         String userLocationSql = &quot;SELECT id_locatie, strada, longitudine, latitudine, cod, oras, judet, tara &quot; +&#xD;
                                 &quot;FROM locatii_useri &quot; +&#xD;
                                 &quot;WHERE id_user = ? AND latitudine IS NOT NULL AND longitudine IS NOT NULL&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> userLocation = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(userLocationSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     userLocation.put(&quot;id_locatie&quot;, rs.getInt(&quot;id_locatie&quot;));&#xD;
                     userLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     userLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                     userLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                     userLocation.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                     userLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     userLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     userLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă&#xD;
                     String adresaCompleta = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;tara&quot;);&#xD;
                     userLocation.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
                 } else {&#xD;
                     return result; // Locație utilizator negăsită&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;user_location&quot;, userLocation);&#xD;
         &#xD;
         // Obținem informațiile despre concediu&#xD;
         String concediuSql = &quot;SELECT c.id, c.start_c, c.end_c, c.motiv, c.locatie, tc.motiv as tip_concediu, &quot; +&#xD;
                             &quot;DATE_FORMAT(c.start_c, '%d.%m.%Y') as start_formatat, &quot; +&#xD;
                             &quot;DATE_FORMAT(c.end_c, '%d.%m.%Y') as end_formatat &quot; +&#xD;
                             &quot;FROM concedii c &quot; +&#xD;
                             &quot;JOIN tipcon tc ON c.tip = tc.tip &quot; +&#xD;
                             &quot;WHERE c.id = ?&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> concediuInfo = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(concediuSql)) {&#xD;
             stmt.setInt(1, concediuId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     concediuInfo.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                     concediuInfo.put(&quot;start_c&quot;, rs.getDate(&quot;start_c&quot;).toString());&#xD;
                     concediuInfo.put(&quot;end_c&quot;, rs.getDate(&quot;end_c&quot;).toString());&#xD;
                     concediuInfo.put(&quot;start_formatat&quot;, rs.getString(&quot;start_formatat&quot;));&#xD;
                     concediuInfo.put(&quot;end_formatat&quot;, rs.getString(&quot;end_formatat&quot;));&#xD;
                     concediuInfo.put(&quot;motiv&quot;, rs.getString(&quot;motiv&quot;));&#xD;
                     concediuInfo.put(&quot;locatie&quot;, rs.getString(&quot;locatie&quot;));&#xD;
                     concediuInfo.put(&quot;tip_concediu&quot;, rs.getString(&quot;tip_concediu&quot;));&#xD;
                 } else {&#xD;
                     return result; // Concediu negăsit&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;concediu_info&quot;, concediuInfo);&#xD;
         &#xD;
         // Obținem locația concediului&#xD;
         String concediuLocationSql = &quot;SELECT lc.id_locatie, lc.strada, lc.longitudine, lc.latitudine, lc.cod, lc.oras, lc.judet, lc.tara &quot; +&#xD;
                                    &quot;FROM locatii_concedii lc &quot; +&#xD;
                                    &quot;WHERE lc.id_concediu = ? AND lc.latitudine IS NOT NULL AND lc.longitudine IS NOT NULL&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> concediuLocation = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(concediuLocationSql)) {&#xD;
             stmt.setInt(1, concediuId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     concediuLocation.put(&quot;id_locatie&quot;, rs.getInt(&quot;id_locatie&quot;));&#xD;
                     concediuLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     concediuLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                     concediuLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                     concediuLocation.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                     concediuLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     concediuLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     concediuLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă&#xD;
                     String adresaCompleta = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;tara&quot;);&#xD;
                     concediuLocation.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
                     &#xD;
                     // Calculăm distanța dintre locația utilizatorului și concediu&#xD;
                     double userLat = (double) userLocation.get(&quot;latitudine&quot;);&#xD;
                     double userLon = (double) userLocation.get(&quot;longitudine&quot;);&#xD;
                     double concediuLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                     double concediuLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                     &#xD;
                     double distanta = calculateDistance(userLat, userLon, concediuLat, concediuLon);&#xD;
                     concediuLocation.put(&quot;distanta_km&quot;, distanta);&#xD;
                 } else {&#xD;
                     return result; // Locație concediu negăsită&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;concediu_location&quot;, concediuLocation);&#xD;
     }&#xD;
     &#xD;
     return result;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJA69EVdEfCS7cth2SLu0w" name="calculateDistance" specification="_TBDNUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJA69UVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJA69kVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJA690VdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJA6-EVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJA6-UVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>// Convertim din grade în radiani&#xD;
     lat1 = Math.toRadians(lat1);&#xD;
     lon1 = Math.toRadians(lon1);&#xD;
     lat2 = Math.toRadians(lat2);&#xD;
     lon2 = Math.toRadians(lon2);&#xD;
     &#xD;
     // Raza Pământului în kilometri&#xD;
     double R = 6371.0;&#xD;
     &#xD;
     // Formula Haversine&#xD;
     double dlon = lon2 - lon1;&#xD;
     double dlat = lat2 - lat1;&#xD;
     double a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);&#xD;
     double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));&#xD;
     double distance = R * c;&#xD;
     &#xD;
     // Returnăm distanța rotunjită la 2 zecimale&#xD;
     return Math.round(distance * 100.0) / 100.0;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_TBAxEEVdEfCS7cth2SLu0w" name="GetUserToConcediuServlet" method="_UJAT6kVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_TBBYIEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_TBBYIUVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_TBBYIkVdEfCS7cth2SLu0w" type="_TA_i8EVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TBB_MEVdEfCS7cth2SLu0w" name="getUserAndConcediuLocations" visibility="private" method="_UJA68EVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TBB_MUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBB_MkVdEfCS7cth2SLu0w" name="concediuId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFV74EVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TBDNUEVdEfCS7cth2SLu0w" name="calculateDistance" visibility="private" method="_UJA69EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TBDNUUVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBD0YEVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBD0YUVdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBD0YkVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBD0Y0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UFVU0EVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UJAT7EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFVU0UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFVU0kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TBGQoEVdEfCS7cth2SLu0w" name="GetUserToDepartmentAnyServlet">
        <ownedComment xmi:id="_UJbKoUVdEfCS7cth2SLu0w">
          <body>Servlet pentru obținerea locației utilizatorului și a departamentului selectat</body>
        </ownedComment>
        <generalization xmi:id="_UFXxEUVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHTqxEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHUR0EVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHUR0UVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHUR0kVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHUR00VdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHUR1EVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHU44EVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHU44UVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJA6-kVdEfCS7cth2SLu0w" name="GetUserToDepartmentAnyServlet" specification="_TBG3sEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJA6-0VdEfCS7cth2SLu0w" type="_TBGQoEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJA6_EVdEfCS7cth2SLu0w" name="doGet" specification="_UFXKAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJA6_UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJA6_kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Obținem ID-ul utilizatorului și ID-ul departamentului din parametrii cererii&#xD;
     String userIdStr = request.getParameter(&quot;userId&quot;);&#xD;
     String departmentIdStr = request.getParameter(&quot;departmentId&quot;);&#xD;
     &#xD;
     if (userIdStr == null || userIdStr.isEmpty() || departmentIdStr == null || departmentIdStr.isEmpty()) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator sau ID departament lipsă\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     int userId, departmentId;&#xD;
     try {&#xD;
         userId = Integer.parseInt(userIdStr);&#xD;
         departmentId = Integer.parseInt(departmentIdStr);&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator sau ID departament invalid\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         // Obținem locațiile utilizatorului și departamentului&#xD;
         Map&lt;String, Object> result = getUserAndDepartmentLocations(userId, departmentId);&#xD;
         &#xD;
         // Verificăm dacă am găsit locațiile&#xD;
         if (result.isEmpty() || !result.containsKey(&quot;user_location&quot;) || !result.containsKey(&quot;department_location&quot;)) {&#xD;
             response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
             out.print(&quot;{\&quot;error\&quot;: \&quot;Nu s-au găsit locațiile necesare pentru rută.\&quot;}&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Convertim rezultatul în JSON și îl trimitem ca răspuns&#xD;
         ObjectMapper objectMapper = new ObjectMapper();&#xD;
         out.print(objectMapper.writeValueAsString(result));&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJBiAEVdEfCS7cth2SLu0w" name="getUserAndDepartmentLocations" specification="_TBIF0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJBiAUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJBiAkVdEfCS7cth2SLu0w" name="departmentId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJBiA0VdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Object> result = new HashMap&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
         // Obținem informațiile utilizatorului&#xD;
         String userSql = &quot;SELECT u.id, u.nume, u.prenume, u.id_dep, d.nume_dep FROM useri u &quot; +&#xD;
                          &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                          &quot;WHERE u.id = ?&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> userInfo = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(userSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     userInfo.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                     userInfo.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
                     userInfo.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
                     userInfo.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
                     userInfo.put(&quot;nume_dep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
                 } else {&#xD;
                     return result; // Utilizator negăsit&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;user_info&quot;, userInfo);&#xD;
         &#xD;
         // Obținem informațiile departamentului selectat&#xD;
         String departmentSql = &quot;SELECT id_dep, nume_dep FROM departament WHERE id_dep = ?&quot;;&#xD;
         Map&lt;String, Object> departmentInfo = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(departmentSql)) {&#xD;
             stmt.setInt(1, departmentId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     departmentInfo.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
                     departmentInfo.put(&quot;nume_dep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
                 } else {&#xD;
                     return result; // Departament negăsit&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;department_info&quot;, departmentInfo);&#xD;
         &#xD;
         // Obținem locația utilizatorului (adresa de acasă)&#xD;
         String userLocationSql = &quot;SELECT id_locatie, strada, longitudine, latitudine, cod, oras, judet, tara &quot; +&#xD;
                                 &quot;FROM locatii_useri &quot; +&#xD;
                                 &quot;WHERE id_user = ? AND latitudine IS NOT NULL AND longitudine IS NOT NULL&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> userLocation = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(userLocationSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     userLocation.put(&quot;id_locatie&quot;, rs.getInt(&quot;id_locatie&quot;));&#xD;
                     userLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     userLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                     userLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                     userLocation.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                     userLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     userLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     userLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă&#xD;
                     String adresaCompleta = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;tara&quot;);&#xD;
                     userLocation.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
                 } else {&#xD;
                     return result; // Locație utilizator negăsită&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;user_location&quot;, userLocation);&#xD;
         &#xD;
         // Obținem locația departamentului selectat&#xD;
         String depLocationSql = &quot;SELECT id_dep, strada, longitudine, latitudine, cod, oras, judet, tara &quot; +&#xD;
                                &quot;FROM locatii_departamente &quot; +&#xD;
                                &quot;WHERE id_dep = ? AND latitudine IS NOT NULL AND longitudine IS NOT NULL&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> depLocation = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(depLocationSql)) {&#xD;
             stmt.setInt(1, departmentId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     depLocation.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
                     depLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     depLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                     depLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                     depLocation.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                     depLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     depLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     depLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă&#xD;
                     String adresaCompleta = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;tara&quot;);&#xD;
                     depLocation.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
                     &#xD;
                     // Calculăm distanța dintre locația utilizatorului și departament&#xD;
                     double userLat = (double) userLocation.get(&quot;latitudine&quot;);&#xD;
                     double userLon = (double) userLocation.get(&quot;longitudine&quot;);&#xD;
                     double depLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                     double depLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                     &#xD;
                     double distanta = calculateDistance(userLat, userLon, depLat, depLon);&#xD;
                     depLocation.put(&quot;distanta_km&quot;, distanta);&#xD;
                 } else {&#xD;
                     return result; // Locație departament negăsită&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;department_location&quot;, depLocation);&#xD;
     }&#xD;
     &#xD;
     return result;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJBiBEVdEfCS7cth2SLu0w" name="calculateDistance" specification="_TBJT8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJBiBUVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJBiBkVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJBiB0VdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJBiCEVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJBiCUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>// Convertim din grade în radiani&#xD;
     lat1 = Math.toRadians(lat1);&#xD;
     lon1 = Math.toRadians(lon1);&#xD;
     lat2 = Math.toRadians(lat2);&#xD;
     lon2 = Math.toRadians(lon2);&#xD;
     &#xD;
     // Raza Pământului în kilometri&#xD;
     double R = 6371.0;&#xD;
     &#xD;
     // Formula Haversine&#xD;
     double dlon = lon2 - lon1;&#xD;
     double dlat = lat2 - lat1;&#xD;
     double a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);&#xD;
     double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));&#xD;
     double distance = R * c;&#xD;
     &#xD;
     // Returnăm distanța rotunjită la 2 zecimale&#xD;
     return Math.round(distance * 100.0) / 100.0;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_TBG3sEVdEfCS7cth2SLu0w" name="GetUserToDepartmentAnyServlet" method="_UJA6-kVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_TBHewEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_TBHewUVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_TBHewkVdEfCS7cth2SLu0w" type="_TBGQoEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TBIF0EVdEfCS7cth2SLu0w" name="getUserAndDepartmentLocations" visibility="private" method="_UJBiAEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TBIF0UVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBIF0kVdEfCS7cth2SLu0w" name="departmentId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFXxEEVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TBJT8EVdEfCS7cth2SLu0w" name="calculateDistance" visibility="private" method="_UJBiBEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TBJT8UVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBJ7AEVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBJ7AUVdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBJ7AkVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBJ7A0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UFXKAEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UJA6_EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFXKAUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFXKAkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TBMXQEVdEfCS7cth2SLu0w" name="GetUserToDepartmentServlet">
        <ownedComment xmi:id="_UJbKokVdEfCS7cth2SLu0w">
          <body>Servlet pentru obținerea locației utilizatorului și a departamentului său</body>
        </ownedComment>
        <generalization xmi:id="_UFZmQEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHU44kVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHU440VdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHVf8EVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHVf8UVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHVf8kVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHVf80VdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHVf9EVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHVf9UVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJBiCkVdEfCS7cth2SLu0w" name="GetUserToDepartmentServlet" specification="_TBM-UEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJBiC0VdEfCS7cth2SLu0w" type="_TBMXQEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJCJEEVdEfCS7cth2SLu0w" name="doGet" specification="_UFY_MEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJCJEUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJCJEkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Obținem ID-ul utilizatorului din parametrii cererii&#xD;
     String userIdStr = request.getParameter(&quot;userId&quot;);&#xD;
     if (userIdStr == null || userIdStr.isEmpty()) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator lipsă\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     int userId;&#xD;
     try {&#xD;
         userId = Integer.parseInt(userIdStr);&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator invalid\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         // Obținem locațiile utilizatorului și departamentului&#xD;
         Map&lt;String, Object> result = getUserAndDepartmentLocations(userId);&#xD;
         &#xD;
         // Verificăm dacă am găsit locațiile&#xD;
         if (result.isEmpty() || !result.containsKey(&quot;user_location&quot;) || !result.containsKey(&quot;department_location&quot;)) {&#xD;
             response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
             out.print(&quot;{\&quot;error\&quot;: \&quot;Nu s-au găsit locațiile necesare.\&quot;}&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Convertim rezultatul în JSON și îl trimitem ca răspuns&#xD;
         ObjectMapper objectMapper = new ObjectMapper();&#xD;
         out.print(objectMapper.writeValueAsString(result));&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJCJE0VdEfCS7cth2SLu0w" name="getUserAndDepartmentLocations" specification="_TBNlYUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJCJFEVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJCJFUVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Object> result = new HashMap&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
         // Obținem informațiile utilizatorului și departamentul său&#xD;
         String userSql = &quot;SELECT u.id, u.nume, u.prenume, u.id_dep, d.nume_dep FROM useri u &quot; +&#xD;
                          &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                          &quot;WHERE u.id = ?&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> userInfo = new HashMap&lt;>();&#xD;
         int departmentId = 0;&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(userSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     userInfo.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                     userInfo.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
                     userInfo.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
                     userInfo.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
                     userInfo.put(&quot;nume_dep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
                     &#xD;
                     departmentId = rs.getInt(&quot;id_dep&quot;);&#xD;
                 } else {&#xD;
                     return result; // Utilizator negăsit&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;user_info&quot;, userInfo);&#xD;
         &#xD;
         // Obținem locația utilizatorului (adresa de acasă)&#xD;
         String userLocationSql = &quot;SELECT id_locatie, strada, longitudine, latitudine, cod, oras, judet, tara &quot; +&#xD;
                                 &quot;FROM locatii_useri &quot; +&#xD;
                                 &quot;WHERE id_user = ? AND latitudine IS NOT NULL AND longitudine IS NOT NULL&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> userLocation = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(userLocationSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     userLocation.put(&quot;id_locatie&quot;, rs.getInt(&quot;id_locatie&quot;));&#xD;
                     userLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     userLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                     userLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                     userLocation.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                     userLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     userLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     userLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă&#xD;
                     String adresaCompleta = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;tara&quot;);&#xD;
                     userLocation.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
                 } else {&#xD;
                     return result; // Locație utilizator negăsită&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;user_location&quot;, userLocation);&#xD;
         &#xD;
         // Obținem locația departamentului&#xD;
         String depLocationSql = &quot;SELECT id_dep, strada, longitudine, latitudine, cod, oras, judet, tara &quot; +&#xD;
                                &quot;FROM locatii_departamente &quot; +&#xD;
                                &quot;WHERE id_dep = ? AND latitudine IS NOT NULL AND longitudine IS NOT NULL&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> depLocation = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(depLocationSql)) {&#xD;
             stmt.setInt(1, departmentId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     depLocation.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
                     depLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     depLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                     depLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                     depLocation.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                     depLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     depLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     depLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă&#xD;
                     String adresaCompleta = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;tara&quot;);&#xD;
                     depLocation.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
                     &#xD;
                     // Calculăm distanța dintre locația utilizatorului și departament&#xD;
                     double userLat = (double) userLocation.get(&quot;latitudine&quot;);&#xD;
                     double userLon = (double) userLocation.get(&quot;longitudine&quot;);&#xD;
                     double depLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                     double depLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                     &#xD;
                     double distanta = calculateDistance(userLat, userLon, depLat, depLon);&#xD;
                     depLocation.put(&quot;distanta_km&quot;, distanta);&#xD;
                 } else {&#xD;
                     return result; // Locație departament negăsită&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;department_location&quot;, depLocation);&#xD;
     }&#xD;
     &#xD;
     return result;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJCJFkVdEfCS7cth2SLu0w" name="calculateDistance" specification="_TBOzgEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJCJF0VdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJCJGEVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJCJGUVdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJCJGkVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJCJG0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>// Convertim din grade în radiani&#xD;
     lat1 = Math.toRadians(lat1);&#xD;
     lon1 = Math.toRadians(lon1);&#xD;
     lat2 = Math.toRadians(lat2);&#xD;
     lon2 = Math.toRadians(lon2);&#xD;
     &#xD;
     // Raza Pământului în kilometri&#xD;
     double R = 6371.0;&#xD;
     &#xD;
     // Formula Haversine&#xD;
     double dlon = lon2 - lon1;&#xD;
     double dlat = lat2 - lat1;&#xD;
     double a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);&#xD;
     double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));&#xD;
     double distance = R * c;&#xD;
     &#xD;
     // Returnăm distanța rotunjită la 2 zecimale&#xD;
     return Math.round(distance * 100.0) / 100.0;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_TBM-UEVdEfCS7cth2SLu0w" name="GetUserToDepartmentServlet" method="_UJBiCkVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_TBM-UUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_TBM-UkVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_TBNlYEVdEfCS7cth2SLu0w" type="_TBMXQEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TBNlYUVdEfCS7cth2SLu0w" name="getUserAndDepartmentLocations" visibility="private" method="_UJCJE0VdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TBNlYkVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFY_M0VdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TBOzgEVdEfCS7cth2SLu0w" name="calculateDistance" visibility="private" method="_UJCJFkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TBOzgUVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBPakEVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBPakUVdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBPakkVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBPak0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UFY_MEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UJCJEEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFY_MUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFY_MkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TBRPwEVdEfCS7cth2SLu0w" name="GetUserToNearestSediuServlet">
        <ownedComment xmi:id="_UJbKo0VdEfCS7cth2SLu0w">
          <body>Servlet pentru obținerea locației utilizatorului și a celui mai apropiat sediu</body>
        </ownedComment>
        <generalization xmi:id="_UFbbcEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHWHAEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHWHAUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHWHAkVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHWuEEVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHWuEUVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHWuEkVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHWuE0VdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHWuFEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJCJHEVdEfCS7cth2SLu0w" name="GetUserToNearestSediuServlet" specification="_TBSd4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJCwIEVdEfCS7cth2SLu0w" type="_TBRPwEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJCwIUVdEfCS7cth2SLu0w" name="doGet" specification="_UFa0YEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJCwIkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJCwI0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Obținem ID-ul utilizatorului din parametrii cererii&#xD;
     String userIdStr = request.getParameter(&quot;userId&quot;);&#xD;
     if (userIdStr == null || userIdStr.isEmpty()) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator lipsă\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     int userId;&#xD;
     try {&#xD;
         userId = Integer.parseInt(userIdStr);&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator invalid\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         // Obținem locația utilizatorului și cel mai apropiat sediu&#xD;
         Map&lt;String, Object> result = getUserAndNearestSediu(userId);&#xD;
         &#xD;
         // Verificăm dacă am găsit datele necesare&#xD;
         if (result.isEmpty() || !result.containsKey(&quot;user_location&quot;) || !result.containsKey(&quot;nearest_sediu&quot;)) {&#xD;
             response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
             out.print(&quot;{\&quot;error\&quot;: \&quot;Nu s-au găsit locațiile necesare.\&quot;}&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Convertim rezultatul în JSON și îl trimitem ca răspuns&#xD;
         ObjectMapper objectMapper = new ObjectMapper();&#xD;
         out.print(objectMapper.writeValueAsString(result));&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJCwJEVdEfCS7cth2SLu0w" name="getUserAndNearestSediu" specification="_TBTE8UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJCwJUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJCwJkVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Object> result = new HashMap&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
         // Obținem informațiile utilizatorului&#xD;
         String userSql = &quot;SELECT u.id, u.nume, u.prenume, u.id_dep, d.nume_dep FROM useri u &quot; +&#xD;
                          &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                          &quot;WHERE u.id = ?&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> userInfo = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(userSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     userInfo.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                     userInfo.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
                     userInfo.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
                     userInfo.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
                     userInfo.put(&quot;nume_dep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
                 } else {&#xD;
                     return result; // Utilizator negăsit&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;user_info&quot;, userInfo);&#xD;
         &#xD;
         // Obținem locația utilizatorului (adresa de acasă)&#xD;
         String userLocationSql = &quot;SELECT id_locatie, strada, longitudine, latitudine, cod, oras, judet, tara &quot; +&#xD;
                                 &quot;FROM locatii_useri &quot; +&#xD;
                                 &quot;WHERE id_user = ? AND latitudine IS NOT NULL AND longitudine IS NOT NULL&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> userLocation = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(userLocationSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     userLocation.put(&quot;id_locatie&quot;, rs.getInt(&quot;id_locatie&quot;));&#xD;
                     userLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     userLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                     userLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                     userLocation.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                     userLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     userLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     userLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă&#xD;
                     String adresaCompleta = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;tara&quot;);&#xD;
                     userLocation.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
                 } else {&#xD;
                     return result; // Locație utilizator negăsită&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;user_location&quot;, userLocation);&#xD;
         &#xD;
         // Obținem toate sediile&#xD;
         String sediuSql = &quot;SELECT * FROM sedii WHERE latitudine IS NOT NULL AND longitudine IS NOT NULL&quot;;&#xD;
         &#xD;
         List&lt;Map&lt;String, Object>> sedii = new ArrayList&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(sediuSql);&#xD;
              ResultSet rs = stmt.executeQuery()) {&#xD;
             &#xD;
             while (rs.next()) {&#xD;
                 Map&lt;String, Object> sediu = new HashMap&lt;>();&#xD;
                 sediu.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                 sediu.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;));&#xD;
                 sediu.put(&quot;tip_sediu&quot;, rs.getString(&quot;tip_sediu&quot;));&#xD;
                 sediu.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                 sediu.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                 sediu.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                 sediu.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                 sediu.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                 sediu.put(&quot;telefon&quot;, rs.getString(&quot;telefon&quot;));&#xD;
                 sediu.put(&quot;email&quot;, rs.getString(&quot;email&quot;));&#xD;
                 sediu.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                 sediu.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                 &#xD;
                 // Construim adresa completă&#xD;
                 String adresaCompleta = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                        rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                        rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                        rs.getString(&quot;tara&quot;);&#xD;
                 sediu.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
                 &#xD;
                 // Calculăm distanța până la acest sediu&#xD;
                 double userLat = (double) userLocation.get(&quot;latitudine&quot;);&#xD;
                 double userLon = (double) userLocation.get(&quot;longitudine&quot;);&#xD;
                 double sediuLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                 double sediuLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                 &#xD;
                 double distanta = calculateDistance(userLat, userLon, sediuLat, sediuLon);&#xD;
                 sediu.put(&quot;distanta_km&quot;, distanta);&#xD;
                 &#xD;
                 sedii.add(sediu);&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;all_sedii&quot;, sedii);&#xD;
         &#xD;
         // Găsim cel mai apropiat sediu&#xD;
         if (!sedii.isEmpty()) {&#xD;
             Map&lt;String, Object> nearestSediu = sedii.get(0);&#xD;
             double minDistance = (double) nearestSediu.get(&quot;distanta_km&quot;);&#xD;
             &#xD;
             for (int i = 1; i &lt; sedii.size(); i++) {&#xD;
                 Map&lt;String, Object> sediu = sedii.get(i);&#xD;
                 double distance = (double) sediu.get(&quot;distanta_km&quot;);&#xD;
                 &#xD;
                 if (distance &lt; minDistance) {&#xD;
                     minDistance = distance;&#xD;
                     nearestSediu = sediu;&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             result.put(&quot;nearest_sediu&quot;, nearestSediu);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return result;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJCwJ0VdEfCS7cth2SLu0w" name="calculateDistance" specification="_TBUTEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJCwKEVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJCwKUVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJCwKkVdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJCwK0VdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJCwLEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>// Convertim din grade în radiani&#xD;
     lat1 = Math.toRadians(lat1);&#xD;
     lon1 = Math.toRadians(lon1);&#xD;
     lat2 = Math.toRadians(lat2);&#xD;
     lon2 = Math.toRadians(lon2);&#xD;
     &#xD;
     // Raza Pământului în kilometri&#xD;
     double R = 6371.0;&#xD;
     &#xD;
     // Formula Haversine&#xD;
     double dlon = lon2 - lon1;&#xD;
     double dlat = lat2 - lat1;&#xD;
     double a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);&#xD;
     double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));&#xD;
     double distance = R * c;&#xD;
     &#xD;
     // Returnăm distanța rotunjită la 2 zecimale&#xD;
     return Math.round(distance * 100.0) / 100.0;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_TBSd4EVdEfCS7cth2SLu0w" name="GetUserToNearestSediuServlet" method="_UJCJHEVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_TBSd4UVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_TBSd4kVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_TBTE8EVdEfCS7cth2SLu0w" type="_TBRPwEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TBTE8UVdEfCS7cth2SLu0w" name="getUserAndNearestSediu" visibility="private" method="_UJCwJEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TBTE8kVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFa0Y0VdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TBUTEEVdEfCS7cth2SLu0w" name="calculateDistance" visibility="private" method="_UJCwJ0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TBUTEUVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBU6IEVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBU6IUVdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBU6IkVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBU6I0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UFa0YEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UJCwIUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFa0YUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFa0YkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TBXWYEVdEfCS7cth2SLu0w" name="GetUserToSediuAnyServlet">
        <ownedComment xmi:id="_UJbKpEVdEfCS7cth2SLu0w">
          <body>Servlet pentru obținerea locației utilizatorului și a sediului selectat</body>
        </ownedComment>
        <generalization xmi:id="_UFcpk0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHXVIEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHXVIUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHXVIkVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHXVI0VdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHX8MEVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHX8MUVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHX8MkVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHX8M0VdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJDXMEVdEfCS7cth2SLu0w" name="GetUserToSediuAnyServlet" specification="_TBX9cEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJDXMUVdEfCS7cth2SLu0w" type="_TBXWYEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJDXMkVdEfCS7cth2SLu0w" name="doGet" specification="_UFcCgEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJDXM0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJDXNEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Obținem ID-ul utilizatorului și ID-ul sediului din parametrii cererii&#xD;
     String userIdStr = request.getParameter(&quot;userId&quot;);&#xD;
     String sediuIdStr = request.getParameter(&quot;sediuId&quot;);&#xD;
     &#xD;
     if (userIdStr == null || userIdStr.isEmpty() || sediuIdStr == null || sediuIdStr.isEmpty()) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator sau ID sediu lipsă\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     int userId, sediuId;&#xD;
     try {&#xD;
         userId = Integer.parseInt(userIdStr);&#xD;
         sediuId = Integer.parseInt(sediuIdStr);&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;ID utilizator sau ID sediu invalid\&quot;}&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         // Obținem locațiile utilizatorului și sediului&#xD;
         Map&lt;String, Object> result = getUserAndSediuLocations(userId, sediuId);&#xD;
         &#xD;
         // Verificăm dacă am găsit locațiile&#xD;
         if (result.isEmpty() || !result.containsKey(&quot;user_location&quot;) || !result.containsKey(&quot;sediu_location&quot;)) {&#xD;
             response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
             out.print(&quot;{\&quot;error\&quot;: \&quot;Nu s-au găsit locațiile necesare pentru rută.\&quot;}&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Convertim rezultatul în JSON și îl trimitem ca răspuns&#xD;
         ObjectMapper objectMapper = new ObjectMapper();&#xD;
         out.print(objectMapper.writeValueAsString(result));&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJDXNUVdEfCS7cth2SLu0w" name="getUserAndSediuLocations" specification="_TBZLkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJDXNkVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJDXN0VdEfCS7cth2SLu0w" name="sediuId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJDXOEVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Object> result = new HashMap&lt;>();&#xD;
     &#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
         // Obținem informațiile utilizatorului&#xD;
         String userSql = &quot;SELECT u.id, u.nume, u.prenume, u.id_dep, d.nume_dep FROM useri u &quot; +&#xD;
                          &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                          &quot;WHERE u.id = ?&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> userInfo = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(userSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     userInfo.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                     userInfo.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
                     userInfo.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
                     userInfo.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
                     userInfo.put(&quot;nume_dep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
                 } else {&#xD;
                     throw new SQLException(&quot;Utilizatorul cu ID-ul &quot; + userId + &quot; nu a fost găsit.&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;user_info&quot;, userInfo);&#xD;
         &#xD;
         // Obținem informațiile sediului selectat&#xD;
         String sediuSql = &quot;SELECT id_sediu, nume_sediu, tip_sediu, strada, oras, judet, tara, telefon, email &quot; +&#xD;
                           &quot;FROM sedii WHERE id_sediu = ?&quot;;&#xD;
         Map&lt;String, Object> sediuInfo = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(sediuSql)) {&#xD;
             stmt.setInt(1, sediuId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     sediuInfo.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                     sediuInfo.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;));&#xD;
                     sediuInfo.put(&quot;tip_sediu&quot;, rs.getString(&quot;tip_sediu&quot;));&#xD;
                     sediuInfo.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     sediuInfo.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     sediuInfo.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     sediuInfo.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     sediuInfo.put(&quot;telefon&quot;, rs.getString(&quot;telefon&quot;));&#xD;
                     sediuInfo.put(&quot;email&quot;, rs.getString(&quot;email&quot;));&#xD;
                 } else {&#xD;
                     throw new SQLException(&quot;Sediul cu ID-ul &quot; + sediuId + &quot; nu a fost găsit.&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;sediu_info&quot;, sediuInfo);&#xD;
         &#xD;
         // Obținem locația utilizatorului (adresa de acasă)&#xD;
         String userLocationSql = &quot;SELECT id_locatie, strada, longitudine, latitudine, cod, oras, judet, tara &quot; +&#xD;
                                 &quot;FROM locatii_useri &quot; +&#xD;
                                 &quot;WHERE id_user = ? AND latitudine IS NOT NULL AND longitudine IS NOT NULL&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> userLocation = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(userLocationSql)) {&#xD;
             stmt.setInt(1, userId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     userLocation.put(&quot;id_locatie&quot;, rs.getInt(&quot;id_locatie&quot;));&#xD;
                     userLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     userLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                     userLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                     userLocation.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                     userLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     userLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     userLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă&#xD;
                     String adresaCompleta = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;tara&quot;);&#xD;
                     userLocation.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
                 } else {&#xD;
                     throw new SQLException(&quot;Nu s-a găsit locația pentru utilizatorul cu ID-ul &quot; + userId + &quot;.&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;user_location&quot;, userLocation);&#xD;
         &#xD;
         // Obținem locația sediului selectat&#xD;
         String sediuLocationSql = &quot;SELECT id_sediu, strada, longitudine, latitudine, cod, oras, judet, tara &quot; +&#xD;
                                  &quot;FROM sedii &quot; +&#xD;
                                  &quot;WHERE id_sediu = ? AND latitudine IS NOT NULL AND longitudine IS NOT NULL&quot;;&#xD;
         &#xD;
         Map&lt;String, Object> sediuLocation = new HashMap&lt;>();&#xD;
         &#xD;
         try (PreparedStatement stmt = conn.prepareStatement(sediuLocationSql)) {&#xD;
             stmt.setInt(1, sediuId);&#xD;
             &#xD;
             try (ResultSet rs = stmt.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     sediuLocation.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                     sediuLocation.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                     sediuLocation.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                     sediuLocation.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                     sediuLocation.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                     sediuLocation.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                     sediuLocation.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                     sediuLocation.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                     &#xD;
                     // Construim adresa completă&#xD;
                     String adresaCompleta = rs.getString(&quot;strada&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;oras&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;judet&quot;) + &quot;, &quot; + &#xD;
                                           rs.getString(&quot;tara&quot;);&#xD;
                     sediuLocation.put(&quot;adresa_completa&quot;, adresaCompleta);&#xD;
                     &#xD;
                     // Calculăm distanța dintre locația utilizatorului și sediu&#xD;
                     double userLat = (double) userLocation.get(&quot;latitudine&quot;);&#xD;
                     double userLon = (double) userLocation.get(&quot;longitudine&quot;);&#xD;
                     double sediuLat = rs.getDouble(&quot;latitudine&quot;);&#xD;
                     double sediuLon = rs.getDouble(&quot;longitudine&quot;);&#xD;
                     &#xD;
                     double distanta = calculateDistance(userLat, userLon, sediuLat, sediuLon);&#xD;
                     sediuLocation.put(&quot;distanta_km&quot;, distanta);&#xD;
                 } else {&#xD;
                     throw new SQLException(&quot;Nu s-a găsit locația pentru sediul cu ID-ul &quot; + sediuId + &quot; sau coordonatele lipsesc.&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         result.put(&quot;sediu_location&quot;, sediuLocation);&#xD;
         &#xD;
         // Adăugăm un log pentru a verifica ce date au fost returnate&#xD;
         System.out.println(&quot;Date returnate pentru utilizatorul &quot; + userId + &quot; și sediul &quot; + sediuId + &quot;:&quot;);&#xD;
         System.out.println(&quot;User info: &quot; + userInfo);&#xD;
         System.out.println(&quot;Sediu info: &quot; + sediuInfo);&#xD;
         System.out.println(&quot;User location: &quot; + userLocation);&#xD;
         System.out.println(&quot;Sediu location: &quot; + sediuLocation);&#xD;
     }&#xD;
     &#xD;
     return result;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJDXOUVdEfCS7cth2SLu0w" name="calculateDistance" specification="_TBaZsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJDXOkVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJDXO0VdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJDXPEVdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJDXPUVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJDXPkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>// Convertim din grade în radiani&#xD;
     lat1 = Math.toRadians(lat1);&#xD;
     lon1 = Math.toRadians(lon1);&#xD;
     lat2 = Math.toRadians(lat2);&#xD;
     lon2 = Math.toRadians(lon2);&#xD;
     &#xD;
     // Raza Pământului în kilometri&#xD;
     double R = 6371.0;&#xD;
     &#xD;
     // Formula Haversine&#xD;
     double dlon = lon2 - lon1;&#xD;
     double dlat = lat2 - lat1;&#xD;
     double a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);&#xD;
     double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));&#xD;
     double distance = R * c;&#xD;
     &#xD;
     // Returnăm distanța rotunjită la 2 zecimale&#xD;
     return Math.round(distance * 100.0) / 100.0;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_TBX9cEVdEfCS7cth2SLu0w" name="GetUserToSediuAnyServlet" method="_UJDXMEVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_TBYkgEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_TBYkgUVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_TBYkgkVdEfCS7cth2SLu0w" type="_TBXWYEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TBZLkEVdEfCS7cth2SLu0w" name="getUserAndSediuLocations" visibility="private" method="_UJDXNUVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TBZLkUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBZLkkVdEfCS7cth2SLu0w" name="sediuId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFcpkkVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_TBaZsEVdEfCS7cth2SLu0w" name="calculateDistance" visibility="private" method="_UJDXOUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TBaZsUVdEfCS7cth2SLu0w" name="lat1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBaZskVdEfCS7cth2SLu0w" name="lon1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBaZs0VdEfCS7cth2SLu0w" name="lat2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBaZtEVdEfCS7cth2SLu0w" name="lon2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBbAwEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UFcCgEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UJDXMkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFcpkEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFcpkUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TBddAEVdEfCS7cth2SLu0w" name="JudeteProxyServlet">
        <generalization xmi:id="_UFeexEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHX8NEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHYjQEVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJD-QEVdEfCS7cth2SLu0w" name="doGet" specification="_UFd3sEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJD-QUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJD-QkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json;charset=UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Create a JSON array with Romanian counties&#xD;
     JSONArray countiesArray = new JSONArray();&#xD;
     &#xD;
     // Add all Romanian counties with their codes&#xD;
     addCounty(countiesArray, &quot;ALBA&quot;, &quot;AB&quot;);&#xD;
     addCounty(countiesArray, &quot;ARAD&quot;, &quot;AR&quot;);&#xD;
     addCounty(countiesArray, &quot;ARGEȘ&quot;, &quot;AG&quot;);&#xD;
     addCounty(countiesArray, &quot;BACĂU&quot;, &quot;BC&quot;);&#xD;
     addCounty(countiesArray, &quot;BIHOR&quot;, &quot;BH&quot;);&#xD;
     addCounty(countiesArray, &quot;BISTRIȚA-NĂSĂUD&quot;, &quot;BN&quot;);&#xD;
     addCounty(countiesArray, &quot;BOTOȘANI&quot;, &quot;BT&quot;);&#xD;
     addCounty(countiesArray, &quot;BRĂILA&quot;, &quot;BR&quot;);&#xD;
     addCounty(countiesArray, &quot;BRAȘOV&quot;, &quot;BV&quot;);&#xD;
     addCounty(countiesArray, &quot;BUCUREȘTI&quot;, &quot;B&quot;);&#xD;
     addCounty(countiesArray, &quot;BUZĂU&quot;, &quot;BZ&quot;);&#xD;
     addCounty(countiesArray, &quot;CĂLĂRAȘI&quot;, &quot;CL&quot;);&#xD;
     addCounty(countiesArray, &quot;CARAȘ-SEVERIN&quot;, &quot;CS&quot;);&#xD;
     addCounty(countiesArray, &quot;CLUJ&quot;, &quot;CJ&quot;);&#xD;
     addCounty(countiesArray, &quot;CONSTANȚA&quot;, &quot;CT&quot;);&#xD;
     addCounty(countiesArray, &quot;COVASNA&quot;, &quot;CV&quot;);&#xD;
     addCounty(countiesArray, &quot;DÂMBOVIȚA&quot;, &quot;DB&quot;);&#xD;
     addCounty(countiesArray, &quot;DOLJ&quot;, &quot;DJ&quot;);&#xD;
     addCounty(countiesArray, &quot;GALAȚI&quot;, &quot;GL&quot;);&#xD;
     addCounty(countiesArray, &quot;GIURGIU&quot;, &quot;GR&quot;);&#xD;
     addCounty(countiesArray, &quot;GORJ&quot;, &quot;GJ&quot;);&#xD;
     addCounty(countiesArray, &quot;HARGHITA&quot;, &quot;HR&quot;);&#xD;
     addCounty(countiesArray, &quot;HUNEDOARA&quot;, &quot;HD&quot;);&#xD;
     addCounty(countiesArray, &quot;IALOMIȚA&quot;, &quot;IL&quot;);&#xD;
     addCounty(countiesArray, &quot;IAȘI&quot;, &quot;IS&quot;);&#xD;
     addCounty(countiesArray, &quot;ILFOV&quot;, &quot;IF&quot;);&#xD;
     addCounty(countiesArray, &quot;MARAMUREȘ&quot;, &quot;MM&quot;);&#xD;
     addCounty(countiesArray, &quot;MEHEDINȚI&quot;, &quot;MH&quot;);&#xD;
     addCounty(countiesArray, &quot;MUREȘ&quot;, &quot;MS&quot;);&#xD;
     addCounty(countiesArray, &quot;NEAMȚ&quot;, &quot;NT&quot;);&#xD;
     addCounty(countiesArray, &quot;OLT&quot;, &quot;OT&quot;);&#xD;
     addCounty(countiesArray, &quot;PRAHOVA&quot;, &quot;PH&quot;);&#xD;
     addCounty(countiesArray, &quot;SĂLAJ&quot;, &quot;SJ&quot;);&#xD;
     addCounty(countiesArray, &quot;SATU MARE&quot;, &quot;SM&quot;);&#xD;
     addCounty(countiesArray, &quot;SIBIU&quot;, &quot;SB&quot;);&#xD;
     addCounty(countiesArray, &quot;SUCEAVA&quot;, &quot;SV&quot;);&#xD;
     addCounty(countiesArray, &quot;TELEORMAN&quot;, &quot;TR&quot;);&#xD;
     addCounty(countiesArray, &quot;TIMIȘ&quot;, &quot;TM&quot;);&#xD;
     addCounty(countiesArray, &quot;TULCEA&quot;, &quot;TL&quot;);&#xD;
     addCounty(countiesArray, &quot;VÂLCEA&quot;, &quot;VL&quot;);&#xD;
     addCounty(countiesArray, &quot;VASLUI&quot;, &quot;VS&quot;);&#xD;
     addCounty(countiesArray, &quot;VRANCEA&quot;, &quot;VN&quot;);&#xD;
     &#xD;
     // Return the JSON array&#xD;
     out.print(countiesArray.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJD-Q0VdEfCS7cth2SLu0w" name="addCounty" specification="_UFeewEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJD-REVdEfCS7cth2SLu0w" name="array" type="_UAfREEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJD-RUVdEfCS7cth2SLu0w" name="name">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJD-RkVdEfCS7cth2SLu0w" name="code">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>JSONObject county = new JSONObject();&#xD;
     county.put(&quot;nume&quot;, name);&#xD;
     county.put(&quot;auto&quot;, code);&#xD;
     array.put(county);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UFd3sEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UJD-QEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFd3sUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFd3skVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFeewEVdEfCS7cth2SLu0w" name="addCounty" visibility="private" method="_UJD-Q0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFeewUVdEfCS7cth2SLu0w" name="array" type="_UAfREEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFeewkVdEfCS7cth2SLu0w" name="name">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFeew0VdEfCS7cth2SLu0w" name="code">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TBfSMEVdEfCS7cth2SLu0w" name="ImageServlet">
        <generalization xmi:id="_UFjXQkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHYjQUVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHYjQkVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJD-R0VdEfCS7cth2SLu0w" name="doGet" specification="_UFfF0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJD-SEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJD-SUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);
     if (session == null) {
         writeJsonResponse(response, HttpServletResponse.SC_FORBIDDEN, &quot;No session found.&quot;);
         return;
     }

     MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);
     if (currentUser == null) {
         writeJsonResponse(response, HttpServletResponse.SC_FORBIDDEN, &quot;No user session found.&quot;);
         return;
     }

     String username = currentUser.getUsername();

     try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
          PreparedStatement statement = connection.prepareStatement(&quot;SELECT profil FROM useri WHERE username = ?&quot;)) {
         statement.setString(1, username);
         ResultSet rs = statement.executeQuery();
         if (rs.next()) {
             byte[] imgData = rs.getBytes(&quot;profil&quot;);
             if (imgData != null) {
                 response.setContentType(&quot;image/jpeg&quot;);
                 response.setContentLength(imgData.length);
                 OutputStream os = response.getOutputStream();
                 os.write(imgData);
                 os.flush();
                 os.close();
             } else {
                 writeJsonResponse(response, HttpServletResponse.SC_NOT_FOUND, &quot;Image not found.&quot;);
             }
         } else {
             writeJsonResponse(response, HttpServletResponse.SC_NOT_FOUND, &quot;User not found.&quot;);
         }
     } catch (Exception e) {
         throw new ServletException(&quot;Database access error&quot;, e);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJElUEVdEfCS7cth2SLu0w" name="writeJsonResponse" specification="_UFiwMUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJElUUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJElUkVdEfCS7cth2SLu0w" name="statusCode">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJElU0VdEfCS7cth2SLu0w" name="message">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);
     response.setStatus(statusCode);
     String json = &quot;{\&quot;status\&quot;:\&quot;error\&quot;,\&quot;message\&quot;:\&quot;&quot; + message + &quot;\&quot;}&quot;;
     response.getWriter().write(json);
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UFfF0EVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UJD-R0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFfF0UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFgT8EVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFiwMUVdEfCS7cth2SLu0w" name="writeJsonResponse" visibility="private" method="_UJElUEVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFiwMkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFjXQEVdEfCS7cth2SLu0w" name="statusCode">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFjXQUVdEfCS7cth2SLu0w" name="message">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TBhucEVdEfCS7cth2SLu0w" name="IncetareContractServlet">
        <generalization xmi:id="_UFklY0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJElVEVdEfCS7cth2SLu0w" name="doPost" specification="_UFklYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJElVUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJElVkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>int idAng = Integer.parseInt(request.getParameter(&quot;id_ang&quot;));&#xD;
     Date dataIncetare = Date.valueOf(request.getParameter(&quot;data_incetare&quot;));&#xD;
     String motivIncetare = request.getParameter(&quot;motiv_incetare&quot;);&#xD;
     String observatii = request.getParameter(&quot;observatii&quot;);&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Încărcare driver MySQL&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Creare conexiune directă&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         conn.setAutoCommit(false);&#xD;
         &#xD;
         // Dezactivare angajat&#xD;
         String sql = &quot;UPDATE useri SET activ = 0 WHERE id = ?&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setInt(1, idAng);&#xD;
         pstmt.executeUpdate();&#xD;
         &#xD;
         // Înregistrare istoric încetare contract&#xD;
         sql = &quot;INSERT INTO istoric_incetari (id_ang, data_incetare, motiv, observatii) &quot; +&#xD;
               &quot;VALUES (?, ?, ?, ?)&quot;;&#xD;
         pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setInt(1, idAng);&#xD;
         pstmt.setDate(2, dataIncetare);&#xD;
         pstmt.setString(3, motivIncetare);&#xD;
         pstmt.setString(4, observatii);&#xD;
         pstmt.executeUpdate();&#xD;
         &#xD;
         conn.commit();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	        PrintWriter out = response.getWriter();&#xD;
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
	        out.println(&quot;alert('OK');&quot;);&#xD;
	        out.println(&quot;window.location.href = 'incetare_contract.jsp?';&quot;);&#xD;
	        out.println(&quot;&lt;/script>&quot;);&#xD;
	        out.close();&#xD;
	        return; &#xD;
         &#xD;
         // pstmt.close();&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	        PrintWriter out = response.getWriter();&#xD;
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
	        out.println(&quot;alert('FAILED');&quot;);&#xD;
	        out.println(&quot;window.location.href = 'incetare_contract.jsp?error=true';&quot;);&#xD;
	        out.println(&quot;&lt;/script>&quot;);&#xD;
	        out.close();&#xD;
	        return; &#xD;
     } catch (SQLException e) {&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             ex.printStackTrace();&#xD;
         }&#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	        PrintWriter out = response.getWriter();&#xD;
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
	        out.println(&quot;alert('FAILED');&quot;);&#xD;
	        out.println(&quot;window.location.href = 'incetare_contract.jsp?error=true';&quot;);&#xD;
	        out.println(&quot;&lt;/script>&quot;);&#xD;
	        out.close();&#xD;
	        return; &#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { &#xD;
                 conn.setAutoCommit(true);&#xD;
                 conn.close(); &#xD;
             } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UFklYEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UJElVEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFklYUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFklYkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TBjjoEVdEfCS7cth2SLu0w" name="InscriereEvenimentServlet">
        <generalization xmi:id="_UFlMdkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHYjQ0VdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHZxYEVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHZxYUVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHZxYkVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHZxY0VdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHZxZEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJElV0VdEfCS7cth2SLu0w" name="doPost" specification="_UFlMcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJElWEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJElWUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json;charset=UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     JSONObject json = new JSONObject();&#xD;
&#xD;
     // 1) Verificare sesiune și autentificare&#xD;
     HttpSession session = request.getSession(false);&#xD;
     if (session == null) {&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Nu e nicio sesiune activa!&quot;);&#xD;
         out.print(json.toString());&#xD;
         return;&#xD;
     }&#xD;
     MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);&#xD;
     if (currentUser == null) {&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Utilizator neautentificat!&quot;);&#xD;
         out.print(json.toString());&#xD;
         return;&#xD;
     }&#xD;
     int userId = currentUser.getId();&#xD;
&#xD;
     int eventId = Integer.parseInt(request.getParameter(&quot;event_id&quot;));&#xD;
&#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // 2) Încarcă driver-ul JDBC și deschide conexiunea cu DriverManager&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         conn.setAutoCommit(false);&#xD;
&#xD;
         // 3) Verifică dacă mai sunt locuri disponibile&#xD;
         String sql = &#xD;
             &quot;SELECT e.locuri_max, &quot; +&#xD;
             &quot;  (SELECT COUNT(*) FROM participanti_evenimente WHERE id_event = e.id) AS nr_inscrisi &quot; +&#xD;
             &quot;FROM evenimente e WHERE e.id = ?&quot;;&#xD;
         try (PreparedStatement pstmt = conn.prepareStatement(sql)) {&#xD;
             pstmt.setInt(1, eventId);&#xD;
             try (ResultSet rs = pstmt.executeQuery()) {&#xD;
                 if (!rs.next()) {&#xD;
                     json.put(&quot;success&quot;, false);&#xD;
                     json.put(&quot;message&quot;, &quot;Evenimentul nu există!&quot;);&#xD;
                     conn.rollback();&#xD;
                     out.print(json.toString());&#xD;
                     return;&#xD;
                 }&#xD;
                 int locuriMax = rs.getInt(&quot;locuri_max&quot;);&#xD;
                 int nrInscrisi = rs.getInt(&quot;nr_inscrisi&quot;);&#xD;
&#xD;
                 if (nrInscrisi >= locuriMax) {&#xD;
                     json.put(&quot;success&quot;, false);&#xD;
                     json.put(&quot;message&quot;, &quot;Nu mai sunt locuri disponibile!&quot;);&#xD;
                     conn.rollback();&#xD;
                     out.print(json.toString());&#xD;
                     return;&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
&#xD;
         // 4) Înscrie utilizatorul&#xD;
         sql = &quot;INSERT INTO participanti_evenimente (id_event, id_ang) VALUES (?, ?)&quot;;&#xD;
         try (PreparedStatement pstmt = conn.prepareStatement(sql)) {&#xD;
             pstmt.setInt(1, eventId);&#xD;
             pstmt.setInt(2, userId);&#xD;
             pstmt.executeUpdate();&#xD;
         }&#xD;
&#xD;
         conn.commit();&#xD;
         json.put(&quot;success&quot;, true);&#xD;
         json.put(&quot;message&quot;, &quot;Înscriere realizată cu succes!&quot;);&#xD;
&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Driver JDBC neidentificat!&quot;);&#xD;
     } catch (SQLException e) {&#xD;
         try {&#xD;
             if (conn != null) conn.rollback();&#xD;
         } catch (SQLException ex) {&#xD;
             ex.printStackTrace();&#xD;
         }&#xD;
         if (e.getMessage().toLowerCase().contains(&quot;duplicate&quot;)) {&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Sunteți deja înscris la acest eveniment!&quot;);&#xD;
         } else {&#xD;
             e.printStackTrace();&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Eroare la înscriere: &quot; + e.getMessage());&#xD;
         }&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try {&#xD;
                 conn.setAutoCommit(true);&#xD;
                 conn.close();&#xD;
             } catch (SQLException e) {&#xD;
                 e.printStackTrace();&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
&#xD;
     out.print(json.toString());&#xD;
     out.flush();&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UFlMcEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UJElV0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFlMcUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFlMckVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TBlY0EVdEfCS7cth2SLu0w" name="JobsServlet">
        <generalization xmi:id="_UFpd40VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHZxZUVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHZxZkVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHaYcEVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHaYcUVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHaYckVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHaYc0VdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJFMYEVdEfCS7cth2SLu0w" name="doGet" specification="_UFlzgEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJFMYUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJFMYkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;user_id&quot;) == null) {&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     String action = request.getParameter(&quot;action&quot;);&#xD;
     if (action == null) action = &quot;list&quot;;&#xD;
     &#xD;
     switch(action) {&#xD;
         case &quot;list&quot;:&#xD;
             listJobs(request, response);&#xD;
             break;&#xD;
         case &quot;detail&quot;:&#xD;
             showJobDetail(request, response);&#xD;
             break;&#xD;
         case &quot;myapplications&quot;:&#xD;
             listMyApplications(request, response);&#xD;
             break;&#xD;
         case &quot;hrview&quot;:&#xD;
             viewApplicationsForHR(request, response);&#xD;
             break;&#xD;
         default:&#xD;
             listJobs(request, response);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJFMY0VdEfCS7cth2SLu0w" name="doPost" specification="_UFmakkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJFMZEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJFMZUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;user_id&quot;) == null) {&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     String action = request.getParameter(&quot;action&quot;);&#xD;
     if (&quot;apply&quot;.equals(action)) {&#xD;
         applyForJob(request, response);&#xD;
     } else if (&quot;schedule&quot;.equals(action)) {&#xD;
         scheduleInterview(request, response);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJFMZkVdEfCS7cth2SLu0w" name="listJobs" specification="_UFnBoEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJFMZ0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJFMaEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         String sql = &quot;SELECT j.id, j.titlu, j.req, j.resp, j.dom, j.subdom, d.nume_dep, t.denumire, &quot; +&#xD;
                      &quot;CONCAT('Str.', l.strada, ', loc. ', l.oras, ', jud. ', l.judet, ', ', l.tara) as locatie, &quot; +&#xD;
                      &quot;j.start, j.end, j.ore, j.tip &quot; +&#xD;
                      &quot;FROM joburi j &quot; +&#xD;
                      &quot;JOIN departament d ON j.departament = d.id_dep &quot; +&#xD;
                      &quot;JOIN tipuri t ON j.pozitie = t.tip &quot; +&#xD;
                      &quot;LEFT JOIN locatii_joburi l ON j.id_locatie = l.id_locatie &quot; +&#xD;
                      &quot;WHERE j.activ = true AND j.end >= CURDATE()&quot;;&#xD;
         &#xD;
         PreparedStatement ps = conn.prepareStatement(sql);&#xD;
         ResultSet rs = ps.executeQuery();&#xD;
         &#xD;
         request.setAttribute(&quot;jobs&quot;, rs);&#xD;
         request.getRequestDispatcher(&quot;jobs.jsp&quot;).forward(request, response);&#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJFMaUVdEfCS7cth2SLu0w" name="showJobDetail" specification="_UFnBo0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJFMakVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJFMa0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         int jobId = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
         &#xD;
         // Get job details&#xD;
         String sql = &quot;SELECT j.*, d.nume_dep, t.denumire, &quot; +&#xD;
                      &quot;CONCAT('Str.', l.strada, ', loc. ', l.oras, ', jud. ', l.judet, ', ', l.tara) as locatie &quot; +&#xD;
                      &quot;FROM joburi j &quot; +&#xD;
                      &quot;JOIN departament d ON j.departament = d.id_dep &quot; +&#xD;
                      &quot;JOIN tipuri t ON j.pozitie = t.tip &quot; +&#xD;
                      &quot;LEFT JOIN locatii_joburi l ON j.id_locatie = l.id_locatie &quot; +&#xD;
                      &quot;WHERE j.id = ?&quot;;&#xD;
         &#xD;
         PreparedStatement ps = conn.prepareStatement(sql);&#xD;
         ps.setInt(1, jobId);&#xD;
         ResultSet rs = ps.executeQuery();&#xD;
         &#xD;
         if (rs.next()) {&#xD;
             request.setAttribute(&quot;job&quot;, rs);&#xD;
             &#xD;
             // Check if user already applied&#xD;
             HttpSession session = request.getSession();&#xD;
             int userId = (Integer) session.getAttribute(&quot;user_id&quot;);&#xD;
             &#xD;
             sql = &quot;SELECT * FROM aplicari WHERE job_id = ? AND id_ang = ?&quot;;&#xD;
             ps = conn.prepareStatement(sql);&#xD;
             ps.setInt(1, jobId);&#xD;
             ps.setInt(2, userId);&#xD;
             ResultSet appliedRs = ps.executeQuery();&#xD;
             &#xD;
             request.setAttribute(&quot;alreadyApplied&quot;, appliedRs.next());&#xD;
             request.getRequestDispatcher(&quot;job-detail.jsp&quot;).forward(request, response);&#xD;
         } else {&#xD;
             response.sendRedirect(&quot;JobsServlet&quot;);&#xD;
         }&#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJFzcEVdEfCS7cth2SLu0w" name="applyForJob" specification="_UFnosUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJFzcUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJFzckVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         HttpSession session = request.getSession();&#xD;
         int userId = (Integer) session.getAttribute(&quot;user_id&quot;);&#xD;
         int jobId = Integer.parseInt(request.getParameter(&quot;job_id&quot;));&#xD;
         &#xD;
         // Check if already applied&#xD;
         String checkSql = &quot;SELECT COUNT(*) FROM aplicari WHERE job_id = ? AND id_ang = ?&quot;;&#xD;
         PreparedStatement checkPs = conn.prepareStatement(checkSql);&#xD;
         checkPs.setInt(1, jobId);&#xD;
         checkPs.setInt(2, userId);&#xD;
         ResultSet checkRs = checkPs.executeQuery();&#xD;
         &#xD;
         if (checkRs.next() &amp;&amp; checkRs.getInt(1) > 0) {&#xD;
             request.setAttribute(&quot;error&quot;, &quot;Ați aplicat deja pentru acest job.&quot;);&#xD;
             showJobDetail(request, response);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Insert application&#xD;
         String sql = &quot;INSERT INTO aplicari (job_id, id_ang, data_apl) VALUES (?, ?, CURDATE())&quot;;&#xD;
         PreparedStatement ps = conn.prepareStatement(sql);&#xD;
         ps.setInt(1, jobId);&#xD;
         ps.setInt(2, userId);&#xD;
         &#xD;
         int result = ps.executeUpdate();&#xD;
         &#xD;
         if (result > 0) {&#xD;
             // Notify HR about the application&#xD;
             notifyHR(jobId, userId);&#xD;
             request.setAttribute(&quot;success&quot;, &quot;Aplicarea a fost înregistrată cu succes!&quot;);&#xD;
         } else {&#xD;
             request.setAttribute(&quot;error&quot;, &quot;Eroare la înregistrarea aplicării.&quot;);&#xD;
         }&#xD;
         &#xD;
         showJobDetail(request, response);&#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJFzc0VdEfCS7cth2SLu0w" name="notifyHR" specification="_TBmm8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJFzdEVdEfCS7cth2SLu0w" name="jobId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJFzdUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// Send notification to HR department (could be email or internal notification)&#xD;
     // This would be implemented based on your notification system&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJFzdkVdEfCS7cth2SLu0w" name="listMyApplications" specification="_UFoPwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJFzd0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJFzeEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         HttpSession session = request.getSession();&#xD;
         int userId = (Integer) session.getAttribute(&quot;user_id&quot;);&#xD;
         &#xD;
         String sql = &quot;SELECT a.*, j.titlu, j.dom, j.subdom, d.nume_dep, t.denumire, &quot; +&#xD;
                      &quot;CONCAT('Str.', l.strada, ', loc. ', l.oras, ', jud. ', l.judet, ', ', l.tara) as locatie &quot; +&#xD;
                      &quot;FROM aplicari a &quot; +&#xD;
                      &quot;JOIN joburi j ON a.job_id = j.id &quot; +&#xD;
                      &quot;JOIN departament d ON j.departament = d.id_dep &quot; +&#xD;
                      &quot;JOIN tipuri t ON j.pozitie = t.tip &quot; +&#xD;
                      &quot;LEFT JOIN locatii_joburi l ON j.id_locatie = l.id_locatie &quot; +&#xD;
                      &quot;WHERE a.id_ang = ? &quot; +&#xD;
                      &quot;ORDER BY a.data_apl DESC&quot;;&#xD;
         &#xD;
         PreparedStatement ps = conn.prepareStatement(sql);&#xD;
         ps.setInt(1, userId);&#xD;
         ResultSet rs = ps.executeQuery();&#xD;
         &#xD;
         request.setAttribute(&quot;applications&quot;, rs);&#xD;
         request.getRequestDispatcher(&quot;my-applications.jsp&quot;).forward(request, response);&#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJFzeUVdEfCS7cth2SLu0w" name="viewApplicationsForHR" specification="_UFoPw0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJFzekVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJFze0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         HttpSession session = request.getSession();&#xD;
         int userType = (Integer) session.getAttribute(&quot;user_type&quot;);&#xD;
         int userDep = (Integer) session.getAttribute(&quot;user_dep&quot;);&#xD;
         &#xD;
         // Check if user is HR or has appropriate permissions&#xD;
         if (userDep != 1) { // HR department&#xD;
             response.sendRedirect(&quot;index.jsp&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         String sql = &quot;SELECT a.*, u.nume, u.prenume, u.email, u.telefon, j.titlu, j.dom, j.subdom, &quot; +&#xD;
                      &quot;d.nume_dep, t.denumire, &quot; +&#xD;
                      &quot;CONCAT('Str.', l.strada, ', loc. ', l.oras, ', jud. ', l.judet, ', ', l.tara) as locatie &quot; +&#xD;
                      &quot;FROM aplicari a &quot; +&#xD;
                      &quot;JOIN useri u ON a.id_ang = u.id &quot; +&#xD;
                      &quot;JOIN joburi j ON a.job_id = j.id &quot; +&#xD;
                      &quot;JOIN departament d ON j.departament = d.id_dep &quot; +&#xD;
                      &quot;JOIN tipuri t ON j.pozitie = t.tip &quot; +&#xD;
                      &quot;LEFT JOIN locatii_joburi l ON j.id_locatie = l.id_locatie &quot; +&#xD;
                      &quot;ORDER BY a.data_apl DESC&quot;;&#xD;
         &#xD;
         PreparedStatement ps = conn.prepareStatement(sql);&#xD;
         ResultSet rs = ps.executeQuery();&#xD;
         &#xD;
         request.setAttribute(&quot;applications&quot;, rs);&#xD;
         request.getRequestDispatcher(&quot;hr-applications.jsp&quot;).forward(request, response);&#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJGagEVdEfCS7cth2SLu0w" name="scheduleInterview" specification="_UFpd4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJGagUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJGagkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Implementation for scheduling interviews&#xD;
     // This would be extended based on your requirements&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_TBmm8EVdEfCS7cth2SLu0w" name="notifyHR" visibility="private" method="_UJFzc0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_TBmm8UVdEfCS7cth2SLu0w" name="jobId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_TBmm8kVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UFlzgEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UJFMYEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFmakEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFmakUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFmakkVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UJFMY0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFmak0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFmalEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFnBoEVdEfCS7cth2SLu0w" name="listJobs" visibility="private" method="_UJFMZkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFnBoUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFnBokVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFnBo0VdEfCS7cth2SLu0w" name="showJobDetail" visibility="private" method="_UJFMaUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFnBpEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFnosEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFnosUVdEfCS7cth2SLu0w" name="applyForJob" visibility="private" method="_UJFzcEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFnoskVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFnos0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFoPwEVdEfCS7cth2SLu0w" name="listMyApplications" visibility="private" method="_UJFzdkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFoPwUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFoPwkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFoPw0VdEfCS7cth2SLu0w" name="viewApplicationsForHR" visibility="private" method="_UJFzeUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFoPxEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFoPxUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFpd4EVdEfCS7cth2SLu0w" name="scheduleInterview" visibility="private" method="_UJGagEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFpd4UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFpd4kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TBrfcEVdEfCS7cth2SLu0w" name="JobssServlet">
        <generalization xmi:id="_UFuWY0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHaYdEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHa_gEVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHa_gUVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHa_gkVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHa_g0VdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHa_hEVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHbmkEVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHbmkUVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJGag0VdEfCS7cth2SLu0w" name="doGet" specification="_UFqsAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJGahEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJGahUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;currentUser&quot;) == null) {&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
     MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);&#xD;
&#xD;
     String action = request.getParameter(&quot;action&quot;);&#xD;
     if (action == null) action = &quot;list&quot;;&#xD;
&#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         throw new ServletException(&quot;JDBC Driver neidentificat!&quot;, e);&#xD;
     }&#xD;
&#xD;
     switch(action) {&#xD;
         case &quot;list&quot;:&#xD;
             listJobs(request, response);&#xD;
             break;&#xD;
         case &quot;detail&quot;:&#xD;
             showJobDetail(request, response);&#xD;
             break;&#xD;
         case &quot;myapplications&quot;:&#xD;
             listMyApplications(request, response);&#xD;
             break;&#xD;
         case &quot;hrview&quot;:&#xD;
             viewApplicationsForHR(request, response);&#xD;
             break;&#xD;
         default:&#xD;
             listJobs(request, response);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJGahkVdEfCS7cth2SLu0w" name="doPost" specification="_UFrTEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJGah0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJGaiEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;currentUser&quot;) == null) {&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     String action = request.getParameter(&quot;action&quot;);&#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         throw new ServletException(&quot;JDBC Driver neidentificat!&quot;, e);&#xD;
     }&#xD;
&#xD;
     if (&quot;apply&quot;.equals(action)) {&#xD;
         applyForJob(request, response);&#xD;
     } else if (&quot;schedule&quot;.equals(action)) {&#xD;
         scheduleInterview(request, response);&#xD;
     } else {&#xD;
         response.sendRedirect(&quot;JobsServlet&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJHBkEVdEfCS7cth2SLu0w" name="listJobs" specification="_UFr6I0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJHBkUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJHBkkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String sql =&#xD;
         &quot;SELECT j.id, j.titlu, j.req, j.resp, j.dom, j.subdom, d.nume_dep, t.denumire, &quot; +&#xD;
         &quot;CONCAT('Str.', l.strada, ', loc. ', l.oras, ', jud. ', l.judet, ', ', l.tara) as locatie, &quot; +&#xD;
         &quot;j.start, j.end, j.ore, j.tip &quot; +&#xD;
         &quot;FROM joburi j &quot; +&#xD;
         &quot;JOIN departament d ON j.departament = d.id_dep &quot; +&#xD;
         &quot;JOIN tipuri t ON j.pozitie = t.tip &quot; +&#xD;
         &quot;LEFT JOIN locatii_joburi l ON j.id_locatie = l.id_locatie &quot; +&#xD;
         &quot;WHERE j.activ = true AND j.end >= CURDATE()&quot;;&#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
          PreparedStatement ps = conn.prepareStatement(sql);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
&#xD;
         request.setAttribute(&quot;jobs&quot;, rs);&#xD;
         request.getRequestDispatcher(&quot;jobs.jsp&quot;).forward(request, response);&#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJHBk0VdEfCS7cth2SLu0w" name="showJobDetail" specification="_UFshMkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJHBlEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJHBlUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>int jobId = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
     String sqlDetail =&#xD;
         &quot;SELECT j.*, d.nume_dep, t.denumire, &quot; +&#xD;
         &quot;CONCAT('Str.', l.strada, ', loc. ', l.oras, ', jud. ', l.judet, ', ', l.tara) as locatie &quot; +&#xD;
         &quot;FROM joburi j &quot; +&#xD;
         &quot;JOIN departament d ON j.departament = d.id_dep &quot; +&#xD;
         &quot;JOIN tipuri t ON j.pozitie = t.tip &quot; +&#xD;
         &quot;LEFT JOIN locatii_joburi l ON j.id_locatie = l.id_locatie &quot; +&#xD;
         &quot;WHERE j.id = ?&quot;;&#xD;
     String sqlCheck =&#xD;
         &quot;SELECT * FROM aplicari WHERE job_id = ? AND id_ang = ?&quot;;&#xD;
&#xD;
     HttpSession session = request.getSession();&#xD;
     int userId = ((MyUser)session.getAttribute(&quot;currentUser&quot;)).getId();&#xD;
&#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
          PreparedStatement psDetail = conn.prepareStatement(sqlDetail)) {&#xD;
&#xD;
         psDetail.setInt(1, jobId);&#xD;
         try (ResultSet rs = psDetail.executeQuery()) {&#xD;
             if (!rs.next()) {&#xD;
                 response.sendRedirect(&quot;JobsServlet&quot;);&#xD;
                 return;&#xD;
             }&#xD;
             request.setAttribute(&quot;job&quot;, rs);&#xD;
&#xD;
             try (PreparedStatement psCheck = conn.prepareStatement(sqlCheck)) {&#xD;
                 psCheck.setInt(1, jobId);&#xD;
                 psCheck.setInt(2, userId);&#xD;
                 try (ResultSet appliedRs = psCheck.executeQuery()) {&#xD;
                     request.setAttribute(&quot;alreadyApplied&quot;, appliedRs.next());&#xD;
                 }&#xD;
             }&#xD;
&#xD;
             request.getRequestDispatcher(&quot;job-detail.jsp&quot;)&#xD;
                    .forward(request, response);&#xD;
         }&#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJHBlkVdEfCS7cth2SLu0w" name="applyForJob" specification="_UFtIQEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJHBl0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJHBmEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession();&#xD;
     int userId = ((MyUser)session.getAttribute(&quot;currentUser&quot;)).getId();&#xD;
     int jobId  = Integer.parseInt(request.getParameter(&quot;job_id&quot;));&#xD;
&#xD;
     String sqlCheck = &quot;SELECT COUNT(*) FROM aplicari WHERE job_id = ? AND id_ang = ?&quot;;&#xD;
     String sqlInsert= &quot;INSERT INTO aplicari (job_id, id_ang, data_apl) VALUES (?, ?, CURDATE())&quot;;&#xD;
&#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
          PreparedStatement psCheck = conn.prepareStatement(sqlCheck)) {&#xD;
&#xD;
         psCheck.setInt(1, jobId);&#xD;
         psCheck.setInt(2, userId);&#xD;
         try (ResultSet rs = psCheck.executeQuery()) {&#xD;
             if (rs.next() &amp;&amp; rs.getInt(1) > 0) {&#xD;
                 request.setAttribute(&quot;error&quot;, &quot;Ați aplicat deja pentru acest job.&quot;);&#xD;
                 showJobDetail(request, response);&#xD;
                 return;&#xD;
             }&#xD;
         }&#xD;
&#xD;
         try (PreparedStatement psInsert = conn.prepareStatement(sqlInsert)) {&#xD;
             psInsert.setInt(1, jobId);&#xD;
             psInsert.setInt(2, userId);&#xD;
             psInsert.executeUpdate();&#xD;
         }&#xD;
&#xD;
         // notifyHR(jobId, userId);&#xD;
         request.setAttribute(&quot;success&quot;, &quot;Aplicarea a fost înregistrată cu succes!&quot;);&#xD;
         showJobDetail(request, response);&#xD;
&#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJHBmUVdEfCS7cth2SLu0w" name="listMyApplications" specification="_UFtvUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJHBmkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJHBm0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String sql =&#xD;
         &quot;SELECT a.*, j.titlu, j.dom, j.subdom, d.nume_dep, t.denumire, &quot; +&#xD;
         &quot;CONCAT('Str.', l.strada, ', loc. ', l.oras, ', jud. ', l.judet, ', ', l.tara) as locatie &quot; +&#xD;
         &quot;FROM aplicari a &quot; +&#xD;
         &quot;JOIN joburi j ON a.job_id = j.id &quot; +&#xD;
         &quot;JOIN departament d ON j.departament = d.id_dep &quot; +&#xD;
         &quot;JOIN tipuri t ON j.pozitie = t.tip &quot; +&#xD;
         &quot;LEFT JOIN locatii_joburi l ON j.id_locatie = l.id_locatie &quot; +&#xD;
         &quot;WHERE a.id_ang = ? ORDER BY a.data_apl DESC&quot;;&#xD;
&#xD;
     HttpSession session = request.getSession();&#xD;
     int userId = ((MyUser)session.getAttribute(&quot;currentUser&quot;)).getId();&#xD;
&#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
          PreparedStatement ps = conn.prepareStatement(sql)) {&#xD;
&#xD;
         ps.setInt(1, userId);&#xD;
         try (ResultSet rs = ps.executeQuery()) {&#xD;
             request.setAttribute(&quot;applications&quot;, rs);&#xD;
             request.getRequestDispatcher(&quot;my-applications.jsp&quot;).forward(request, response);&#xD;
         }&#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJHBnEVdEfCS7cth2SLu0w" name="viewApplicationsForHR" specification="_UFtvU0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJHBnUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJHBnkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession();&#xD;
     MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);&#xD;
&#xD;
     String sql =&#xD;
         &quot;SELECT a.*, u.nume, u.prenume, u.email, u.telefon, j.titlu, j.dom, j.subdom, &quot; +&#xD;
         &quot;d.nume_dep, t.denumire, &quot; +&#xD;
         &quot;CONCAT('Str.', l.strada, ', loc. ', l.oras, ', jud. ', l.judet, ', ', l.tara) as locatie &quot; +&#xD;
         &quot;FROM aplicari a &quot; +&#xD;
         &quot;JOIN useri u ON a.id_ang = u.id &quot; +&#xD;
         &quot;JOIN joburi j ON a.job_id = j.id &quot; +&#xD;
         &quot;JOIN departament d ON j.departament = d.id_dep &quot; +&#xD;
         &quot;JOIN tipuri t ON j.pozitie = t.tip &quot; +&#xD;
         &quot;LEFT JOIN locatii_joburi l ON j.id_locatie = l.id_locatie &quot; +&#xD;
         &quot;ORDER BY a.data_apl DESC&quot;;&#xD;
&#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
          PreparedStatement ps = conn.prepareStatement(sql);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
&#xD;
         request.setAttribute(&quot;applications&quot;, rs);&#xD;
         request.getRequestDispatcher(&quot;hr-applications.jsp&quot;).forward(request, response);&#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJHooEVdEfCS7cth2SLu0w" name="scheduleInterview" specification="_UFuWYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJHooUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJHookVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// implementare programare interviu&#xD;
     response.sendRedirect(&quot;interview-schedule.jsp&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UFqsAEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UJGag0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFqsAUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFqsAkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFrTEEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UJGahkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFrTEUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFrTEkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFr6I0VdEfCS7cth2SLu0w" name="listJobs" visibility="private" method="_UJHBkEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFshMEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFshMUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFshMkVdEfCS7cth2SLu0w" name="showJobDetail" visibility="private" method="_UJHBk0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFshM0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFshNEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFtIQEVdEfCS7cth2SLu0w" name="applyForJob" visibility="private" method="_UJHBlkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFtIQUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFtIQkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFtvUEVdEfCS7cth2SLu0w" name="listMyApplications" visibility="private" method="_UJHBmUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFtvUUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFtvUkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFtvU0VdEfCS7cth2SLu0w" name="viewApplicationsForHR" visibility="private" method="_UJHBnEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFtvVEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFtvVUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFuWYEVdEfCS7cth2SLu0w" name="scheduleInterview" visibility="private" method="_UJHooEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFuWYUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFuWYkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TByNIEVdEfCS7cth2SLu0w" name="JsonServlet">
        <generalization xmi:id="_UFyAw0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHcNoEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHcNoUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJHoo0VdEfCS7cth2SLu0w" name="doPost" specification="_UFvkgEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJHopEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJHopUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);
     PrintWriter out = response.getWriter();
     
     HttpSession session = request.getSession(false);
     if (session == null || session.getAttribute(&quot;currentUser&quot;) == null) {
         response.sendError(HttpServletResponse.SC_UNAUTHORIZED, &quot;User not logged in&quot;);
         return;
     }
     
     MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);
     
     // Get parameters from the form
     String statusParam = request.getParameter(&quot;status&quot;);
     String departmentParam = request.getParameter(&quot;dep&quot;);
     String tipConcediuParam = request.getParameter(&quot;tip_concediu&quot;);
     String tipParam = request.getParameter(&quot;tip&quot;);
     String monthParam = request.getParameter(&quot;month&quot;);
     String userIdParam = request.getParameter(&quot;user_id&quot;);
     
     int status = 3; // Default: Any status
     int department = -1; // Default: Any department
     int tipConcediu = -1; // Default: Any leave type
     int type = 1; // Default report type: Annual
     int month = -1; // Default: No specific month
     int userId = -1; // Default: No specific user
     
     try {
         if (statusParam != null &amp;&amp; !statusParam.isEmpty()) {
             status = Integer.parseInt(statusParam);
         }
         if (departmentParam != null &amp;&amp; !departmentParam.isEmpty()) {
             department = Integer.parseInt(departmentParam);
         }
         if (tipConcediuParam != null &amp;&amp; !tipConcediuParam.isEmpty()) {
             tipConcediu = Integer.parseInt(tipConcediuParam);
         }
         if (tipParam != null &amp;&amp; !tipParam.isEmpty()) {
             type = Integer.parseInt(tipParam);
         }
         if (monthParam != null &amp;&amp; !monthParam.isEmpty()) {
             month = Integer.parseInt(monthParam);
         }
         if (userIdParam != null &amp;&amp; !userIdParam.isEmpty()) {
             userId = Integer.parseInt(userIdParam);
         }
     } catch (NumberFormatException e) {
         System.out.println(&quot;Error parsing parameters: &quot; + e.getMessage());
     }
     
     JSONObject jsonResponse = new JSONObject();
     
     try {
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
         try (Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {
             // Fetch status name
             String statusName = &quot;Toate statusurile&quot;; // Default
             if (status != 3) {
                 try (PreparedStatement statusStmt = conn.prepareStatement(&quot;SELECT nume_status FROM statusuri WHERE status = ?&quot;)) {
                     statusStmt.setInt(1, status);
                     try (ResultSet statusRs = statusStmt.executeQuery()) {
                         if (statusRs.next()) {
                             statusName = statusRs.getString(&quot;nume_status&quot;);
                         }
                     }
                 }
             }
             
             // Fetch department name
             String departmentName = &quot;Toate departamentele&quot;; // Default
             if (department != -1) {
                 try (PreparedStatement deptStmt = conn.prepareStatement(&quot;SELECT nume_dep FROM departament WHERE id_dep = ?&quot;)) {
                     deptStmt.setInt(1, department);
                     try (ResultSet deptRs = deptStmt.executeQuery()) {
                         if (deptRs.next()) {
                             departmentName = deptRs.getString(&quot;nume_dep&quot;);
                         }
                     }
                 }
             }
             
             // Fetch user name if userId is provided
             String userName = null;
             if (userId != -1) {
                 try (PreparedStatement userStmt = conn.prepareStatement(&quot;SELECT CONCAT(nume, ' ', prenume) as full_name FROM useri WHERE id = ?&quot;)) {
                     userStmt.setInt(1, userId);
                     try (ResultSet userRs = userStmt.executeQuery()) {
                         if (userRs.next()) {
                             userName = userRs.getString(&quot;full_name&quot;);
                             departmentName = userName; // Override department name with user name for display
                         }
                     }
                 }
             }
             
             // Fetch tip concediu name
             String tipConcediuName = &quot;Toate tipurile&quot;; // Default
             if (tipConcediu != -1) {
                 try (PreparedStatement tipStmt = conn.prepareStatement(&quot;SELECT motiv FROM tipcon WHERE tip = ?&quot;)) {
                     tipStmt.setInt(1, tipConcediu);
                     try (ResultSet tipRs = tipStmt.executeQuery()) {
                         if (tipRs.next()) {
                             tipConcediuName = tipRs.getString(&quot;motiv&quot;);
                         }
                     }
                 }
             }
             
             if (type == 2 &amp;&amp; month != -1) {
                 // Monthly report with daily breakdown
                 generateMonthlyReport(conn, jsonResponse, status, department, tipConcediu, month, userId, statusName, departmentName, tipConcediuName);
             } else {
                 // Annual report with monthly breakdown (default)
                 generateAnnualReport(conn, jsonResponse, status, department, tipConcediu, userId, statusName, departmentName, tipConcediuName);
             }
             
             out.print(jsonResponse.toString());
         }
     } catch (Exception e) {
         e.printStackTrace();
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
         JSONObject error = new JSONObject();
         error.put(&quot;error&quot;, e.getMessage());
         out.print(error.toString());
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJIPsEVdEfCS7cth2SLu0w" name="generateAnnualReport" specification="_UFwLkkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJIPsUVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJIPskVdEfCS7cth2SLu0w" name="jsonResponse" type="_T-58sEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJIPs0VdEfCS7cth2SLu0w" name="status">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJIPtEVdEfCS7cth2SLu0w" name="department">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJIPtUVdEfCS7cth2SLu0w" name="tipConcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJIPtkVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJIPt0VdEfCS7cth2SLu0w" name="statusName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJIPuEVdEfCS7cth2SLu0w" name="departmentName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJIPuUVdEfCS7cth2SLu0w" name="tipConcediuName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>// Build the base query for annual report (by month)
     StringBuilder queryBuilder = new StringBuilder();
     queryBuilder.append(&quot;SELECT MONTH(c.start_c) as month, YEAR(c.start_c) as year, COUNT(*) as count &quot;)
                .append(&quot;FROM concedii c &quot;)
                .append(&quot;JOIN useri u ON c.id_ang = u.id where year(c.start_c) = year(current_date())&quot;);
     
     boolean whereAdded = true;
     
     // Add status condition if needed
     if (status != 3) {
         queryBuilder.append(whereAdded ? &quot; AND &quot; : &quot; WHERE &quot;);
         queryBuilder.append(&quot;c.status = ?&quot;);
         whereAdded = true;
     }
     
     // Add department condition if needed
     if (department != -1) {
         queryBuilder.append(whereAdded ? &quot; AND &quot; : &quot; WHERE &quot;);
         queryBuilder.append(&quot;u.id_dep = ?&quot;);
         whereAdded = true;
     }
     
     // Add user_id condition if needed
     if (userId != -1) {
         queryBuilder.append(whereAdded ? &quot; AND &quot; : &quot; WHERE &quot;);
         queryBuilder.append(&quot;c.id_ang = ?&quot;);
         whereAdded = true;
     }
     
     // Add tip concediu condition if needed
     if (tipConcediu != -1) {
         queryBuilder.append(whereAdded ? &quot; AND &quot; : &quot; WHERE &quot;);
         queryBuilder.append(&quot;c.tip = ?&quot;);
         whereAdded = true;
     }
     
     // Group by month and year
     queryBuilder.append(&quot; GROUP BY YEAR(c.start_c), MONTH(c.start_c) ORDER BY YEAR(c.start_c), MONTH(c.start_c)&quot;);
     
     String finalQuery = queryBuilder.toString();
     
     // Execute the query with parameters
     try (PreparedStatement stmt = conn.prepareStatement(finalQuery)) {
         int paramIndex = 1;
         
         if (status != 3) {
             stmt.setInt(paramIndex++, status);
         }
         
         if (department != -1) {
             stmt.setInt(paramIndex++, department);
         }
         
         if (userId != -1) {
             stmt.setInt(paramIndex++, userId);
         }
         
         if (tipConcediu != -1) {
             stmt.setInt(paramIndex++, tipConcediu);
         }
         
         Map&lt;String, Integer> monthCounts = new TreeMap&lt;>(); // TreeMap to keep months in order
         String[] monthNames = {&quot;Ianuarie&quot;, &quot;Februarie&quot;, &quot;Martie&quot;, &quot;Aprilie&quot;, &quot;Mai&quot;, &quot;Iunie&quot;, 
                               &quot;Iulie&quot;, &quot;August&quot;, &quot;Septembrie&quot;, &quot;Octombrie&quot;, &quot;Noiembrie&quot;, &quot;Decembrie&quot;};
         
         // Execute query and process results
         try (ResultSet rs = stmt.executeQuery()) {
             while (rs.next()) {
                 int month = rs.getInt(&quot;month&quot;);
                 int year = rs.getInt(&quot;year&quot;);
                 int count = rs.getInt(&quot;count&quot;);
                 
                 String monthKey = monthNames[month-1] + &quot; &quot; + year;
                 monthCounts.put(monthKey, count);
             }
         }
         
         // Create JSON arrays for chart data
         JSONArray monthsArray = new JSONArray();
         JSONArray countsArray = new JSONArray();
         
         for (Map.Entry&lt;String, Integer> entry : monthCounts.entrySet()) {
             monthsArray.put(entry.getKey());
             countsArray.put(entry.getValue());
         }
         
         // Build response JSON
         StringBuilder titleBuilder = new StringBuilder(&quot;Raport concedii&quot;);
         if (!statusName.equals(&quot;Toate statusurile&quot;)) {
             titleBuilder.append(&quot; - &quot;).append(statusName);
         }
         if (userId != -1) {
             titleBuilder.append(&quot; - &quot;).append(departmentName); // departmentName contains user name in this case
         } else if (!departmentName.equals(&quot;Toate departamentele&quot;)) {
             titleBuilder.append(&quot; - &quot;).append(departmentName);
         }
         if (!tipConcediuName.equals(&quot;Toate tipurile&quot;)) {
             titleBuilder.append(&quot; - &quot;).append(tipConcediuName);
         }
         
         jsonResponse.put(&quot;h3&quot;, titleBuilder.toString());
         jsonResponse.put(&quot;months&quot;, monthsArray);
         jsonResponse.put(&quot;counts&quot;, countsArray);
         jsonResponse.put(&quot;status&quot;, String.valueOf(status));
         jsonResponse.put(&quot;statusName&quot;, statusName);
         jsonResponse.put(&quot;departament&quot;, departmentName);
         jsonResponse.put(&quot;tipConcediuName&quot;, tipConcediuName);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJI2wEVdEfCS7cth2SLu0w" name="generateMonthlyReport" specification="_UFwyoEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJI2wUVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJI2wkVdEfCS7cth2SLu0w" name="jsonResponse" type="_T-58sEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJI2w0VdEfCS7cth2SLu0w" name="status">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJI2xEVdEfCS7cth2SLu0w" name="department">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJI2xUVdEfCS7cth2SLu0w" name="tipConcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJI2xkVdEfCS7cth2SLu0w" name="month">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJI2x0VdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJI2yEVdEfCS7cth2SLu0w" name="statusName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJI2yUVdEfCS7cth2SLu0w" name="departmentName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UJI2ykVdEfCS7cth2SLu0w" name="tipConcediuName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>// Get current year
     int currentYear = LocalDate.now().getYear();
     
     // Determine the number of days in the specified month
     YearMonth yearMonthObject = YearMonth.of(currentYear, month);
     int daysInMonth = yearMonthObject.lengthOfMonth();
     
     // Build the query for daily report within the specified month
     StringBuilder queryBuilder = new StringBuilder();
     queryBuilder.append(&quot;SELECT DAY(date_range.date) as day, COALESCE(COUNT(c.id), 0) as count &quot;)
                .append(&quot;FROM (&quot;);
     
     // Generate a range of dates for the month
     for (int i = 1; i &lt;= daysInMonth; i++) {
         if (i > 1) queryBuilder.append(&quot; UNION ALL &quot;);
         queryBuilder.append(&quot;SELECT '&quot;).append(currentYear).append(&quot;-&quot;).append(month).append(&quot;-&quot;).append(i).append(&quot;' as date&quot;);
     }
     
     queryBuilder.append(&quot;) as date_range &quot;)
                .append(&quot;LEFT JOIN concedii c ON date_range.date BETWEEN c.start_c AND c.end_c &quot;)
                .append(&quot;LEFT JOIN useri u ON c.id_ang = u.id &quot;);
     
     // Add WHERE conditions
     boolean whereAdded = false;
     
     if (status != 3) {
         queryBuilder.append(whereAdded ? &quot; AND &quot; : &quot; WHERE &quot;);
         queryBuilder.append(&quot;c.status = ?&quot;);
         whereAdded = true;
     }
     
     if (department != -1) {
         queryBuilder.append(whereAdded ? &quot; AND &quot; : &quot; WHERE &quot;);
         queryBuilder.append(&quot;u.id_dep = ?&quot;);
         whereAdded = true;
     }
     
     if (userId != -1) {
         queryBuilder.append(whereAdded ? &quot; AND &quot; : &quot; WHERE &quot;);
         queryBuilder.append(&quot;c.id_ang = ?&quot;);
         whereAdded = true;
     }
     
     if (tipConcediu != -1) {
         queryBuilder.append(whereAdded ? &quot; AND &quot; : &quot; WHERE &quot;);
         queryBuilder.append(&quot;c.tip = ?&quot;);
         whereAdded = true;
     }
     
     // Group by day and order by day
     queryBuilder.append(&quot; GROUP BY date_range.date &quot;)
                .append(&quot;ORDER BY date_range.date&quot;);
     
     String finalQuery = queryBuilder.toString();
     
     // Execute the query with parameters
     try (PreparedStatement stmt = conn.prepareStatement(finalQuery)) {
         int paramIndex = 1;
         
         if (status != 3) {
             stmt.setInt(paramIndex++, status);
         }
         
         if (department != -1) {
             stmt.setInt(paramIndex++, department);
         }
         
         if (userId != -1) {
             stmt.setInt(paramIndex++, userId);
         }
         
         if (tipConcediu != -1) {
             stmt.setInt(paramIndex++, tipConcediu);
         }
         
         // Execute query and process results
         JSONArray daysArray = new JSONArray();
         JSONArray countsArray = new JSONArray();
         
         try (ResultSet rs = stmt.executeQuery()) {
             while (rs.next()) {
                 int day = rs.getInt(&quot;day&quot;);
                 int count = rs.getInt(&quot;count&quot;);
                 
                 daysArray.put(day);
                 countsArray.put(count);
             }
         }
         
         // Get the month name
         String[] monthNames = {&quot;Ianuarie&quot;, &quot;Februarie&quot;, &quot;Martie&quot;, &quot;Aprilie&quot;, &quot;Mai&quot;, &quot;Iunie&quot;, 
                               &quot;Iulie&quot;, &quot;August&quot;, &quot;Septembrie&quot;, &quot;Octombrie&quot;, &quot;Noiembrie&quot;, &quot;Decembrie&quot;};
         String monthName = monthNames[month-1];
         
         // Build response JSON
         StringBuilder titleBuilder = new StringBuilder();
         if (userId != -1) {
             titleBuilder.append(&quot;Raport concedii personale pentru luna &quot;).append(monthName);
         } else {
             titleBuilder.append(&quot;Raport concedii pentru luna &quot;).append(monthName);
         }
         
         if (!statusName.equals(&quot;Toate statusurile&quot;)) {
             titleBuilder.append(&quot; - &quot;).append(statusName);
         }
         if (userId == -1 &amp;&amp; !departmentName.equals(&quot;Toate departamentele&quot;)) {
             titleBuilder.append(&quot; - &quot;).append(departmentName);
         }
         if (!tipConcediuName.equals(&quot;Toate tipurile&quot;)) {
             titleBuilder.append(&quot; - &quot;).append(tipConcediuName);
         }
         
         jsonResponse.put(&quot;h3&quot;, titleBuilder.toString());
         jsonResponse.put(&quot;months&quot;, daysArray); // Reusing &quot;months&quot; key for days for compatibility
         jsonResponse.put(&quot;counts&quot;, countsArray);
         jsonResponse.put(&quot;status&quot;, String.valueOf(status));
         jsonResponse.put(&quot;statusName&quot;, statusName);
         jsonResponse.put(&quot;departament&quot;, departmentName);
         jsonResponse.put(&quot;tipConcediuName&quot;, tipConcediuName);
         jsonResponse.put(&quot;monthName&quot;, monthName);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJI2y0VdEfCS7cth2SLu0w" name="doGet" specification="_UFxZsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJI2zEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJI2zUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doPost(request, response);
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_UFvkgEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UJHoo0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFvkgUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFvkgkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFwLkkVdEfCS7cth2SLu0w" name="generateAnnualReport" visibility="private" method="_UJIPsEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFwLk0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFwLlEVdEfCS7cth2SLu0w" name="jsonResponse" type="_T-58sEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFwLlUVdEfCS7cth2SLu0w" name="status">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFwLlkVdEfCS7cth2SLu0w" name="department">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFwLl0VdEfCS7cth2SLu0w" name="tipConcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFwLmEVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFwLmUVdEfCS7cth2SLu0w" name="statusName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFwLmkVdEfCS7cth2SLu0w" name="departmentName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFwLm0VdEfCS7cth2SLu0w" name="tipConcediuName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UFwyoEVdEfCS7cth2SLu0w" name="generateMonthlyReport" visibility="private" method="_UJI2wEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFwyoUVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFwyokVdEfCS7cth2SLu0w" name="jsonResponse" type="_T-58sEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFwyo0VdEfCS7cth2SLu0w" name="status">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFwypEVdEfCS7cth2SLu0w" name="department">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFwypUVdEfCS7cth2SLu0w" name="tipConcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFwypkVdEfCS7cth2SLu0w" name="month">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFwyp0VdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFwyqEVdEfCS7cth2SLu0w" name="statusName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFwyqUVdEfCS7cth2SLu0w" name="departmentName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UFwyqkVdEfCS7cth2SLu0w" name="tipConcediuName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UFxZsEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_UJI2y0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFxZsUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFxZskVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TB3FoEVdEfCS7cth2SLu0w" name="JsonServlet2">
        <ownedComment xmi:id="_UJcYwEVdEfCS7cth2SLu0w">
          <body>Servlet implementation class JsonServlet</body>
        </ownedComment>
        <generalization xmi:id="_UFzO40VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHcNokVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHc0sEVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHc0sUVdEfCS7cth2SLu0w" name="out" visibility="package" type="_T-CaAEVdEfCS7cth2SLu0w" association="_UKb3QUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJI2zkVdEfCS7cth2SLu0w" name="JsonServlet2" specification="_TB3ssEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJI2z0VdEfCS7cth2SLu0w" type="_TB3FoEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();
     // TODO Auto-generated constructor stub
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJI20EVdEfCS7cth2SLu0w" name="doPost" specification="_UFzO4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJI20UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJI20kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// TODO Auto-generated method stub
		
	        
	        String statusParam = request.getParameter(&quot;status&quot;);
         String depParam = request.getParameter(&quot;dep&quot;);

         int status = (statusParam != null) ? Integer.parseInt(statusParam) : 3;
         int dep = (depParam != null) ? Integer.parseInt(depParam) : -1;
         Map&lt;Integer, Integer> leaveCountMap = new HashMap&lt;>();
         for (int i = 1; i &lt;= 12; i++) {
             leaveCountMap.put(i, 0);
         }

         String baseQuery = &quot;SELECT MONTH(month_dates) AS month, CEIL(COUNT(*) / 2) AS numar_concedii FROM (&quot;;

         String joinClause = &quot; JOIN useri ON id_ang = useri.id JOIN departament ON useri.id_dep = departament.id_dep&quot;;
         String whereClause = &quot; WHERE YEAR(start_c) = YEAR(CURRENT_DATE())&quot;;
         ArrayList&lt;String> conditions = new ArrayList&lt;>();

         if (status != 3) {
             conditions.add(&quot; status = ?&quot;);
         }
         if (dep != -1) {
             conditions.add(&quot; departament.id_dep = ?&quot;);
         }
         if (!conditions.isEmpty()) {
             whereClause += &quot; AND &quot; + String.join(&quot; AND&quot;, conditions);
         }

         // Subqueries
         String subQuery1 = &quot;SELECT start_c AS month_dates FROM concedii&quot; + joinClause + whereClause;
         String subQuery2 = &quot; UNION ALL SELECT end_c FROM concedii&quot; + joinClause + whereClause;
         String subQuery3 = &quot; UNION ALL SELECT DATE_ADD(start_c, INTERVAL 1 MONTH) AS month_dates FROM concedii&quot; + joinClause + whereClause + &quot; AND MONTH(start_c) &lt;> MONTH(end_c)&quot;;

         // Final query
         String query = baseQuery + subQuery1 + subQuery2 + subQuery3 + &quot;) AS combined_dates GROUP BY MONTH(month_dates)&quot;;

         try {
             Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
         } catch (ClassNotFoundException e) {
             e.printStackTrace();
         }

         try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
              PreparedStatement stmt = connection.prepareStatement(query)) {
             int paramIndex = 1;
             if (status != 3) {
                 stmt.setInt(paramIndex++, status);
                 stmt.setInt(paramIndex++, status);
                 stmt.setInt(paramIndex++, status);
             }
             if (dep != -1) {
                 stmt.setInt(paramIndex++, dep);
                 stmt.setInt(paramIndex++, dep);
                 stmt.setInt(paramIndex++, dep);
             }

             System.out.println(stmt);
             ResultSet rs1 = stmt.executeQuery();
             while (rs1.next()) {
                 int month = rs1.getInt(&quot;month&quot;);
                 int count = rs1.getInt(&quot;numar_concedii&quot;);
                 leaveCountMap.put(month, count);
             }

             ArrayList&lt;Integer> months = new ArrayList&lt;>();
             ArrayList&lt;Integer> counts = new ArrayList&lt;>();
             for (int i = 1; i &lt;= 12; i++) {
                 months.add(i);
                 counts.add(leaveCountMap.get(i));
             }
             System.out.println(status + &quot; &quot; + dep);
             JSONObject json = new JSONObject();
             json.put(&quot;months&quot;, new JSONArray(months));
             json.put(&quot;counts&quot;, new JSONArray(counts));
             json.put(&quot;status&quot;, status);
             json.put(&quot;departament&quot;, dep);
             String statuss = &quot;&quot;;
             String depp = &quot;&quot;;
             if (status == -1) {
             	statuss = &quot;respinse de sef&quot;;
             }
             if (status == -2) {
             	statuss = &quot;respinse de director&quot;;
             }
             if (status == 1) {
             	statuss = &quot;aprobate de sef&quot;;
             }
             if (status == 2) {
             	statuss = &quot;aprobate de director&quot;;
             }
             if (status == 0) {
             	statuss = &quot;in asteptare&quot;;
             }
             if (status == 3) {
             	statuss = &quot;de orice fel&quot;;
             }
             if (dep == -1) {
             	depp = &quot;toata institutia&quot;;
             } else {
             	  try (PreparedStatement stm = connection.prepareStatement(&quot;SELECT * FROM departament;&quot;)) {
                       try (ResultSet rs2 = stm.executeQuery()) {
                           while (rs2.next()) {
                               int id = rs2.getInt(&quot;id_dep&quot;);
                               String nume = rs2.getString(&quot;nume_dep&quot;);
                               if(dep == id)
                               depp = &quot;departamentul &quot; + nume;
                           }
                       }
                   }
             }
             String msg = &quot;Vizualizare concedii &quot;+ statuss + &quot; din &quot; + depp;
             json.put(&quot;h3&quot;, msg);
             System.out.println(json);
             response.setContentType(&quot;application/json&quot;);
             response.setCharacterEncoding(&quot;UTF-8&quot;);
             response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;); // for development only, specify domains in production
             response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST&quot;);
             response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type&quot;);

             PrintWriter out = response.getWriter();
             out.print(json.toString());
             out.flush();
         } catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

	</body>
        </ownedBehavior>
        <ownedOperation xmi:id="_TB3ssEVdEfCS7cth2SLu0w" name="JsonServlet2" method="_UJI2zkVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_TB3ssUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_TB3sskVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_TB3ss0VdEfCS7cth2SLu0w" type="_TB3FoEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFzO4EVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UJI20EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFzO4UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFzO4kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_TB6I8EVdEfCS7cth2SLu0w" name="JsonServlet3">
        <ownedComment xmi:id="_UJcYwUVdEfCS7cth2SLu0w">
          <body>Servlet implementation class JsonServlet</body>
        </ownedComment>
        <generalization xmi:id="_UF0dAEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UHdbwEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UHdbwUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UHdbwkVdEfCS7cth2SLu0w" name="out" visibility="package" type="_T-CaAEVdEfCS7cth2SLu0w" association="_UKceUUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJJd0EVdEfCS7cth2SLu0w" name="JsonServlet3" specification="_TB6wAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJJd0UVdEfCS7cth2SLu0w" type="_TB6I8EVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();
     // TODO Auto-generated constructor stub
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UJJd0kVdEfCS7cth2SLu0w" name="doPost" specification="_UFz18EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UJJd00VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UJJd1EVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// TODO Auto-generated method stub
		
	        
	        String statusParam = request.getParameter(&quot;status&quot;);
         String depParam = request.getParameter(&quot;dep&quot;);

         int status = (statusParam != null) ? Integer.parseInt(statusParam) : 3;
         int dep = (depParam != null) ? Integer.parseInt(depParam) : -1;
         Map&lt;Integer, Integer> leaveCountMap = new HashMap&lt;>();
         for (int i = 1; i &lt;= 12; i++) {
             leaveCountMap.put(i, 0);
         }

         String baseQuery = &quot;SELECT MONTH(month_dates) AS month, CEIL(COUNT(*) / 2) AS numar_concedii FROM (&quot;;

         String joinClause = &quot; JOIN useri ON id_ang = useri.id JOIN departament ON useri.id_dep = departament.id_dep&quot;;
         String whereClause = &quot; WHERE YEAR(start_c) = YEAR(CURRENT_DATE())&quot;;
         ArrayList&lt;String> conditions = new ArrayList&lt;>();

         if (status != 3) {
             conditions.add(&quot; status = ?&quot;);
         }
         if (dep != -1) {
             conditions.add(&quot; departament.id_dep = ?&quot;);
         }
         if (!conditions.isEmpty()) {
             whereClause += &quot; AND &quot; + String.join(&quot; AND&quot;, conditions);
         }

         // Subqueries
         String subQuery1 = &quot;SELECT start_c AS month_dates FROM concedii&quot; + joinClause + whereClause;
         String subQuery2 = &quot; UNION ALL SELECT end_c FROM concedii&quot; + joinClause + whereClause;
         String subQuery3 = &quot; UNION ALL SELECT DATE_ADD(start_c, INTERVAL 1 MONTH) AS month_dates FROM concedii&quot; + joinClause + whereClause + &quot; AND MONTH(start_c) &lt;> MONTH(end_c)&quot;;

         // Final query
         String query = baseQuery + subQuery1 + subQuery2 + subQuery3 + &quot;) AS combined_dates GROUP BY MONTH(month_dates)&quot;;

         try {
             Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
         } catch (ClassNotFoundException e) {
             e.printStackTrace();
         }

         try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
              PreparedStatement stmt = connection.prepareStatement(query)) {
             int paramIndex = 1;
             if (status != 3) {
                 stmt.setInt(paramIndex++, status);
                 stmt.setInt(paramIndex++, status);
                 stmt.setInt(paramIndex++, status);
             }
             if (dep != -1) {
                 stmt.setInt(paramIndex++, dep);
                 stmt.setInt(paramIndex++, dep);
                 stmt.setInt(paramIndex++, dep);
             }

             System.out.println(stmt);
             ResultSet rs1 = stmt.executeQuery();
             while (rs1.next()) {
                 int month = rs1.getInt(&quot;month&quot;);
                 int count = rs1.getInt(&quot;numar_concedii&quot;);
                 leaveCountMap.put(month, count);
             }

             ArrayList&lt;Integer> months = new ArrayList&lt;>();
             ArrayList&lt;Integer> counts = new ArrayList&lt;>();
             for (int i = 1; i &lt;= 12; i++) {
                 months.add(i);
                 counts.add(leaveCountMap.get(i));
             }
             System.out.println(status + &quot; &quot; + dep);
             JSONObject json = new JSONObject();
             json.put(&quot;months&quot;, new JSONArray(months));
             json.put(&quot;counts&quot;, new JSONArray(counts));
             json.put(&quot;status&quot;, status);
             json.put(&quot;departament&quot;, dep);
             String statuss = &quot;&quot;;
             String depp = &quot;&quot;;
             if (status == -1) {
             	statuss = &quot;respinse de sef&quot;;
             }
             if (status == -2) {
             	statuss = &quot;respinse de director&quot;;
             }
             if (status == 1) {
             	statuss = &quot;aprobate de sef&quot;;
             }
             if (status == 2) {
             	statuss = &quot;aprobate de director&quot;;
             }
             if (status == 0) {
             	statuss = &quot;in asteptare&quot;;
             }
             if (status == 3) {
             	statuss = &quot;de orice fel&quot;;
             }
             if (dep == -1) {
             	depp = &quot;toata institutia&quot;;
             } else {
             	  try (PreparedStatement stm = connection.prepareStatement(&quot;SELECT * FROM departament;&quot;)) {
                       try (ResultSet rs2 = stm.executeQuery()) {
                           while (rs2.next()) {
                               int id = rs2.getInt(&quot;id_dep&quot;);
                               String nume = rs2.getString(&quot;nume_dep&quot;);
                               if(dep == id)
                               depp = &quot;departamentul &quot; + nume;
                           }
                       }
                   }
             }
             String msg = &quot;Vizualizare concedii &quot;+ statuss + &quot; din &quot; + depp;
             json.put(&quot;h3&quot;, msg);
             System.out.println(json);
             response.setContentType(&quot;application/json&quot;);
             response.setCharacterEncoding(&quot;UTF-8&quot;);
             response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;); // for development only, specify domains in production
             response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST&quot;);
             response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type&quot;);

             PrintWriter out = response.getWriter();
             out.print(json.toString());
             out.flush();
         } catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

	</body>
        </ownedBehavior>
        <ownedOperation xmi:id="_TB6wAEVdEfCS7cth2SLu0w" name="JsonServlet3" method="_UJJd0EVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_TB6wAUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_TB6wAkVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_TB6wA0VdEfCS7cth2SLu0w" type="_TB6I8EVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UFz18EVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_UJJd0kVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UFz18UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UFz18kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKPC8UVdEfCS7cth2SLu0w" name="" memberEnd="_UKPC8kVdEfCS7cth2SLu0w _UGekUkVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKPC8kVdEfCS7cth2SLu0w" name="" type="_S7W1AEVdEfCS7cth2SLu0w" association="_UKPC8UVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKPqAUVdEfCS7cth2SLu0w" name="" memberEnd="_UKPqAkVdEfCS7cth2SLu0w _UGhno0VdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKPqAkVdEfCS7cth2SLu0w" name="" type="_S7kQYEVdEfCS7cth2SLu0w" association="_UKPqAUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKQ4IUVdEfCS7cth2SLu0w" name="" memberEnd="_UKQ4IkVdEfCS7cth2SLu0w _UGkq8UVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKQ4IkVdEfCS7cth2SLu0w" name="" type="_S78q4EVdEfCS7cth2SLu0w" association="_UKQ4IUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKQ4JEVdEfCS7cth2SLu0w" name="" memberEnd="_UKQ4JUVdEfCS7cth2SLu0w _UGmgIEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKQ4JUVdEfCS7cth2SLu0w" name="" type="_S8CxgEVdEfCS7cth2SLu0w" association="_UKQ4JEVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKRfMUVdEfCS7cth2SLu0w" name="" memberEnd="_UKRfMkVdEfCS7cth2SLu0w _UGsmwEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKRfMkVdEfCS7cth2SLu0w" name="" type="_S87iUEVdEfCS7cth2SLu0w" association="_UKRfMUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKSGQUVdEfCS7cth2SLu0w" name="" memberEnd="_UKSGQkVdEfCS7cth2SLu0w _UGtN0kVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKSGQkVdEfCS7cth2SLu0w" name="" type="_S9CQAEVdEfCS7cth2SLu0w" association="_UKSGQUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKStUUVdEfCS7cth2SLu0w" name="" memberEnd="_UKStUkVdEfCS7cth2SLu0w _UGub8EVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKStUkVdEfCS7cth2SLu0w" name="" type="_S9GhcEVdEfCS7cth2SLu0w" association="_UKStUUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKTUYUVdEfCS7cth2SLu0w" name="" memberEnd="_UKTUYkVdEfCS7cth2SLu0w _UGvDAUVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKTUYkVdEfCS7cth2SLu0w" name="" type="_S9LZ8EVdEfCS7cth2SLu0w" association="_UKTUYUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKT7cUVdEfCS7cth2SLu0w" name="" memberEnd="_UKT7ckVdEfCS7cth2SLu0w _UGwRIUVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKT7ckVdEfCS7cth2SLu0w" name="" type="_S9LZ8EVdEfCS7cth2SLu0w" association="_UKT7cUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKUigUVdEfCS7cth2SLu0w" name="" memberEnd="_UKUigkVdEfCS7cth2SLu0w _UGz7gkVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKUigkVdEfCS7cth2SLu0w" name="" type="_S9yd8EVdEfCS7cth2SLu0w" association="_UKUigUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKbQMEVdEfCS7cth2SLu0w" name="" memberEnd="_UKbQMUVdEfCS7cth2SLu0w _UHQndEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKbQMUVdEfCS7cth2SLu0w" name="" type="_TAo9oEVdEfCS7cth2SLu0w" association="_UKbQMEVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKb3QUVdEfCS7cth2SLu0w" name="" memberEnd="_UKb3QkVdEfCS7cth2SLu0w _UHc0sUVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKb3QkVdEfCS7cth2SLu0w" name="" type="_TB3FoEVdEfCS7cth2SLu0w" association="_UKb3QUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKceUUVdEfCS7cth2SLu0w" name="" memberEnd="_UKceUkVdEfCS7cth2SLu0w _UHdbwkVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKceUkVdEfCS7cth2SLu0w" name="" type="_TB6I8EVdEfCS7cth2SLu0w" association="_UKceUUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_VnDmQEVdEfCS7cth2SLu0w" name="EnhancedNLPProcessor">
        <packagedElement xmi:type="uml:Class" xmi:id="_V8HQQUVdEfCS7cth2SLu0w" name="AdvancedTokenization"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_V8HQQ0VdEfCS7cth2SLu0w" name="TemporalExpression"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_V8H3UUVdEfCS7cth2SLu0w" name="NumericExpression"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VsPBMEVdEfCS7cth2SLu0w" name="HRChatServlet">
        <ownedComment xmi:id="_V_bC8EVdEfCS7cth2SLu0w">
          <body>HRChatServlet - Backend for the HR Chat Assistant&#xD;
Handles natural language queries about HR data and transforms them into SQL</body>
        </ownedComment>
        <generalization xmi:id="_VsWV9UVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V9zSUEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V9z5YEVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V9z5YUVdEfCS7cth2SLu0w" name="DB_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V9z5YkVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V9z5Y0VdEfCS7cth2SLu0w" name="DB_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V9z5ZEVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V9z5ZUVdEfCS7cth2SLu0w" name="DB_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V9z5ZkVdEfCS7cth2SLu0w" value="&quot;password&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V90gcEVdEfCS7cth2SLu0w" name="DEPARTMENT_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V90gcUVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V90gc0VdEfCS7cth2SLu0w" value="{&#xD;&#xA;        &quot;hr&quot;, &quot;finante&quot;, &quot;it&quot;, &quot;juridic&quot;, &quot;marketing&quot;, &quot;vanzari&quot;, &quot;logistica&quot;, &#xD;&#xA;        &quot;productie&quot;, &quot;achizitii&quot;, &quot;cercetare&quot;, &quot;dezvoltare&quot;, &quot;customer support&quot;, &#xD;&#xA;        &quot;administrativ&quot;, &quot;comunicare&quot;, &quot;training&quot;, &quot;security&quot;, &quot;management&quot;, &#xD;&#xA;        &quot;business intelligence&quot;, &quot;contabilitate&quot;, &quot;control intern&quot;, &quot;servicii generale&quot;&#xD;&#xA;    }"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V90gdEVdEfCS7cth2SLu0w" name="DATE_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V90gdUVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V90gd0VdEfCS7cth2SLu0w" value="{&#xD;&#xA;        &quot;astazi&quot;, &quot;azi&quot;, &quot;ieri&quot;, &quot;saptamana&quot;, &quot;luna&quot;, &quot;an&quot;, &quot;anul&quot;, &#xD;&#xA;        &quot;craciun&quot;, &quot;paste&quot;, &quot;revelion&quot;, &quot;vacanta de iarna&quot;, &quot;vacanta de vara&quot;,&#xD;&#xA;        &quot;1 decembrie&quot;, &quot;1 mai&quot;, &quot;8 martie&quot;, &quot;ziua națională&quot;&#xD;&#xA;    }"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V90geEVdEfCS7cth2SLu0w" name="STATUS_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V90geUVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V90ge0VdEfCS7cth2SLu0w" value="{&#xD;&#xA;        &quot;activ&quot;, &quot;inactiv&quot;, &quot;concediu&quot;, &quot;disponibil&quot;, &quot;indisponibil&quot;, &#xD;&#xA;        &quot;aprobat&quot;, &quot;neaprobat&quot;, &quot;respins&quot;, &quot;asteptare&quot;, &quot;finalizat&quot;, &quot;terminat&quot;&#xD;&#xA;    }"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-vGcEVdEfCS7cth2SLu0w" name="HRChatServlet" specification="_VsSrkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-vGcUVdEfCS7cth2SLu0w" type="_VsPBMEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-vGckVdEfCS7cth2SLu0w" name="doPost" specification="_VsSrlEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-vGc0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-vGdEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     &#xD;
     try {&#xD;
         // Get query from request&#xD;
         String query = request.getParameter(&quot;query&quot;);&#xD;
         if (query == null || query.trim().isEmpty()) {&#xD;
             sendErrorResponse(response, &quot;Empty query&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Get session for maintaining conversation context&#xD;
         HttpSession session = request.getSession();&#xD;
         String lastQueryType = (String) session.getAttribute(&quot;lastQueryType&quot;);&#xD;
         List&lt;Map&lt;String, Object>> lastQueryData = (List&lt;Map&lt;String, Object>>) session.getAttribute(&quot;lastQueryData&quot;);&#xD;
         &#xD;
         // Process the query&#xD;
         ChatResponse chatResponse;&#xD;
         &#xD;
         // Check if it's a follow-up question&#xD;
         if (isFollowUp(query) &amp;&amp; lastQueryType != null) {&#xD;
             chatResponse = handleFollowUp(lastQueryType, lastQueryData);&#xD;
         } else {&#xD;
             // Process new query&#xD;
             chatResponse = processQuery(query);&#xD;
             &#xD;
             // Save context for follow-up questions&#xD;
             if (chatResponse.getType().equals(&quot;table&quot;)) {&#xD;
                 session.setAttribute(&quot;lastQueryType&quot;, determineQueryType(query));&#xD;
                 session.setAttribute(&quot;lastQueryData&quot;, chatResponse.getData());&#xD;
             } else {&#xD;
                 session.setAttribute(&quot;lastQueryType&quot;, null);&#xD;
                 session.setAttribute(&quot;lastQueryData&quot;, null);&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // Convert to JSON and send response&#xD;
         Gson gson = new Gson();&#xD;
         String jsonResponse = gson.toJson(chatResponse);&#xD;
         response.getWriter().write(jsonResponse);&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         sendErrorResponse(response, &quot;An error occurred: &quot; + e.getMessage());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-vGdUVdEfCS7cth2SLu0w" name="sendErrorResponse" specification="_VsSrl0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-vGdkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-vGd0VdEfCS7cth2SLu0w" name="message">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>ChatResponse errorResponse = new ChatResponse(&quot;Îmi pare rău, a apărut o eroare: &quot; + message);&#xD;
     Gson gson = new Gson();&#xD;
     String jsonResponse = gson.toJson(errorResponse);&#xD;
     response.getWriter().write(jsonResponse);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-vGeEVdEfCS7cth2SLu0w" name="isFollowUp" specification="_VsTSoEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-vGeUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-vGekVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>String normalizedQuery = query.toLowerCase().trim();&#xD;
     return normalizedQuery.equals(&quot;da&quot;) || &#xD;
            normalizedQuery.equals(&quot;sigur&quot;) || &#xD;
            normalizedQuery.equals(&quot;bineînțeles&quot;) || &#xD;
            normalizedQuery.equals(&quot;bineinteles&quot;) || &#xD;
            normalizedQuery.equals(&quot;te rog&quot;) || &#xD;
            normalizedQuery.equals(&quot;vreau&quot;) || &#xD;
            normalizedQuery.matches(&quot;da[,.]? .*&quot;) || &#xD;
            normalizedQuery.matches(&quot;vreau .*detalii.*&quot;) || &#xD;
            normalizedQuery.matches(&quot;arata[-]mi .*detalii.*&quot;) || &#xD;
            normalizedQuery.matches(&quot;arata[-]mi .*mai mult.*&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-vGe0VdEfCS7cth2SLu0w" name="handleFollowUp" specification="_VsTSo0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-vGfEVdEfCS7cth2SLu0w" name="lastQueryType">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-vGfUVdEfCS7cth2SLu0w" name="lastQueryData" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-vGfkVdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>if (lastQueryData == null || lastQueryData.isEmpty()) {&#xD;
         return new ChatResponse(&quot;Nu am date anterioare pentru a vă oferi mai multe detalii.&quot;);&#xD;
     }&#xD;
     &#xD;
     // Based on the previous query type, provide more detailed information&#xD;
     switch (lastQueryType) {&#xD;
         case &quot;christmas_leave&quot;:&#xD;
             return new ChatResponse(&quot;Iată mai multe detalii despre angajații în concediu de Crăciun:&quot;, lastQueryData);&#xD;
             &#xD;
         case &quot;employee&quot;:&#xD;
             return new ChatResponse(&quot;Iată informații detaliate despre angajați:&quot;, lastQueryData);&#xD;
             &#xD;
         case &quot;department&quot;:&#xD;
             return new ChatResponse(&quot;Iată informații detaliate despre departamente:&quot;, lastQueryData);&#xD;
             &#xD;
         case &quot;leave&quot;:&#xD;
             return new ChatResponse(&quot;Iată informații detaliate despre concedii:&quot;, lastQueryData);&#xD;
             &#xD;
         case &quot;document&quot;:&#xD;
             return new ChatResponse(&quot;Iată informații detaliate despre adeverințe:&quot;, lastQueryData);&#xD;
             &#xD;
         case &quot;project&quot;:&#xD;
             return new ChatResponse(&quot;Iată informații detaliate despre proiecte:&quot;, lastQueryData);&#xD;
             &#xD;
         default:&#xD;
             return new ChatResponse(&quot;Nu am înțeles ce informații suplimentare doriți. Vă rog să fiți mai specific.&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-vGf0VdEfCS7cth2SLu0w" name="processQuery" specification="_VsT5sEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-vGgEVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-vGgUVdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>String normalizedQuery = query.toLowerCase();&#xD;
     &#xD;
     // Check for greeting or help request&#xD;
     if (containsGreeting(normalizedQuery)) {&#xD;
         return new ChatResponse(&quot;Bună ziua! Cu ce vă pot ajuta astăzi? Puteți să-mi adresați întrebări despre angajați, departamente, concedii, adeverințe sau proiecte.&quot;);&#xD;
     }&#xD;
     &#xD;
     if (normalizedQuery.contains(&quot;ajutor&quot;) || normalizedQuery.contains(&quot;help&quot;) || normalizedQuery.contains(&quot;ajuta&quot;)) {&#xD;
         return new ChatResponse(&quot;Vă pot ajuta cu informații despre angajați, departamente, concedii, adeverințe și proiecte. De exemplu, puteți întreba:\n\n&quot; +&#xD;
                                &quot;- \&quot;Câți angajați au luat concediu de Crăciun?\&quot;\n&quot; +&#xD;
                                &quot;- \&quot;Arată-mi lista departamentelor\&quot;\n&quot; +&#xD;
                                &quot;- \&quot;Cine este în concediu astăzi?\&quot;\n&quot; +&#xD;
                                &quot;- \&quot;Ce adeverințe sunt în așteptare?\&quot;\n&quot; +&#xD;
                                &quot;- \&quot;Care sunt proiectele active?\&quot;\n\n&quot; +&#xD;
                                &quot;După ce primiți un răspuns, puteți cere detalii suplimentare spunând simplu \&quot;Da\&quot; sau \&quot;Arată-mi mai multe detalii\&quot;.&quot;);&#xD;
     }&#xD;
     &#xD;
     // Determine query type and execute appropriate handler&#xD;
     String queryType = determineQueryType(normalizedQuery);&#xD;
     &#xD;
     try {&#xD;
         switch (queryType) {&#xD;
             case &quot;christmas_leave&quot;:&#xD;
                 return handleChristmasLeaveQuery();&#xD;
                 &#xD;
             case &quot;employee&quot;:&#xD;
                 return handleEmployeeQuery(normalizedQuery);&#xD;
                 &#xD;
             case &quot;department&quot;:&#xD;
                 return handleDepartmentQuery(normalizedQuery);&#xD;
                 &#xD;
             case &quot;leave&quot;:&#xD;
                 return handleLeaveQuery(normalizedQuery);&#xD;
                 &#xD;
             case &quot;document&quot;:&#xD;
                 return handleDocumentQuery(normalizedQuery);&#xD;
                 &#xD;
             case &quot;project&quot;:&#xD;
                 return handleProjectQuery(normalizedQuery);&#xD;
                 &#xD;
             default:&#xD;
                 return new ChatResponse(&quot;Îmi pare rău, nu am înțeles întrebarea. Puteți să-mi adresați întrebări despre angajați, departamente, concedii, adeverințe sau proiecte.&quot;);&#xD;
         }&#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         return new ChatResponse(&quot;A apărut o eroare în procesarea interogării: &quot; + e.getMessage());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-vGgkVdEfCS7cth2SLu0w" name="determineQueryType" specification="_VsT5skVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-vGg0VdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-vGhEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>// Check for Christmas leave query&#xD;
     if (query.contains(&quot;concediu&quot;) &amp;&amp; (query.contains(&quot;craciun&quot;) || query.contains(&quot;crăciun&quot;))) {&#xD;
         return &quot;christmas_leave&quot;;&#xD;
     }&#xD;
     &#xD;
     // Check for employee queries&#xD;
     if (query.contains(&quot;angajat&quot;) || query.contains(&quot;angajați&quot;) || query.contains(&quot;angajati&quot;) || &#xD;
         query.contains(&quot;personal&quot;) || query.contains(&quot;salariat&quot;) || query.contains(&quot;salariati&quot;) || &#xD;
         query.contains(&quot;personal&quot;) || query.contains(&quot;colegi&quot;)) {&#xD;
         return &quot;employee&quot;;&#xD;
     }&#xD;
     &#xD;
     // Check for department queries&#xD;
     if (query.contains(&quot;departament&quot;) || query.contains(&quot;departamente&quot;) || &#xD;
         query.contains(&quot;structura&quot;) || query.contains(&quot;divizie&quot;) || &#xD;
         query.contains(&quot;divizii&quot;) || query.contains(&quot;echipe&quot;)) {&#xD;
         return &quot;department&quot;;&#xD;
     }&#xD;
     &#xD;
     // Check for leave queries&#xD;
     if (query.contains(&quot;concediu&quot;) || query.contains(&quot;concedii&quot;) || &#xD;
         query.contains(&quot;vacanta&quot;) || query.contains(&quot;vacanță&quot;) || &#xD;
         query.contains(&quot;liber&quot;) || query.contains(&quot;absenta&quot;) || &#xD;
         query.contains(&quot;absență&quot;) || query.contains(&quot;zi libera&quot;)) {&#xD;
         return &quot;leave&quot;;&#xD;
     }&#xD;
     &#xD;
     // Check for document queries&#xD;
     if (query.contains(&quot;adeverinta&quot;) || query.contains(&quot;adeverință&quot;) || &#xD;
         query.contains(&quot;adeverinte&quot;) || query.contains(&quot;adeverințe&quot;) || &#xD;
         query.contains(&quot;document&quot;) || query.contains(&quot;documente&quot;) || &#xD;
         query.contains(&quot;formular&quot;) || query.contains(&quot;formulare&quot;)) {&#xD;
         return &quot;document&quot;;&#xD;
     }&#xD;
     &#xD;
     // Check for project queries&#xD;
     if (query.contains(&quot;proiect&quot;) || query.contains(&quot;proiecte&quot;) || &#xD;
         query.contains(&quot;task&quot;) || query.contains(&quot;taskuri&quot;) || &#xD;
         query.contains(&quot;sarcina&quot;) || query.contains(&quot;sarcini&quot;)) {&#xD;
         return &quot;project&quot;;&#xD;
     }&#xD;
     &#xD;
     // Default to employee if no specific category is matched&#xD;
     return &quot;employee&quot;;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-vGhUVdEfCS7cth2SLu0w" name="handleChristmasLeaveQuery" specification="_VsUgwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-vGhkVdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     PreparedStatement stmt = null;&#xD;
     ResultSet rs = null;&#xD;
     &#xD;
     try {&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         // Query to find employees on leave during Christmas (24-25 December)&#xD;
         String sql = &quot;SELECT c.id, u.nume, u.prenume, d.nume_dep AS departament, t.denumire AS functie, &quot; +&#xD;
                     &quot;c.start_c, c.end_c, c.durata, c.motiv, c.locatie, s.nume_status AS status &quot; +&#xD;
                     &quot;FROM concedii c &quot; +&#xD;
                     &quot;JOIN useri u ON c.id_ang = u.id &quot; +&#xD;
                     &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                     &quot;JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                     &quot;JOIN statusuri s ON c.status = s.status &quot; +&#xD;
                     &quot;WHERE c.start_c &lt;= '2024-12-25' AND c.end_c >= '2024-12-24' &quot; + &#xD;
                     &quot;AND c.status >= 0&quot;;&#xD;
         &#xD;
         stmt = conn.prepareStatement(sql);&#xD;
         rs = stmt.executeQuery();&#xD;
         &#xD;
         List&lt;Map&lt;String, Object>> results = new ArrayList&lt;>();&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             Map&lt;String, Object> row = new HashMap&lt;>();&#xD;
             row.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
             row.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
             row.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
             row.put(&quot;departament&quot;, rs.getString(&quot;departament&quot;));&#xD;
             row.put(&quot;functie&quot;, rs.getString(&quot;functie&quot;));&#xD;
             row.put(&quot;data_inceput&quot;, formatDate(rs.getDate(&quot;start_c&quot;)));&#xD;
             row.put(&quot;data_sfarsit&quot;, formatDate(rs.getDate(&quot;end_c&quot;)));&#xD;
             row.put(&quot;durata&quot;, rs.getInt(&quot;durata&quot;));&#xD;
             row.put(&quot;motiv&quot;, rs.getString(&quot;motiv&quot;));&#xD;
             row.put(&quot;locatie&quot;, rs.getString(&quot;locatie&quot;));&#xD;
             row.put(&quot;status&quot;, rs.getString(&quot;status&quot;));&#xD;
             results.add(row);&#xD;
         }&#xD;
         &#xD;
         if (results.isEmpty()) {&#xD;
             return new ChatResponse(&quot;Nu am găsit angajați în concediu în perioada Crăciunului.&quot;);&#xD;
         }&#xD;
         &#xD;
         // Initial response, brief information&#xD;
         return new ChatResponse(&quot;Am descoperit că &quot; + results.size() + &quot; angajați au luat concediu care include perioada Crăciunului. Doriți să aflați mai multe detalii?&quot;, results);&#xD;
         &#xD;
     } finally {&#xD;
         close(rs, stmt, conn);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-vtgEVdEfCS7cth2SLu0w" name="handleEmployeeQuery" specification="_VsUgwUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-vtgUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-vtgkVdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     PreparedStatement stmt = null;&#xD;
     ResultSet rs = null;&#xD;
     &#xD;
     try {&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         // Base SQL for employee queries&#xD;
         StringBuilder sql = new StringBuilder(&#xD;
             &quot;SELECT u.id, u.nume, u.prenume, d.nume_dep AS departament, t.denumire AS functie, &quot; +&#xD;
             &quot;u.email, u.telefon, u.data_nasterii, u.adresa, u.salariu_brut &quot; +&#xD;
             &quot;FROM useri u &quot; +&#xD;
             &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
             &quot;JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
             &quot;WHERE 1=1&quot;&#xD;
         );&#xD;
         &#xD;
         // Add filters based on query&#xD;
         // Department filter&#xD;
         for (String dept : DEPARTMENT_KEYWORDS) {&#xD;
             if (query.contains(dept)) {&#xD;
                 sql.append(&quot; AND d.nume_dep LIKE '%&quot;).append(dept).append(&quot;%'&quot;);&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // Status filter&#xD;
         if (query.contains(&quot;activ&quot;)) {&#xD;
             sql.append(&quot; AND u.activ = 1&quot;);&#xD;
         } else if (query.contains(&quot;inactiv&quot;)) {&#xD;
             sql.append(&quot; AND u.activ = 0&quot;);&#xD;
         }&#xD;
         &#xD;
         // Salary filter&#xD;
         Pattern salaryPattern = Pattern.compile(&quot;(salariu|salarii)\\s+(?:mai\\s+)?(mare|mic|peste|sub)\\s+(?:de|decat)?\\s+(\\d+)&quot;);&#xD;
         Matcher salaryMatcher = salaryPattern.matcher(query);&#xD;
         if (salaryMatcher.find()) {&#xD;
             String comparison = salaryMatcher.group(2);&#xD;
             String amount = salaryMatcher.group(3);&#xD;
             &#xD;
             if (comparison.equals(&quot;mare&quot;) || comparison.equals(&quot;peste&quot;)) {&#xD;
                 sql.append(&quot; AND u.salariu_brut > &quot;).append(amount);&#xD;
             } else if (comparison.equals(&quot;mic&quot;) || comparison.equals(&quot;sub&quot;)) {&#xD;
                 sql.append(&quot; AND u.salariu_brut &lt; &quot;).append(amount);&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // Finalize SQL&#xD;
         sql.append(&quot; ORDER BY u.nume, u.prenume&quot;);&#xD;
         &#xD;
         stmt = conn.prepareStatement(sql.toString());&#xD;
         rs = stmt.executeQuery();&#xD;
         &#xD;
         List&lt;Map&lt;String, Object>> results = new ArrayList&lt;>();&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             Map&lt;String, Object> row = new HashMap&lt;>();&#xD;
             row.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
             row.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
             row.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
             row.put(&quot;departament&quot;, rs.getString(&quot;departament&quot;));&#xD;
             row.put(&quot;functie&quot;, rs.getString(&quot;functie&quot;));&#xD;
             row.put(&quot;email&quot;, rs.getString(&quot;email&quot;));&#xD;
             row.put(&quot;telefon&quot;, rs.getString(&quot;telefon&quot;));&#xD;
             results.add(row);&#xD;
         }&#xD;
         &#xD;
         if (results.isEmpty()) {&#xD;
             return new ChatResponse(&quot;Nu am găsit angajați care să corespundă criteriilor dvs.&quot;);&#xD;
         }&#xD;
         &#xD;
         // Initial response, brief information&#xD;
         String message = &quot;Am găsit &quot; + results.size() + &quot; angajați&quot;;&#xD;
         &#xD;
         // Add context to message&#xD;
         for (String dept : DEPARTMENT_KEYWORDS) {&#xD;
             if (query.contains(dept)) {&#xD;
                 message += &quot; în departamentul &quot; + dept.toUpperCase();&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         message += &quot;. Doriți să vedeți lista completă?&quot;;&#xD;
         &#xD;
         return new ChatResponse(message, results);&#xD;
         &#xD;
     } finally {&#xD;
         close(rs, stmt, conn);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-vtg0VdEfCS7cth2SLu0w" name="handleDepartmentQuery" specification="_VsUgw0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-vthEVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-vthUVdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     PreparedStatement stmt = null;&#xD;
     ResultSet rs = null;&#xD;
     &#xD;
     try {&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         // Determine if we need department details with employee counts&#xD;
         String sql;&#xD;
         if (query.contains(&quot;angajati&quot;) || query.contains(&quot;angajați&quot;) || query.contains(&quot;numar&quot;)) {&#xD;
             sql = &quot;SELECT d.id_dep, d.nume_dep, COUNT(u.id) AS nr_angajati &quot; +&#xD;
                   &quot;FROM departament d &quot; +&#xD;
                   &quot;LEFT JOIN useri u ON d.id_dep = u.id_dep &quot; +&#xD;
                   &quot;GROUP BY d.id_dep, d.nume_dep &quot; +&#xD;
                   &quot;ORDER BY d.nume_dep&quot;;&#xD;
         } else if (query.contains(&quot;locatie&quot;) || query.contains(&quot;locații&quot;) || query.contains(&quot;adresa&quot;)) {&#xD;
             sql = &quot;SELECT d.id_dep, d.nume_dep, ld.strada, ld.oras, ld.judet, ld.tara &quot; +&#xD;
                   &quot;FROM departament d &quot; +&#xD;
                   &quot;LEFT JOIN locatii_departamente ld ON d.id_dep = ld.id_dep &quot; +&#xD;
                   &quot;ORDER BY d.nume_dep&quot;;&#xD;
         } else {&#xD;
             sql = &quot;SELECT d.id_dep, d.nume_dep FROM departament d ORDER BY d.nume_dep&quot;;&#xD;
         }&#xD;
         &#xD;
         stmt = conn.prepareStatement(sql);&#xD;
         rs = stmt.executeQuery();&#xD;
         &#xD;
         List&lt;Map&lt;String, Object>> results = new ArrayList&lt;>();&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             Map&lt;String, Object> row = new HashMap&lt;>();&#xD;
             row.put(&quot;id&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
             row.put(&quot;nume&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
             &#xD;
             // Add additional columns based on query type&#xD;
             if (query.contains(&quot;angajati&quot;) || query.contains(&quot;angajați&quot;) || query.contains(&quot;numar&quot;)) {&#xD;
                 row.put(&quot;nr_angajati&quot;, rs.getInt(&quot;nr_angajati&quot;));&#xD;
             } else if (query.contains(&quot;locatie&quot;) || query.contains(&quot;locații&quot;) || query.contains(&quot;adresa&quot;)) {&#xD;
                 row.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                 row.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                 row.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                 row.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
             }&#xD;
             &#xD;
             results.add(row);&#xD;
         }&#xD;
         &#xD;
         if (results.isEmpty()) {&#xD;
             return new ChatResponse(&quot;Nu am găsit informații despre departamente.&quot;);&#xD;
         }&#xD;
         &#xD;
         return new ChatResponse(&quot;Am găsit &quot; + results.size() + &quot; departamente. Doriți să vedeți lista completă?&quot;, results);&#xD;
         &#xD;
     } finally {&#xD;
         close(rs, stmt, conn);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-vthkVdEfCS7cth2SLu0w" name="handleLeaveQuery" specification="_VsVH0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-vth0VdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-vtiEVdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     PreparedStatement stmt = null;&#xD;
     ResultSet rs = null;&#xD;
     &#xD;
     try {&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         // Base SQL for leave queries&#xD;
         StringBuilder sql = new StringBuilder(&#xD;
             &quot;SELECT c.id, u.nume, u.prenume, d.nume_dep AS departament, t.denumire AS functie, &quot; +&#xD;
             &quot;c.start_c, c.end_c, c.durata, c.motiv, c.locatie, s.nume_status AS status, &quot; +&#xD;
             &quot;ct.motiv as tip_concediu &quot; +&#xD;
             &quot;FROM concedii c &quot; +&#xD;
             &quot;JOIN useri u ON c.id_ang = u.id &quot; +&#xD;
             &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
             &quot;JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
             &quot;JOIN statusuri s ON c.status = s.status &quot; +&#xD;
             &quot;JOIN tipcon ct ON c.tip = ct.tip &quot; +&#xD;
             &quot;WHERE 1=1&quot;&#xD;
         );&#xD;
         &#xD;
         // Add date filters&#xD;
         if (query.contains(&quot;astazi&quot;) || query.contains(&quot;azi&quot;)) {&#xD;
             sql.append(&quot; AND CURDATE() BETWEEN c.start_c AND c.end_c&quot;);&#xD;
         } else if (query.contains(&quot;luna&quot;) || query.contains(&quot;curent&quot;)) {&#xD;
             sql.append(&quot; AND MONTH(c.start_c) = MONTH(CURDATE()) AND YEAR(c.start_c) = YEAR(CURDATE())&quot;);&#xD;
         } else if (query.contains(&quot;an&quot;) || query.contains(&quot;anul&quot;)) {&#xD;
             sql.append(&quot; AND YEAR(c.start_c) = YEAR(CURDATE())&quot;);&#xD;
         }&#xD;
         &#xD;
         // Add status filters&#xD;
         if (query.contains(&quot;aprobat&quot;)) {&#xD;
             sql.append(&quot; AND c.status = 2&quot;);&#xD;
         } else if (query.contains(&quot;neaprobat&quot;) || query.contains(&quot;asteptare&quot;)) {&#xD;
             sql.append(&quot; AND c.status = 0&quot;);&#xD;
         } else if (query.contains(&quot;respins&quot;)) {&#xD;
             sql.append(&quot; AND c.status &lt; 0&quot;);&#xD;
         }&#xD;
         &#xD;
         // Add department filters&#xD;
         for (String dept : DEPARTMENT_KEYWORDS) {&#xD;
             if (query.contains(dept)) {&#xD;
                 sql.append(&quot; AND d.nume_dep LIKE '%&quot;).append(dept).append(&quot;%'&quot;);&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // Add leave type filters&#xD;
         if (query.contains(&quot;medical&quot;)) {&#xD;
             sql.append(&quot; AND ct.motiv LIKE '%medical%'&quot;);&#xD;
         } else if (query.contains(&quot;odihna&quot;)) {&#xD;
             sql.append(&quot; AND ct.motiv LIKE '%odihna%'&quot;);&#xD;
         } else if (query.contains(&quot;fara plata&quot;)) {&#xD;
             sql.append(&quot; AND ct.motiv LIKE '%fara plata%'&quot;);&#xD;
         }&#xD;
         &#xD;
         // Finalize SQL&#xD;
         sql.append(&quot; ORDER BY c.start_c DESC&quot;);&#xD;
         &#xD;
         stmt = conn.prepareStatement(sql.toString());&#xD;
         rs = stmt.executeQuery();&#xD;
         &#xD;
         List&lt;Map&lt;String, Object>> results = new ArrayList&lt;>();&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             Map&lt;String, Object> row = new HashMap&lt;>();&#xD;
             row.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
             row.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
             row.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
             row.put(&quot;departament&quot;, rs.getString(&quot;departament&quot;));&#xD;
             row.put(&quot;functie&quot;, rs.getString(&quot;functie&quot;));&#xD;
             row.put(&quot;data_inceput&quot;, formatDate(rs.getDate(&quot;start_c&quot;)));&#xD;
             row.put(&quot;data_sfarsit&quot;, formatDate(rs.getDate(&quot;end_c&quot;)));&#xD;
             row.put(&quot;durata&quot;, rs.getInt(&quot;durata&quot;));&#xD;
             row.put(&quot;motiv&quot;, rs.getString(&quot;motiv&quot;));&#xD;
             row.put(&quot;tip_concediu&quot;, rs.getString(&quot;tip_concediu&quot;));&#xD;
             row.put(&quot;locatie&quot;, rs.getString(&quot;locatie&quot;));&#xD;
             row.put(&quot;status&quot;, rs.getString(&quot;status&quot;));&#xD;
             results.add(row);&#xD;
         }&#xD;
         &#xD;
         if (results.isEmpty()) {&#xD;
             return new ChatResponse(&quot;Nu am găsit concedii care să corespundă criteriilor dvs.&quot;);&#xD;
         }&#xD;
         &#xD;
         // Create context-aware message&#xD;
         String message = &quot;Am găsit &quot; + results.size() + &quot; concedii&quot;;&#xD;
         &#xD;
         if (query.contains(&quot;astazi&quot;) || query.contains(&quot;azi&quot;)) {&#xD;
             message += &quot; pentru ziua de astăzi&quot;;&#xD;
         } else if (query.contains(&quot;luna&quot;) || query.contains(&quot;curent&quot;)) {&#xD;
             message += &quot; pentru luna curentă&quot;;&#xD;
         } else if (query.contains(&quot;an&quot;) || query.contains(&quot;anul&quot;)) {&#xD;
             message += &quot; pentru anul curent&quot;;&#xD;
         }&#xD;
         &#xD;
         for (String dept : DEPARTMENT_KEYWORDS) {&#xD;
             if (query.contains(dept)) {&#xD;
                 message += &quot; în departamentul &quot; + dept.toUpperCase();&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         message += &quot;. Doriți să vedeți lista completă?&quot;;&#xD;
         &#xD;
         return new ChatResponse(message, results);&#xD;
         &#xD;
     } finally {&#xD;
         close(rs, stmt, conn);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-vtiUVdEfCS7cth2SLu0w" name="handleDocumentQuery" specification="_VsVH0kVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-vtikVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-vti0VdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     PreparedStatement stmt = null;&#xD;
     ResultSet rs = null;&#xD;
     &#xD;
     try {&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         // Base SQL for document queries&#xD;
         StringBuilder sql = new StringBuilder(&#xD;
             &quot;SELECT a.id, ta.denumire AS tip_adeverinta, a.motiv, s.nume_status AS status, &quot; +&#xD;
             &quot;a.creare, a.modif &quot; +&#xD;
             &quot;FROM adeverinte a &quot; +&#xD;
             &quot;JOIN tip_adev ta ON a.tip = ta.id &quot; +&#xD;
             &quot;JOIN statusuri s ON a.status = s.status &quot; +&#xD;
             &quot;WHERE 1=1&quot;&#xD;
         );&#xD;
         &#xD;
         // Add document type filters&#xD;
         if (query.contains(&quot;salariat&quot;)) {&#xD;
             sql.append(&quot; AND ta.denumire LIKE '%salariat%'&quot;);&#xD;
         } else if (query.contains(&quot;venit&quot;)) {&#xD;
             sql.append(&quot; AND ta.denumire LIKE '%venit%'&quot;);&#xD;
         } else if (query.contains(&quot;medical&quot;)) {&#xD;
             sql.append(&quot; AND ta.denumire LIKE '%medical%'&quot;);&#xD;
         }&#xD;
         &#xD;
         // Add status filters&#xD;
         if (query.contains(&quot;aprobat&quot;)) {&#xD;
             sql.append(&quot; AND a.status = 2&quot;);&#xD;
         } else if (query.contains(&quot;neaprobat&quot;) || query.contains(&quot;asteptare&quot;)) {&#xD;
             sql.append(&quot; AND a.status = 0&quot;);&#xD;
         } else if (query.contains(&quot;respins&quot;)) {&#xD;
             sql.append(&quot; AND a.status &lt; 0&quot;);&#xD;
         }&#xD;
         &#xD;
         // Add date filters&#xD;
         if (query.contains(&quot;astazi&quot;) || query.contains(&quot;azi&quot;)) {&#xD;
             sql.append(&quot; AND DATE(a.creare) = CURDATE()&quot;);&#xD;
         } else if (query.contains(&quot;luna&quot;) || query.contains(&quot;curent&quot;)) {&#xD;
             sql.append(&quot; AND MONTH(a.creare) = MONTH(CURDATE()) AND YEAR(a.creare) = YEAR(CURDATE())&quot;);&#xD;
         } else if (query.contains(&quot;an&quot;) || query.contains(&quot;anul&quot;)) {&#xD;
             sql.append(&quot; AND YEAR(a.creare) = YEAR(CURDATE())&quot;);&#xD;
         }&#xD;
         &#xD;
         // Finalize SQL&#xD;
         sql.append(&quot; ORDER BY a.creare DESC&quot;);&#xD;
         &#xD;
         stmt = conn.prepareStatement(sql.toString());&#xD;
         rs = stmt.executeQuery();&#xD;
         &#xD;
         List&lt;Map&lt;String, Object>> results = new ArrayList&lt;>();&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             Map&lt;String, Object> row = new HashMap&lt;>();&#xD;
             row.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
             row.put(&quot;tip_adeverinta&quot;, rs.getString(&quot;tip_adeverinta&quot;));&#xD;
             row.put(&quot;motiv&quot;, rs.getInt(&quot;id&quot;));&#xD;
             row.put(&quot;tip_adeverinta&quot;, rs.getString(&quot;tip_adeverinta&quot;));&#xD;
             row.put(&quot;motiv&quot;, rs.getString(&quot;motiv&quot;));&#xD;
             row.put(&quot;status&quot;, rs.getString(&quot;status&quot;));&#xD;
             row.put(&quot;data_creare&quot;, formatDate(rs.getDate(&quot;creare&quot;)));&#xD;
             row.put(&quot;data_modificare&quot;, formatDate(rs.getDate(&quot;modif&quot;)));&#xD;
             results.add(row);&#xD;
         }&#xD;
         &#xD;
         if (results.isEmpty()) {&#xD;
             return new ChatResponse(&quot;Nu am găsit adeverințe care să corespundă criteriilor dvs.&quot;);&#xD;
         }&#xD;
         &#xD;
         // Create context-aware message&#xD;
         String message = &quot;Am găsit &quot; + results.size() + &quot; adeverințe&quot;;&#xD;
         &#xD;
         if (query.contains(&quot;salariat&quot;)) {&#xD;
             message += &quot; de tip salariat&quot;;&#xD;
         } else if (query.contains(&quot;venit&quot;)) {&#xD;
             message += &quot; de tip venit&quot;;&#xD;
         } else if (query.contains(&quot;medical&quot;)) {&#xD;
             message += &quot; de tip medical&quot;;&#xD;
         }&#xD;
         &#xD;
         if (query.contains(&quot;aprobat&quot;)) {&#xD;
             message += &quot; aprobate&quot;;&#xD;
         } else if (query.contains(&quot;neaprobat&quot;) || query.contains(&quot;asteptare&quot;)) {&#xD;
             message += &quot; în așteptare&quot;;&#xD;
         } else if (query.contains(&quot;respins&quot;)) {&#xD;
             message += &quot; respinse&quot;;&#xD;
         }&#xD;
         &#xD;
         message += &quot;. Doriți să vedeți lista completă?&quot;;&#xD;
         &#xD;
         return new ChatResponse(message, results);&#xD;
         &#xD;
     } finally {&#xD;
         close(rs, stmt, conn);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-vtjEVdEfCS7cth2SLu0w" name="handleProjectQuery" specification="_VsVu4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-vtjUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-vtjkVdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     PreparedStatement stmt = null;&#xD;
     ResultSet rs = null;&#xD;
     &#xD;
     try {&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         String sql;&#xD;
         &#xD;
         // Determine project query type&#xD;
         if (query.contains(&quot;echipe&quot;) || query.contains(&quot;supervizor&quot;)) {&#xD;
             // Projects with teams and supervisors&#xD;
             sql = &quot;SELECT p.id, p.nume AS nume_proiect, p.descriere, p.start, p.end, &quot; +&#xD;
                   &quot;e.id AS id_echipa, e.nume AS nume_echipa, u.nume AS nume_supervizor, u.prenume AS prenume_supervizor &quot; +&#xD;
                   &quot;FROM proiecte p &quot; +&#xD;
                   &quot;LEFT JOIN echipe e ON p.id = e.id_prj &quot; +&#xD;
                   &quot;LEFT JOIN useri u ON e.supervizor = u.id &quot; +&#xD;
                   &quot;ORDER BY p.start DESC&quot;;&#xD;
         } else if (query.contains(&quot;taskuri&quot;) || query.contains(&quot;sarcini&quot;)) {&#xD;
             // Projects with tasks&#xD;
             sql = &quot;SELECT t.id, t.nume AS nume_task, p.nume AS nume_proiect, &quot; +&#xD;
                   &quot;u.nume AS nume_angajat, u.prenume AS prenume_angajat, &quot; +&#xD;
                   &quot;s.procent AS procent_finalizare, t.start, t.end &quot; +&#xD;
                   &quot;FROM tasks t &quot; +&#xD;
                   &quot;JOIN proiecte p ON t.id_prj = p.id &quot; +&#xD;
                   &quot;JOIN useri u ON t.id_ang = u.id &quot; +&#xD;
                   &quot;JOIN statusuri2 s ON t.status = s.id &quot;;&#xD;
             &#xD;
             // Add filter for incomplete/complete tasks&#xD;
             if (query.contains(&quot;neterminate&quot;) || query.contains(&quot;incomplete&quot;)) {&#xD;
                 sql += &quot;WHERE s.procent &lt; 100 &quot;;&#xD;
             } else if (query.contains(&quot;terminate&quot;) || query.contains(&quot;complete&quot;) || &#xD;
                       query.contains(&quot;finalizate&quot;)) {&#xD;
                 sql += &quot;WHERE s.procent = 100 &quot;;&#xD;
             }&#xD;
             &#xD;
             sql += &quot;ORDER BY t.end&quot;;&#xD;
         } else if (query.contains(&quot;cine&quot;) || query.contains(&quot;lucreaza&quot;)) {&#xD;
             // Who works on specific projects&#xD;
             sql = &quot;SELECT u.id, u.nume, u.prenume, d.nume_dep AS departament, &quot; +&#xD;
                   &quot;p.nume AS nume_proiect, e.nume AS nume_echipa &quot; +&#xD;
                   &quot;FROM useri u &quot; +&#xD;
                   &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                   &quot;JOIN tasks t ON t.id_ang = u.id &quot; +&#xD;
                   &quot;JOIN proiecte p ON t.id_prj = p.id &quot; +&#xD;
                   &quot;JOIN echipe e ON e.id_prj = p.id &quot; +&#xD;
                   &quot;GROUP BY u.id, u.nume, u.prenume, d.nume_dep, p.nume, e.nume &quot; +&#xD;
                   &quot;ORDER BY u.nume, u.prenume&quot;;&#xD;
         } else {&#xD;
             // Default project list&#xD;
             sql = &quot;SELECT p.id, p.nume, p.descriere, p.start, p.end, &quot; +&#xD;
                   &quot;COUNT(DISTINCT e.id) AS nr_echipe, &quot; +&#xD;
                   &quot;COUNT(DISTINCT t.id) AS nr_taskuri &quot; +&#xD;
                   &quot;FROM proiecte p &quot; +&#xD;
                   &quot;LEFT JOIN echipe e ON p.id = e.id_prj &quot; +&#xD;
                   &quot;LEFT JOIN tasks t ON p.id = t.id_prj &quot; +&#xD;
                   &quot;GROUP BY p.id, p.nume, p.descriere, p.start, p.end &quot;;&#xD;
             &#xD;
             // Add filter for active projects&#xD;
             if (query.contains(&quot;active&quot;) || query.contains(&quot;curente&quot;) || &#xD;
                 query.contains(&quot;prezent&quot;)) {&#xD;
                 sql += &quot;HAVING p.start &lt;= CURDATE() AND (p.end >= CURDATE() OR p.end IS NULL) &quot;;&#xD;
             }&#xD;
             &#xD;
             sql += &quot;ORDER BY p.start DESC&quot;;&#xD;
         }&#xD;
         &#xD;
         stmt = conn.prepareStatement(sql);&#xD;
         rs = stmt.executeQuery();&#xD;
         &#xD;
         List&lt;Map&lt;String, Object>> results = new ArrayList&lt;>();&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             Map&lt;String, Object> row = new HashMap&lt;>();&#xD;
             &#xD;
             // Add columns based on query type&#xD;
             if (query.contains(&quot;echipe&quot;) || query.contains(&quot;supervizor&quot;)) {&#xD;
                 row.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                 row.put(&quot;nume_proiect&quot;, rs.getString(&quot;nume_proiect&quot;));&#xD;
                 row.put(&quot;descriere&quot;, rs.getString(&quot;descriere&quot;));&#xD;
                 row.put(&quot;data_inceput&quot;, formatDate(rs.getDate(&quot;start&quot;)));&#xD;
                 row.put(&quot;data_sfarsit&quot;, formatDate(rs.getDate(&quot;end&quot;)));&#xD;
                 row.put(&quot;id_echipa&quot;, rs.getInt(&quot;id_echipa&quot;));&#xD;
                 row.put(&quot;nume_echipa&quot;, rs.getString(&quot;nume_echipa&quot;));&#xD;
                 row.put(&quot;nume_supervizor&quot;, rs.getString(&quot;nume_supervizor&quot;));&#xD;
                 row.put(&quot;prenume_supervizor&quot;, rs.getString(&quot;prenume_supervizor&quot;));&#xD;
             } else if (query.contains(&quot;taskuri&quot;) || query.contains(&quot;sarcini&quot;)) {&#xD;
                 row.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                 row.put(&quot;nume_task&quot;, rs.getString(&quot;nume_task&quot;));&#xD;
                 row.put(&quot;nume_proiect&quot;, rs.getString(&quot;nume_proiect&quot;));&#xD;
                 row.put(&quot;nume_angajat&quot;, rs.getString(&quot;nume_angajat&quot;));&#xD;
                 row.put(&quot;prenume_angajat&quot;, rs.getString(&quot;prenume_angajat&quot;));&#xD;
                 row.put(&quot;procent_finalizare&quot;, rs.getInt(&quot;procent_finalizare&quot;));&#xD;
                 row.put(&quot;data_inceput&quot;, formatDate(rs.getDate(&quot;start&quot;)));&#xD;
                 row.put(&quot;data_sfarsit&quot;, formatDate(rs.getDate(&quot;end&quot;)));&#xD;
             } else if (query.contains(&quot;cine&quot;) || query.contains(&quot;lucreaza&quot;)) {&#xD;
                 row.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                 row.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
                 row.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
                 row.put(&quot;departament&quot;, rs.getString(&quot;departament&quot;));&#xD;
                 row.put(&quot;nume_proiect&quot;, rs.getString(&quot;nume_proiect&quot;));&#xD;
                 row.put(&quot;nume_echipa&quot;, rs.getString(&quot;nume_echipa&quot;));&#xD;
             } else {&#xD;
                 row.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                 row.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
                 row.put(&quot;descriere&quot;, rs.getString(&quot;descriere&quot;));&#xD;
                 row.put(&quot;data_inceput&quot;, formatDate(rs.getDate(&quot;start&quot;)));&#xD;
                 row.put(&quot;data_sfarsit&quot;, formatDate(rs.getDate(&quot;end&quot;)));&#xD;
                 row.put(&quot;nr_echipe&quot;, rs.getInt(&quot;nr_echipe&quot;));&#xD;
                 row.put(&quot;nr_taskuri&quot;, rs.getInt(&quot;nr_taskuri&quot;));&#xD;
             }&#xD;
             &#xD;
             results.add(row);&#xD;
         }&#xD;
         &#xD;
         if (results.isEmpty()) {&#xD;
             return new ChatResponse(&quot;Nu am găsit proiecte care să corespundă criteriilor dvs.&quot;);&#xD;
         }&#xD;
         &#xD;
         // Create context-aware message&#xD;
         String message = &quot;Am găsit &quot; + results.size();&#xD;
         &#xD;
         if (query.contains(&quot;taskuri&quot;) || query.contains(&quot;sarcini&quot;)) {&#xD;
             message += &quot; taskuri&quot;;&#xD;
             &#xD;
             if (query.contains(&quot;neterminate&quot;) || query.contains(&quot;incomplete&quot;)) {&#xD;
                 message += &quot; neterminate&quot;;&#xD;
             } else if (query.contains(&quot;terminate&quot;) || query.contains(&quot;complete&quot;) || query.contains(&quot;finalizate&quot;)) {&#xD;
                 message += &quot; finalizate&quot;;&#xD;
             }&#xD;
         } else if (query.contains(&quot;cine&quot;) || query.contains(&quot;lucreaza&quot;)) {&#xD;
             message += &quot; angajați care lucrează la proiecte&quot;;&#xD;
         } else {&#xD;
             message += &quot; proiecte&quot;;&#xD;
             &#xD;
             if (query.contains(&quot;active&quot;) || query.contains(&quot;curente&quot;) || query.contains(&quot;prezent&quot;)) {&#xD;
                 message += &quot; active&quot;;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         message += &quot;. Doriți să vedeți lista completă?&quot;;&#xD;
         &#xD;
         return new ChatResponse(message, results);&#xD;
         &#xD;
     } finally {&#xD;
         close(rs, stmt, conn);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-vtj0VdEfCS7cth2SLu0w" name="containsGreeting" specification="_VsVu4kVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-vtkEVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-vtkUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>String[] greetings = {&quot;buna&quot;, &quot;salut&quot;, &quot;hello&quot;, &quot;hi&quot;, &quot;hey&quot;, &quot;bună ziua&quot;, &quot;neața&quot;, &quot;ziua bună&quot;};&#xD;
     for (String greeting : greetings) {&#xD;
         if (text.contains(greeting)) {&#xD;
             return true;&#xD;
         }&#xD;
     }&#xD;
     return false;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-vtkkVdEfCS7cth2SLu0w" name="formatDate" specification="_VsVu5UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-vtk0VdEfCS7cth2SLu0w" name="date" type="_T-jXYUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-vtlEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>if (date == null) {&#xD;
         return null;&#xD;
     }&#xD;
     SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd.MM.yyyy&quot;);&#xD;
     return sdf.format(date);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-vtlUVdEfCS7cth2SLu0w" name="close" specification="_VsWV8UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-vtlkVdEfCS7cth2SLu0w" name="rs" type="_T9wtMEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-vtl0VdEfCS7cth2SLu0w" name="stmt" type="_T9lHAUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-vtmEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try {&#xD;
         if (rs != null) rs.close();&#xD;
         if (stmt != null) stmt.close();&#xD;
         if (conn != null) conn.close();&#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VsSrkEVdEfCS7cth2SLu0w" name="HRChatServlet" method="_V-vGcEVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VsSrkUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VsSrkkVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VsSrk0VdEfCS7cth2SLu0w" type="_VsPBMEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VsSrlEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V-vGckVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VsSrlUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VsSrlkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VsSrl0VdEfCS7cth2SLu0w" name="sendErrorResponse" visibility="private" method="_V-vGdUVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VsSrmEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VsSrmUVdEfCS7cth2SLu0w" name="message">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VsTSoEVdEfCS7cth2SLu0w" name="isFollowUp" visibility="private" method="_V-vGeEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VsTSoUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VsTSokVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VsTSo0VdEfCS7cth2SLu0w" name="handleFollowUp" visibility="private" method="_V-vGe0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VsTSpEVdEfCS7cth2SLu0w" name="lastQueryType">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VsTSpUVdEfCS7cth2SLu0w" name="lastQueryData" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8EM8EVdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VsT5sEVdEfCS7cth2SLu0w" name="processQuery" visibility="private" method="_V-vGf0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VsT5sUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V8E0AEVdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VsT5skVdEfCS7cth2SLu0w" name="determineQueryType" visibility="private" method="_V-vGgkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VsT5s0VdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VsT5tEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VsUgwEVdEfCS7cth2SLu0w" name="handleChristmasLeaveQuery" visibility="private" method="_V-vGhUVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V8E0AUVdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VsUgwUVdEfCS7cth2SLu0w" name="handleEmployeeQuery" visibility="private" method="_V-vtgEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VsUgwkVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V8E0AkVdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VsUgw0VdEfCS7cth2SLu0w" name="handleDepartmentQuery" visibility="private" method="_V-vtg0VdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VsUgxEVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V8E0A0VdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VsVH0EVdEfCS7cth2SLu0w" name="handleLeaveQuery" visibility="private" method="_V-vthkVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VsVH0UVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V8E0BEVdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VsVH0kVdEfCS7cth2SLu0w" name="handleDocumentQuery" visibility="private" method="_V-vtiUVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VsVH00VdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V8E0BUVdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VsVu4EVdEfCS7cth2SLu0w" name="handleProjectQuery" visibility="private" method="_V-vtjEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VsVu4UVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V8E0BkVdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VsVu4kVdEfCS7cth2SLu0w" name="containsGreeting" visibility="private" method="_V-vtj0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VsVu40VdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VsVu5EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VsVu5UVdEfCS7cth2SLu0w" name="formatDate" visibility="private" method="_V-vtkkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VsVu5kVdEfCS7cth2SLu0w" name="date" type="_T-jXYUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VsWV8EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VsWV8UVdEfCS7cth2SLu0w" name="close" visibility="private" method="_V-vtlUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VsWV8kVdEfCS7cth2SLu0w" name="rs" type="_T9wtMEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VsWV80VdEfCS7cth2SLu0w" name="stmt" type="_T9lHAUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VsWV9EVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <nestedClassifier xmi:type="uml:Class" xmi:id="_VsQPUEVdEfCS7cth2SLu0w" name="ChatResponse" visibility="private">
          <ownedAttribute xmi:id="_V91HgEVdEfCS7cth2SLu0w" name="message" isReadOnly="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V91HgUVdEfCS7cth2SLu0w" name="type" isReadOnly="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V91HgkVdEfCS7cth2SLu0w" name="data" type="_UAkwoUVdEfCS7cth2SLu0w" isOrdered="true" isReadOnly="true" association="_V_-ckEVdEfCS7cth2SLu0w">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V91Hg0VdEfCS7cth2SLu0w" value="*"/>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-ufYEVdEfCS7cth2SLu0w" name="ChatResponse" specification="_VsQPUUVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-ufYUVdEfCS7cth2SLu0w" name="message">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-ufYkVdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
            <language>java</language>
            <body>this.message = message;&#xD;
         this.type = &quot;text&quot;;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-ufY0VdEfCS7cth2SLu0w" name="ChatResponse" specification="_VsQ2Y0VdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-ufZEVdEfCS7cth2SLu0w" name="message">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-ufZUVdEfCS7cth2SLu0w" name="data" type="_T9_9wUVdEfCS7cth2SLu0w"/>
            <ownedParameter xmi:id="_V-ufZkVdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
            <language>java</language>
            <body>this.message = message;&#xD;
         this.type = &quot;table&quot;;&#xD;
         this.data = data;&#xD;
     </body>
          </ownedBehavior>
          <ownedOperation xmi:id="_VsQPUUVdEfCS7cth2SLu0w" name="ChatResponse" method="_V-ufYEVdEfCS7cth2SLu0w">
            <eAnnotations xmi:id="_VsQ2YEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_VsQ2YUVdEfCS7cth2SLu0w" key="create"/>
            </eAnnotations>
            <ownedParameter xmi:id="_VsQPUkVdEfCS7cth2SLu0w" name="message">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_VsQ2YkVdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:id="_VsQ2Y0VdEfCS7cth2SLu0w" name="ChatResponse" method="_V-ufY0VdEfCS7cth2SLu0w">
            <eAnnotations xmi:id="_VsQ2ZkVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_VsQ2Z0VdEfCS7cth2SLu0w" key="create"/>
            </eAnnotations>
            <ownedParameter xmi:id="_VsQ2ZEVdEfCS7cth2SLu0w" name="message">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_VsQ2ZUVdEfCS7cth2SLu0w" name="data" type="_T9_9wUVdEfCS7cth2SLu0w"/>
            <ownedParameter xmi:id="_VsQ2aEVdEfCS7cth2SLu0w" type="_VsQPUEVdEfCS7cth2SLu0w" direction="return"/>
          </ownedOperation>
        </nestedClassifier>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VsYyMEVdEfCS7cth2SLu0w" name="ChatServlet">
        <generalization xmi:id="_Vsop0kVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V91ukEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V91ukUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V91ukkVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V91uk0VdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V91ulEVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V91ulUVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V92VoEVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V92VoUVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V92VokVdEfCS7cth2SLu0w" name="translator" visibility="private" type="_VtdJMEVdEfCS7cth2SLu0w" association="_V__DoEVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V92VpEVdEfCS7cth2SLu0w" name="useEnhancedNLP" visibility="private">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V92VpUVdEfCS7cth2SLu0w" value="true"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V92Vp0VdEfCS7cth2SLu0w" name="confidenceThreshold" visibility="private">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V92VqEVdEfCS7cth2SLu0w" value="0.3"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V928sEVdEfCS7cth2SLu0w" name="queryCache" visibility="private" type="_V8IeYEVdEfCS7cth2SLu0w" association="_V__Do0VdEfCS7cth2SLu0w">
          <qualifier xmi:id="_V93jwEVdEfCS7cth2SLu0w">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </qualifier>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V928sUVdEfCS7cth2SLu0w" value="new HashMap&lt;>()"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V93jwUVdEfCS7cth2SLu0w" name="maxCacheSize" visibility="private">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V93jwkVdEfCS7cth2SLu0w" value="100"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V94K0EVdEfCS7cth2SLu0w" name="cacheHitCount" visibility="private">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V94K0UVdEfCS7cth2SLu0w" value="0"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V94K00VdEfCS7cth2SLu0w" name="totalQueryCount" visibility="private">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V94K1EVdEfCS7cth2SLu0w" value="0"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-wUkEVdEfCS7cth2SLu0w" name="init" specification="_VsaAUEVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>super.init();&#xD;
     translator = new NaturalLanguageToSQLTranslator();&#xD;
     System.out.println(&quot;DEBUG: ChatServlet initialized with translator&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-wUkUVdEfCS7cth2SLu0w" name="doPost" specification="_VsanYkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-wUkkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-wUk0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json;charset=UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Get query from the request&#xD;
     String query = request.getParameter(&quot;query&quot;);&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: Received query from frontend: \&quot;&quot; + query + &quot;\&quot;&quot;);&#xD;
     &#xD;
     if (query == null || query.isEmpty()) {&#xD;
         System.out.println(&quot;DEBUG: Empty query received&quot;);&#xD;
         sendErrorResponse(out, &quot;Query parameter is missing&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Get current user from session&#xD;
     HttpSession session = request.getSession(false);&#xD;
     if (session == null) {&#xD;
         System.out.println(&quot;DEBUG: No active session found&quot;);&#xD;
         sendErrorResponse(out, &quot;No active session&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);&#xD;
     if (currentUser == null) {&#xD;
         System.out.println(&quot;DEBUG: No user logged in&quot;);&#xD;
         sendErrorResponse(out, &quot;User not logged in&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: Processing query for user: &quot; + currentUser.getUsername());&#xD;
     &#xD;
     // Process the query and generate a response&#xD;
     try {&#xD;
         processQuery(query, currentUser, out, session);&#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         System.out.println(&quot;DEBUG: Error processing query: &quot; + e.getMessage());&#xD;
         sendErrorResponse(out, &quot;Error processing query: &quot; + e.getMessage());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-wUlEVdEfCS7cth2SLu0w" name="setEnhancedNLPEnabled" specification="_VsanZUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-wUlUVdEfCS7cth2SLu0w" name="enabled">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>this.useEnhancedNLP = enabled;&#xD;
     System.out.println(&quot;DEBUG: Enhanced NLP processing &quot; + (enabled ? &quot;enabled&quot; : &quot;disabled&quot;));&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-wUlkVdEfCS7cth2SLu0w" name="setConfidenceThreshold" specification="_VsanZ0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-wUl0VdEfCS7cth2SLu0w" name="threshold">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>this.confidenceThreshold = Math.max(0.0, Math.min(1.0, threshold));&#xD;
     System.out.println(&quot;DEBUG: Confidence threshold set to &quot; + this.confidenceThreshold);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-wUmEVdEfCS7cth2SLu0w" name="clearQueryCache" specification="_VsanaUVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>this.queryCache.clear();&#xD;
     System.out.println(&quot;DEBUG: Query cache cleared&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-wUmUVdEfCS7cth2SLu0w" name="getCacheStatistics" specification="_VsanakVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-wUmkVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Object> stats = new HashMap&lt;>();&#xD;
     stats.put(&quot;cacheSize&quot;, queryCache.size());&#xD;
     stats.put(&quot;maxCacheSize&quot;, maxCacheSize);&#xD;
     stats.put(&quot;cacheHitRate&quot;, calculateCacheHitRate());&#xD;
     return stats;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-wUm0VdEfCS7cth2SLu0w" name="calculateCacheHitRate" specification="_VsbOckVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-wUnEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>if (totalQueryCount == 0) return 0.0;&#xD;
     return cacheHitCount / totalQueryCount;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-w7oEVdEfCS7cth2SLu0w" name="debugTemporalDetection" specification="_Vsb1gUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-w7oUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>System.out.println(&quot;DEBUG: ===== TEMPORAL DETECTION ANALYSIS =====&quot;);&#xD;
     System.out.println(&quot;DEBUG: Query: \&quot;&quot; + query + &quot;\&quot;&quot;);&#xD;
     &#xD;
     // Check individual temporal words&#xD;
     String[] temporalWords = {&#xD;
         &quot;luna aceasta&quot;, &quot;luna trecuta&quot;, &quot;astazi&quot;, &quot;azi&quot;, &quot;ieri&quot;, &quot;maine&quot;,&#xD;
         &quot;anul acesta&quot;, &quot;anul trecut&quot;, &quot;saptamana aceasta&quot;, &quot;decembrie&quot;, &#xD;
         &quot;ianuarie&quot;, &quot;februarie&quot;, &quot;martie&quot;, &quot;aprilie&quot;, &quot;mai&quot;, &quot;iunie&quot;,&#xD;
         &quot;iulie&quot;, &quot;august&quot;, &quot;septembrie&quot;, &quot;octombrie&quot;, &quot;noiembrie&quot;&#xD;
     };&#xD;
     &#xD;
     for (String temporal : temporalWords) {&#xD;
         if (query.contains(temporal)) {&#xD;
             System.out.println(&quot;DEBUG: Found temporal expression: \&quot;&quot; + temporal + &quot;\&quot;&quot;);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     // Check entity words&#xD;
     String[] leaveWords = {&quot;concediu&quot;, &quot;concedii&quot;, &quot;vacanta&quot;, &quot;absenta&quot;};&#xD;
     for (String leave : leaveWords) {&#xD;
         if (query.contains(leave)) {&#xD;
             System.out.println(&quot;DEBUG: Found leave keyword: \&quot;&quot; + leave + &quot;\&quot;&quot;);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     String[] employeeWords = {&quot;angajat&quot;, &quot;angajati&quot;, &quot;personal&quot;, &quot;salariat&quot;};&#xD;
     for (String emp : employeeWords) {&#xD;
         if (query.contains(emp)) {&#xD;
             System.out.println(&quot;DEBUG: Found employee keyword: \&quot;&quot; + emp + &quot;\&quot;&quot;);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: ===== TEMPORAL DETECTION COMPLETE =====&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-w7okVdEfCS7cth2SLu0w" name="sendRegulationSummaryResponse" specification="_Vsb1g0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-w7o0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-w7pEVdEfCS7cth2SLu0w" name="summary">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>JSONObject response = new JSONObject();&#xD;
     response.put(&quot;type&quot;, &quot;regulation_summary&quot;);&#xD;
     response.put(&quot;message&quot;, summary);&#xD;
     response.put(&quot;timestamp&quot;, System.currentTimeMillis());&#xD;
     &#xD;
     JSONArray suggestions = new JSONArray();&#xD;
     suggestions.put(&quot;Pot să lucrez de acasă conform regulamentului?&quot;);&#xD;
     suggestions.put(&quot;Am voie să fac ore suplimentare?&quot;);&#xD;
     suggestions.put(&quot;Ce beneficii am ca angajat?&quot;);&#xD;
     suggestions.put(&quot;Cum se evaluează performanța?&quot;);&#xD;
     &#xD;
     response.put(&quot;followUpSuggestions&quot;, suggestions);&#xD;
     &#xD;
     out.println(response.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-w7pUVdEfCS7cth2SLu0w" name="sendPolicyCheckResponse" specification="_VscckEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-w7pkVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-w7p0VdEfCS7cth2SLu0w" name="originalQuery">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-w7qEVdEfCS7cth2SLu0w" name="policyResponse" type="_S9SusEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>JSONObject response = new JSONObject();&#xD;
     response.put(&quot;type&quot;, &quot;policy_check&quot;);&#xD;
     response.put(&quot;originalQuery&quot;, originalQuery);&#xD;
     response.put(&quot;result&quot;, policyResponse.getSimpleAnswer());&#xD;
     response.put(&quot;message&quot;, policyResponse.getFormattedResponse());&#xD;
     response.put(&quot;timestamp&quot;, System.currentTimeMillis());&#xD;
     &#xD;
     // Adaugă context vizual&#xD;
     JSONObject context = new JSONObject();&#xD;
     switch (policyResponse.getResult()) {&#xD;
         case YES:&#xD;
             context.put(&quot;status&quot;, &quot;allowed&quot;);&#xD;
             context.put(&quot;icon&quot;, &quot;✅&quot;);&#xD;
             context.put(&quot;color&quot;, &quot;green&quot;);&#xD;
             break;&#xD;
         case NO:&#xD;
             context.put(&quot;status&quot;, &quot;forbidden&quot;);&#xD;
             context.put(&quot;icon&quot;, &quot;❌&quot;);&#xD;
             context.put(&quot;color&quot;, &quot;red&quot;);&#xD;
             break;&#xD;
         case CONDITIONAL:&#xD;
             context.put(&quot;status&quot;, &quot;conditional&quot;);&#xD;
             context.put(&quot;icon&quot;, &quot;⚠️&quot;);&#xD;
             context.put(&quot;color&quot;, &quot;orange&quot;);&#xD;
             break;&#xD;
         case UNCLEAR:&#xD;
             context.put(&quot;status&quot;, &quot;unclear&quot;);&#xD;
             context.put(&quot;icon&quot;, &quot;❓&quot;);&#xD;
             context.put(&quot;color&quot;, &quot;gray&quot;);&#xD;
             break;&#xD;
     }&#xD;
     &#xD;
     response.put(&quot;context&quot;, context);&#xD;
     &#xD;
     out.println(response.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-w7qUVdEfCS7cth2SLu0w" name="processQuery" specification="_VscclEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-w7qkVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-w7q0VdEfCS7cth2SLu0w" name="currentUser" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-w7rEVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-w7rUVdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String lowerQuery = query.toLowerCase();&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: Processing enhanced query: \&quot;&quot; + lowerQuery + &quot;\&quot;&quot;);&#xD;
     &#xD;
     // First check if it's a follow-up question or greeting to avoid unnecessary processing&#xD;
     if (isFollowUpQuestion(lowerQuery)) {&#xD;
         System.out.println(&quot;DEBUG: Detected follow-up question&quot;);&#xD;
         handleFollowUpQuestion(out, session);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     if (isGreeting(lowerQuery)) {&#xD;
         System.out.println(&quot;DEBUG: Detected greeting&quot;);&#xD;
         sendSimpleTextResponse(out, &quot;Bună ziua! Cu ce vă pot ajuta astăzi? Puteți să-mi adresați întrebări despre angajați, departamente, concedii, adeverințe sau proiecte.&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     if (isHelpRequest(lowerQuery)) {&#xD;
         System.out.println(&quot;DEBUG: Detected help request&quot;);&#xD;
         sendSimpleTextResponse(out, generateEnhancedHelpResponse());&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
  // Check for regulation summary requests&#xD;
     if (lowerQuery.contains(&quot;regulament&quot;) &amp;&amp; &#xD;
         (lowerQuery.contains(&quot;rezumat&quot;) || lowerQuery.contains(&quot;introducere&quot;) || &#xD;
          lowerQuery.contains(&quot;politici&quot;) || lowerQuery.contains(&quot;sumar&quot;))) {&#xD;
         System.out.println(&quot;DEBUG: Detected regulation summary request&quot;);&#xD;
         String summary = CompanyPolicyProcessor.generateRegulationSummary();&#xD;
         sendRegulationSummaryResponse(out, summary);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     // Check for policy permission requests&#xD;
     if (lowerQuery.contains(&quot;pot sa&quot;) || lowerQuery.contains(&quot;pot să&quot;) || &#xD;
         lowerQuery.contains(&quot;am voie&quot;) || lowerQuery.contains(&quot;este permis&quot;)) {&#xD;
         System.out.println(&quot;DEBUG: Detected policy permission request&quot;);&#xD;
         PolicyResponse policyResponse = CompanyPolicyProcessor.checkPolicyPermission(query);&#xD;
         sendPolicyCheckResponse(out, query, policyResponse);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
  // NEW: Enhanced NLP preprocessing&#xD;
     EnhancedNLPProcessor.AdvancedTokenization tokenization = null;&#xD;
     if (useEnhancedNLP) {&#xD;
         // Add temporal detection debug&#xD;
         debugTemporalDetection(query);&#xD;
         &#xD;
         tokenization = preprocessQuery(query);&#xD;
         &#xD;
         // Enhanced confidence analysis&#xD;
         String confidenceLevel = EnhancedNLPProcessor.classifyQueryWithConfidence(&#xD;
             tokenization.getEntityConfidences(), confidenceThreshold);&#xD;
         &#xD;
         // SPECIAL CASE: If we detect temporal expressions, boost confidence&#xD;
         boolean hasTemporalExpressions = tokenization != null &amp;&amp; !tokenization.getTemporalExpressions().isEmpty();&#xD;
         boolean hasRecognizedEntities = tokenization != null &amp;&amp; !tokenization.getEntityConfidences().isEmpty();&#xD;
         boolean hasLeaveKeywords = query.contains(&quot;concediu&quot;) || query.contains(&quot;concedii&quot;);&#xD;
         boolean hasEmployeeKeywords = query.contains(&quot;angajat&quot;) || query.contains(&quot;angajati&quot;);&#xD;
         &#xD;
         System.out.println(&quot;DEBUG: ===== CONFIDENCE ANALYSIS =====&quot;);&#xD;
         System.out.println(&quot;DEBUG: Base confidence level: &quot; + confidenceLevel);&#xD;
         System.out.println(&quot;DEBUG: Has temporal expressions: &quot; + hasTemporalExpressions);&#xD;
         System.out.println(&quot;DEBUG: Has recognized entities: &quot; + hasRecognizedEntities);&#xD;
         System.out.println(&quot;DEBUG: Has leave keywords: &quot; + hasLeaveKeywords);&#xD;
         System.out.println(&quot;DEBUG: Has employee keywords: &quot; + hasEmployeeKeywords);&#xD;
         &#xD;
         // FORCE PROCEED if we have temporal + entity combination&#xD;
         boolean shouldProceed = hasRecognizedEntities || &#xD;
                                (hasTemporalExpressions &amp;&amp; (hasLeaveKeywords || hasEmployeeKeywords));&#xD;
         &#xD;
         System.out.println(&quot;DEBUG: Should proceed with translation: &quot; + shouldProceed);&#xD;
         System.out.println(&quot;DEBUG: =====================================&quot;);&#xD;
         &#xD;
         // Only show low confidence if we should NOT proceed&#xD;
         if (&quot;LOW_CONFIDENCE&quot;.equals(confidenceLevel) &amp;&amp; !shouldProceed) {&#xD;
             System.out.println(&quot;DEBUG: Showing low confidence suggestions&quot;);&#xD;
             handleLowConfidenceQuery(query, tokenization, out);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         if (shouldProceed) {&#xD;
             System.out.println(&quot;DEBUG: ✅ PROCEEDING with enhanced translation&quot;);&#xD;
         }&#xD;
     &#xD;
     // Use enhanced translator to convert natural language query to SQL&#xD;
     try {&#xD;
         System.out.println(&quot;DEBUG: Using translator to convert query to SQL&quot;);&#xD;
         QueryInfo queryInfo = translator.translateToSQL(query);&#xD;
         &#xD;
         // NEW: Enhance queryInfo with advanced tokenization results&#xD;
         if (tokenization != null) {&#xD;
             enhanceQueryInfoWithTokenization(queryInfo, tokenization);&#xD;
         }&#xD;
         &#xD;
         System.out.println(&quot;DEBUG: Translator result: &quot;);&#xD;
         System.out.println(&quot;DEBUG: - Query type: &quot; + queryInfo.getQueryType());&#xD;
         System.out.println(&quot;DEBUG: - Entities: &quot; + queryInfo.getEntities());&#xD;
         System.out.println(&quot;DEBUG: - Requested attributes: &quot; + queryInfo.getRequestedAttributes());&#xD;
         System.out.println(&quot;DEBUG: - Is follow-up: &quot; + queryInfo.isFollowUp());&#xD;
         System.out.println(&quot;DEBUG: - Is stop request: &quot; + queryInfo.isStopRequest());&#xD;
         &#xD;
         // Handle special cases first&#xD;
         if (queryInfo.isFollowUp()) {&#xD;
             System.out.println(&quot;DEBUG: Translator detected follow-up question&quot;);&#xD;
             handleFollowUpQuestion(out, session);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         if (queryInfo.isStopRequest()) {&#xD;
             System.out.println(&quot;DEBUG: Translator detected stop request&quot;);&#xD;
             sendSimpleTextResponse(out, &quot;Am înțeles, nu mai este nevoie de alte informații. Cu ce altceva vă pot ajuta?&quot;);&#xD;
             session.removeAttribute(&quot;lastQueryData&quot;);&#xD;
             session.removeAttribute(&quot;lastQueryContext&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // NEW: Enhanced SQL generation with temporal and numeric expressions&#xD;
         String sqlQuery = queryInfo.getSqlQuery();&#xD;
         if (tokenization != null) {&#xD;
             sqlQuery = enhanceSQLWithTokenization(sqlQuery, tokenization, queryInfo);&#xD;
         }&#xD;
         &#xD;
         if (sqlQuery != null &amp;&amp; !sqlQuery.isEmpty()) {&#xD;
             System.out.println(&quot;DEBUG: Enhanced SQL query: &quot; + sqlQuery);&#xD;
             executeEnhancedSQLQuery(sqlQuery, queryInfo, tokenization, out, session);&#xD;
             return;&#xD;
         } else {&#xD;
             System.out.println(&quot;DEBUG: No SQL query was generated by translator&quot;);&#xD;
         }&#xD;
     } catch (Exception e) {&#xD;
         // Log the error but continue with legacy processing&#xD;
         System.out.println(&quot;DEBUG: Error using enhanced translator: &quot; + e.getMessage());&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
     &#xD;
     // If translation failed or didn't produce a valid SQL query, fall back to legacy processing&#xD;
     System.out.println(&quot;DEBUG: Falling back to legacy processing&quot;);&#xD;
     &#xD;
     // ORIGINAL LEGACY PROCESSING CODE - PRESERVED EXACTLY AS IS&#xD;
     if (lowerQuery.contains(&quot;angajat&quot;) || lowerQuery.contains(&quot;angajați&quot;) || lowerQuery.contains(&quot;personal&quot;)) {&#xD;
         System.out.println(&quot;DEBUG: Legacy - processing employee query&quot;);&#xD;
         processEmployeeQuery(lowerQuery, currentUser, out, session);&#xD;
     } else if (lowerQuery.contains(&quot;departament&quot;)) {&#xD;
         System.out.println(&quot;DEBUG: Legacy - processing department query&quot;);&#xD;
         processDepartmentQuery(lowerQuery, currentUser, out, session);&#xD;
     } else if (lowerQuery.contains(&quot;concediu&quot;) || lowerQuery.contains(&quot;concedii&quot;) || &#xD;
                lowerQuery.contains(&quot;vacanță&quot;) || lowerQuery.contains(&quot;vacanta&quot;)) {&#xD;
         System.out.println(&quot;DEBUG: Legacy - processing leave query&quot;);&#xD;
         processLeaveQuery(lowerQuery, currentUser, out, session);&#xD;
     } else if (lowerQuery.contains(&quot;adeverință&quot;) || lowerQuery.contains(&quot;adeverinta&quot;) || &#xD;
                lowerQuery.contains(&quot;adeverințe&quot;) || lowerQuery.contains(&quot;adeverinte&quot;)) {&#xD;
         System.out.println(&quot;DEBUG: Legacy - processing certificate query&quot;);&#xD;
         processCertificateQuery(lowerQuery, currentUser, out, session);&#xD;
     } else if (lowerQuery.contains(&quot;proiect&quot;) || lowerQuery.contains(&quot;proiecte&quot;)) {&#xD;
         System.out.println(&quot;DEBUG: Legacy - processing project query&quot;);&#xD;
         processProjectQuery(lowerQuery, currentUser, out, session);&#xD;
     } else if (lowerQuery.contains(&quot;tipuri&quot;) || lowerQuery.contains(&quot;pozitii&quot;) || &#xD;
                lowerQuery.contains(&quot;poziții&quot;) || lowerQuery.contains(&quot;functii&quot;) || &#xD;
                lowerQuery.contains(&quot;funcții&quot;)) {&#xD;
         System.out.println(&quot;DEBUG: Legacy - processing positions query&quot;);&#xD;
         processPositionsQuery(lowerQuery, currentUser, out, session);&#xD;
     } else if (lowerQuery.contains(&quot;salariu&quot;) || lowerQuery.contains(&quot;salarii&quot;) || &#xD;
                lowerQuery.contains(&quot;venit&quot;) || lowerQuery.contains(&quot;venituri&quot;)) {&#xD;
         System.out.println(&quot;DEBUG: Legacy - processing salary query&quot;);&#xD;
         processSalaryQuery(lowerQuery, currentUser, out, session);&#xD;
     } else {&#xD;
         // Enhanced default response with suggestions&#xD;
         System.out.println(&quot;DEBUG: No recognizable query type found, providing enhanced suggestions&quot;);&#xD;
         if (tokenization != null) {&#xD;
             handleUnrecognizedQueryWithSuggestions(query, tokenization, out);&#xD;
         } else {&#xD;
             // Default response for unrecognized queries&#xD;
             sendSimpleTextResponse(out, &quot;Îmi pare rău, nu am înțeles întrebarea. Puteți să-mi adresați întrebări despre angajați, departamente, concedii, adeverințe sau proiecte. De exemplu: \&quot;Câți angajați sunt în departamentul HR?\&quot; sau \&quot;Ce tipuri de poziții există în departamentul IT?\&quot;&quot;);&#xD;
         }&#xD;
     }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-w7rkVdEfCS7cth2SLu0w" name="handleFollowUpQuestion" specification="_VsdDoEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-w7r0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-w7sEVdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>List&lt;Map&lt;String, Object>> lastQueryData = (List&lt;Map&lt;String, Object>>) session.getAttribute(&quot;lastQueryData&quot;);&#xD;
     String lastQueryContext = (String) session.getAttribute(&quot;lastQueryContext&quot;);&#xD;
     EnhancedNLPProcessor.AdvancedTokenization lastTokenization = &#xD;
         (EnhancedNLPProcessor.AdvancedTokenization) session.getAttribute(&quot;lastTokenization&quot;);&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: Enhanced follow-up - Context: &quot; + lastQueryContext);&#xD;
     System.out.println(&quot;DEBUG: Enhanced follow-up - Data rows: &quot; + (lastQueryData != null ? lastQueryData.size() : 0));&#xD;
     &#xD;
     if (lastQueryData != null &amp;&amp; !lastQueryData.isEmpty()) {&#xD;
         // If you already have a simple handleFollowUpQuestion method, this enhances it&#xD;
         // Otherwise, this provides enhanced table response with additional context&#xD;
         JSONObject response = new JSONObject();&#xD;
         response.put(&quot;type&quot;, &quot;table&quot;);&#xD;
         response.put(&quot;message&quot;, &quot;Iată toate detaliile&quot; + &#xD;
                 (lastQueryContext != null ? &quot; pentru &quot; + lastQueryContext : &quot;&quot;) + &quot;:&quot;);&#xD;
         response.put(&quot;data&quot;, new JSONArray(lastQueryData));&#xD;
         response.put(&quot;rowCount&quot;, lastQueryData.size());&#xD;
         response.put(&quot;isFollowUp&quot;, true);&#xD;
         response.put(&quot;timestamp&quot;, System.currentTimeMillis());&#xD;
         &#xD;
         // Add enhanced metadata if available&#xD;
         if (lastTokenization != null) {&#xD;
             JSONObject metadata = new JSONObject();&#xD;
             metadata.put(&quot;entityConfidences&quot;, lastTokenization.getEntityConfidences());&#xD;
             metadata.put(&quot;temporalExpressions&quot;, lastTokenization.getTemporalExpressions().size());&#xD;
             metadata.put(&quot;numericExpressions&quot;, lastTokenization.getNumericExpressions().size());&#xD;
             response.put(&quot;metadata&quot;, metadata);&#xD;
         }&#xD;
         &#xD;
         out.println(response.toString());&#xD;
     } else {&#xD;
         sendSimpleTextResponse(out, &quot;Îmi pare rău, nu am date anterioare pentru a vă oferi mai multe detalii. &quot; +&#xD;
                 &quot;Vă rog să reformulați întrebarea specifică.&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-w7sUVdEfCS7cth2SLu0w" name="preprocessQuery" specification="_VsdDo0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-w7skVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-w7s0VdEfCS7cth2SLu0w" type="_V8IeYEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>System.out.println(&quot;DEBUG: Starting enhanced preprocessing for: \&quot;&quot; + query + &quot;\&quot;&quot;);&#xD;
  &#xD;
  // Check cache first&#xD;
  if (queryCache.containsKey(query)) {&#xD;
      System.out.println(&quot;DEBUG: Using cached tokenization&quot;);&#xD;
      return queryCache.get(query);&#xD;
  }&#xD;
  &#xD;
  // Perform advanced tokenization&#xD;
  EnhancedNLPProcessor.AdvancedTokenization tokenization = &#xD;
      EnhancedNLPProcessor.performAdvancedTokenization(query);&#xD;
  &#xD;
  // Add to cache (with size limit)&#xD;
  if (queryCache.size() >= maxCacheSize) {&#xD;
      // Remove oldest entry (simple FIFO)&#xD;
      String firstKey = queryCache.keySet().iterator().next();&#xD;
      queryCache.remove(firstKey);&#xD;
  }&#xD;
  queryCache.put(query, tokenization);&#xD;
  &#xD;
  System.out.println(&quot;DEBUG: Enhanced preprocessing completed:&quot;);&#xD;
  System.out.println(&quot;DEBUG: - Original tokens: &quot; + tokenization.getOriginalTokens());&#xD;
  System.out.println(&quot;DEBUG: - Semantic tokens: &quot; + tokenization.getSemanticTokens());&#xD;
  System.out.println(&quot;DEBUG: - Entity confidences: &quot; + tokenization.getEntityConfidences());&#xD;
  System.out.println(&quot;DEBUG: - Temporal expressions: &quot; + tokenization.getTemporalExpressions().size());&#xD;
  System.out.println(&quot;DEBUG: - Numeric expressions: &quot; + tokenization.getNumericExpressions().size());&#xD;
  &#xD;
  return tokenization;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-w7tEVdEfCS7cth2SLu0w" name="handleLowConfidenceQuery" specification="_V8JFcUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-w7tUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-w7tkVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-w7t0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>JSONObject response = new JSONObject();&#xD;
  response.put(&quot;type&quot;, &quot;low_confidence_suggestion&quot;);&#xD;
  response.put(&quot;message&quot;, &quot;Nu sunt sigur că am înțeles corect întrebarea. Poate v-ați referit la:&quot;);&#xD;
  &#xD;
  JSONArray suggestions = new JSONArray();&#xD;
  &#xD;
  // Generate suggestions based on detected entities&#xD;
  List&lt;String> enhancedSuggestions = EnhancedNLPProcessor.generateEnhancedSuggestions(&#xD;
      query, tokenization.getEntityConfidences());&#xD;
  &#xD;
  for (String suggestion : enhancedSuggestions) {&#xD;
      suggestions.put(suggestion);&#xD;
  }&#xD;
  &#xD;
  // Add department-specific suggestions if department detected&#xD;
  String detectedDept = EnhancedNLPProcessor.detectDepartmentWithFuzzyMatching(query);&#xD;
  if (detectedDept != null) {&#xD;
      suggestions.put(&quot;Câți angajați sunt în departamentul &quot; + detectedDept + &quot;?&quot;);&#xD;
      suggestions.put(&quot;Ce funcții există în departamentul &quot; + detectedDept + &quot;?&quot;);&#xD;
  }&#xD;
  &#xD;
  response.put(&quot;suggestions&quot;, suggestions);&#xD;
  response.put(&quot;confidence_info&quot;, tokenization.getEntityConfidences());&#xD;
  out.println(response.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-w7uEVdEfCS7cth2SLu0w" name="handleUnrecognizedQueryWithSuggestions" specification="_V8JFdUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-w7uUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-w7ukVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-w7u0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>JSONObject response = new JSONObject();&#xD;
  response.put(&quot;type&quot;, &quot;unrecognized_with_suggestions&quot;);&#xD;
  response.put(&quot;message&quot;, &quot;Nu am putut înțelege această întrebare. Iată câteva exemple de întrebări pe care le pot procesa:&quot;);&#xD;
  &#xD;
  JSONArray examples = new JSONArray();&#xD;
  &#xD;
  // Generate contextual examples based on detected patterns&#xD;
  if (!tokenization.getEntityConfidences().isEmpty()) {&#xD;
      List&lt;String> suggestions = EnhancedNLPProcessor.generateEnhancedSuggestions(&#xD;
          query, tokenization.getEntityConfidences());&#xD;
      for (String suggestion : suggestions) {&#xD;
          examples.put(suggestion);&#xD;
      }&#xD;
  } else {&#xD;
      // Default examples&#xD;
      examples.put(&quot;Câți angajați sunt în departamentul IT?&quot;);&#xD;
      examples.put(&quot;Arată-mi concediile aprobate din această lună&quot;);&#xD;
      examples.put(&quot;Care este salariul mediu în firmă?&quot;);&#xD;
      examples.put(&quot;Ce tipuri de adeverințe au fost solicitate?&quot;);&#xD;
  }&#xD;
  &#xD;
  response.put(&quot;examples&quot;, examples);&#xD;
  out.println(response.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-xisEVdEfCS7cth2SLu0w" name="enhanceQueryInfoWithTokenization" specification="_V8JsgEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-xisUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xiskVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Add enhanced entity information&#xD;
  Map&lt;String, String> existingEntities = queryInfo.getEntities();&#xD;
  &#xD;
  // Add entity confidences as a special entity&#xD;
  if (!tokenization.getEntityConfidences().isEmpty()) {&#xD;
      // Find the most confident entity&#xD;
      String topEntity = tokenization.getEntityConfidences().entrySet().stream()&#xD;
          .max(Map.Entry.comparingByValue())&#xD;
          .map(Map.Entry::getKey)&#xD;
          .orElse(null);&#xD;
      &#xD;
      if (topEntity != null &amp;&amp; !existingEntities.containsKey(&quot;entity&quot;)) {&#xD;
          existingEntities.put(&quot;entity&quot;, topEntity.toLowerCase());&#xD;
      }&#xD;
  }&#xD;
  &#xD;
  // Add detected department with fuzzy matching&#xD;
  String detectedDept = EnhancedNLPProcessor.detectDepartmentWithFuzzyMatching(&#xD;
      String.join(&quot; &quot;, tokenization.getNormalizedTokens()));&#xD;
  if (detectedDept != null &amp;&amp; !existingEntities.containsKey(&quot;department_name&quot;)) {&#xD;
      existingEntities.put(&quot;department_name&quot;, detectedDept);&#xD;
  }&#xD;
  &#xD;
  // Add temporal information&#xD;
  if (!tokenization.getTemporalExpressions().isEmpty()) {&#xD;
      EnhancedNLPProcessor.TemporalExpression firstTemporal = tokenization.getTemporalExpressions().get(0);&#xD;
      existingEntities.put(&quot;temporal_expression&quot;, firstTemporal.getNormalizedText());&#xD;
      existingEntities.put(&quot;temporal_type&quot;, firstTemporal.getTemporalType());&#xD;
  }&#xD;
  &#xD;
  // Add numeric information&#xD;
  if (!tokenization.getNumericExpressions().isEmpty()) {&#xD;
      EnhancedNLPProcessor.NumericExpression firstNumeric = tokenization.getNumericExpressions().get(0);&#xD;
      existingEntities.put(&quot;numeric_value&quot;, firstNumeric.getValue().toString());&#xD;
      existingEntities.put(&quot;numeric_operator&quot;, firstNumeric.getOperator());&#xD;
      existingEntities.put(&quot;numeric_context&quot;, firstNumeric.getContext());&#xD;
  }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-xis0VdEfCS7cth2SLu0w" name="enhanceSQLWithTokenization" specification="_V8Jsg0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-xitEVdEfCS7cth2SLu0w" name="sqlQuery">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-xitUVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xitkVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xit0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>if (sqlQuery == null || sqlQuery.trim().isEmpty()) {&#xD;
      return sqlQuery;&#xD;
  }&#xD;
  &#xD;
  StringBuilder enhancedSQL = new StringBuilder(sqlQuery);&#xD;
  &#xD;
  // Add temporal filters&#xD;
  for (EnhancedNLPProcessor.TemporalExpression temporal : tokenization.getTemporalExpressions()) {&#xD;
      String sqlCondition = temporal.getSqlCondition();&#xD;
      if (sqlCondition != null) {&#xD;
          // Determine appropriate column based on entity type&#xD;
          String columnName = getTemporalColumnForEntity(queryInfo.getEntities().get(&quot;entity&quot;));&#xD;
          if (columnName != null) {&#xD;
              sqlCondition = sqlCondition.replace(&quot;column_name&quot;, columnName);&#xD;
              &#xD;
              // Add WHERE clause or append to existing WHERE&#xD;
              if (enhancedSQL.toString().toLowerCase().contains(&quot;where&quot;)) {&#xD;
                  enhancedSQL.append(&quot; AND &quot;).append(sqlCondition);&#xD;
              } else {&#xD;
                  enhancedSQL.append(&quot; WHERE &quot;).append(sqlCondition);&#xD;
              }&#xD;
          }&#xD;
      }&#xD;
  }&#xD;
  &#xD;
  // Add numeric filters&#xD;
  for (EnhancedNLPProcessor.NumericExpression numeric : tokenization.getNumericExpressions()) {&#xD;
      String columnName = getNumericColumnForContext(numeric.getContext());&#xD;
      if (columnName != null) {&#xD;
          String condition = columnName + &quot; &quot; + numeric.getOperator() + &quot; &quot; + numeric.getValue();&#xD;
          &#xD;
          // Add WHERE clause or append to existing WHERE&#xD;
          if (enhancedSQL.toString().toLowerCase().contains(&quot;where&quot;)) {&#xD;
              enhancedSQL.append(&quot; AND &quot;).append(condition);&#xD;
          } else {&#xD;
              enhancedSQL.append(&quot; WHERE &quot;).append(condition);&#xD;
          }&#xD;
      }&#xD;
  }&#xD;
  &#xD;
  return enhancedSQL.toString();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-xiuEVdEfCS7cth2SLu0w" name="getTemporalColumnForEntity" specification="_VsdqsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-xiuUVdEfCS7cth2SLu0w" name="entityType">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-xiukVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>if (entityType == null) return null;&#xD;
  &#xD;
  switch (entityType.toLowerCase()) {&#xD;
      case &quot;employee&quot;:&#xD;
          return &quot;u.data_ang&quot;;&#xD;
      case &quot;leave&quot;:&#xD;
          return &quot;c.start_c&quot;;&#xD;
      case &quot;certificate&quot;:&#xD;
          return &quot;a.creare&quot;;&#xD;
      case &quot;project&quot;:&#xD;
          return &quot;p.start&quot;;&#xD;
      default:&#xD;
          return null;&#xD;
  }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-xiu0VdEfCS7cth2SLu0w" name="getNumericColumnForContext" specification="_VseRwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-xivEVdEfCS7cth2SLu0w" name="context">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-xivUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>if (context == null) return null;&#xD;
  &#xD;
  switch (context.toLowerCase()) {&#xD;
      case &quot;salary&quot;:&#xD;
          return &quot;t.salariu&quot;;&#xD;
      case &quot;age&quot;:&#xD;
          return &quot;TIMESTAMPDIFF(YEAR, u.data_nasterii, CURDATE())&quot;;&#xD;
      case &quot;count&quot;:&#xD;
          return &quot;COUNT(*)&quot;;&#xD;
      default:&#xD;
          return null;&#xD;
  }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-xivkVdEfCS7cth2SLu0w" name="generateEnhancedContextFromQueryInfo" specification="_V8JsiEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-xiv0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xiwEVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xiwUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder context = new StringBuilder();&#xD;
  &#xD;
  // Base entity context&#xD;
  String entity = queryInfo.getEntities().getOrDefault(&quot;entity&quot;, &quot;&quot;);&#xD;
  switch (entity) {&#xD;
      case &quot;employee&quot;:&#xD;
          context.append(&quot;angajați&quot;);&#xD;
          break;&#xD;
      case &quot;department&quot;:&#xD;
          context.append(&quot;departamente&quot;);&#xD;
          break;&#xD;
      case &quot;leave&quot;:&#xD;
          context.append(&quot;concedii&quot;);&#xD;
          break;&#xD;
      case &quot;position&quot;:&#xD;
          context.append(&quot;poziții&quot;);&#xD;
          break;&#xD;
      case &quot;project&quot;:&#xD;
          context.append(&quot;proiecte&quot;);&#xD;
          break;&#xD;
      case &quot;certificate&quot;:&#xD;
          context.append(&quot;adeverințe&quot;);&#xD;
          break;&#xD;
      default:&#xD;
          context.append(&quot;rezultate&quot;);&#xD;
  }&#xD;
  &#xD;
  // Add department context&#xD;
  String department = queryInfo.getEntities().get(&quot;department_name&quot;);&#xD;
  if (department != null) {&#xD;
      context.append(&quot; din departamentul &quot;).append(department);&#xD;
  }&#xD;
  &#xD;
  // Add temporal context&#xD;
  if (tokenization != null &amp;&amp; !tokenization.getTemporalExpressions().isEmpty()) {&#xD;
      EnhancedNLPProcessor.TemporalExpression temporal = tokenization.getTemporalExpressions().get(0);&#xD;
      context.append(&quot; (&quot;).append(temporal.getNormalizedText()).append(&quot;)&quot;);&#xD;
  }&#xD;
  &#xD;
  // Add numeric context&#xD;
  if (tokenization != null &amp;&amp; !tokenization.getNumericExpressions().isEmpty()) {&#xD;
      EnhancedNLPProcessor.NumericExpression numeric = tokenization.getNumericExpressions().get(0);&#xD;
      context.append(&quot; (&quot;).append(numeric.getOperator()).append(&quot; &quot;).append(numeric.getValue()).append(&quot;)&quot;);&#xD;
  }&#xD;
  &#xD;
  return context.toString();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-xiwkVdEfCS7cth2SLu0w" name="handleEmptyResultsWithSuggestions" specification="_V8JsjEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-xiw0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xixEVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xixUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>JSONObject response = new JSONObject();&#xD;
  response.put(&quot;type&quot;, &quot;empty_with_suggestions&quot;);&#xD;
  &#xD;
  String entity = queryInfo.getEntities().getOrDefault(&quot;entity&quot;, &quot;&quot;);&#xD;
  String department = queryInfo.getEntities().get(&quot;department_name&quot;);&#xD;
  &#xD;
  String message = &quot;Nu am găsit rezultate pentru această căutare&quot;;&#xD;
  if (department != null) {&#xD;
      message += &quot; în departamentul &quot; + department;&#xD;
  }&#xD;
  message += &quot;.&quot;;&#xD;
  &#xD;
  response.put(&quot;message&quot;, message);&#xD;
  &#xD;
  // Generate contextual suggestions&#xD;
  JSONArray suggestions = new JSONArray();&#xD;
  &#xD;
  switch (entity) {&#xD;
      case &quot;employee&quot;:&#xD;
          suggestions.put(&quot;Arată-mi toți angajații din firmă&quot;);&#xD;
          if (department != null) {&#xD;
              suggestions.put(&quot;Ce departamente sunt similare cu &quot; + department + &quot;?&quot;);&#xD;
          }&#xD;
          suggestions.put(&quot;Câți angajați sunt în fiecare departament?&quot;);&#xD;
          break;&#xD;
          &#xD;
      case &quot;department&quot;:&#xD;
          suggestions.put(&quot;Ce departamente există în firmă?&quot;);&#xD;
          suggestions.put(&quot;Care sunt toate departamentele disponibile?&quot;);&#xD;
          break;&#xD;
          &#xD;
      case &quot;leave&quot;:&#xD;
          suggestions.put(&quot;Cine este în concediu în acest moment?&quot;);&#xD;
          suggestions.put(&quot;Arată-mi toate concediile din această lună&quot;);&#xD;
          if (department != null) {&#xD;
              suggestions.put(&quot;Ce concedii sunt în alte departamente?&quot;);&#xD;
          }&#xD;
          break;&#xD;
          &#xD;
      default:&#xD;
          suggestions.put(&quot;Arată-mi informații generale despre firmă&quot;);&#xD;
          suggestions.put(&quot;Ce departamente există?&quot;);&#xD;
          suggestions.put(&quot;Câți angajați sunt în total?&quot;);&#xD;
  }&#xD;
  &#xD;
  response.put(&quot;suggestions&quot;, suggestions);&#xD;
  out.println(response.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-xixkVdEfCS7cth2SLu0w" name="formatEnhancedResponse" specification="_V8KTk0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-xix0VdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xiyEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xiyUVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xiykVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Determine response format based on query type and result size&#xD;
  switch (queryInfo.getQueryType()) {&#xD;
      case COUNT:&#xD;
          handleCountResponseEnhanced(resultList, queryInfo, tokenization, out);&#xD;
          break;&#xD;
          &#xD;
      case MINMAX:&#xD;
          handleMinMaxResponseEnhanced(resultList, queryInfo, tokenization, out);&#xD;
          break;&#xD;
          &#xD;
      case LIST:&#xD;
      default:&#xD;
          handleListResponseEnhanced(resultList, queryInfo, tokenization, out);&#xD;
          break;&#xD;
  }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-xiy0VdEfCS7cth2SLu0w" name="handleCountResponseEnhanced" specification="_V8K6oUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-xizEVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xizUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xizkVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xiz0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>if (resultList.size() == 1 &amp;&amp; resultList.get(0).size() == 1) {&#xD;
      // Simple count result&#xD;
      Object countResult = resultList.get(0).values().iterator().next();&#xD;
      String message = formatEnhancedCountMessage(countResult, queryInfo, tokenization);&#xD;
      sendEnhancedTextResponse(out, message, queryInfo, tokenization);&#xD;
  } else {&#xD;
      // Complex count result - show as table&#xD;
      String context = generateEnhancedContextFromQueryInfo(queryInfo, tokenization);&#xD;
      sendEnhancedTableResponse(out, &quot;Iată rezultatele numărării pentru &quot; + context + &quot;:&quot;, &#xD;
                              resultList, queryInfo, tokenization);&#xD;
  }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-xi0EVdEfCS7cth2SLu0w" name="handleMinMaxResponseEnhanced" specification="_V8LhsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-xi0UVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xi0kVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xi00VdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xi1EVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String context = generateEnhancedContextFromQueryInfo(queryInfo, tokenization);&#xD;
  &#xD;
  boolean isMinQuery = false;&#xD;
  if (tokenization != null) {&#xD;
      List&lt;String> tokens = tokenization.getNormalizedTokens();&#xD;
      isMinQuery = tokens.contains(&quot;mic&quot;) || tokens.contains(&quot;minim&quot;) || tokens.contains(&quot;putin&quot;);&#xD;
  }&#xD;
  &#xD;
  String message = &quot;Iată &quot; + (isMinQuery ? &quot;cele mai mici&quot; : &quot;cele mai mari&quot;) + &#xD;
                  &quot; valori pentru &quot; + context + &quot;:&quot;;&#xD;
  &#xD;
  sendEnhancedTableResponseWithConfirmation(out, message, resultList, queryInfo, tokenization);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-xi1UVdEfCS7cth2SLu0w" name="handleListResponseEnhanced" specification="_V8LhtkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-xi1kVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xi10VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xi2EVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xi2UVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String context = generateEnhancedContextFromQueryInfo(queryInfo, tokenization);&#xD;
  &#xD;
  if (resultList.size() > 15) {&#xD;
      // Large result set - offer confirmation&#xD;
      sendEnhancedTableResponseWithConfirmation(out, &#xD;
              &quot;Am găsit &quot; + resultList.size() + &quot; rezultate pentru &quot; + context + &quot;. &quot; + &#xD;
              &quot;Doriți să vedeți toate detaliile?&quot;, resultList, queryInfo, tokenization);&#xD;
  } else {&#xD;
      // Normal result set&#xD;
      sendEnhancedTableResponse(out, &quot;Iată rezultatele pentru &quot; + context + &quot;:&quot;, &#xD;
                              resultList, queryInfo, tokenization);&#xD;
  }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-xi2kVdEfCS7cth2SLu0w" name="formatEnhancedCountMessage" specification="_V9OqkkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-xi20VdEfCS7cth2SLu0w" name="countResult" type="_V9OqkEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xi3EVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xi3UVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xi3kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>int count = 0;&#xD;
  &#xD;
  // Convert the count result to an integer&#xD;
  if (countResult instanceof Number) {&#xD;
      count = ((Number) countResult).intValue();&#xD;
  } else {&#xD;
      try {&#xD;
          count = Integer.parseInt(countResult.toString());&#xD;
      } catch (NumberFormatException e) {&#xD;
          return &quot;Am găsit &quot; + countResult + &quot; rezultate.&quot;;&#xD;
      }&#xD;
  }&#xD;
  &#xD;
  String entity = queryInfo.getEntities().getOrDefault(&quot;entity&quot;, &quot;&quot;);&#xD;
  String department = queryInfo.getEntities().get(&quot;department_name&quot;);&#xD;
  &#xD;
  // Enhanced context from tokenization&#xD;
  String additionalContext = &quot;&quot;;&#xD;
  if (tokenization != null) {&#xD;
      if (!tokenization.getTemporalExpressions().isEmpty()) {&#xD;
          additionalContext += &quot; &quot; + tokenization.getTemporalExpressions().get(0).getNormalizedText();&#xD;
      }&#xD;
      if (!tokenization.getNumericExpressions().isEmpty()) {&#xD;
          EnhancedNLPProcessor.NumericExpression numeric = tokenization.getNumericExpressions().get(0);&#xD;
          additionalContext += &quot; (cu &quot; + numeric.getContext() + &quot; &quot; + numeric.getOperator() + &quot; &quot; + numeric.getValue() + &quot;)&quot;;&#xD;
      }&#xD;
  }&#xD;
  &#xD;
  // Format based on entity type&#xD;
  switch (entity) {&#xD;
      case &quot;employee&quot;:&#xD;
          return &quot;Am găsit &quot; + count + &quot; angajați&quot; + &#xD;
                  (department != null ? &quot; în departamentul &quot; + department : &quot;&quot;) + &#xD;
                  additionalContext + &quot;.&quot;;&#xD;
      case &quot;department&quot;:&#xD;
          return &quot;În firmă există &quot; + count + &quot; departamente&quot; + additionalContext + &quot;.&quot;;&#xD;
      case &quot;leave&quot;:&#xD;
          return &quot;Am găsit &quot; + count + &quot; concedii&quot; + &#xD;
                  (department != null ? &quot; în departamentul &quot; + department : &quot;&quot;) + &#xD;
                  additionalContext + &quot;.&quot;;&#xD;
      case &quot;position&quot;:&#xD;
          return &quot;Există &quot; + count + &quot; tipuri de poziții&quot; + &#xD;
                  (department != null ? &quot; în departamentul &quot; + department : &quot;&quot;) + &#xD;
                  additionalContext + &quot;.&quot;;&#xD;
      case &quot;certificate&quot;:&#xD;
          return &quot;Am găsit &quot; + count + &quot; adeverințe&quot; + &#xD;
                  (department != null ? &quot; pentru angajații din departamentul &quot; + department : &quot;&quot;) + &#xD;
                  additionalContext + &quot;.&quot;;&#xD;
      case &quot;project&quot;:&#xD;
          return &quot;Există &quot; + count + &quot; proiecte&quot; + &#xD;
                  (department != null ? &quot; în departamentul &quot; + department : &quot;&quot;) + &#xD;
                  additionalContext + &quot;.&quot;;&#xD;
      default:&#xD;
          return &quot;Am găsit &quot; + count + &quot; rezultate&quot; + additionalContext + &quot;.&quot;;&#xD;
  }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-xi30VdEfCS7cth2SLu0w" name="sendEnhancedTableResponse" specification="_V8Mv0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-xi4EVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xi4UVdEfCS7cth2SLu0w" name="message">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-xi4kVdEfCS7cth2SLu0w" name="data" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xi40VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-xi5EVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>System.out.println(&quot;DEBUG: Sending enhanced table response with &quot; + data.size() + &quot; rows&quot;);&#xD;
  &#xD;
  JSONObject response = new JSONObject();&#xD;
  response.put(&quot;type&quot;, &quot;table&quot;);&#xD;
  response.put(&quot;message&quot;, message);&#xD;
  response.put(&quot;data&quot;, new JSONArray(data));&#xD;
  response.put(&quot;rowCount&quot;, data.size());&#xD;
  response.put(&quot;timestamp&quot;, System.currentTimeMillis());&#xD;
  &#xD;
  // Add enhanced metadata&#xD;
  if (tokenization != null) {&#xD;
      JSONObject metadata = new JSONObject();&#xD;
      metadata.put(&quot;queryType&quot;, queryInfo.getQueryType().toString());&#xD;
      metadata.put(&quot;entityConfidences&quot;, tokenization.getEntityConfidences());&#xD;
      metadata.put(&quot;semanticTokens&quot;, tokenization.getSemanticTokens());&#xD;
      response.put(&quot;metadata&quot;, metadata);&#xD;
  }&#xD;
  &#xD;
  out.println(response.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-yJwEVdEfCS7cth2SLu0w" name="sendEnhancedTableResponseWithConfirmation" specification="_V8NW4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-yJwUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-yJwkVdEfCS7cth2SLu0w" name="message">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-yJw0VdEfCS7cth2SLu0w" name="data" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-yJxEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-yJxUVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>System.out.println(&quot;DEBUG: Sending enhanced table response with confirmation&quot;);&#xD;
  &#xD;
  JSONObject response = new JSONObject();&#xD;
  response.put(&quot;type&quot;, &quot;table&quot;);&#xD;
  response.put(&quot;message&quot;, message);&#xD;
  response.put(&quot;data&quot;, new JSONArray(data));&#xD;
  response.put(&quot;needsConfirmation&quot;, true);&#xD;
  response.put(&quot;rowCount&quot;, data.size());&#xD;
  response.put(&quot;timestamp&quot;, System.currentTimeMillis());&#xD;
  &#xD;
  // Add enhanced metadata&#xD;
  if (tokenization != null) {&#xD;
      JSONObject metadata = new JSONObject();&#xD;
      metadata.put(&quot;queryType&quot;, queryInfo.getQueryType().toString());&#xD;
      metadata.put(&quot;entityConfidences&quot;, tokenization.getEntityConfidences());&#xD;
      metadata.put(&quot;isLargeResultSet&quot;, true);&#xD;
      response.put(&quot;metadata&quot;, metadata);&#xD;
  }&#xD;
  &#xD;
  out.println(response.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-yJxkVdEfCS7cth2SLu0w" name="resultSetToListEnhanced" specification="_Vsff4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-yJx0VdEfCS7cth2SLu0w" name="rs" type="_T9wtMEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-yJyEVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-yJyUVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;Map&lt;String, Object>> list = new ArrayList&lt;>();&#xD;
     ResultSetMetaData md = rs.getMetaData();&#xD;
     int columnCount = md.getColumnCount();&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: Converting enhanced ResultSet with &quot; + columnCount + &quot; columns&quot;);&#xD;
     &#xD;
     int rowCount = 0;&#xD;
     while (rs.next()) {&#xD;
         rowCount++;&#xD;
         Map&lt;String, Object> row = new HashMap&lt;>();&#xD;
         for (int i = 1; i &lt;= columnCount; i++) {&#xD;
             String columnName = md.getColumnLabel(i);&#xD;
             Object value = rs.getObject(i);&#xD;
             &#xD;
             // Enhanced formatting based on column type and name&#xD;
             if (value instanceof java.sql.Date) {&#xD;
                 SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd.MM.yyyy&quot;);&#xD;
                 value = sdf.format(value);&#xD;
             } else if (value instanceof java.sql.Timestamp) {&#xD;
                 SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd.MM.yyyy HH:mm&quot;);&#xD;
                 value = sdf.format(value);&#xD;
             } else if (value instanceof java.sql.Time) {&#xD;
                 SimpleDateFormat sdf = new SimpleDateFormat(&quot;HH:mm&quot;);&#xD;
                 value = sdf.format(value);&#xD;
             }&#xD;
             &#xD;
             // Enhanced currency and numeric formatting&#xD;
             if (columnName.toLowerCase().contains(&quot;salariu&quot;) &amp;&amp; value instanceof Number) {&#xD;
                 double salary = ((Number) value).doubleValue();&#xD;
                 if (salary >= 1000) {&#xD;
                     value = String.format(&quot;%.0f RON&quot;, salary);&#xD;
                 } else {&#xD;
                     value = String.format(&quot;%.2f RON&quot;, salary);&#xD;
                 }&#xD;
             } else if (columnName.toLowerCase().contains(&quot;procent&quot;) &amp;&amp; value instanceof Number) {&#xD;
                 value = String.format(&quot;%.1f%%&quot;, ((Number) value).doubleValue());&#xD;
             } else if (columnName.toLowerCase().contains(&quot;durata&quot;) &amp;&amp; value instanceof Number) {&#xD;
                 int days = ((Number) value).intValue();&#xD;
                 if (days == 1) {&#xD;
                     value = &quot;1 zi&quot;;&#xD;
                 } else {&#xD;
                     value = days + &quot; zile&quot;;&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             // Handle null values more gracefully&#xD;
             if (value == null) {&#xD;
                 value = &quot;-&quot;;&#xD;
             }&#xD;
             &#xD;
             row.put(columnName, value);&#xD;
         }&#xD;
         list.add(row);&#xD;
         &#xD;
         if (rowCount &lt;= 3) {&#xD;
             System.out.println(&quot;DEBUG: Enhanced sample row &quot; + rowCount + &quot;: &quot; + row);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: Enhanced conversion completed - &quot; + rowCount + &quot; rows total&quot;);&#xD;
     return list;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-yJykVdEfCS7cth2SLu0w" name="executeSQLQuery" specification="_V8N98EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-yJy0VdEfCS7cth2SLu0w" name="sqlQuery">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-yJzEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-yJzUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-yJzkVdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try (Connection conn = getConnection()) {&#xD;
         System.out.println(&quot;DEBUG: Executing SQL query: &quot; + sqlQuery);&#xD;
         &#xD;
         PreparedStatement stmt = conn.prepareStatement(sqlQuery);&#xD;
         ResultSet rs = stmt.executeQuery();&#xD;
         &#xD;
         // Print result set metadata&#xD;
         ResultSetMetaData metaData = rs.getMetaData();&#xD;
         int columnCount = metaData.getColumnCount();&#xD;
         &#xD;
         System.out.println(&quot;DEBUG: Result set has &quot; + columnCount + &quot; columns:&quot;);&#xD;
         for (int i = 1; i &lt;= columnCount; i++) {&#xD;
             System.out.println(&quot;DEBUG: Column &quot; + i + &quot;: &quot; + metaData.getColumnName(i) + &#xD;
                               &quot; (Type: &quot; + metaData.getColumnTypeName(i) + &quot;)&quot;);&#xD;
         }&#xD;
         &#xD;
         // Convert the result to a list of maps&#xD;
         List&lt;Map&lt;String, Object>> resultList = resultSetToList(rs);&#xD;
         &#xD;
         System.out.println(&quot;DEBUG: Query returned &quot; + resultList.size() + &quot; rows&quot;);&#xD;
         &#xD;
         if (resultList.size() > 0) {&#xD;
             // Print sample of result data (first row)&#xD;
             System.out.println(&quot;DEBUG: Sample result data (first row):&quot;);&#xD;
             Map&lt;String, Object> firstRow = resultList.get(0);&#xD;
             for (Map.Entry&lt;String, Object> entry : firstRow.entrySet()) {&#xD;
                 System.out.println(&quot;DEBUG: &quot; + entry.getKey() + &quot; = &quot; + entry.getValue());&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // Save the result in session for possible follow-up questions&#xD;
         session.setAttribute(&quot;lastQueryData&quot;, resultList);&#xD;
         &#xD;
         // Identify the main entity for context in follow-up questions&#xD;
         Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
         String entityType = entities.getOrDefault(&quot;entity&quot;, &quot;&quot;);&#xD;
         String entityName = entities.getOrDefault(&quot;department_name&quot;, &quot;&quot;);&#xD;
         String context = getContextFromEntity(entityType, entityName);&#xD;
         session.setAttribute(&quot;lastQueryContext&quot;, context);&#xD;
         &#xD;
         System.out.println(&quot;DEBUG: Context for follow-up: &quot; + context);&#xD;
         &#xD;
         if (resultList.isEmpty()) {&#xD;
             System.out.println(&quot;DEBUG: No results found&quot;);&#xD;
             sendSimpleTextResponse(out, &quot;Nu am găsit rezultate care să corespundă criteriilor dvs.&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Format the response based on query type&#xD;
         switch (queryInfo.getQueryType()) {&#xD;
             case COUNT:&#xD;
                 System.out.println(&quot;DEBUG: Formatting as COUNT response&quot;);&#xD;
                 // For COUNT, we usually have a single value&#xD;
                 if (resultList.size() == 1 &amp;&amp; resultList.get(0).size() == 1) {&#xD;
                     // Get the first (and only) value&#xD;
                     Object countResult = resultList.get(0).values().iterator().next();&#xD;
                     System.out.println(&quot;DEBUG: Count result: &quot; + countResult);&#xD;
                     &#xD;
                     // Format the response based on entity type&#xD;
                     String message = formatCountResponse(countResult, entityType, entityName);&#xD;
                     sendSimpleTextResponse(out, message);&#xD;
                 } else {&#xD;
                     // If it's not a simple count, show the result as a table&#xD;
                     sendTableResponse(out, &quot;Iată rezultatele numărării pentru &quot; + context + &quot;:&quot;, resultList);&#xD;
                 }&#xD;
                 break;&#xD;
                 &#xD;
             case MINMAX:&#xD;
                 System.out.println(&quot;DEBUG: Formatting as MINMAX response&quot;);&#xD;
                 // For MINMAX queries, show the results with a confirmation option for more details&#xD;
                 String minMaxMessage = &quot;Iată &quot; + &#xD;
                         (queryInfo.toString().contains(&quot;mare&quot;) || queryInfo.toString().contains(&quot;max&quot;) ? &#xD;
                         &quot;cele mai mari valori&quot; : &quot;cele mai mici valori&quot;) + &#xD;
                         &quot; pentru &quot; + context + &quot;. Doriți să vedeți toate detaliile?&quot;;&#xD;
                 sendTableResponseWithConfirmation(out, minMaxMessage, resultList);&#xD;
                 break;&#xD;
                 &#xD;
             case LIST:&#xD;
                 System.out.println(&quot;DEBUG: Formatting as LIST response&quot;);&#xD;
                 // For LIST queries, check the size of the result&#xD;
                 if (resultList.size() > 10) {&#xD;
                     // For large result sets, show with confirmation&#xD;
                     sendTableResponseWithConfirmation(out, &#xD;
                             &quot;Am găsit &quot; + resultList.size() + &quot; rezultate pentru &quot; + context + &quot;. &quot; + &#xD;
                             &quot;Doriți să vedeți toate detaliile?&quot;, resultList);&#xD;
                 } else {&#xD;
                     // For smaller result sets, show immediately&#xD;
                     sendTableResponse(out, &quot;Iată rezultatele pentru &quot; + context + &quot;:&quot;, resultList);&#xD;
                 }&#xD;
                 break;&#xD;
                 &#xD;
             default:&#xD;
                 System.out.println(&quot;DEBUG: Formatting as default response&quot;);&#xD;
                 // Default to a simple table response&#xD;
                 sendTableResponse(out, &quot;Iată rezultatele pentru &quot; + context + &quot;:&quot;, resultList);&#xD;
                 break;&#xD;
         }&#xD;
     } catch (SQLException e) {&#xD;
         System.out.println(&quot;DEBUG: SQL Exception: &quot; + e.getMessage());&#xD;
         e.printStackTrace();&#xD;
         sendErrorResponse(out, &quot;Eroare la executarea interogării SQL: &quot; + e.getMessage());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-yJz0VdEfCS7cth2SLu0w" name="formatCountResponse" specification="_V9PRo0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-yJ0EVdEfCS7cth2SLu0w" name="countResult" type="_V9OqkEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-yJ0UVdEfCS7cth2SLu0w" name="entityType">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-yJ0kVdEfCS7cth2SLu0w" name="entityName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-yJ00VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>int count = 0;&#xD;
     &#xD;
     // Convert the count result to an integer&#xD;
     if (countResult instanceof Number) {&#xD;
         count = ((Number) countResult).intValue();&#xD;
     } else {&#xD;
         try {&#xD;
             count = Integer.parseInt(countResult.toString());&#xD;
         } catch (NumberFormatException e) {&#xD;
             // If conversion fails, return a generic message&#xD;
             System.out.println(&quot;DEBUG: Failed to convert count result to number: &quot; + countResult);&#xD;
             return &quot;Am găsit &quot; + countResult + &quot; rezultate.&quot;;&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: Formatting count response for entity type: &quot; + entityType + &#xD;
                       &quot;, entity name: &quot; + entityName + &quot;, count: &quot; + count);&#xD;
     &#xD;
     // Format based on entity type&#xD;
     switch (entityType) {&#xD;
         case &quot;employee&quot;:&#xD;
             return &quot;Am găsit &quot; + count + &quot; angajați&quot; + &#xD;
                     (entityName != null &amp;&amp; !entityName.isEmpty() ? &quot; în departamentul &quot; + entityName : &quot;&quot;) + &quot;.&quot;;&#xD;
             &#xD;
         case &quot;department&quot;:&#xD;
             return &quot;În firmă există &quot; + count + &quot; departamente&quot; + &#xD;
                     (entityName != null &amp;&amp; !entityName.isEmpty() ? &quot; incluzând departamentul &quot; + entityName : &quot;&quot;) + &quot;.&quot;;&#xD;
             &#xD;
         case &quot;leave&quot;:&#xD;
             return &quot;Am găsit &quot; + count + &quot; concedii&quot; + &#xD;
                     (entityName != null &amp;&amp; !entityName.isEmpty() ? &quot; în departamentul &quot; + entityName : &quot;&quot;) + &quot;.&quot;;&#xD;
             &#xD;
         case &quot;position&quot;:&#xD;
             return &quot;Există &quot; + count + &quot; tipuri de poziții&quot; + &#xD;
                     (entityName != null &amp;&amp; !entityName.isEmpty() ? &quot; în departamentul &quot; + entityName : &quot;&quot;) + &quot;.&quot;;&#xD;
             &#xD;
         case &quot;certificate&quot;:&#xD;
             return &quot;Am găsit &quot; + count + &quot; adeverințe&quot; + &#xD;
                     (entityName != null &amp;&amp; !entityName.isEmpty() ? &quot; pentru angajații din departamentul &quot; + entityName : &quot;&quot;) + &quot;.&quot;;&#xD;
             &#xD;
         case &quot;office&quot;:&#xD;
             return &quot;Compania are &quot; + count + &quot; sedii.&quot;;&#xD;
             &#xD;
         case &quot;project&quot;:&#xD;
             return &quot;Există &quot; + count + &quot; proiecte&quot; + &#xD;
                     (entityName != null &amp;&amp; !entityName.isEmpty() ? &quot; în departamentul &quot; + entityName : &quot;&quot;) + &quot;.&quot;;&#xD;
             &#xD;
         default:&#xD;
             return &quot;Am găsit &quot; + count + &quot; rezultate.&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-yw0EVdEfCS7cth2SLu0w" name="getContextFromEntity" specification="_VsguAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-yw0UVdEfCS7cth2SLu0w" name="entityType">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-yw0kVdEfCS7cth2SLu0w" name="entityName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-yw00VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>switch (entityType) {&#xD;
         case &quot;employee&quot;:&#xD;
             return &quot;angajați&quot; + (entityName != null &amp;&amp; !entityName.isEmpty() ? &quot; din departamentul &quot; + entityName : &quot;&quot;);&#xD;
             &#xD;
         case &quot;department&quot;:&#xD;
             return &quot;departamente&quot; + (entityName != null &amp;&amp; !entityName.isEmpty() ? &quot; (inclusiv &quot; + entityName + &quot;)&quot; : &quot;&quot;);&#xD;
             &#xD;
         case &quot;leave&quot;:&#xD;
             return &quot;concedii&quot; + (entityName != null &amp;&amp; !entityName.isEmpty() ? &quot; din departamentul &quot; + entityName : &quot;&quot;);&#xD;
             &#xD;
         case &quot;position&quot;:&#xD;
             return &quot;poziții&quot; + (entityName != null &amp;&amp; !entityName.isEmpty() ? &quot; din departamentul &quot; + entityName : &quot;&quot;);&#xD;
             &#xD;
         case &quot;salary&quot;:&#xD;
             return &quot;salarii&quot; + (entityName != null &amp;&amp; !entityName.isEmpty() ? &quot; din departamentul &quot; + entityName : &quot;&quot;);&#xD;
             &#xD;
         case &quot;certificate&quot;:&#xD;
             return &quot;adeverințe&quot; + (entityName != null &amp;&amp; !entityName.isEmpty() ? &quot; din departamentul &quot; + entityName : &quot;&quot;);&#xD;
             &#xD;
         case &quot;office&quot;:&#xD;
             return &quot;sedii&quot;;&#xD;
             &#xD;
         case &quot;project&quot;:&#xD;
             return &quot;proiecte&quot; + (entityName != null &amp;&amp; !entityName.isEmpty() ? &quot; din departamentul &quot; + entityName : &quot;&quot;);&#xD;
             &#xD;
         case &quot;team&quot;:&#xD;
             return &quot;echipe&quot; + (entityName != null &amp;&amp; !entityName.isEmpty() ? &quot; din departamentul &quot; + entityName : &quot;&quot;);&#xD;
             &#xD;
         case &quot;firm&quot;:&#xD;
             return &quot;companie&quot;;&#xD;
             &#xD;
         default:&#xD;
             return &quot;rezultate&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-yw1EVdEfCS7cth2SLu0w" name="isFollowUpQuestion" specification="_VsguBEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-yw1UVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-yw1kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>// Simple patterns for follow-up questions&#xD;
     boolean isFollowUp = text.equals(&quot;da&quot;) || &#xD;
            text.equals(&quot;sigur&quot;) || &#xD;
            text.equals(&quot;bineințeles&quot;) || &#xD;
            text.equals(&quot;bineinteles&quot;) || &#xD;
            text.equals(&quot;te rog&quot;) || &#xD;
            text.equals(&quot;vreau&quot;) || &#xD;
            text.startsWith(&quot;da, &quot;) || &#xD;
            text.contains(&quot;mai multe detalii&quot;) ||&#xD;
            text.contains(&quot;arata-mi detalii&quot;) ||&#xD;
            text.contains(&quot;arată-mi detalii&quot;) ||&#xD;
            text.contains(&quot;vreau sa vad&quot;) ||&#xD;
            text.contains(&quot;vreau să văd&quot;);&#xD;
            &#xD;
     System.out.println(&quot;DEBUG: Checking if follow-up question: &quot; + text + &quot; -> &quot; + isFollowUp);&#xD;
     return isFollowUp;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-yw10VdEfCS7cth2SLu0w" name="executeEnhancedSQLQuery" specification="_V8N99UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-yw2EVdEfCS7cth2SLu0w" name="sqlQuery">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-yw2UVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-yw2kVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-yw20VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-yw3EVdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try (Connection conn = getConnection()) {&#xD;
         System.out.println(&quot;DEBUG: Executing enhanced SQL query: &quot; + sqlQuery);&#xD;
         &#xD;
         // Handle personal queries that need current user ID&#xD;
         String entityType = queryInfo.getEntities().getOrDefault(&quot;entity&quot;, &quot;&quot;);&#xD;
         if (&quot;personal&quot;.equals(entityType)) {&#xD;
             sqlQuery = handlePersonalQuery(sqlQuery, session);&#xD;
         }&#xD;
         &#xD;
         PreparedStatement stmt = conn.prepareStatement(sqlQuery);&#xD;
         ResultSet rs = stmt.executeQuery();&#xD;
         &#xD;
         // Convert the result to a list of maps with enhanced formatting&#xD;
         List&lt;Map&lt;String, Object>> resultList = resultSetToListEnhanced(rs);&#xD;
         &#xD;
         System.out.println(&quot;DEBUG: Enhanced query returned &quot; + resultList.size() + &quot; rows&quot;);&#xD;
         &#xD;
         // Save the result in session for possible follow-up questions&#xD;
         session.setAttribute(&quot;lastQueryData&quot;, resultList);&#xD;
         session.setAttribute(&quot;lastQueryInfo&quot;, queryInfo);&#xD;
         session.setAttribute(&quot;lastTokenization&quot;, tokenization);&#xD;
         &#xD;
         // Generate enhanced context for follow-up questions&#xD;
         String context = generateEnhancedContextFromQueryInfo(queryInfo, tokenization);&#xD;
         session.setAttribute(&quot;lastQueryContext&quot;, context);&#xD;
         &#xD;
         if (resultList.isEmpty()) {&#xD;
             handleEmptyResultsWithSuggestions(queryInfo, tokenization, out);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Enhanced response formatting based on entity type&#xD;
         formatTODOResponse(resultList, queryInfo, tokenization, out);&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         System.out.println(&quot;DEBUG: Enhanced SQL Exception: &quot; + e.getMessage());&#xD;
         e.printStackTrace();&#xD;
         handleSQLError(e, queryInfo, tokenization, out);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-yw3UVdEfCS7cth2SLu0w" name="handlePersonalQuery" specification="_VshVEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-yw3kVdEfCS7cth2SLu0w" name="sqlQuery">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-yw30VdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-yw4EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);&#xD;
     if (currentUser != null) {&#xD;
         // Since we use username, we need to modify the query to use username instead of ID&#xD;
         if (sqlQuery.contains(&quot;WHERE u.id = ?&quot;)) {&#xD;
             sqlQuery = sqlQuery.replace(&quot;WHERE u.id = ?&quot;, &quot;WHERE u.username = '&quot; + currentUser.getUsername() + &quot;'&quot;);&#xD;
         } else if (sqlQuery.contains(&quot;u.id = ?&quot;)) {&#xD;
             sqlQuery = sqlQuery.replace(&quot;u.id = ?&quot;, &quot;u.username = '&quot; + currentUser.getUsername() + &quot;'&quot;);&#xD;
         }&#xD;
         System.out.println(&quot;DEBUG: Personal query for username: &quot; + currentUser.getUsername());&#xD;
     }&#xD;
     return sqlQuery;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-yw4UVdEfCS7cth2SLu0w" name="formatTODOResponse" specification="_V8OlAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-yw4kVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-yw40VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-yw5EVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-yw5UVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String entityType = queryInfo.getEntities().getOrDefault(&quot;entity&quot;, &quot;&quot;);&#xD;
     System.out.println(&quot;DEBUG: Formatting TODO response for entity: &quot; + entityType);&#xD;
     &#xD;
     switch (entityType) {&#xD;
         case &quot;personal&quot;:&#xD;
             handlePersonalResponse(resultList, queryInfo, out);&#xD;
             break;&#xD;
         case &quot;project&quot;:&#xD;
             handleProjectResponse(resultList, queryInfo, out);&#xD;
             break;&#xD;
         case &quot;certificate&quot;:&#xD;
             handleCertificateResponse(resultList, queryInfo, out);&#xD;
             break;&#xD;
         case &quot;location&quot;:&#xD;
             handleLocationResponse(resultList, queryInfo, out);&#xD;
             break;&#xD;
         case &quot;average&quot;:&#xD;
             handleAverageResponse(resultList, queryInfo, out);&#xD;
             break;&#xD;
         case &quot;task&quot;:&#xD;
             handleTaskResponse(resultList, queryInfo, out);&#xD;
             break;&#xD;
         case &quot;availability&quot;:&#xD;
             handleAvailabilityResponse(resultList, queryInfo, out);&#xD;
             break;&#xD;
         case &quot;work_mode&quot;:&#xD;
             handleWorkModeResponse(resultList, queryInfo, out);&#xD;
             break;&#xD;
         case &quot;leave&quot;:&#xD;
             handleEnhancedLeaveResponse(resultList, queryInfo, tokenization, out);&#xD;
             break;&#xD;
             // NEW: Semi-FAQ cases&#xD;
         case &quot;task_scheduling&quot;:&#xD;
             handleTaskSchedulingResponse(resultList, queryInfo, out);&#xD;
             break;&#xD;
         case &quot;calendar&quot;:&#xD;
             handleCalendarResponse(resultList, queryInfo, out);&#xD;
             break;&#xD;
         case &quot;legal_holidays&quot;:&#xD;
             handleLegalHolidaysResponse(resultList, queryInfo, out);&#xD;
             break;&#xD;
         case &quot;month_days&quot;:&#xD;
             handleMonthDaysResponse(resultList, queryInfo, out);&#xD;
         case &quot;regulation_summary&quot;:&#xD;
             handleRegulationSummaryResponse(resultList, queryInfo, out);&#xD;
             break;&#xD;
         case &quot;policy_check&quot;:&#xD;
             handlePolicyCheckResponse(resultList, queryInfo, out);&#xD;
             break;&#xD;
         default:&#xD;
             // Fall back to existing formatting&#xD;
             formatEnhancedResponse(resultList, queryInfo, tokenization, out);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-yw5kVdEfCS7cth2SLu0w" name="handleRegulationSummaryResponse" specification="_V8PMEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-yw50VdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-yw6EVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-yw6UVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>System.out.println(&quot;DEBUG: Handling regulation summary request&quot;);&#xD;
     &#xD;
     // Generează rezumatul regulamentului&#xD;
     String summary = CompanyPolicyProcessor.generateRegulationSummary();&#xD;
     &#xD;
     JSONObject response = new JSONObject();&#xD;
     response.put(&quot;type&quot;, &quot;regulation_summary&quot;);&#xD;
     response.put(&quot;message&quot;, summary);&#xD;
     response.put(&quot;timestamp&quot;, System.currentTimeMillis());&#xD;
     &#xD;
     // Adaugă sugestii pentru întrebări de follow-up&#xD;
     JSONArray followUpSuggestions = new JSONArray();&#xD;
     followUpSuggestions.put(&quot;Pot să lucrez de acasă conform regulamentului?&quot;);&#xD;
     followUpSuggestions.put(&quot;Am voie să fac ore suplimentare?&quot;);&#xD;
     followUpSuggestions.put(&quot;Ce beneficii am ca angajat?&quot;);&#xD;
     followUpSuggestions.put(&quot;Cum se evaluează performanța?&quot;);&#xD;
     followUpSuggestions.put(&quot;Ce sancțiuni există pentru întârzieri?&quot;);&#xD;
     &#xD;
     response.put(&quot;followUpSuggestions&quot;, followUpSuggestions);&#xD;
     &#xD;
     // Adaugă link către regulamentul complet&#xD;
     JSONObject additionalInfo = new JSONObject();&#xD;
     additionalInfo.put(&quot;regulation_type&quot;, &quot;company_internal&quot;);&#xD;
     additionalInfo.put(&quot;last_updated&quot;, &quot;2025-01-01&quot;);&#xD;
     additionalInfo.put(&quot;full_document&quot;, &quot;Disponibil în sistemul intern al companiei&quot;);&#xD;
     &#xD;
     response.put(&quot;additionalInfo&quot;, additionalInfo);&#xD;
     &#xD;
     out.println(response.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-yw6kVdEfCS7cth2SLu0w" name="handlePolicyCheckResponse" specification="_V8PzIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-yw60VdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-yw7EVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-yw7UVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     String requestedAction = entities.getOrDefault(&quot;requested_action&quot;, &quot;&quot;);&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: Handling policy check for action: &quot; + requestedAction);&#xD;
     &#xD;
     // Construiește query-ul original pentru procesare&#xD;
     String originalQuery = &quot;pot sa &quot; + requestedAction;&#xD;
     &#xD;
     // Verifică permisiunea folosind procesorul de politici&#xD;
     PolicyResponse policyResponse = CompanyPolicyProcessor.checkPolicyPermission(originalQuery);&#xD;
     &#xD;
     JSONObject response = new JSONObject();&#xD;
     response.put(&quot;type&quot;, &quot;policy_check&quot;);&#xD;
     response.put(&quot;requestedAction&quot;, requestedAction);&#xD;
     response.put(&quot;result&quot;, policyResponse.getSimpleAnswer());&#xD;
     response.put(&quot;message&quot;, policyResponse.getFormattedResponse());&#xD;
     response.put(&quot;timestamp&quot;, System.currentTimeMillis());&#xD;
     &#xD;
     // Adaugă contextul pentru diferite tipuri de răspuns&#xD;
     JSONObject context = new JSONObject();&#xD;
     switch (policyResponse.getResult()) {&#xD;
         case YES:&#xD;
             context.put(&quot;status&quot;, &quot;allowed&quot;);&#xD;
             context.put(&quot;icon&quot;, &quot;✅&quot;);&#xD;
             context.put(&quot;color&quot;, &quot;green&quot;);&#xD;
             break;&#xD;
         case NO:&#xD;
             context.put(&quot;status&quot;, &quot;forbidden&quot;);&#xD;
             context.put(&quot;icon&quot;, &quot;❌&quot;);&#xD;
             context.put(&quot;color&quot;, &quot;red&quot;);&#xD;
             break;&#xD;
         case CONDITIONAL:&#xD;
             context.put(&quot;status&quot;, &quot;conditional&quot;);&#xD;
             context.put(&quot;icon&quot;, &quot;⚠️&quot;);&#xD;
             context.put(&quot;color&quot;, &quot;orange&quot;);&#xD;
             break;&#xD;
         case UNCLEAR:&#xD;
             context.put(&quot;status&quot;, &quot;unclear&quot;);&#xD;
             context.put(&quot;icon&quot;, &quot;❓&quot;);&#xD;
             context.put(&quot;color&quot;, &quot;gray&quot;);&#xD;
             break;&#xD;
     }&#xD;
     &#xD;
     response.put(&quot;context&quot;, context);&#xD;
     &#xD;
     // Adaugă sugestii relevante&#xD;
     JSONArray suggestions = new JSONArray();&#xD;
     if (policyResponse.getResult() == PolicyResult.UNCLEAR || &#xD;
         policyResponse.getResult() == PolicyResult.CONDITIONAL) {&#xD;
         suggestions.put(&quot;Contactează departamentul HR pentru clarificări&quot;);&#xD;
         suggestions.put(&quot;Verifică regulamentul intern complet&quot;);&#xD;
         suggestions.put(&quot;Discută cu managerul direct&quot;);&#xD;
     } else {&#xD;
         suggestions.put(&quot;Pot să lucrez de acasă 3 zile pe săptămână?&quot;);&#xD;
         suggestions.put(&quot;Am voie să fac ore suplimentare?&quot;);&#xD;
         suggestions.put(&quot;Pot să urmez cursuri de formare?&quot;);&#xD;
         suggestions.put(&quot;Este permis programul flexibil?&quot;);&#xD;
     }&#xD;
     &#xD;
     response.put(&quot;suggestions&quot;, suggestions);&#xD;
     &#xD;
     // Adaugă informații despre contact HR pentru cazuri unclear&#xD;
     if (policyResponse.getResult() == PolicyResult.UNCLEAR) {&#xD;
         JSONObject hrContact = new JSONObject();&#xD;
         hrContact.put(&quot;department&quot;, &quot;Resurse Umane&quot;);&#xD;
         hrContact.put(&quot;email&quot;, &quot;hr@companie.ro&quot;);&#xD;
         hrContact.put(&quot;phone&quot;, &quot;extensia 100&quot;);&#xD;
         hrContact.put(&quot;schedule&quot;, &quot;Luni-Vineri 09:00-17:00&quot;);&#xD;
         &#xD;
         response.put(&quot;hrContact&quot;, hrContact);&#xD;
     }&#xD;
     &#xD;
     out.println(response.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-zX4EVdEfCS7cth2SLu0w" name="handleTaskSchedulingResponse" specification="_V8PzJUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-zX4UVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-zX4kVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-zX40VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String schedulingType = queryInfo.getEntities().getOrDefault(&quot;scheduling_type&quot;, &quot;task/meeting&quot;);&#xD;
     String targetPerson = queryInfo.getEntities().get(&quot;target_person&quot;);&#xD;
     &#xD;
     if (targetPerson == null) {&#xD;
         // General guidance&#xD;
         JSONObject response = new JSONObject();&#xD;
         response.put(&quot;type&quot;, &quot;guidance&quot;);&#xD;
         response.put(&quot;message&quot;, &quot;Pentru programarea de task-uri sau meeting-uri, specificați numele persoanei cu care doriți să programați.&quot;);&#xD;
         &#xD;
         JSONArray examples = new JSONArray();&#xD;
         examples.put(&quot;programează meeting cu Ion Popescu&quot;);&#xD;
         examples.put(&quot;programează task cu Maria Ionescu&quot;);&#xD;
         examples.put(&quot;pune întâlnire cu directorul IT&quot;);&#xD;
         &#xD;
         JSONArray suggestions = new JSONArray();&#xD;
         suggestions.put(&quot;Căutați în directorul de angajați&quot;);&#xD;
         suggestions.put(&quot;Verificați lista echipelor&quot;);&#xD;
         suggestions.put(&quot;Contactați secretariatul pentru informații&quot;);&#xD;
         &#xD;
         response.put(&quot;examples&quot;, examples);&#xD;
         response.put(&quot;suggestions&quot;, suggestions);&#xD;
         &#xD;
         out.println(response.toString());&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     if (resultList.isEmpty()) {&#xD;
         JSONObject response = new JSONObject();&#xD;
         response.put(&quot;type&quot;, &quot;not_found_with_suggestions&quot;);&#xD;
         response.put(&quot;message&quot;, &quot;Nu am găsit nicio persoană cu numele \&quot;&quot; + targetPerson + &quot;\&quot;.&quot;);&#xD;
         &#xD;
         JSONArray suggestions = new JSONArray();&#xD;
         suggestions.put(&quot;Verificați ortografia numelui&quot;);&#xD;
         suggestions.put(&quot;Încercați doar prenumele sau numele de familie&quot;);&#xD;
         suggestions.put(&quot;Căutați în lista tuturor angajaților&quot;);&#xD;
         suggestions.put(&quot;Contactați departamentul HR pentru asistență&quot;);&#xD;
         &#xD;
         response.put(&quot;suggestions&quot;, suggestions);&#xD;
         out.println(response.toString());&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     if (resultList.size() == 1) {&#xD;
         // Single person found - provide detailed contact info&#xD;
         Map&lt;String, Object> person = resultList.get(0);&#xD;
         &#xD;
         JSONObject response = new JSONObject();&#xD;
         response.put(&quot;type&quot;, &quot;contact_info&quot;);&#xD;
         response.put(&quot;schedulingType&quot;, schedulingType);&#xD;
         response.put(&quot;targetPerson&quot;, targetPerson);&#xD;
         &#xD;
         JSONObject contactInfo = new JSONObject();&#xD;
         contactInfo.put(&quot;nume&quot;, person.get(&quot;nume&quot;));&#xD;
         contactInfo.put(&quot;prenume&quot;, person.get(&quot;prenume&quot;));&#xD;
         contactInfo.put(&quot;departament&quot;, person.get(&quot;departament&quot;));&#xD;
         contactInfo.put(&quot;functie&quot;, person.get(&quot;functie&quot;));&#xD;
         contactInfo.put(&quot;email&quot;, person.get(&quot;email&quot;));&#xD;
         contactInfo.put(&quot;telefon&quot;, person.get(&quot;telefon&quot;));&#xD;
         &#xD;
         response.put(&quot;contactInfo&quot;, contactInfo);&#xD;
         &#xD;
         String message = String.format(&#xD;
             &quot;**Pentru programarea unui %s cu %s %s:**\n\n&quot; +&#xD;
             &quot;👤 **Nume:** %s %s\n&quot; +&#xD;
             &quot;🏢 **Departament:** %s\n&quot; +&#xD;
             &quot;👔 **Funcția:** %s\n&quot; +&#xD;
             &quot;📧 **Email:** %s\n&quot; +&#xD;
             &quot;📞 **Telefon:** %s\n\n&quot; +&#xD;
             &quot;💡 **Opțiuni de programare:**\n&quot; +&#xD;
             &quot;• Contactați direct prin email sau telefon\n&quot; +&#xD;
             &quot;• Folosiți sistemul intern de task-uri/calendar\n&quot; +&#xD;
             &quot;• Verificați disponibilitatea în calendar-ul companiei&quot;,&#xD;
             schedulingType,&#xD;
             person.get(&quot;nume&quot;), person.get(&quot;prenume&quot;),&#xD;
             person.get(&quot;nume&quot;), person.get(&quot;prenume&quot;),&#xD;
             person.get(&quot;departament&quot;),&#xD;
             person.get(&quot;functie&quot;),&#xD;
             person.get(&quot;email&quot;),&#xD;
             person.get(&quot;telefon&quot;)&#xD;
         );&#xD;
         &#xD;
         response.put(&quot;message&quot;, message);&#xD;
         &#xD;
         JSONArray nextSteps = new JSONArray();&#xD;
         nextSteps.put(&quot;Trimiteți un email pentru a stabili ora&quot;);&#xD;
         nextSteps.put(&quot;Sunați pentru programare urgentă&quot;);&#xD;
         nextSteps.put(&quot;Verificați calendar-ul pentru disponibilitate&quot;);&#xD;
         nextSteps.put(&quot;Folosiți platforma internă de task-uri&quot;);&#xD;
         &#xD;
         response.put(&quot;nextSteps&quot;, nextSteps);&#xD;
         &#xD;
         out.println(response.toString());&#xD;
     } else {&#xD;
         // Multiple people found&#xD;
         JSONObject response = new JSONObject();&#xD;
         response.put(&quot;type&quot;, &quot;multiple_contacts&quot;);&#xD;
         response.put(&quot;message&quot;, &quot;Am găsit &quot; + resultList.size() + &quot; persoane cu numele \&quot;&quot; + targetPerson + &quot;\&quot;. Alegeți persoana corectă:&quot;);&#xD;
         response.put(&quot;data&quot;, new JSONArray(resultList));&#xD;
         response.put(&quot;schedulingType&quot;, schedulingType);&#xD;
         &#xD;
         out.println(response.toString());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-zX5EVdEfCS7cth2SLu0w" name="handleCalendarResponse" specification="_V8QaMUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-zX5UVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-zX5kVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-zX50VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String calendarType = queryInfo.getEntities().getOrDefault(&quot;calendar_type&quot;, &quot;&quot;);&#xD;
     &#xD;
     JSONObject response = new JSONObject();&#xD;
     response.put(&quot;type&quot;, &quot;calendar_info&quot;);&#xD;
     response.put(&quot;calendarType&quot;, calendarType);&#xD;
     &#xD;
     if (&quot;next_free_day&quot;.equals(calendarType) &amp;&amp; resultList.size() == 1) {&#xD;
         Map&lt;String, Object> result = resultList.get(0);&#xD;
         String nextFreeDay = (String) result.get(&quot;urmatoarea_zi_libera&quot;);&#xD;
         String tipZi = (String) result.get(&quot;tip_zi_libera&quot;);&#xD;
         &#xD;
         response.put(&quot;nextFreeDay&quot;, nextFreeDay);&#xD;
         response.put(&quot;dayType&quot;, tipZi);&#xD;
         &#xD;
         String message = String.format(&#xD;
             &quot;**Următoarea zi liberă:**\n\n&quot; +&#xD;
             &quot;📅 **Data:** %s\n&quot; +&#xD;
             &quot;🎉 **Tipul:** %s\n\n&quot; +&#xD;
             &quot;ℹ️ *Aceasta este următoarea zi în care nu se lucrează conform calendarului oficial.*&quot;,&#xD;
             formatDate(nextFreeDay), tipZi&#xD;
         );&#xD;
         &#xD;
         response.put(&quot;message&quot;, message);&#xD;
         &#xD;
         // Add related suggestions&#xD;
         JSONArray suggestions = new JSONArray();&#xD;
         suggestions.put(&quot;Vezi toate sărbătorile din acest an&quot;);&#xD;
         suggestions.put(&quot;Câte zile libere legale sunt?&quot;);&#xD;
         suggestions.put(&quot;Calendar complet pentru luna aceasta&quot;);&#xD;
         &#xD;
         response.put(&quot;suggestions&quot;, suggestions);&#xD;
         &#xD;
     } else if (&quot;all_holidays&quot;.equals(calendarType)) {&#xD;
         response.put(&quot;message&quot;, &quot;Iată toate zilele libere din acest an:&quot;);&#xD;
         response.put(&quot;data&quot;, new JSONArray(resultList));&#xD;
         &#xD;
         if (resultList.size() > 0) {&#xD;
             response.put(&quot;totalHolidays&quot;, resultList.size());&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     out.println(response.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-zX6EVdEfCS7cth2SLu0w" name="handleLegalHolidaysResponse" specification="_V8RBQUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-zX6UVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-zX6kVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-zX60VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>JSONObject response = new JSONObject();&#xD;
     response.put(&quot;type&quot;, &quot;holidays_count&quot;);&#xD;
     &#xD;
     if (resultList.size() == 1) {&#xD;
         Map&lt;String, Object> result = resultList.get(0);&#xD;
         int zileLegale = ((Number) result.getOrDefault(&quot;zile_libere_legale&quot;, 0)).intValue();&#xD;
         int zileSuplimentare = ((Number) result.getOrDefault(&quot;zile_libere_suplimentare&quot;, 0)).intValue();&#xD;
         int total = ((Number) result.getOrDefault(&quot;total_zile_libere&quot;, 0)).intValue();&#xD;
         String anul = (String) result.get(&quot;anul&quot;);&#xD;
         &#xD;
         JSONObject holidayStats = new JSONObject();&#xD;
         holidayStats.put(&quot;zileLegale&quot;, zileLegale);&#xD;
         holidayStats.put(&quot;zileSuplimentare&quot;, zileSuplimentare);&#xD;
         holidayStats.put(&quot;total&quot;, total);&#xD;
         holidayStats.put(&quot;anul&quot;, anul);&#xD;
         &#xD;
         response.put(&quot;holidayStats&quot;, holidayStats);&#xD;
         &#xD;
         String message = String.format(&#xD;
             &quot;**Zile libere legale pentru anul %s:**\n\n&quot; +&#xD;
             &quot;🏛️ **Sărbători legale:** %d zile\n&quot; +&#xD;
             &quot;📅 **Zile libere suplimentare:** %d zile\n&quot; +&#xD;
             &quot;📊 **Total zile libere:** %d zile\n\n&quot; +&#xD;
             &quot;ℹ️ *Aceste zile sunt stabilite prin lege și calendar oficial.*&quot;,&#xD;
             anul, zileLegale, zileSuplimentare, total&#xD;
         );&#xD;
         &#xD;
         response.put(&quot;message&quot;, message);&#xD;
         &#xD;
         JSONArray suggestions = new JSONArray();&#xD;
         suggestions.put(&quot;Vezi lista detaliată a sărbătorilor&quot;);&#xD;
         suggestions.put(&quot;Următoarea zi liberă de la stat&quot;);&#xD;
         suggestions.put(&quot;Calendar complet pentru &quot; + anul);&#xD;
         &#xD;
         response.put(&quot;suggestions&quot;, suggestions);&#xD;
         &#xD;
     } else {&#xD;
         response.put(&quot;message&quot;, &quot;Nu am putut calcula zilele libere legale pentru anul specificat.&quot;);&#xD;
     }&#xD;
     &#xD;
     out.println(response.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-zX7EVdEfCS7cth2SLu0w" name="handleMonthDaysResponse" specification="_V8RBRkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-zX7UVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-zX7kVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-zX70VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>JSONObject response = new JSONObject();&#xD;
     response.put(&quot;type&quot;, &quot;month_info&quot;);&#xD;
     &#xD;
     if (resultList.size() == 1) {&#xD;
         Map&lt;String, Object> result = resultList.get(0);&#xD;
         &#xD;
         // Handle case where message indicates error&#xD;
         if (result.containsKey(&quot;mesaj&quot;)) {&#xD;
             response.put(&quot;message&quot;, result.get(&quot;mesaj&quot;));&#xD;
             response.put(&quot;error&quot;, true);&#xD;
             &#xD;
             JSONArray suggestions = new JSONArray();&#xD;
             suggestions.put(&quot;Câte zile are februarie?&quot;);&#xD;
             suggestions.put(&quot;Câte zile are decembrie?&quot;);&#xD;
             suggestions.put(&quot;Luna aceasta câte zile are?&quot;);&#xD;
             &#xD;
             response.put(&quot;suggestions&quot;, suggestions);&#xD;
         } else {&#xD;
             int zileInLuna = ((Number) result.get(&quot;zile_in_luna&quot;)).intValue();&#xD;
             String luna = (String) result.get(&quot;luna&quot;);&#xD;
             String anul = (String) result.get(&quot;anul&quot;);&#xD;
             String tipAn = (String) result.get(&quot;tip_an&quot;);&#xD;
             &#xD;
             JSONObject monthInfo = new JSONObject();&#xD;
             monthInfo.put(&quot;zileInLuna&quot;, zileInLuna);&#xD;
             monthInfo.put(&quot;luna&quot;, luna);&#xD;
             monthInfo.put(&quot;anul&quot;, anul);&#xD;
             monthInfo.put(&quot;tipAn&quot;, tipAn);&#xD;
             monthInfo.put(&quot;isLeapYear&quot;, &quot;An bisect&quot;.equals(tipAn));&#xD;
             &#xD;
             response.put(&quot;monthInfo&quot;, monthInfo);&#xD;
             &#xD;
             String message = String.format(&#xD;
                 &quot;**Luna %s %s:**\n\n&quot; +&#xD;
                 &quot;📅 **Numărul de zile:** %d zile\n&quot; +&#xD;
                 &quot;📊 **Tipul anului:** %s\n\n&quot; +&#xD;
                 &quot;ℹ️ *%s*&quot;,&#xD;
                 luna, anul, zileInLuna, tipAn,&#xD;
                 &quot;An bisect&quot;.equals(tipAn) ? &#xD;
                     &quot;Februarie are 29 de zile în anii biseţi.&quot; : &#xD;
                     &quot;Anul normal - februarie are 28 de zile.&quot;&#xD;
             );&#xD;
             &#xD;
             response.put(&quot;message&quot;, message);&#xD;
             &#xD;
             JSONArray suggestions = new JSONArray();&#xD;
             suggestions.put(&quot;Câte zile are luna viitoare?&quot;);&#xD;
             suggestions.put(&quot;Este &quot; + anul + &quot; an bisect?&quot;);&#xD;
             suggestions.put(&quot;Calendar complet pentru &quot; + luna);&#xD;
             &#xD;
             response.put(&quot;suggestions&quot;, suggestions);&#xD;
         }&#xD;
     } else {&#xD;
         response.put(&quot;message&quot;, &quot;Nu am putut calcula zilele pentru luna specificată.&quot;);&#xD;
         response.put(&quot;error&quot;, true);&#xD;
     }&#xD;
     &#xD;
     out.println(response.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-zX8EVdEfCS7cth2SLu0w" name="formatDate" specification="_Vsh8IEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-zX8UVdEfCS7cth2SLu0w" name="dateString">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-zX8kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>try {&#xD;
         java.time.LocalDate date = java.time.LocalDate.parse(dateString);&#xD;
         java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(&quot;dd MMMM yyyy&quot;, &#xD;
                                                                                                       java.util.Locale.forLanguageTag(&quot;ro&quot;));&#xD;
         return date.format(formatter);&#xD;
     } catch (Exception e) {&#xD;
         return dateString; // Return original if parsing fails&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-zX80VdEfCS7cth2SLu0w" name="generateEnhancedHelpResponse" specification="_Vsh8I0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-zX9EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>return &quot;Sunt asistentul virtual al companiei și pot să vă ajut cu informații din baza de date. &quot; +&#xD;
            &quot;Pot înțelege întrebări în limbaj natural despre:\n\n&quot; +&#xD;
            &#xD;
            &quot;🧑‍💼 **Angajați**: \&quot;Câți angajați sunt în departamentul IT?\&quot;, \&quot;Arată-mi angajații din HR\&quot;, &quot; +&#xD;
            &quot;\&quot;Care angajat are cel mai mare salariu?\&quot;, \&quot;Cine a fost angajat anul acesta?\&quot;\n\n&quot; +&#xD;
            &#xD;
            &quot;🏢 **Departamente**: \&quot;Ce departamente există?\&quot;, \&quot;Care departament are cei mai mulți angajați?\&quot;, &quot; +&#xD;
            &quot;\&quot;Unde se află departamentul Marketing?\&quot;\n\n&quot; +&#xD;
            &#xD;
            &quot;🏖️ **Concedii**: \&quot;Cine este în concediu astăzi?\&quot;, \&quot;Câte concedii au fost aprobate luna aceasta?\&quot;, &quot; +&#xD;
            &quot;\&quot;Arată-mi concediile de vară\&quot;, \&quot;Ce concedii medicale avem?\&quot;\n\n&quot; +&#xD;
            &#xD;
            &quot;💼 **Poziții**: \&quot;Ce funcții există în IT?\&quot;, \&quot;Care sunt cele mai bine plătite poziții?\&quot;, &quot; +&#xD;
            &quot;\&quot;Câți manageri avem?\&quot;, \&quot;Ce specializări există?\&quot;\n\n&quot; +&#xD;
            &#xD;
            &quot;💰 **Salarii**: \&quot;Care este salariul mediu?\&quot;, \&quot;Cine are cel mai mic salariu?\&quot;, &quot; +&#xD;
            &quot;\&quot;Arată-mi salariile peste 8000 RON\&quot;\n\n&quot; +&#xD;
            &#xD;
            &quot;📄 **Adeverințe**: \&quot;Câte adeverințe sunt în așteptare?\&quot;, \&quot;Arată-mi adeverințele aprobate\&quot;\n\n&quot; +&#xD;
            &#xD;
            &quot;🎯 **Proiecte**: \&quot;Ce proiecte active avem?\&quot;, \&quot;Cine lucrează la proiectul ERP?\&quot;\n\n&quot; +&#xD;
            &#xD;
            &quot;👤 **Informații personale**: \&quot;Câte zile de concediu am?\&quot;, \&quot;Care este salariul meu?\&quot;, &quot; +&#xD;
            &quot;\&quot;Cine este superiorul meu?\&quot;\n\n&quot; +&#xD;
            &#xD;
            &quot;📅 **Calendar și programare**: \&quot;Programează meeting cu Ion Popescu\&quot;, \&quot;Următoarea zi liberă de la stat?\&quot;, &quot; +&#xD;
            &quot;\&quot;Câte zile libere legale sunt?\&quot;, \&quot;Câte zile are luna februarie?\&quot;\n\n&quot; +&#xD;
            &#xD;
            &quot;**Funcționalități avansate:**\n&quot; +&#xD;
            &quot;• **Întrebări cu numere**: \&quot;Angajații cu salariul peste 10000\&quot;, \&quot;Concedii mai lungi de 5 zile\&quot;\n&quot; +&#xD;
            &quot;• **Întrebări temporale**: \&quot;Concedii din decembrie\&quot;, \&quot;Angajați din ultimul an\&quot;\n&quot; +&#xD;
            &quot;• **Comparații**: \&quot;Departamentul cu cei mai mulți angajați\&quot;, \&quot;Cel mai bine plătit post\&quot;\n&quot; +&#xD;
            &quot;• **Căutare fuzzy**: Înțeleg și abrevieri (\&quot;IT\&quot;, \&quot;HR\&quot;, \&quot;fin\&quot; pentru \&quot;finante\&quot;)\n&quot; +&#xD;
            &quot;• **Programare**: \&quot;Programează task cu Maria Ionescu\&quot;, \&quot;Meeting cu directorul IT\&quot;\n\n&quot; +&#xD;
            &#xD;
            &quot;**Sfaturi pentru întrebări mai bune:**\n&quot; +&#xD;
            &quot;• Folosiți fraze complete: \&quot;Câți angajați din IT?\&quot; în loc de \&quot;IT angajați\&quot;\n&quot; +&#xD;
            &quot;• Specificați perioada: \&quot;concedii din această lună\&quot; sau \&quot;anul trecut\&quot;\n&quot; +&#xD;
            &quot;• Pentru programări: \&quot;programează meeting cu [numele persoanei]\&quot;\n&quot; +&#xD;
            &quot;• Pentru calendar: \&quot;următoarea zi liberă\&quot;, \&quot;câte zile are martie\&quot;\n\n&quot; +&#xD;
            &#xD;
            &quot;Încercați o întrebare și vă voi ajuta!&quot;;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-zX9UVdEfCS7cth2SLu0w" name="handlePersonalResponse" specification="_V8RoUUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-zX9kVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-zX90VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-zX-EVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String personalType = queryInfo.getEntities().getOrDefault(&quot;personal_type&quot;, &quot;&quot;);&#xD;
     &#xD;
     if (resultList.isEmpty()) {&#xD;
         sendSimpleTextResponse(out, &quot;Nu am putut găsi informațiile personale solicitate.&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     Map&lt;String, Object> result = resultList.get(0);&#xD;
     &#xD;
     switch (personalType) {&#xD;
         case &quot;leave_balance&quot;:&#xD;
             int zileRamase = ((Number) result.getOrDefault(&quot;zile_ramase&quot;, 0)).intValue();&#xD;
             int zileConsumate = ((Number) result.getOrDefault(&quot;zile_consumate&quot;, 0)).intValue();&#xD;
             int concediiRamase = ((Number) result.getOrDefault(&quot;concedii_ramase&quot;, 0)).intValue();&#xD;
             int concediiLuate = ((Number) result.getOrDefault(&quot;concedii_luate&quot;, 0)).intValue();&#xD;
             &#xD;
             String message = String.format(&#xD;
                 &quot;**Situația dumneavoastră privind concediile:**\n\n&quot; +&#xD;
                 &quot;🗓️ **Zile de concediu:** %d zile rămase din total (%d zile consumate)\n&quot; +&#xD;
                 &quot;📋 **Cereri de concediu:** %d cereri rămase din 3 (%d cereri folosite)\n\n&quot; +&#xD;
                 &quot;💡 Puteți solicita concediu atât timp cât aveți zile și cereri disponibile.&quot;,&#xD;
                 zileRamase, zileConsumate, concediiRamase, concediiLuate&#xD;
             );&#xD;
             &#xD;
             sendEnhancedTextResponse(out, message, queryInfo, null);&#xD;
             break;&#xD;
             &#xD;
         case &quot;salary&quot;:&#xD;
             Object salariuBrut = result.get(&quot;salariu_brut&quot;);&#xD;
             Object salariuNet = result.get(&quot;salariu_net_aproximativ&quot;);&#xD;
             String functie = (String) result.get(&quot;functie&quot;);&#xD;
             String departament = (String) result.get(&quot;departament&quot;);&#xD;
             &#xD;
             String salaryMessage = String.format(&#xD;
                 &quot;**Informații salariale:**\n\n&quot; +&#xD;
                 &quot;💰 **Salariu brut:** %s RON\n&quot; +&#xD;
                 &quot;💳 **Salariu net (aproximativ):** %s RON\n&quot; +&#xD;
                 &quot;👔 **Funcția:** %s\n&quot; +&#xD;
                 &quot;🏢 **Departamentul:** %s\n\n&quot; +&#xD;
                 &quot;ℹ️ *Salariul net este calculat aproximativ (58.5% din brutul de bază).*&quot;,&#xD;
                 salariuBrut, salariuNet, functie, departament&#xD;
             );&#xD;
             &#xD;
             sendEnhancedTextResponse(out, salaryMessage, queryInfo, null);&#xD;
             break;&#xD;
             &#xD;
         case &quot;hierarchy&quot;:&#xD;
             String numeSupervizor = (String) result.get(&quot;nume&quot;);&#xD;
             String prenumeSupervizor = (String) result.get(&quot;prenume&quot;);&#xD;
             String functieSupervizor = (String) result.get(&quot;functie_superior&quot;);&#xD;
             &#xD;
             if (numeSupervizor != null) {&#xD;
                 String hierarchyMessage = String.format(&#xD;
                     &quot;**Superiorul dumneavoastră direct:**\n\n&quot; +&#xD;
                     &quot;👤 **Nume:** %s %s\n&quot; +&#xD;
                     &quot;👔 **Funcția:** %s\n\n&quot; +&#xD;
                     &quot;📞 Pentru contactare, verificați directorul de angajați.&quot;,&#xD;
                     numeSupervizor, prenumeSupervizor, functieSupervizor&#xD;
                 );&#xD;
                 sendEnhancedTextResponse(out, hierarchyMessage, queryInfo, null);&#xD;
             } else {&#xD;
                 sendSimpleTextResponse(out, &quot;Nu am putut identifica superiorul dumneavoastră direct în structura organizațională.&quot;);&#xD;
             }&#xD;
             break;&#xD;
             &#xD;
         default:&#xD;
             sendTableResponse(out, &quot;Informații personale:&quot;, resultList);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-z-8EVdEfCS7cth2SLu0w" name="handleProjectResponse" specification="_V8SPYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-z-8UVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z-8kVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z-80VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String projectStatus = queryInfo.getEntities().getOrDefault(&quot;project_status&quot;, &quot;&quot;);&#xD;
     QueryType queryType = queryInfo.getQueryType();&#xD;
     &#xD;
     if (queryType == QueryType.COUNT &amp;&amp; resultList.size() == 1) {&#xD;
         int count = ((Number) resultList.get(0).values().iterator().next()).intValue();&#xD;
         String statusText = &quot;active&quot;.equals(projectStatus) ? &quot;active&quot; : &#xD;
                            &quot;inactive&quot;.equals(projectStatus) ? &quot;inactive/finalizate&quot; : &quot;&quot;;&#xD;
         &#xD;
         String message = String.format(&quot;În prezent există %d proiecte %s în sistem.&quot;, count, statusText);&#xD;
         sendSimpleTextResponse(out, message);&#xD;
     } else {&#xD;
         String statusText = &quot;active&quot;.equals(projectStatus) ? &quot; active&quot; : &#xD;
                            &quot;inactive&quot;.equals(projectStatus) ? &quot; finalizate&quot; : &quot;&quot;;&#xD;
         sendTableResponse(out, &quot;Iată proiectele&quot; + statusText + &quot; din sistem:&quot;, resultList);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-z-9EVdEfCS7cth2SLu0w" name="handleCertificateResponse" specification="_V8SPZUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-z-9UVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z-9kVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z-90VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String certificateStatus = queryInfo.getEntities().getOrDefault(&quot;certificate_status&quot;, &quot;&quot;);&#xD;
     QueryType queryType = queryInfo.getQueryType();&#xD;
     &#xD;
     if (queryType == QueryType.COUNT &amp;&amp; resultList.size() == 1) {&#xD;
         int count = ((Number) resultList.get(0).values().iterator().next()).intValue();&#xD;
         &#xD;
         String statusText = &quot;&quot;;&#xD;
         switch (certificateStatus) {&#xD;
             case &quot;pending&quot;: statusText = &quot;în așteptare&quot;; break;&#xD;
             case &quot;approved&quot;: statusText = &quot;aprobate&quot;; break;&#xD;
             case &quot;rejected&quot;: statusText = &quot;respinse&quot;; break;&#xD;
             default: statusText = &quot;&quot;;&#xD;
         }&#xD;
         &#xD;
         String message = String.format(&quot;Există %d adeverințe %s în sistem.&quot;, count, statusText);&#xD;
         sendSimpleTextResponse(out, message);&#xD;
     } else {&#xD;
         String statusText = &quot;&quot;;&#xD;
         switch (certificateStatus) {&#xD;
             case &quot;pending&quot;: statusText = &quot; în așteptare&quot;; break;&#xD;
             case &quot;approved&quot;: statusText = &quot; aprobate&quot;; break;&#xD;
             case &quot;rejected&quot;: statusText = &quot; respinse&quot;; break;&#xD;
         }&#xD;
         &#xD;
         sendTableResponse(out, &quot;Iată adeverințele&quot; + statusText + &quot;:&quot;, resultList);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-z--EVdEfCS7cth2SLu0w" name="handleLocationResponse" specification="_V8S2ckVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-z--UVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z--kVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z--0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String locationType = queryInfo.getEntities().getOrDefault(&quot;location_type&quot;, &quot;&quot;);&#xD;
     String departmentName = queryInfo.getEntities().get(&quot;department_name&quot;);&#xD;
     &#xD;
     String message = &quot;Iată informațiile de locație &quot;;&#xD;
     &#xD;
     switch (locationType) {&#xD;
         case &quot;department&quot;:&#xD;
             message += departmentName != null ? &#xD;
                 &quot;pentru departamentul &quot; + departmentName + &quot;:&quot; : &#xD;
                 &quot;pentru departamente:&quot;;&#xD;
             break;&#xD;
         case &quot;office&quot;:&#xD;
             message += &quot;pentru sediile companiei:&quot;;&#xD;
             break;&#xD;
         case &quot;employee&quot;:&#xD;
             message += &quot;pentru angajați:&quot;;&#xD;
             break;&#xD;
         default:&#xD;
             message += &quot;solicitate:&quot;;&#xD;
     }&#xD;
     &#xD;
     sendTableResponse(out, message, resultList);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-z-_EVdEfCS7cth2SLu0w" name="handleAverageResponse" specification="_V8TdgUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-z-_UVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z-_kVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z-_0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String averageType = queryInfo.getEntities().getOrDefault(&quot;average_type&quot;, &quot;&quot;);&#xD;
     String averageScope = queryInfo.getEntities().getOrDefault(&quot;average_scope&quot;, &quot;&quot;);&#xD;
     String departmentName = queryInfo.getEntities().get(&quot;department_name&quot;);&#xD;
     &#xD;
     if (&quot;salary&quot;.equals(averageType) &amp;&amp; resultList.size() == 1) {&#xD;
         Map&lt;String, Object> result = resultList.get(0);&#xD;
         &#xD;
         if (&quot;company&quot;.equals(averageScope)) {&#xD;
             Object salariuMediu = result.get(&quot;salariu_mediu_general&quot;);&#xD;
             Object totalAngajati = result.get(&quot;total_angajati&quot;);&#xD;
             &#xD;
             String message = String.format(&#xD;
                 &quot;**Salariul mediu în companie:**\n\n&quot; +&#xD;
                 &quot;💰 **Media generală:** %.2f RON\n&quot; +&#xD;
                 &quot;👥 **Calculat pe baza a:** %s angajați\n\n&quot; +&#xD;
                 &quot;ℹ️ *Aceasta include toate pozițiile și departamentele.*&quot;,&#xD;
                 ((Number) salariuMediu).doubleValue(),&#xD;
                 totalAngajati&#xD;
             );&#xD;
             &#xD;
             sendEnhancedTextResponse(out, message, queryInfo, null);&#xD;
             return;&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     // For other cases, show as table&#xD;
     String contextMessage = &quot;Iată statisticile salariale &quot;;&#xD;
     &#xD;
     if (departmentName != null) {&#xD;
         contextMessage += &quot;pentru departamentul &quot; + departmentName + &quot;:&quot;;&#xD;
     } else {&#xD;
         switch (averageScope) {&#xD;
             case &quot;department&quot;: contextMessage += &quot;pe departamente:&quot;; break;&#xD;
             case &quot;position&quot;: contextMessage += &quot;pe poziții:&quot;; break;&#xD;
             default: contextMessage += &quot;solicitate:&quot;;&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     sendTableResponse(out, contextMessage, resultList);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-z_AEVdEfCS7cth2SLu0w" name="handleTaskResponse" specification="_V8UEkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-z_AUVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z_AkVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z_A0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String taskStatus = queryInfo.getEntities().getOrDefault(&quot;task_status&quot;, &quot;&quot;);&#xD;
     String temporalFilter = queryInfo.getEntities().get(&quot;temporal_filter&quot;);&#xD;
     QueryType queryType = queryInfo.getQueryType();&#xD;
     &#xD;
     if (queryType == QueryType.COUNT &amp;&amp; resultList.size() == 1) {&#xD;
         int count = ((Number) resultList.get(0).values().iterator().next()).intValue();&#xD;
         &#xD;
         String statusText = &quot;&quot;;&#xD;
         if (&quot;deadline&quot;.equals(taskStatus)) {&#xD;
             statusText = temporalFilter != null ? &#xD;
                 &quot;cu deadline &quot; + temporalFilter : &#xD;
                 &quot;cu deadline astăzi&quot;;&#xD;
         } else if (&quot;in_progress&quot;.equals(taskStatus)) {&#xD;
             statusText = &quot;în progres&quot;;&#xD;
         }&#xD;
         &#xD;
         String message = String.format(&quot;Există %d task-uri %s.&quot;, count, statusText);&#xD;
         sendSimpleTextResponse(out, message);&#xD;
     } else {&#xD;
         String statusText = &quot;&quot;;&#xD;
         if (&quot;deadline&quot;.equals(taskStatus)) {&#xD;
             statusText = temporalFilter != null ? &#xD;
                 &quot; cu deadline &quot; + temporalFilter : &#xD;
                 &quot; cu deadline astăzi&quot;;&#xD;
         } else if (&quot;in_progress&quot;.equals(taskStatus)) {&#xD;
             statusText = &quot; în progres&quot;;&#xD;
         }&#xD;
         &#xD;
         sendTableResponse(out, &quot;Iată task-urile&quot; + statusText + &quot;:&quot;, resultList);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-z_BEVdEfCS7cth2SLu0w" name="handleAvailabilityResponse" specification="_V8UElkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-z_BUVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z_BkVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z_B0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String availabilityType = queryInfo.getEntities().getOrDefault(&quot;availability_type&quot;, &quot;&quot;);&#xD;
     &#xD;
     if (&quot;position&quot;.equals(availabilityType)) {&#xD;
         if (resultList.isEmpty()) {&#xD;
             sendSimpleTextResponse(out, &quot;În acest moment nu există poziții deschise în companie.&quot;);&#xD;
         } else {&#xD;
             sendTableResponse(out, &quot;Iată pozițiile disponibile în companie:&quot;, resultList);&#xD;
         }&#xD;
     } else {&#xD;
         sendTableResponse(out, &quot;Iată informațiile de disponibilitate:&quot;, resultList);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-z_CEVdEfCS7cth2SLu0w" name="handleWorkModeResponse" specification="_V8UrpEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-z_CUVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z_CkVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z_C0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String workModeType = queryInfo.getEntities().getOrDefault(&quot;work_mode_type&quot;, &quot;&quot;);&#xD;
     QueryType queryType = queryInfo.getQueryType();&#xD;
     &#xD;
     // Since work mode isn't fully implemented in the schema yet&#xD;
     sendSimpleTextResponse(out, &quot;Funcționalitatea pentru modurile de lucru (remote/hibrid/fizic) &quot; +&#xD;
                                &quot;este în curs de implementare. Vă rugăm să contactați departamentul HR &quot; +&#xD;
                                &quot;pentru informații despre angajații care lucrează remote.&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-z_DEVdEfCS7cth2SLu0w" name="handleEnhancedLeaveResponse" specification="_V8VSsUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-z_DUVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z_DkVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z_D0VdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z_EEVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String leaveQueryType = queryInfo.getEntities().getOrDefault(&quot;leave_query_type&quot;, &quot;&quot;);&#xD;
     String temporalFilter = queryInfo.getEntities().get(&quot;temporal_filter&quot;);&#xD;
     String departmentName = queryInfo.getEntities().get(&quot;department_name&quot;);&#xD;
     &#xD;
     if (&quot;who_is_on_leave&quot;.equals(leaveQueryType)) {&#xD;
         if (resultList.isEmpty()) {&#xD;
             String timeContext = temporalFilter != null ? temporalFilter : &quot;în acest moment&quot;;&#xD;
             String deptContext = departmentName != null ? &quot; din departamentul &quot; + departmentName : &quot;&quot;;&#xD;
             &#xD;
             String message = String.format(&quot;Nu există angajați în concediu %s%s.&quot;, timeContext, deptContext);&#xD;
             sendSimpleTextResponse(out, message);&#xD;
         } else {&#xD;
             String timeContext = temporalFilter != null ? &quot; &quot; + temporalFilter : &quot; în acest moment&quot;;&#xD;
             String deptContext = departmentName != null ? &quot; din departamentul &quot; + departmentName : &quot;&quot;;&#xD;
             &#xD;
             String message = String.format(&quot;Iată angajații în concediu%s%s:&quot;, timeContext, deptContext);&#xD;
             sendTableResponse(out, message, resultList);&#xD;
         }&#xD;
     } else {&#xD;
         // Fall back to existing leave response handling&#xD;
         handleListResponseEnhanced(resultList, queryInfo, tokenization, out);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-z_EUVdEfCS7cth2SLu0w" name="handleSQLError" specification="_V8V5wUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-z_EkVdEfCS7cth2SLu0w" name="e" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z_E0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z_FEVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-z_FUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String entityType = queryInfo.getEntities().getOrDefault(&quot;entity&quot;, &quot;&quot;);&#xD;
     &#xD;
     JSONObject response = new JSONObject();&#xD;
     response.put(&quot;type&quot;, &quot;error_with_suggestions&quot;);&#xD;
     &#xD;
     String helpfulMessage = &quot;A apărut o problemă la procesarea întrebării. &quot;;&#xD;
     &#xD;
     // Provide specific help based on entity type&#xD;
     switch (entityType) {&#xD;
         case &quot;personal&quot;:&#xD;
             helpfulMessage += &quot;Pentru întrebări personale, încercați: \&quot;Câte zile de concediu am?\&quot; sau \&quot;Care este salariul meu?\&quot;&quot;;&#xD;
             break;&#xD;
         case &quot;project&quot;:&#xD;
             helpfulMessage += &quot;Pentru proiecte, încercați: \&quot;Ce proiecte active avem?\&quot; sau \&quot;Câte proiecte sunt în curs?\&quot;&quot;;&#xD;
             break;&#xD;
         case &quot;certificate&quot;:&#xD;
             helpfulMessage += &quot;Pentru adeverințe, încercați: \&quot;Adeverințe în așteptare\&quot; sau \&quot;Câte adeverințe au fost aprobate?\&quot;&quot;;&#xD;
             break;&#xD;
         case &quot;task&quot;:&#xD;
             helpfulMessage += &quot;Pentru task-uri, încercați: \&quot;Task-uri pentru astăzi\&quot; sau \&quot;Ce task-uri sunt de finalizat?\&quot;&quot;;&#xD;
             break;&#xD;
         case &quot;leave&quot;:&#xD;
             helpfulMessage += &quot;Pentru concedii, încercați: \&quot;Cine e în concediu astăzi?\&quot; sau \&quot;Concedii din departamentul IT\&quot;&quot;;&#xD;
             break;&#xD;
         default:&#xD;
             helpfulMessage += &quot;Încercați să reformulați întrebarea sau să folosiți termeni mai simpli.&quot;;&#xD;
     }&#xD;
     &#xD;
     response.put(&quot;message&quot;, helpfulMessage);&#xD;
     &#xD;
     // Add example queries based on detected entities&#xD;
     if (tokenization != null &amp;&amp; !tokenization.getEntityConfidences().isEmpty()) {&#xD;
         JSONArray suggestions = new JSONArray();&#xD;
         List&lt;String> helpSuggestions = EnhancedNLPProcessor.generateEnhancedSuggestions(&#xD;
             String.join(&quot; &quot;, tokenization.getNormalizedTokens()), tokenization.getEntityConfidences());&#xD;
         for (String suggestion : helpSuggestions) {&#xD;
             suggestions.put(suggestion);&#xD;
         }&#xD;
         response.put(&quot;suggestions&quot;, suggestions);&#xD;
     }&#xD;
     &#xD;
     out.println(response.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-0mAEVdEfCS7cth2SLu0w" name="sendEnhancedTextResponse" specification="_V8V5xkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-0mAUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-0mAkVdEfCS7cth2SLu0w" name="message">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-0mA0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-0mBEVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>JSONObject response = new JSONObject();&#xD;
     response.put(&quot;type&quot;, &quot;enhanced_text&quot;);&#xD;
     response.put(&quot;message&quot;, message);&#xD;
     response.put(&quot;timestamp&quot;, System.currentTimeMillis());&#xD;
     response.put(&quot;entityType&quot;, queryInfo.getEntities().getOrDefault(&quot;entity&quot;, &quot;&quot;));&#xD;
     &#xD;
     // Add follow-up suggestions for personal queries&#xD;
     String entityType = queryInfo.getEntities().getOrDefault(&quot;entity&quot;, &quot;&quot;);&#xD;
     if (&quot;personal&quot;.equals(entityType)) {&#xD;
         JSONArray followUpSuggestions = new JSONArray();&#xD;
         String personalType = queryInfo.getEntities().getOrDefault(&quot;personal_type&quot;, &quot;&quot;);&#xD;
         &#xD;
         switch (personalType) {&#xD;
             case &quot;leave_balance&quot;:&#xD;
                 followUpSuggestions.put(&quot;Pot să-mi iau concediu săptămâna viitoare?&quot;);&#xD;
                 followUpSuggestions.put(&quot;Cine este superiorul meu?&quot;);&#xD;
                 break;&#xD;
             case &quot;salary&quot;:&#xD;
                 followUpSuggestions.put(&quot;Care este salariul mediu în departamentul meu?&quot;);&#xD;
                 followUpSuggestions.put(&quot;Câte zile de concediu am?&quot;);&#xD;
                 break;&#xD;
             case &quot;hierarchy&quot;:&#xD;
                 followUpSuggestions.put(&quot;Ce funcții sunt disponibile pentru promovare?&quot;);&#xD;
                 followUpSuggestions.put(&quot;Care este salariul mediu pentru funcția mea?&quot;);&#xD;
                 break;&#xD;
         }&#xD;
         &#xD;
         if (followUpSuggestions.length() > 0) {&#xD;
             response.put(&quot;followUpSuggestions&quot;, followUpSuggestions);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     out.println(response.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-0mBUVdEfCS7cth2SLu0w" name="isGreeting" specification="_VsijMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-0mBkVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-0mB0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>String[] greetings = {&#xD;
         &quot;buna&quot;, &quot;salut&quot;, &quot;hello&quot;, &quot;hi&quot;, &quot;hey&quot;, &quot;bună ziua&quot;, &quot;neața&quot;, &#xD;
         &quot;ziua bună&quot;, &quot;servus&quot;, &quot;bine ai venit&quot;, &quot;ce faci&quot;, &quot;ce mai faci&quot;&#xD;
     };&#xD;
     &#xD;
     for (String greeting : greetings) {&#xD;
         if (text.contains(greeting)) {&#xD;
             return true;&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return false;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-0mCEVdEfCS7cth2SLu0w" name="isHelpRequest" specification="_VsijM0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-0mCUVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-0mCkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>String[] helpTerms = {&#xD;
         &quot;ajuta-ma&quot;, &quot;ajută-mă&quot;, &quot;ajutor&quot;, &quot;help&quot;, &quot;nu inteleg&quot;, &quot;nu înțeleg&quot;,&#xD;
         &quot;cum sa&quot;, &quot;cum să&quot;, &quot;ce pot sa&quot;, &quot;ce pot să&quot;, &quot;instructiuni&quot;, &quot;instrucțiuni&quot;,&#xD;
         &quot;ghid&quot;, &quot;tutorial&quot;, &quot;cum functioneaza&quot;, &quot;cum funcționează&quot;&#xD;
     };&#xD;
     &#xD;
     for (String term : helpTerms) {&#xD;
         if (text.contains(term)) {&#xD;
             return true;&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return false;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-0mC0VdEfCS7cth2SLu0w" name="generateHelpResponse" specification="_VsjKQUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-0mDEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>return &quot;Vă pot ajuta cu informații din baza de date a companiei. Puteți să-mi adresați întrebări în limbaj natural despre:\n\n&quot; +&#xD;
            &quot;1. Angajați - ex: \&quot;Câți angajați sunt în departamentul HR?\&quot; sau \&quot;Arată-mi angajații din IT.\&quot;\n&quot; +&#xD;
            &quot;2. Departamente - ex: \&quot;Ce departamente există în firmă?\&quot; sau \&quot;Câți angajați are fiecare departament?\&quot;\n&quot; +&#xD;
            &quot;3. Concedii - ex: \&quot;Cine este în concediu astăzi?\&quot; sau \&quot;Arată-mi concediile de Crăciun.\&quot;\n&quot; +&#xD;
            &quot;4. Poziții/roluri - ex: \&quot;Ce tipuri de poziții există în departamentul IT?\&quot; sau \&quot;Care sunt cele mai bine plătite funcții?\&quot;\n&quot; +&#xD;
            &quot;5. Salarii - ex: \&quot;Care este salariul mediu în firmă?\&quot; sau \&quot;Care sunt salariile pozițiilor din HR?\&quot;\n&quot; +&#xD;
            &quot;6. Adeverințe - ex: \&quot;Câte adeverințe sunt în așteptare?\&quot; sau \&quot;Arată-mi adeverințele aprobate.\&quot;\n&quot; +&#xD;
            &quot;7. Proiecte - ex: \&quot;Ce proiecte active avem?\&quot; sau \&quot;Cine lucrează la proiectul X?\&quot;\n\n&quot; +&#xD;
            &quot;După ce primiți un răspuns, puteți solicita detalii suplimentare spunând simplu \&quot;Da\&quot; sau \&quot;Arată-mi mai multe detalii\&quot;.&quot;;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-0mDUVdEfCS7cth2SLu0w" name="resultSetToList" specification="_VsjKQ0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-0mDkVdEfCS7cth2SLu0w" name="rs" type="_T9wtMEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-0mD0VdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-0mEEVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;Map&lt;String, Object>> list = new ArrayList&lt;>();&#xD;
     ResultSetMetaData md = rs.getMetaData();&#xD;
     int columnCount = md.getColumnCount();&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: Converting ResultSet to List&lt;Map&lt;String, Object>> with &quot; + columnCount + &quot; columns&quot;);&#xD;
     &#xD;
     int rowCount = 0;&#xD;
     while (rs.next()) {&#xD;
         rowCount++;&#xD;
         Map&lt;String, Object> row = new HashMap&lt;>();&#xD;
         for (int i = 1; i &lt;= columnCount; i++) {&#xD;
             String columnName = md.getColumnLabel(i);&#xD;
             Object value = rs.getObject(i);&#xD;
             &#xD;
             // Format dates if present&#xD;
             if (value instanceof java.sql.Date) {&#xD;
                 SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd.MM.yyyy&quot;);&#xD;
                 value = sdf.format(value);&#xD;
             } else if (value instanceof java.sql.Timestamp) {&#xD;
                 SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd.MM.yyyy HH:mm:ss&quot;);&#xD;
                 value = sdf.format(value);&#xD;
             }&#xD;
             &#xD;
             row.put(columnName, value);&#xD;
         }&#xD;
         list.add(row);&#xD;
         &#xD;
         // Print only first 5 rows for debugging&#xD;
         if (rowCount &lt;= 5) {&#xD;
             System.out.println(&quot;DEBUG: Row &quot; + rowCount + &quot;: &quot; + row);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: Converted &quot; + rowCount + &quot; rows to List&lt;Map&lt;String, Object>>&quot;);&#xD;
     &#xD;
     return list;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-0mEUVdEfCS7cth2SLu0w" name="processEmployeeQuery" specification="_VsjxUUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-0mEkVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-0mE0VdEfCS7cth2SLu0w" name="currentUser" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-0mFEVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-0mFUVdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try (Connection conn = getConnection()) {&#xD;
         StringBuilder sqlBuilder = new StringBuilder();&#xD;
         sqlBuilder.append(&quot;SELECT u.id, u.nume, u.prenume, d.nume_dep AS departament, t.denumire AS functie, &quot;);&#xD;
         sqlBuilder.append(&quot;u.email, u.telefon &quot;);&#xD;
         sqlBuilder.append(&quot;FROM useri u &quot;);&#xD;
         sqlBuilder.append(&quot;JOIN tipuri t ON u.tip = t.tip &quot;);&#xD;
         sqlBuilder.append(&quot;JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
         sqlBuilder.append(&quot;WHERE 1=1 &quot;);&#xD;
         &#xD;
         // Department filter&#xD;
         if (query.contains(&quot;hr&quot;) || query.contains(&quot;resurse&quot;) || query.contains(&quot;resurse umane&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'HR' &quot;);&#xD;
         } else if (query.contains(&quot;it&quot;) || query.contains(&quot;tehnologia informatiei&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'IT' &quot;);&#xD;
         } else if (query.contains(&quot;finante&quot;) || query.contains(&quot;finanțe&quot;) || query.contains(&quot;financiar&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'Finante' &quot;);&#xD;
         } else if (query.contains(&quot;juridic&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'Juridic' &quot;);&#xD;
         } else if (query.contains(&quot;marketing&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'Marketing' &quot;);&#xD;
         }&#xD;
         &#xD;
         // Position filter&#xD;
         if (query.contains(&quot;director&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND t.denumire LIKE '%Director%' &quot;);&#xD;
         } else if (query.contains(&quot;intern&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND t.denumire LIKE '%Intern%' &quot;);&#xD;
         } else if (query.contains(&quot;sef&quot;) || query.contains(&quot;șef&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND t.denumire LIKE '%Sef%' &quot;);&#xD;
         } else if (query.contains(&quot;manager&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND t.denumire LIKE '%Manager%' &quot;);&#xD;
         }&#xD;
         &#xD;
         // Order by department and name&#xD;
         sqlBuilder.append(&quot;ORDER BY d.nume_dep, u.nume, u.prenume&quot;);&#xD;
         &#xD;
         PreparedStatement stmt = conn.prepareStatement(sqlBuilder.toString());&#xD;
         ResultSet rs = stmt.executeQuery();&#xD;
         &#xD;
         // Convert results to list of maps&#xD;
         List&lt;Map&lt;String, Object>> resultList = resultSetToList(rs);&#xD;
         &#xD;
         // Save results in session for possible follow-up&#xD;
         session.setAttribute(&quot;lastQueryData&quot;, resultList);&#xD;
         &#xD;
         // Determine if we need to show count or details&#xD;
         String departmentName = &quot;&quot;;&#xD;
         if (query.contains(&quot;hr&quot;)) departmentName = &quot;HR&quot;;&#xD;
         else if (query.contains(&quot;it&quot;)) departmentName = &quot;IT&quot;;&#xD;
         else if (query.contains(&quot;finante&quot;) || query.contains(&quot;finanțe&quot;)) departmentName = &quot;Finante&quot;;&#xD;
         else if (query.contains(&quot;juridic&quot;)) departmentName = &quot;Juridic&quot;;&#xD;
         else if (query.contains(&quot;marketing&quot;)) departmentName = &quot;Marketing&quot;;&#xD;
         &#xD;
         session.setAttribute(&quot;lastQueryContext&quot;, &quot;angajați&quot; + &#xD;
                 (departmentName.isEmpty() ? &quot;&quot; : &quot; din departamentul &quot; + departmentName));&#xD;
         &#xD;
         boolean showCount = query.contains(&quot;câți&quot;) || query.contains(&quot;cati&quot;) || &#xD;
                            query.contains(&quot;număr&quot;) || query.contains(&quot;numar&quot;) || &#xD;
                            query.contains(&quot;count&quot;);&#xD;
         &#xD;
         if (resultList.isEmpty()) {&#xD;
             sendSimpleTextResponse(out, &quot;Nu am găsit niciun angajat care să corespundă criteriilor dvs.&quot;);&#xD;
         } else if (showCount) {&#xD;
             sendTableResponseWithConfirmation(out, &quot;În urma analizei, am găsit &quot; + resultList.size() + &#xD;
                     &quot; angajați care corespund criteriilor dvs. Doriți să vedeți detaliile acestora?&quot;, resultList);&#xD;
         } else {&#xD;
             sendTableResponse(out, &quot;Am găsit următorii angajați care corespund criteriilor dvs.:&quot;, resultList);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         sendErrorResponse(out, &quot;Eroare la interogarea bazei de date: &quot; + e.getMessage());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-0mFkVdEfCS7cth2SLu0w" name="processDepartmentQuery" specification="_VskYZEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-0mF0VdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-0mGEVdEfCS7cth2SLu0w" name="currentUser" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-0mGUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-0mGkVdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try (Connection conn = getConnection()) {&#xD;
         StringBuilder sqlBuilder = new StringBuilder();&#xD;
         sqlBuilder.append(&quot;SELECT d.id_dep, d.nume_dep AS departament, COUNT(u.id) as numar_angajati &quot;);&#xD;
         sqlBuilder.append(&quot;FROM departament d &quot;);&#xD;
         sqlBuilder.append(&quot;LEFT JOIN useri u ON d.id_dep = u.id_dep &quot;);&#xD;
         sqlBuilder.append(&quot;WHERE 1=1 &quot;);&#xD;
         &#xD;
         // Specific department filter&#xD;
         if (query.contains(&quot;hr&quot;) || query.contains(&quot;resurse&quot;) || query.contains(&quot;resurse umane&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'HR' &quot;);&#xD;
         } else if (query.contains(&quot;it&quot;) || query.contains(&quot;tehnologia informatiei&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'IT' &quot;);&#xD;
         } else if (query.contains(&quot;finante&quot;) || query.contains(&quot;finanțe&quot;) || query.contains(&quot;financiar&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'Finante' &quot;);&#xD;
         } else if (query.contains(&quot;juridic&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'Juridic' &quot;);&#xD;
         } else if (query.contains(&quot;marketing&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'Marketing' &quot;);&#xD;
         }&#xD;
         &#xD;
         sqlBuilder.append(&quot;GROUP BY d.id_dep, d.nume_dep &quot;);&#xD;
         sqlBuilder.append(&quot;ORDER BY d.nume_dep&quot;);&#xD;
         &#xD;
         PreparedStatement stmt = conn.prepareStatement(sqlBuilder.toString());&#xD;
         ResultSet rs = stmt.executeQuery();&#xD;
         &#xD;
         List&lt;Map&lt;String, Object>> resultList = resultSetToList(rs);&#xD;
         &#xD;
         // Save results in session for possible follow-up&#xD;
         session.setAttribute(&quot;lastQueryData&quot;, resultList);&#xD;
         session.setAttribute(&quot;lastQueryContext&quot;, &quot;departamente&quot;);&#xD;
         &#xD;
         boolean showCount = query.contains(&quot;câte&quot;) || query.contains(&quot;cate&quot;) || &#xD;
                            query.contains(&quot;număr&quot;) || query.contains(&quot;numar&quot;) || &#xD;
                            query.contains(&quot;count&quot;);&#xD;
         &#xD;
         if (resultList.isEmpty()) {&#xD;
             sendSimpleTextResponse(out, &quot;Nu am găsit niciun departament care să corespundă criteriilor dvs.&quot;);&#xD;
         } else if (showCount) {&#xD;
             sendTableResponseWithConfirmation(out, &quot;Am găsit &quot; + resultList.size() + &#xD;
                     &quot; departamente care corespund criteriilor dvs. Doriți să vedeți detaliile acestora?&quot;, resultList);&#xD;
         } else {&#xD;
             sendTableResponse(out, &quot;Am găsit următoarele departamente:&quot;, resultList);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         sendErrorResponse(out, &quot;Eroare la interogarea bazei de date: &quot; + e.getMessage());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-1NEEVdEfCS7cth2SLu0w" name="processLeaveQuery" specification="_Vsk_cEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-1NEUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-1NEkVdEfCS7cth2SLu0w" name="currentUser" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-1NE0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-1NFEVdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try (Connection conn = getConnection()) {&#xD;
         StringBuilder sqlBuilder = new StringBuilder();&#xD;
         sqlBuilder.append(&quot;SELECT c.id AS nr_crt, c.id_ang, u.nume, u.prenume, d.nume_dep AS departament, &quot;);&#xD;
         sqlBuilder.append(&quot;t.denumire AS functie, c.start_c AS data_inceput, c.end_c AS data_sfarsit, &quot;);&#xD;
         sqlBuilder.append(&quot;c.motiv, c.locatie, s.nume_status AS status, &quot;);&#xD;
         sqlBuilder.append(&quot;c.durata, tc.motiv AS tip_concediu &quot;);&#xD;
         sqlBuilder.append(&quot;FROM concedii c &quot;);&#xD;
         sqlBuilder.append(&quot;JOIN useri u ON u.id = c.id_ang &quot;);&#xD;
         sqlBuilder.append(&quot;JOIN tipuri t ON u.tip = t.tip &quot;);&#xD;
         sqlBuilder.append(&quot;JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
         sqlBuilder.append(&quot;JOIN statusuri s ON c.status = s.status &quot;);&#xD;
         sqlBuilder.append(&quot;JOIN tipcon tc ON c.tip = tc.tip &quot;);&#xD;
         sqlBuilder.append(&quot;WHERE 1=1 &quot;);&#xD;
         &#xD;
         // Time period filters&#xD;
         if (query.contains(&quot;craciun&quot;) || query.contains(&quot;crăciun&quot;)) {&#xD;
             // Christmas period (24-25 December of the current year)&#xD;
             sqlBuilder.append(&quot;AND ((c.start_c &lt;= '2025-12-25' AND c.end_c >= '2025-12-24')) &quot;);&#xD;
         } else if (query.contains(&quot;decembrie&quot;) || query.contains(&quot;decembr&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND (MONTH(c.start_c) = 12 OR MONTH(c.end_c) = 12) &quot;);&#xD;
         } else if (query.contains(&quot;ianuarie&quot;) || query.contains(&quot;ianuar&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND (MONTH(c.start_c) = 1 OR MONTH(c.end_c) = 1) &quot;);&#xD;
         } else if (query.contains(&quot;astazi&quot;) || query.contains(&quot;azi&quot;) || &#xD;
                    query.contains(&quot;astăzi&quot;) || query.contains(&quot;acum&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND (CURDATE() BETWEEN c.start_c AND c.end_c) &quot;);&#xD;
         } else if (query.contains(&quot;luna &quot;) || query.contains(&quot;luna&quot;) || &#xD;
                    query.contains(&quot;curent&quot;) || query.contains(&quot;luna aceasta&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND (MONTH(c.start_c) = MONTH(CURDATE()) AND YEAR(c.start_c) = YEAR(CURDATE())) &quot;);&#xD;
         } else if (query.contains(&quot;an&quot;) || query.contains(&quot;anul&quot;) || &#xD;
                    query.contains(&quot;anul acesta&quot;) || query.contains(&quot;acest an&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND YEAR(c.start_c) = YEAR(CURDATE()) &quot;);&#xD;
         }&#xD;
         &#xD;
         // Department filters&#xD;
         if (query.contains(&quot;hr&quot;) || query.contains(&quot;resurse&quot;) || query.contains(&quot;resurse umane&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'HR' &quot;);&#xD;
         } else if (query.contains(&quot;it&quot;) || query.contains(&quot;tehnologia informatiei&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'IT' &quot;);&#xD;
         } else if (query.contains(&quot;finante&quot;) || query.contains(&quot;finanțe&quot;) || query.contains(&quot;financiar&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'Finante' &quot;);&#xD;
         } else if (query.contains(&quot;juridic&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'Juridic' &quot;);&#xD;
         } else if (query.contains(&quot;marketing&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'Marketing' &quot;);&#xD;
         }&#xD;
         &#xD;
         // Status filters&#xD;
         if (query.contains(&quot;aprobat&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND c.status IN (1, 2) &quot;);&#xD;
         } else if (query.contains(&quot;neaprobat&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND c.status = 0 &quot;);&#xD;
         } else if (query.contains(&quot;respins&quot;) || query.contains(&quot;dezaprobat&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND c.status IN (-1, -2) &quot;);&#xD;
         }&#xD;
         &#xD;
         // Type filters&#xD;
         if (query.contains(&quot;medical&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND tc.motiv LIKE '%medical%' &quot;);&#xD;
         } else if (query.contains(&quot;odihna&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND tc.motiv LIKE '%odihna%' &quot;);&#xD;
         }&#xD;
         &#xD;
         sqlBuilder.append(&quot;ORDER BY c.start_c DESC&quot;);&#xD;
         &#xD;
         PreparedStatement stmt = conn.prepareStatement(sqlBuilder.toString());&#xD;
         ResultSet rs = stmt.executeQuery();&#xD;
         &#xD;
         List&lt;Map&lt;String, Object>> resultList = resultSetToList(rs);&#xD;
         &#xD;
         // Save results in session for possible follow-up&#xD;
         session.setAttribute(&quot;lastQueryData&quot;, resultList);&#xD;
         &#xD;
         // Determine context for follow-up&#xD;
         String contextTime = &quot;&quot;;&#xD;
         if (query.contains(&quot;craciun&quot;) || query.contains(&quot;crăciun&quot;)) contextTime = &quot; de Crăciun&quot;;&#xD;
         else if (query.contains(&quot;decembrie&quot;) || query.contains(&quot;decembr&quot;)) contextTime = &quot; din decembrie&quot;;&#xD;
         else if (query.contains(&quot;ianuarie&quot;) || query.contains(&quot;ianuar&quot;)) contextTime = &quot; din ianuarie&quot;;&#xD;
         else if (query.contains(&quot;astazi&quot;) || query.contains(&quot;azi&quot;) || &#xD;
                  query.contains(&quot;astăzi&quot;) || query.contains(&quot;acum&quot;)) contextTime = &quot; de astăzi&quot;;&#xD;
         else if (query.contains(&quot;luna&quot;) || query.contains(&quot;curent&quot;)) contextTime = &quot; din luna curentă&quot;;&#xD;
         else if (query.contains(&quot;an&quot;) || query.contains(&quot;anul&quot;)) contextTime = &quot; din anul curent&quot;;&#xD;
         &#xD;
         String contextDepartment = &quot;&quot;;&#xD;
         if (query.contains(&quot;hr&quot;)) contextDepartment = &quot; din departamentul HR&quot;;&#xD;
         else if (query.contains(&quot;it&quot;)) contextDepartment = &quot; din departamentul IT&quot;;&#xD;
         else if (query.contains(&quot;finante&quot;) || query.contains(&quot;finanțe&quot;)) &#xD;
             contextDepartment = &quot; din departamentul Finante&quot;;&#xD;
         else if (query.contains(&quot;juridic&quot;)) contextDepartment = &quot; din departamentul Juridic&quot;;&#xD;
         else if (query.contains(&quot;marketing&quot;)) contextDepartment = &quot; din departamentul Marketing&quot;;&#xD;
         &#xD;
         session.setAttribute(&quot;lastQueryContext&quot;, &quot;concedii&quot; + contextTime + contextDepartment);&#xD;
         &#xD;
         boolean showCount = query.contains(&quot;câte&quot;) || query.contains(&quot;cate&quot;) || &#xD;
                            query.contains(&quot;număr&quot;) || query.contains(&quot;numar&quot;) || &#xD;
                            query.contains(&quot;count&quot;);&#xD;
         &#xD;
         if (resultList.isEmpty()) {&#xD;
             sendSimpleTextResponse(out, &quot;Nu am găsit niciun concediu care să corespundă criteriilor dvs.&quot;);&#xD;
         } else if (showCount) {&#xD;
             sendTableResponseWithConfirmation(out, &quot;În urma analizei, am găsit &quot; + resultList.size() + &#xD;
                     &quot; concedii care corespund criteriilor dvs. Doriți să vedeți detaliile acestora?&quot;, resultList);&#xD;
         } else {&#xD;
             sendTableResponse(out, &quot;Am găsit următoarele concedii:&quot;, resultList);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         sendErrorResponse(out, &quot;Eroare la interogarea bazei de date: &quot; + e.getMessage());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-1NFUVdEfCS7cth2SLu0w" name="processCertificateQuery" specification="_Vsk_dUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-1NFkVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-1NF0VdEfCS7cth2SLu0w" name="currentUser" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-1NGEVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-1NGUVdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try (Connection conn = getConnection()) {&#xD;
         StringBuilder sqlBuilder = new StringBuilder();&#xD;
         sqlBuilder.append(&quot;SELECT a.id, ta.denumire AS tip_adeverinta, a.motiv, s.nume_status AS status, &quot;);&#xD;
         sqlBuilder.append(&quot;a.creare AS data_creare, a.modif AS data_modificare, &quot;);&#xD;
         sqlBuilder.append(&quot;u.nume, u.prenume, d.nume_dep AS departament &quot;);&#xD;
         sqlBuilder.append(&quot;FROM adeverinte a &quot;);&#xD;
         sqlBuilder.append(&quot;JOIN tip_adev ta ON a.tip = ta.id &quot;);&#xD;
         sqlBuilder.append(&quot;JOIN statusuri s ON a.status = s.status &quot;);&#xD;
         sqlBuilder.append(&quot;JOIN useri u ON a.id_ang = u.id &quot;);&#xD;
         sqlBuilder.append(&quot;JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
         sqlBuilder.append(&quot;WHERE 1=1 &quot;);&#xD;
         &#xD;
         // Type filters&#xD;
         if (query.contains(&quot;salariat&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND ta.denumire LIKE '%salariat%' &quot;);&#xD;
         } else if (query.contains(&quot;venit&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND ta.denumire LIKE '%venit%' &quot;);&#xD;
         } else if (query.contains(&quot;medical&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND ta.denumire LIKE '%medical%' &quot;);&#xD;
         }&#xD;
         &#xD;
         // Status filters&#xD;
         if (query.contains(&quot;aprobat&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND a.status = 2 &quot;);&#xD;
         } else if (query.contains(&quot;neaprobat&quot;) || query.contains(&quot;asteptare&quot;) || &#xD;
                    query.contains(&quot;în așteptare&quot;) || query.contains(&quot;in asteptare&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND a.status = 0 &quot;);&#xD;
         } else if (query.contains(&quot;respins&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND a.status &lt; 0 &quot;);&#xD;
         }&#xD;
         &#xD;
         // Department filters&#xD;
         if (query.contains(&quot;hr&quot;) || query.contains(&quot;resurse&quot;) || query.contains(&quot;resurse umane&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'HR' &quot;);&#xD;
         } else if (query.contains(&quot;it&quot;) || query.contains(&quot;tehnologia informatiei&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'IT' &quot;);&#xD;
         } else if (query.contains(&quot;finante&quot;) || query.contains(&quot;finanțe&quot;) || query.contains(&quot;financiar&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'Finante' &quot;);&#xD;
         } else if (query.contains(&quot;juridic&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'Juridic' &quot;);&#xD;
         } else if (query.contains(&quot;marketing&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND d.nume_dep = 'Marketing' &quot;);&#xD;
         }&#xD;
         &#xD;
         // Time period filters&#xD;
         if (query.contains(&quot;luna&quot;) || query.contains(&quot;curent&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND (MONTH(a.creare) = MONTH(CURDATE()) AND YEAR(a.creare) = YEAR(CURDATE())) &quot;);&#xD;
         } else if (query.contains(&quot;an&quot;) || query.contains(&quot;anul&quot;)) {&#xD;
             sqlBuilder.append(&quot;AND YEAR(a.creare) = YEAR(CURDATE()) &quot;);&#xD;
         }&#xD;
         &#xD;
         sqlBuilder.append(&quot;ORDER BY a.creare DESC&quot;);&#xD;
         &#xD;
         PreparedStatement stmt = conn.prepareStatement(sqlBuilder.toString());&#xD;
         ResultSet rs = stmt.executeQuery();&#xD;
         &#xD;
         List&lt;Map&lt;String, Object>> resultList = resultSetToList(rs);&#xD;
         &#xD;
         // Save results in session for possible follow-up&#xD;
         session.setAttribute(&quot;lastQueryData&quot;, resultList);&#xD;
         session.setAttribute(&quot;lastQueryContext&quot;, &quot;adeverințe&quot;);&#xD;
         &#xD;
         boolean showCount = query.contains(&quot;câte&quot;) || query.contains(&quot;cate&quot;) || &#xD;
                            query.contains(&quot;număr&quot;) || query.contains(&quot;numar&quot;) || &#xD;
                            query.contains(&quot;count&quot;);&#xD;
         &#xD;
         if (resultList.isEmpty()) {&#xD;
             sendSimpleTextResponse(out, &quot;Nu am găsit nicio adeverință care să corespundă criteriilor dvs.&quot;);&#xD;
         } else if (showCount) {&#xD;
             sendTableResponseWithConfirmation(out, &quot;În urma analizei, am găsit &quot; + resultList.size() + &#xD;
                     &quot; adeverințe care corespund criteriilor dvs. Doriți să vedeți detaliile acestora?&quot;, resultList);&#xD;
         } else {&#xD;
             sendTableResponse(out, &quot;Am găsit următoarele adeverințe:&quot;, resultList);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         sendErrorResponse(out, &quot;Eroare la interogarea bazei de date: &quot; + e.getMessage());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-1NGkVdEfCS7cth2SLu0w" name="processProjectQuery" specification="_Vslmg0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-1NG0VdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-1NHEVdEfCS7cth2SLu0w" name="currentUser" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-1NHUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-1NHkVdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try (Connection conn = getConnection()) {&#xD;
         StringBuilder sqlBuilder = new StringBuilder();&#xD;
         &#xD;
         // Determine which type of project query&#xD;
         if (query.contains(&quot;task&quot;) || query.contains(&quot;taskuri&quot;) || &#xD;
             query.contains(&quot;sarcina&quot;) || query.contains(&quot;sarcini&quot;)) {&#xD;
             &#xD;
             // Query for tasks&#xD;
             sqlBuilder.append(&quot;SELECT t.id, t.nume AS nume_task, p.nume AS nume_proiect, &quot;);&#xD;
             sqlBuilder.append(&quot;u.nume, u.prenume, s.procent AS progres, &quot;);&#xD;
             sqlBuilder.append(&quot;t.start AS data_inceput, t.end AS data_sfarsit &quot;);&#xD;
             sqlBuilder.append(&quot;FROM tasks t &quot;);&#xD;
             sqlBuilder.append(&quot;JOIN proiecte p ON t.id_prj = p.id &quot;);&#xD;
             sqlBuilder.append(&quot;JOIN useri u ON t.id_ang = u.id &quot;);&#xD;
             sqlBuilder.append(&quot;JOIN statusuri2 s ON t.status = s.id &quot;);&#xD;
             sqlBuilder.append(&quot;WHERE 1=1 &quot;);&#xD;
             &#xD;
             // Filter for incomplete/complete tasks&#xD;
             if (query.contains(&quot;neterminate&quot;) || query.contains(&quot;incomplete&quot;) || &#xD;
                 query.contains(&quot;în progres&quot;) || query.contains(&quot;in progres&quot;)) {&#xD;
                 sqlBuilder.append(&quot;AND s.procent &lt; 100 &quot;);&#xD;
             } else if (query.contains(&quot;terminate&quot;) || query.contains(&quot;complete&quot;) || &#xD;
                       query.contains(&quot;finalizate&quot;)) {&#xD;
                 sqlBuilder.append(&quot;AND s.procent = 100 &quot;);&#xD;
             }&#xD;
             &#xD;
             sqlBuilder.append(&quot;ORDER BY t.end&quot;);&#xD;
             &#xD;
         } else if (query.contains(&quot;cine&quot;) || query.contains(&quot;lucreaza&quot;) || &#xD;
                    query.contains(&quot;lucrează&quot;) || query.contains(&quot;angajat&quot;)) {&#xD;
             &#xD;
             // Query for who works on projects&#xD;
             sqlBuilder.append(&quot;SELECT u.id, u.nume, u.prenume, d.nume_dep AS departament, &quot;);&#xD;
             sqlBuilder.append(&quot;p.nume AS nume_proiect, e.nume AS nume_echipa &quot;);&#xD;
             sqlBuilder.append(&quot;FROM useri u &quot;);&#xD;
             sqlBuilder.append(&quot;JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
             sqlBuilder.append(&quot;JOIN tasks t ON t.id_ang = u.id &quot;);&#xD;
             sqlBuilder.append(&quot;JOIN proiecte p ON t.id_prj = p.id &quot;);&#xD;
             sqlBuilder.append(&quot;JOIN echipe e ON e.id_prj = p.id &quot;);&#xD;
             sqlBuilder.append(&quot;GROUP BY u.id, u.nume, u.prenume, d.nume_dep, p.nume, e.nume &quot;);&#xD;
             sqlBuilder.append(&quot;ORDER BY u.nume, u.prenume&quot;);&#xD;
             &#xD;
         } else {&#xD;
             // Default project list&#xD;
             sqlBuilder.append(&quot;SELECT p.id, p.nume, p.descriere, p.start AS data_inceput, p.end AS data_sfarsit, &quot;);&#xD;
             sqlBuilder.append(&quot;COUNT(DISTINCT e.id) AS numar_echipe, &quot;);&#xD;
             sqlBuilder.append(&quot;COUNT(DISTINCT t.id) AS numar_taskuri, &quot;);&#xD;
             sqlBuilder.append(&quot;u.nume AS supervizor_nume, u.prenume AS supervizor_prenume &quot;);&#xD;
             sqlBuilder.append(&quot;FROM proiecte p &quot;);&#xD;
             sqlBuilder.append(&quot;LEFT JOIN echipe e ON p.id = e.id_prj &quot;);&#xD;
             sqlBuilder.append(&quot;LEFT JOIN tasks t ON p.id = t.id_prj &quot;);&#xD;
             sqlBuilder.append(&quot;LEFT JOIN useri u ON p.supervizor = u.id &quot;);&#xD;
             sqlBuilder.append(&quot;GROUP BY p.id, p.nume, p.descriere, p.start, p.end, u.nume, u.prenume &quot;);&#xD;
             &#xD;
             // Add filter for active projects&#xD;
             if (query.contains(&quot;active&quot;) || query.contains(&quot;curente&quot;) || &#xD;
                 query.contains(&quot;prezent&quot;) || query.contains(&quot;in desfasurare&quot;) || &#xD;
                 query.contains(&quot;în desfășurare&quot;)) {&#xD;
                 sqlBuilder.append(&quot;HAVING p.start &lt;= CURDATE() AND (p.end >= CURDATE() OR p.end IS NULL) &quot;);&#xD;
             }&#xD;
             &#xD;
             sqlBuilder.append(&quot;ORDER BY p.start DESC&quot;);&#xD;
         }&#xD;
         &#xD;
         PreparedStatement stmt = conn.prepareStatement(sqlBuilder.toString());&#xD;
         ResultSet rs = stmt.executeQuery();&#xD;
         &#xD;
         List&lt;Map&lt;String, Object>> resultList = resultSetToList(rs);&#xD;
         &#xD;
         // Save results in session for possible follow-up&#xD;
         session.setAttribute(&quot;lastQueryData&quot;, resultList);&#xD;
         &#xD;
         // Set context based on query type&#xD;
         if (query.contains(&quot;task&quot;) || query.contains(&quot;taskuri&quot;) || &#xD;
             query.contains(&quot;sarcina&quot;) || query.contains(&quot;sarcini&quot;)) {&#xD;
             session.setAttribute(&quot;lastQueryContext&quot;, &quot;taskuri&quot;);&#xD;
         } else if (query.contains(&quot;cine&quot;) || query.contains(&quot;lucreaza&quot;) || &#xD;
                    query.contains(&quot;lucrează&quot;) || query.contains(&quot;angajat&quot;)) {&#xD;
             session.setAttribute(&quot;lastQueryContext&quot;, &quot;angajați și proiecte&quot;);&#xD;
         } else {&#xD;
             session.setAttribute(&quot;lastQueryContext&quot;, &quot;proiecte&quot;);&#xD;
         }&#xD;
         &#xD;
         boolean showCount = query.contains(&quot;câte&quot;) || query.contains(&quot;cate&quot;) || &#xD;
                            query.contains(&quot;număr&quot;) || query.contains(&quot;numar&quot;) || &#xD;
                            query.contains(&quot;count&quot;);&#xD;
         &#xD;
         if (resultList.isEmpty()) {&#xD;
             sendSimpleTextResponse(out, &quot;Nu am găsit niciun rezultat care să corespundă criteriilor dvs.&quot;);&#xD;
         } else if (showCount) {&#xD;
             sendTableResponseWithConfirmation(out, &quot;În urma analizei, am găsit &quot; + resultList.size() + &#xD;
                     &quot; rezultate care corespund criteriilor dvs. Doriți să vedeți detaliile acestora?&quot;, resultList);&#xD;
         } else {&#xD;
             sendTableResponse(out, &quot;Am găsit următoarele rezultate:&quot;, resultList);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         sendErrorResponse(out, &quot;Eroare la interogarea bazei de date: &quot; + e.getMessage());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-1NH0VdEfCS7cth2SLu0w" name="processPositionsQuery" specification="_VslmiEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-1NIEVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-1NIUVdEfCS7cth2SLu0w" name="currentUser" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-1NIkVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-1NI0VdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try (Connection conn = getConnection()) {&#xD;
         StringBuilder sqlBuilder = new StringBuilder();&#xD;
         &#xD;
         if (query.contains(&quot;departament&quot;)) {&#xD;
             // Positions in a specific department&#xD;
             sqlBuilder.append(&quot;SELECT DISTINCT t.tip, t.denumire, t.salariu, t.ierarhie, &quot;);&#xD;
             sqlBuilder.append(&quot;dp.denumire_completa AS denumire_specifica &quot;);&#xD;
             sqlBuilder.append(&quot;FROM useri u &quot;);&#xD;
             sqlBuilder.append(&quot;JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
             sqlBuilder.append(&quot;JOIN tipuri t ON u.tip = t.tip &quot;);&#xD;
             sqlBuilder.append(&quot;LEFT JOIN denumiri_pozitii dp ON t.tip = dp.tip_pozitie AND d.id_dep = dp.id_dep &quot;);&#xD;
             sqlBuilder.append(&quot;WHERE 1=1 &quot;);&#xD;
             &#xD;
             // Department filter&#xD;
             if (query.contains(&quot;hr&quot;) || query.contains(&quot;resurse&quot;) || query.contains(&quot;resurse umane&quot;)) {&#xD;
                 sqlBuilder.append(&quot;AND d.nume_dep = 'HR' &quot;);&#xD;
             } else if (query.contains(&quot;it&quot;) || query.contains(&quot;tehnologia informatiei&quot;)) {&#xD;
                 sqlBuilder.append(&quot;AND d.nume_dep = 'IT' &quot;);&#xD;
             } else if (query.contains(&quot;finante&quot;) || query.contains(&quot;finanțe&quot;) || query.contains(&quot;financiar&quot;)) {&#xD;
                 sqlBuilder.append(&quot;AND d.nume_dep = 'Finante' &quot;);&#xD;
             } else if (query.contains(&quot;juridic&quot;)) {&#xD;
                 sqlBuilder.append(&quot;AND d.nume_dep = 'Juridic' &quot;);&#xD;
             } else if (query.contains(&quot;marketing&quot;)) {&#xD;
                 sqlBuilder.append(&quot;AND d.nume_dep = 'Marketing' &quot;);&#xD;
             }&#xD;
             &#xD;
             sqlBuilder.append(&quot;ORDER BY t.ierarhie, t.denumire&quot;);&#xD;
         } else {&#xD;
             // All positions&#xD;
             sqlBuilder.append(&quot;SELECT t.tip, t.denumire, t.salariu, t.ierarhie, &quot;);&#xD;
             sqlBuilder.append(&quot;d.nume_dep AS departament_specific &quot;);&#xD;
             sqlBuilder.append(&quot;FROM tipuri t &quot;);&#xD;
             sqlBuilder.append(&quot;LEFT JOIN departament d ON t.departament_specific = d.id_dep &quot;);&#xD;
             &#xD;
             // Ordering&#xD;
             if (query.contains(&quot;salariu&quot;) || query.contains(&quot;salarii&quot;) || &#xD;
                 query.contains(&quot;platite&quot;) || query.contains(&quot;plătite&quot;)) {&#xD;
                 sqlBuilder.append(&quot;ORDER BY t.salariu DESC&quot;);&#xD;
             } else {&#xD;
                 sqlBuilder.append(&quot;ORDER BY t.ierarhie, t.denumire&quot;);&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         PreparedStatement stmt = conn.prepareStatement(sqlBuilder.toString());&#xD;
         ResultSet rs = stmt.executeQuery();&#xD;
         &#xD;
         List&lt;Map&lt;String, Object>> resultList = resultSetToList(rs);&#xD;
         &#xD;
         // Save results in session for possible follow-up&#xD;
         session.setAttribute(&quot;lastQueryData&quot;, resultList);&#xD;
         &#xD;
         // Set context based on query&#xD;
         String departmentName = &quot;&quot;;&#xD;
         if (query.contains(&quot;hr&quot;)) departmentName = &quot;HR&quot;;&#xD;
         else if (query.contains(&quot;it&quot;)) departmentName = &quot;IT&quot;;&#xD;
         else if (query.contains(&quot;finante&quot;) || query.contains(&quot;finanțe&quot;)) departmentName = &quot;Finante&quot;;&#xD;
         else if (query.contains(&quot;juridic&quot;)) departmentName = &quot;Juridic&quot;;&#xD;
         else if (query.contains(&quot;marketing&quot;)) departmentName = &quot;Marketing&quot;;&#xD;
         &#xD;
         session.setAttribute(&quot;lastQueryContext&quot;, &quot;poziții&quot; + &#xD;
                 (departmentName.isEmpty() ? &quot;&quot; : &quot; din departamentul &quot; + departmentName));&#xD;
         &#xD;
         boolean showCount = query.contains(&quot;câte&quot;) || query.contains(&quot;cate&quot;) || &#xD;
                            query.contains(&quot;număr&quot;) || query.contains(&quot;numar&quot;) || &#xD;
                            query.contains(&quot;count&quot;);&#xD;
         &#xD;
         if (resultList.isEmpty()) {&#xD;
             sendSimpleTextResponse(out, &quot;Nu am găsit nicio poziție care să corespundă criteriilor dvs.&quot;);&#xD;
         } else if (showCount) {&#xD;
             sendTableResponseWithConfirmation(out, &quot;În urma analizei, am găsit &quot; + resultList.size() + &#xD;
                     &quot; poziții care corespund criteriilor dvs. Doriți să vedeți detaliile acestora?&quot;, resultList);&#xD;
         } else {&#xD;
             sendTableResponse(out, &quot;Am găsit următoarele poziții:&quot;, resultList);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         sendErrorResponse(out, &quot;Eroare la interogarea bazei de date: &quot; + e.getMessage());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-1NJEVdEfCS7cth2SLu0w" name="processSalaryQuery" specification="_VsmNk0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-1NJUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-1NJkVdEfCS7cth2SLu0w" name="currentUser" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-1NJ0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-1NKEVdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try (Connection conn = getConnection()) {&#xD;
         StringBuilder sqlBuilder = new StringBuilder();&#xD;
         &#xD;
         if (query.contains(&quot;medie&quot;) || query.contains(&quot;mediu&quot;) || query.contains(&quot;average&quot;) || &#xD;
             query.contains(&quot;media&quot;) || query.contains(&quot;în medie&quot;) || query.contains(&quot;in medie&quot;)) {&#xD;
             &#xD;
             // Average salary&#xD;
             sqlBuilder.append(&quot;SELECT AVG(t.salariu) AS salariu_mediu &quot;);&#xD;
             sqlBuilder.append(&quot;FROM tipuri t &quot;);&#xD;
             &#xD;
             // Department filter&#xD;
             if (query.contains(&quot;hr&quot;) || query.contains(&quot;resurse&quot;) || query.contains(&quot;resurse umane&quot;)) {&#xD;
                 sqlBuilder.append(&quot;JOIN useri u ON t.tip = u.tip &quot;);&#xD;
                 sqlBuilder.append(&quot;JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
                 sqlBuilder.append(&quot;WHERE d.nume_dep = 'HR' &quot;);&#xD;
             } else if (query.contains(&quot;it&quot;) || query.contains(&quot;tehnologia informatiei&quot;)) {&#xD;
                 sqlBuilder.append(&quot;JOIN useri u ON t.tip = u.tip &quot;);&#xD;
                 sqlBuilder.append(&quot;JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
                 sqlBuilder.append(&quot;WHERE d.nume_dep = 'IT' &quot;);&#xD;
             } else if (query.contains(&quot;finante&quot;) || query.contains(&quot;finanțe&quot;) || query.contains(&quot;financiar&quot;)) {&#xD;
                 sqlBuilder.append(&quot;JOIN useri u ON t.tip = u.tip &quot;);&#xD;
                 sqlBuilder.append(&quot;JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
                 sqlBuilder.append(&quot;WHERE d.nume_dep = 'Finante' &quot;);&#xD;
             }&#xD;
             &#xD;
         } else if (query.contains(&quot;maxim&quot;) || query.contains(&quot;max&quot;) || &#xD;
                    query.contains(&quot;cel mai mare&quot;) || query.contains(&quot;cea mai mare&quot;) || &#xD;
                    query.contains(&quot;top&quot;) || query.contains(&quot;cele mai mari&quot;)) {&#xD;
             &#xD;
             // Maximum salaries&#xD;
             sqlBuilder.append(&quot;SELECT t.denumire, t.salariu, d.nume_dep AS departament_specific &quot;);&#xD;
             sqlBuilder.append(&quot;FROM tipuri t &quot;);&#xD;
             sqlBuilder.append(&quot;LEFT JOIN departament d ON t.departament_specific = d.id_dep &quot;);&#xD;
             &#xD;
             // Department filter&#xD;
             if (query.contains(&quot;hr&quot;) || query.contains(&quot;resurse&quot;) || query.contains(&quot;resurse umane&quot;)) {&#xD;
                 sqlBuilder.append(&quot;JOIN useri u ON t.tip = u.tip &quot;);&#xD;
                 sqlBuilder.append(&quot;JOIN departament d2 ON u.id_dep = d2.id_dep &quot;);&#xD;
                 sqlBuilder.append(&quot;WHERE d2.nume_dep = 'HR' &quot;);&#xD;
                 sqlBuilder.append(&quot;GROUP BY t.denumire, t.salariu, d.nume_dep &quot;);&#xD;
             } else if (query.contains(&quot;it&quot;) || query.contains(&quot;tehnologia informatiei&quot;)) {&#xD;
                 sqlBuilder.append(&quot;JOIN useri u ON t.tip = u.tip &quot;);&#xD;
                 sqlBuilder.append(&quot;JOIN departament d2 ON u.id_dep = d2.id_dep &quot;);&#xD;
                 sqlBuilder.append(&quot;WHERE d2.nume_dep = 'IT' &quot;);&#xD;
                 sqlBuilder.append(&quot;GROUP BY t.denumire, t.salariu, d.nume_dep &quot;);&#xD;
             } else if (query.contains(&quot;finante&quot;) || query.contains(&quot;finanțe&quot;) || query.contains(&quot;financiar&quot;)) {&#xD;
                 sqlBuilder.append(&quot;JOIN useri u ON t.tip = u.tip &quot;);&#xD;
                 sqlBuilder.append(&quot;JOIN departament d2 ON u.id_dep = d2.id_dep &quot;);&#xD;
                 sqlBuilder.append(&quot;WHERE d2.nume_dep = 'Finante' &quot;);&#xD;
                 sqlBuilder.append(&quot;GROUP BY t.denumire, t.salariu, d.nume_dep &quot;);&#xD;
             }&#xD;
             &#xD;
             sqlBuilder.append(&quot;ORDER BY t.salariu DESC &quot;);&#xD;
             sqlBuilder.append(&quot;LIMIT 10&quot;);&#xD;
             &#xD;
         } else if (query.contains(&quot;minim&quot;) || query.contains(&quot;min&quot;) || &#xD;
                    query.contains(&quot;cel mai mic&quot;) || query.contains(&quot;cea mai mica&quot;) || &#xD;
                    query.contains(&quot;cele mai mici&quot;)) {&#xD;
             &#xD;
             // Minimum salaries&#xD;
             sqlBuilder.append(&quot;SELECT t.denumire, t.salariu, d.nume_dep AS departament_specific &quot;);&#xD;
             sqlBuilder.append(&quot;FROM tipuri t &quot;);&#xD;
             sqlBuilder.append(&quot;LEFT JOIN departament d ON t.departament_specific = d.id_dep &quot;);&#xD;
             &#xD;
             // Department filter&#xD;
             if (query.contains(&quot;hr&quot;) || query.contains(&quot;resurse&quot;) || query.contains(&quot;resurse umane&quot;)) {&#xD;
                 sqlBuilder.append(&quot;JOIN useri u ON t.tip = u.tip &quot;);&#xD;
                 sqlBuilder.append(&quot;JOIN departament d2 ON u.id_dep = d2.id_dep &quot;);&#xD;
                 sqlBuilder.append(&quot;WHERE d2.nume_dep = 'HR' &quot;);&#xD;
                 sqlBuilder.append(&quot;GROUP BY t.denumire, t.salariu, d.nume_dep &quot;);&#xD;
             } else if (query.contains(&quot;it&quot;) || query.contains(&quot;tehnologia informatiei&quot;)) {&#xD;
                 sqlBuilder.append(&quot;JOIN useri u ON t.tip = u.tip &quot;);&#xD;
                 sqlBuilder.append(&quot;JOIN departament d2 ON u.id_dep = d2.id_dep &quot;);&#xD;
                 sqlBuilder.append(&quot;WHERE d2.nume_dep = 'IT' &quot;);&#xD;
                 sqlBuilder.append(&quot;GROUP BY t.denumire, t.salariu, d.nume_dep &quot;);&#xD;
             } else if (query.contains(&quot;finante&quot;) || query.contains(&quot;finanțe&quot;) || query.contains(&quot;financiar&quot;)) {&#xD;
                 sqlBuilder.append(&quot;JOIN useri u ON t.tip = u.tip &quot;);&#xD;
                 sqlBuilder.append(&quot;JOIN departament d2 ON u.id_dep = d2.id_dep &quot;);&#xD;
                 sqlBuilder.append(&quot;WHERE d2.nume_dep = 'Finante' &quot;);&#xD;
                 sqlBuilder.append(&quot;GROUP BY t.denumire, t.salariu, d.nume_dep &quot;);&#xD;
             }&#xD;
             &#xD;
             sqlBuilder.append(&quot;ORDER BY t.salariu ASC &quot;);&#xD;
             sqlBuilder.append(&quot;LIMIT 10&quot;);&#xD;
             &#xD;
         } else {&#xD;
             // All salaries&#xD;
             sqlBuilder.append(&quot;SELECT t.denumire, t.salariu, COUNT(u.id) AS numar_angajati &quot;);&#xD;
             sqlBuilder.append(&quot;FROM tipuri t &quot;);&#xD;
             sqlBuilder.append(&quot;LEFT JOIN useri u ON t.tip = u.tip &quot;);&#xD;
             &#xD;
             // Department filter&#xD;
             if (query.contains(&quot;hr&quot;) || query.contains(&quot;resurse&quot;) || query.contains(&quot;resurse umane&quot;)) {&#xD;
                 sqlBuilder.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
                 sqlBuilder.append(&quot;WHERE d.nume_dep = 'HR' &quot;);&#xD;
             } else if (query.contains(&quot;it&quot;) || query.contains(&quot;tehnologia informatiei&quot;)) {&#xD;
                 sqlBuilder.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
                 sqlBuilder.append(&quot;WHERE d.nume_dep = 'IT' &quot;);&#xD;
             } else if (query.contains(&quot;finante&quot;) || query.contains(&quot;finanțe&quot;) || query.contains(&quot;financiar&quot;)) {&#xD;
                 sqlBuilder.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
                 sqlBuilder.append(&quot;WHERE d.nume_dep = 'Finante' &quot;);&#xD;
             }&#xD;
             &#xD;
             sqlBuilder.append(&quot;GROUP BY t.denumire, t.salariu &quot;);&#xD;
             sqlBuilder.append(&quot;ORDER BY t.salariu DESC&quot;);&#xD;
         }&#xD;
         &#xD;
         PreparedStatement stmt = conn.prepareStatement(sqlBuilder.toString());&#xD;
         ResultSet rs = stmt.executeQuery();&#xD;
         &#xD;
         List&lt;Map&lt;String, Object>> resultList = resultSetToList(rs);&#xD;
         &#xD;
         // Save results in session for possible follow-up&#xD;
         session.setAttribute(&quot;lastQueryData&quot;, resultList);&#xD;
         &#xD;
         // Set context based on query&#xD;
         String departmentName = &quot;&quot;;&#xD;
         if (query.contains(&quot;hr&quot;)) departmentName = &quot;HR&quot;;&#xD;
         else if (query.contains(&quot;it&quot;)) departmentName = &quot;IT&quot;;&#xD;
         else if (query.contains(&quot;finante&quot;) || query.contains(&quot;finanțe&quot;)) departmentName = &quot;Finante&quot;;&#xD;
         &#xD;
         session.setAttribute(&quot;lastQueryContext&quot;, &quot;salarii&quot; + &#xD;
                 (departmentName.isEmpty() ? &quot;&quot; : &quot; din departamentul &quot; + departmentName));&#xD;
         &#xD;
         if (resultList.isEmpty()) {&#xD;
             sendSimpleTextResponse(out, &quot;Nu am găsit date salariale care să corespundă criteriilor dvs.&quot;);&#xD;
         } else if (query.contains(&quot;medie&quot;) || query.contains(&quot;mediu&quot;) || query.contains(&quot;average&quot;)) {&#xD;
             // Special format for average salary&#xD;
             double avgSalary = ((Number) resultList.get(0).get(&quot;salariu_mediu&quot;)).doubleValue();&#xD;
             sendSimpleTextResponse(out, String.format(&quot;Salariul mediu%s este de %.2f lei.&quot;, &#xD;
                     (departmentName.isEmpty() ? &quot;&quot; : &quot; în departamentul &quot; + departmentName),&#xD;
                     avgSalary));&#xD;
         } else {&#xD;
             sendTableResponse(out, &quot;Iată informațiile salariale&quot; + &#xD;
                     (departmentName.isEmpty() ? &quot;&quot; : &quot; pentru departamentul &quot; + departmentName) + &quot;:&quot;, &#xD;
                     resultList);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         sendErrorResponse(out, &quot;Eroare la interogarea bazei de date: &quot; + e.getMessage());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-1NKUVdEfCS7cth2SLu0w" name="sendSimpleTextResponse" specification="_VsmNmEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-1NKkVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-1NK0VdEfCS7cth2SLu0w" name="message">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>System.out.println(&quot;DEBUG: Sending simple text response: &quot; + message);&#xD;
     &#xD;
     JSONObject response = new JSONObject();&#xD;
     response.put(&quot;type&quot;, &quot;text&quot;);&#xD;
     response.put(&quot;message&quot;, message);&#xD;
     out.println(response.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-1NLEVdEfCS7cth2SLu0w" name="sendTableResponse" specification="_Vsm0oEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-1NLUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-1NLkVdEfCS7cth2SLu0w" name="message">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-1NL0VdEfCS7cth2SLu0w" name="data" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>System.out.println(&quot;DEBUG: Sending table response with &quot; + data.size() + &quot; rows&quot;);&#xD;
     System.out.println(&quot;DEBUG: Table message: &quot; + message);&#xD;
     &#xD;
     JSONObject response = new JSONObject();&#xD;
     response.put(&quot;type&quot;, &quot;table&quot;);&#xD;
     response.put(&quot;message&quot;, message);&#xD;
     response.put(&quot;data&quot;, new JSONArray(data));&#xD;
     out.println(response.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-10IEVdEfCS7cth2SLu0w" name="sendTableResponseWithConfirmation" specification="_VsnbsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-10IUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-10IkVdEfCS7cth2SLu0w" name="message">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-10I0VdEfCS7cth2SLu0w" name="data" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>System.out.println(&quot;DEBUG: Sending table response with confirmation. Message: &quot; + message);&#xD;
     &#xD;
     JSONObject response = new JSONObject();&#xD;
     response.put(&quot;type&quot;, &quot;table&quot;);&#xD;
     response.put(&quot;message&quot;, message);&#xD;
     response.put(&quot;data&quot;, new JSONArray(data));&#xD;
     response.put(&quot;needsConfirmation&quot;, true);&#xD;
     out.println(response.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-10JEVdEfCS7cth2SLu0w" name="sendErrorResponse" specification="_VsoCwUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-10JUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-10JkVdEfCS7cth2SLu0w" name="errorMessage">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>System.out.println(&quot;DEBUG: Sending error response: &quot; + errorMessage);&#xD;
     &#xD;
     JSONObject response = new JSONObject();&#xD;
     response.put(&quot;type&quot;, &quot;error&quot;);&#xD;
     response.put(&quot;message&quot;, &quot;Îmi pare rău, a apărut o eroare: &quot; + errorMessage);&#xD;
     out.println(response.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-10J0VdEfCS7cth2SLu0w" name="getConnection" specification="_Vsop0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-10KEVdEfCS7cth2SLu0w" type="_T9fncEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         System.out.println(&quot;DEBUG: MySQL JDBC Driver not found&quot;);&#xD;
         throw new SQLException(&quot;MySQL JDBC Driver not found&quot;, e);&#xD;
     }&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: Getting database connection&quot;);&#xD;
     return DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VsaAUEVdEfCS7cth2SLu0w" name="init" method="_V-wUkEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w"/>
        <ownedOperation xmi:id="_VsanYkVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V-wUkUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VsanY0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VsanZEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VsanZUVdEfCS7cth2SLu0w" name="setEnhancedNLPEnabled" method="_V-wUlEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_bqAEVdEfCS7cth2SLu0w">
            <body>Configuration methods for tuning the enhanced system</body>
          </ownedComment>
          <ownedParameter xmi:id="_VsanZkVdEfCS7cth2SLu0w" name="enabled">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VsanZ0VdEfCS7cth2SLu0w" name="setConfidenceThreshold" method="_V-wUlkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_bqAUVdEfCS7cth2SLu0w">
            <body>Set confidence threshold for query acceptance</body>
          </ownedComment>
          <ownedParameter xmi:id="_VsanaEVdEfCS7cth2SLu0w" name="threshold">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VsanaUVdEfCS7cth2SLu0w" name="clearQueryCache" method="_V-wUmEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_bqAkVdEfCS7cth2SLu0w">
            <body>Clear query cache</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:id="_VsanakVdEfCS7cth2SLu0w" name="getCacheStatistics" method="_V-wUmUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_bqA0VdEfCS7cth2SLu0w">
            <body>Get cache statistics</body>
          </ownedComment>
          <ownedParameter xmi:id="_VsbOcEVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VsbOckVdEfCS7cth2SLu0w" name="calculateCacheHitRate" visibility="private" method="_V-wUm0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vsb1gEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vsb1gUVdEfCS7cth2SLu0w" name="debugTemporalDetection" visibility="private" method="_V-w7oEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_bqBEVdEfCS7cth2SLu0w">
            <body>ADAUGĂ această metodă pentru debug temporal în translator</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vsb1gkVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vsb1g0VdEfCS7cth2SLu0w" name="sendRegulationSummaryResponse" visibility="private" method="_V-w7okVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cREEVdEfCS7cth2SLu0w">
            <body>Send regulation summary response</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vsb1hEVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vsb1hUVdEfCS7cth2SLu0w" name="summary">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VscckEVdEfCS7cth2SLu0w" name="sendPolicyCheckResponse" visibility="private" method="_V-w7pUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cREUVdEfCS7cth2SLu0w">
            <body>Send policy check response</body>
          </ownedComment>
          <ownedParameter xmi:id="_VscckUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VscckkVdEfCS7cth2SLu0w" name="originalQuery">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vscck0VdEfCS7cth2SLu0w" name="policyResponse" type="_S9SusEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VscclEVdEfCS7cth2SLu0w" name="processQuery" visibility="private" method="_V-w7qUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cREkVdEfCS7cth2SLu0w">
            <body>Enhanced main method to process natural language queries&#xD;
     * REPLACE YOUR EXISTING processQuery() METHOD WITH THIS COMPLETE VERSION</body>
          </ownedComment>
          <ownedParameter xmi:id="_VscclUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VscclkVdEfCS7cth2SLu0w" name="currentUser" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vsccl0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VsccmEVdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VsdDoEVdEfCS7cth2SLu0w" name="handleFollowUpQuestion" visibility="private" method="_V-w7rkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRE0VdEfCS7cth2SLu0w">
            <body>Enhanced follow-up question handling&#xD;
     * REPLACE YOUR EXISTING handleFollowUpQuestion() calls with this if you have them, &#xD;
     * OR ADD THIS NEW METHOD</body>
          </ownedComment>
          <ownedParameter xmi:id="_VsdDoUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VsdDokVdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VsdDo0VdEfCS7cth2SLu0w" name="preprocessQuery" visibility="private" method="_V-w7sUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRFEVdEfCS7cth2SLu0w">
            <body>Enhanced query preprocessing with advanced NLP</body>
          </ownedComment>
          <ownedParameter xmi:id="_VsdDpEVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V8JFcEVdEfCS7cth2SLu0w" type="_V8IeYEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VsdqsEVdEfCS7cth2SLu0w" name="getTemporalColumnForEntity" visibility="private" method="_V-xiuEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRGUVdEfCS7cth2SLu0w">
            <body>Get appropriate temporal column for entity type</body>
          </ownedComment>
          <ownedParameter xmi:id="_VsdqsUVdEfCS7cth2SLu0w" name="entityType">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VsdqskVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VseRwEVdEfCS7cth2SLu0w" name="getNumericColumnForContext" visibility="private" method="_V-xiu0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRGkVdEfCS7cth2SLu0w">
            <body>Get appropriate numeric column for context</body>
          </ownedComment>
          <ownedParameter xmi:id="_VseRwUVdEfCS7cth2SLu0w" name="context">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VseRwkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vsff4EVdEfCS7cth2SLu0w" name="resultSetToListEnhanced" visibility="private" method="_V-yJxkVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRIkVdEfCS7cth2SLu0w">
            <body>Enhanced result set formatting with better data types&#xD;
     * ADD THIS NEW METHOD OR REPLACE YOUR EXISTING resultSetToList() calls with resultSetToListEnhanced()</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vsff4UVdEfCS7cth2SLu0w" name="rs" type="_T9wtMEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vsff4kVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Vsff40VdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VsguAEVdEfCS7cth2SLu0w" name="getContextFromEntity" visibility="private" method="_V-yw0EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRJUVdEfCS7cth2SLu0w">
            <body>Get a context string based on entity type and name</body>
          </ownedComment>
          <ownedParameter xmi:id="_VsguAUVdEfCS7cth2SLu0w" name="entityType">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VsguAkVdEfCS7cth2SLu0w" name="entityName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VsguA0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VsguBEVdEfCS7cth2SLu0w" name="isFollowUpQuestion" visibility="private" method="_V-yw1EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRJkVdEfCS7cth2SLu0w">
            <body>Check if a message is a follow-up question</body>
          </ownedComment>
          <ownedParameter xmi:id="_VsguBUVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VsguBkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VshVEEVdEfCS7cth2SLu0w" name="handlePersonalQuery" visibility="private" method="_V-yw3UVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRKEVdEfCS7cth2SLu0w">
            <body>Handle personal queries by replacing placeholder with current user identifier</body>
          </ownedComment>
          <ownedParameter xmi:id="_VshVEUVdEfCS7cth2SLu0w" name="sqlQuery">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VshVEkVdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VshVE0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vsh8IEVdEfCS7cth2SLu0w" name="formatDate" visibility="private" method="_V-zX8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4JkVdEfCS7cth2SLu0w">
            <body>Helper method to format dates nicely</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vsh8IUVdEfCS7cth2SLu0w" name="dateString">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vsh8IkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vsh8I0VdEfCS7cth2SLu0w" name="generateEnhancedHelpResponse" visibility="private" method="_V-zX80VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4J0VdEfCS7cth2SLu0w">
            <body>Enhanced help response that includes Semi-FAQ examples</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vsh8JEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VsijMEVdEfCS7cth2SLu0w" name="isGreeting" visibility="private" method="_V-0mBUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4M0VdEfCS7cth2SLu0w">
            <body>Check if a message is a greeting</body>
          </ownedComment>
          <ownedParameter xmi:id="_VsijMUVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VsijMkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VsijM0VdEfCS7cth2SLu0w" name="isHelpRequest" visibility="private" method="_V-0mCEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4NEVdEfCS7cth2SLu0w">
            <body>Check if a message is a help request</body>
          </ownedComment>
          <ownedParameter xmi:id="_VsijNEVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VsjKQEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VsjKQUVdEfCS7cth2SLu0w" name="generateHelpResponse" visibility="private" method="_V-0mC0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4NUVdEfCS7cth2SLu0w">
            <body>Generate a help response</body>
          </ownedComment>
          <ownedParameter xmi:id="_VsjKQkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VsjKQ0VdEfCS7cth2SLu0w" name="resultSetToList" visibility="private" method="_V-0mDUVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4NkVdEfCS7cth2SLu0w">
            <body>Convert a ResultSet to a List of Maps</body>
          </ownedComment>
          <ownedParameter xmi:id="_VsjKREVdEfCS7cth2SLu0w" name="rs" type="_T9wtMEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VsjKRUVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VsjKRkVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VsjxUUVdEfCS7cth2SLu0w" name="processEmployeeQuery" visibility="private" method="_V-0mEUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4N0VdEfCS7cth2SLu0w">
            <body>Legacy method: Process employee queries</body>
          </ownedComment>
          <ownedParameter xmi:id="_VskYYEVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VskYYUVdEfCS7cth2SLu0w" name="currentUser" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VskYYkVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VskYY0VdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VskYZEVdEfCS7cth2SLu0w" name="processDepartmentQuery" visibility="private" method="_V-0mFkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4OEVdEfCS7cth2SLu0w">
            <body>Legacy method: Process department queries</body>
          </ownedComment>
          <ownedParameter xmi:id="_VskYZUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VskYZkVdEfCS7cth2SLu0w" name="currentUser" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VskYZ0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VskYaEVdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vsk_cEVdEfCS7cth2SLu0w" name="processLeaveQuery" visibility="private" method="_V-1NEEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4OUVdEfCS7cth2SLu0w">
            <body>Legacy method: Process leave queries</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vsk_cUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vsk_ckVdEfCS7cth2SLu0w" name="currentUser" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vsk_c0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vsk_dEVdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vsk_dUVdEfCS7cth2SLu0w" name="processCertificateQuery" visibility="private" method="_V-1NFUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4OkVdEfCS7cth2SLu0w">
            <body>Legacy method: Process certificate queries</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vsk_dkVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VslmgEVdEfCS7cth2SLu0w" name="currentUser" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VslmgUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VslmgkVdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vslmg0VdEfCS7cth2SLu0w" name="processProjectQuery" visibility="private" method="_V-1NGkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4O0VdEfCS7cth2SLu0w">
            <body>Legacy method: Process project queries</body>
          </ownedComment>
          <ownedParameter xmi:id="_VslmhEVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VslmhUVdEfCS7cth2SLu0w" name="currentUser" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VslmhkVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vslmh0VdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VslmiEVdEfCS7cth2SLu0w" name="processPositionsQuery" visibility="private" method="_V-1NH0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4PEVdEfCS7cth2SLu0w">
            <body>Legacy method: Process position/role queries</body>
          </ownedComment>
          <ownedParameter xmi:id="_VslmiUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VsmNkEVdEfCS7cth2SLu0w" name="currentUser" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VsmNkUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VsmNkkVdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VsmNk0VdEfCS7cth2SLu0w" name="processSalaryQuery" visibility="private" method="_V-1NJEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4PUVdEfCS7cth2SLu0w">
            <body>Legacy method: Process salary queries</body>
          </ownedComment>
          <ownedParameter xmi:id="_VsmNlEVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VsmNlUVdEfCS7cth2SLu0w" name="currentUser" type="_T9m8MUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VsmNlkVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VsmNl0VdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VsmNmEVdEfCS7cth2SLu0w" name="sendSimpleTextResponse" visibility="private" method="_V-1NKUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4PkVdEfCS7cth2SLu0w">
            <body>Send a simple text response</body>
          </ownedComment>
          <ownedParameter xmi:id="_VsmNmUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VsmNmkVdEfCS7cth2SLu0w" name="message">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vsm0oEVdEfCS7cth2SLu0w" name="sendTableResponse" visibility="private" method="_V-1NLEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_dfMEVdEfCS7cth2SLu0w">
            <body>Send a table response</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vsm0oUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vsm0okVdEfCS7cth2SLu0w" name="message">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vsm0o0VdEfCS7cth2SLu0w" name="data" type="_T9_9wUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VsnbsEVdEfCS7cth2SLu0w" name="sendTableResponseWithConfirmation" visibility="private" method="_V-10IEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_dfMUVdEfCS7cth2SLu0w">
            <body>Send a table response with confirmation option</body>
          </ownedComment>
          <ownedParameter xmi:id="_VsnbsUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VsnbskVdEfCS7cth2SLu0w" name="message">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vsnbs0VdEfCS7cth2SLu0w" name="data" type="_T9_9wUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VsoCwUVdEfCS7cth2SLu0w" name="sendErrorResponse" visibility="private" method="_V-10JEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_dfMkVdEfCS7cth2SLu0w">
            <body>Send an error response</body>
          </ownedComment>
          <ownedParameter xmi:id="_VsoCwkVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VsoCw0VdEfCS7cth2SLu0w" name="errorMessage">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vsop0EVdEfCS7cth2SLu0w" name="getConnection" visibility="private" method="_V-10J0VdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_dfM0VdEfCS7cth2SLu0w">
            <body>Get a database connection</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vsop0UVdEfCS7cth2SLu0w" type="_T9fncEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8JFcUVdEfCS7cth2SLu0w" name="handleLowConfidenceQuery" visibility="private" method="_V-w7tEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRFUVdEfCS7cth2SLu0w">
            <body>Handle low confidence queries with smart suggestions</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8JFckVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V8JFc0VdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8JFdEVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8JFdUVdEfCS7cth2SLu0w" name="handleUnrecognizedQueryWithSuggestions" visibility="private" method="_V-w7uEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRFkVdEfCS7cth2SLu0w">
            <body>Handle unrecognized queries with enhanced suggestions</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8JFdkVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V8JFd0VdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8JFeEVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8JsgEVdEfCS7cth2SLu0w" name="enhanceQueryInfoWithTokenization" visibility="private" method="_V-xisEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRF0VdEfCS7cth2SLu0w">
            <body>Enhance QueryInfo with advanced tokenization results</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8JsgUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8JsgkVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8Jsg0VdEfCS7cth2SLu0w" name="enhanceSQLWithTokenization" visibility="private" method="_V-xis0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRGEVdEfCS7cth2SLu0w">
            <body>Enhance SQL with temporal and numeric expressions</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8JshEVdEfCS7cth2SLu0w" name="sqlQuery">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V8JshUVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8JshkVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8Jsh0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8JsiEVdEfCS7cth2SLu0w" name="generateEnhancedContextFromQueryInfo" visibility="private" method="_V-xivkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRG0VdEfCS7cth2SLu0w">
            <body>Generate enhanced context from query info and tokenization</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8JsiUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8JsikVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8Jsi0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8JsjEVdEfCS7cth2SLu0w" name="handleEmptyResultsWithSuggestions" visibility="private" method="_V-xiwkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRHEVdEfCS7cth2SLu0w">
            <body>Handle empty results with enhanced suggestions</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8KTkEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8KTkUVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8KTkkVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8KTk0VdEfCS7cth2SLu0w" name="formatEnhancedResponse" visibility="private" method="_V-xixkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRHUVdEfCS7cth2SLu0w">
            <body>Format enhanced response based on query type and tokenization</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8KTlEVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8KTlUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8KTlkVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8KTl0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8K6oUVdEfCS7cth2SLu0w" name="handleCountResponseEnhanced" visibility="private" method="_V-xiy0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRHkVdEfCS7cth2SLu0w">
            <body>Handle count responses with enhanced formatting</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8K6okVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8K6o0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8K6pEVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8K6pUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8LhsEVdEfCS7cth2SLu0w" name="handleMinMaxResponseEnhanced" visibility="private" method="_V-xi0EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRH0VdEfCS7cth2SLu0w">
            <body>Handle min/max responses with enhanced formatting</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8LhsUVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8LhskVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8Lhs0VdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8LhtEVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8LhtkVdEfCS7cth2SLu0w" name="handleListResponseEnhanced" visibility="private" method="_V-xi1UVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRIEVdEfCS7cth2SLu0w">
            <body>Handle list responses with enhanced formatting</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8MIwEVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8MIwUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8MIwkVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8MIw0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8Mv0EVdEfCS7cth2SLu0w" name="sendEnhancedTableResponse" visibility="private" method="_V-xi30VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V8Mv0UVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8Mv0kVdEfCS7cth2SLu0w" name="message">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V8Mv00VdEfCS7cth2SLu0w" name="data" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8Mv1EVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8Mv1UVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8NW4EVdEfCS7cth2SLu0w" name="sendEnhancedTableResponseWithConfirmation" visibility="private" method="_V-yJwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V8NW4UVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8NW4kVdEfCS7cth2SLu0w" name="message">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V8NW40VdEfCS7cth2SLu0w" name="data" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8NW5EVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8NW5UVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8N98EVdEfCS7cth2SLu0w" name="executeSQLQuery" visibility="private" method="_V-yJykVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRI0VdEfCS7cth2SLu0w">
            <body>Execute a SQL query and format the result</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8N98UVdEfCS7cth2SLu0w" name="sqlQuery">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V8N98kVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8N980VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8N99EVdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8N99UVdEfCS7cth2SLu0w" name="executeEnhancedSQLQuery" visibility="private" method="_V-yw10VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRJ0VdEfCS7cth2SLu0w">
            <body>Enhanced executeEnhancedSQLQuery pentru TODO queries&#xD;
     * ADD this method or REPLACE your existing one</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8N99kVdEfCS7cth2SLu0w" name="sqlQuery">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V8N990VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8N9-EVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8N9-UVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8N9-kVdEfCS7cth2SLu0w" name="session" type="_T-DoIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8OlAEVdEfCS7cth2SLu0w" name="formatTODOResponse" visibility="private" method="_V-yw4UVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRKUVdEfCS7cth2SLu0w">
            <body>Enhanced response formatting for TODO queries</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8OlAUVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8OlAkVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8OlA0VdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8OlBEVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8PMEEVdEfCS7cth2SLu0w" name="handleRegulationSummaryResponse" visibility="private" method="_V-yw5kVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4IEVdEfCS7cth2SLu0w">
            <body>Handle regulation summary responses</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8PMEUVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8PMEkVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8PME0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8PzIEVdEfCS7cth2SLu0w" name="handlePolicyCheckResponse" visibility="private" method="_V-yw6kVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4IUVdEfCS7cth2SLu0w">
            <body>Handle policy check responses (pot să fac X?)</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8PzIUVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8PzIkVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8PzI0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8PzJUVdEfCS7cth2SLu0w" name="handleTaskSchedulingResponse" visibility="private" method="_V-zX4EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4IkVdEfCS7cth2SLu0w">
            <body>Handle task scheduling responses</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8PzJkVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8PzJ0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8PzKEVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8QaMUVdEfCS7cth2SLu0w" name="handleCalendarResponse" visibility="private" method="_V-zX5EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4I0VdEfCS7cth2SLu0w">
            <body>Handle calendar responses (next free day, holidays)</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8QaMkVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8QaM0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8QaNEVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8RBQUVdEfCS7cth2SLu0w" name="handleLegalHolidaysResponse" visibility="private" method="_V-zX6EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4JEVdEfCS7cth2SLu0w">
            <body>Handle legal holidays count response</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8RBQkVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8RBQ0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8RBREVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8RBRkVdEfCS7cth2SLu0w" name="handleMonthDaysResponse" visibility="private" method="_V-zX7EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4JUVdEfCS7cth2SLu0w">
            <body>Handle month days response</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8RBR0VdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8RBSEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8RBSUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8RoUUVdEfCS7cth2SLu0w" name="handlePersonalResponse" visibility="private" method="_V-zX9UVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4KEVdEfCS7cth2SLu0w">
            <body>Handle personal query responses</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8RoUkVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8RoU0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8RoVEVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8SPYEVdEfCS7cth2SLu0w" name="handleProjectResponse" visibility="private" method="_V-z-8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4KUVdEfCS7cth2SLu0w">
            <body>Handle project response</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8SPYUVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8SPYkVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8SPY0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8SPZUVdEfCS7cth2SLu0w" name="handleCertificateResponse" visibility="private" method="_V-z-9EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4KkVdEfCS7cth2SLu0w">
            <body>Handle certificate response</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8SPZkVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8SPZ0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8S2cEVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8S2ckVdEfCS7cth2SLu0w" name="handleLocationResponse" visibility="private" method="_V-z--EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4K0VdEfCS7cth2SLu0w">
            <body>Handle location response</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8S2c0VdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8S2dEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8S2dUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8TdgUVdEfCS7cth2SLu0w" name="handleAverageResponse" visibility="private" method="_V-z-_EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4LEVdEfCS7cth2SLu0w">
            <body>Handle average/statistical response</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8TdgkVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8Tdg0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8TdhEVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8UEkUVdEfCS7cth2SLu0w" name="handleTaskResponse" visibility="private" method="_V-z_AEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4LUVdEfCS7cth2SLu0w">
            <body>Handle task response</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8UEkkVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8UEk0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8UElEVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8UElkVdEfCS7cth2SLu0w" name="handleAvailabilityResponse" visibility="private" method="_V-z_BEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4LkVdEfCS7cth2SLu0w">
            <body>Handle availability response</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8UroEVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8UroUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8UrokVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8UrpEVdEfCS7cth2SLu0w" name="handleWorkModeResponse" visibility="private" method="_V-z_CEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4L0VdEfCS7cth2SLu0w">
            <body>Handle work mode response</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8UrpUVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8UrpkVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8Urp0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8VSsUVdEfCS7cth2SLu0w" name="handleEnhancedLeaveResponse" visibility="private" method="_V-z_DEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4MEVdEfCS7cth2SLu0w">
            <body>Enhanced leave response with better temporal context</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8VSskVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8VSs0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8VStEVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8VStUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8V5wUVdEfCS7cth2SLu0w" name="handleSQLError" visibility="private" method="_V-z_EUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4MUVdEfCS7cth2SLu0w">
            <body>Enhanced SQL error handling with helpful suggestions</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8V5wkVdEfCS7cth2SLu0w" name="e" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8V5w0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8V5xEVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8V5xUVdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8V5xkVdEfCS7cth2SLu0w" name="sendEnhancedTextResponse" visibility="private" method="_V-0mAEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_c4MkVdEfCS7cth2SLu0w">
            <body>Enhanced text response for TODO queries</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8V5x0VdEfCS7cth2SLu0w" name="out" type="_T-CaAEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8V5yEVdEfCS7cth2SLu0w" name="message">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V8V5yUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8V5ykVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V9OqkkVdEfCS7cth2SLu0w" name="formatEnhancedCountMessage" visibility="private" method="_V-xi2kVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRIUVdEfCS7cth2SLu0w">
            <body>Format enhanced count message</body>
          </ownedComment>
          <ownedParameter xmi:id="_V9Oqk0VdEfCS7cth2SLu0w" name="countResult" type="_V9OqkEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V9PRoEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V9PRoUVdEfCS7cth2SLu0w" name="tokenization" type="_V8IeYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V9PRokVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V9PRo0VdEfCS7cth2SLu0w" name="formatCountResponse" visibility="private" method="_V-yJz0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_cRJEVdEfCS7cth2SLu0w">
            <body>Format a count response based on entity type</body>
          </ownedComment>
          <ownedParameter xmi:id="_V9PRpEVdEfCS7cth2SLu0w" name="countResult" type="_V9OqkEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V9PRpUVdEfCS7cth2SLu0w" name="entityType">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V9PRpkVdEfCS7cth2SLu0w" name="entityName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V9P4sEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VsxzwEVdEfCS7cth2SLu0w" name="EnhancedNLPProcessor">
        <ownedComment xmi:id="_V_dfNEVdEfCS7cth2SLu0w">
          <body>Enhanced NLP Components to be added to the existing NaturalLanguageToSQLTranslator&#xD;
These components add advanced tokenization and semantic understanding capabilities</body>
        </ownedComment>
        <ownedAttribute xmi:id="_V95Y8EVdEfCS7cth2SLu0w" name="WORD_PATTERN" visibility="private" isLeaf="true" isStatic="true" type="_T-aNcUVdEfCS7cth2SLu0w" isReadOnly="true" association="_V__qsUVdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V95Y8UVdEfCS7cth2SLu0w" value="Pattern.compile(&quot;\\b\\w+\\b&quot;)"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V95Y8kVdEfCS7cth2SLu0w" name="NUMBER_PATTERN" visibility="private" isLeaf="true" isStatic="true" type="_T-aNcUVdEfCS7cth2SLu0w" isReadOnly="true" association="_WAARwEVdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V95Y80VdEfCS7cth2SLu0w" value="Pattern.compile(&quot;\\b\\d+\\b&quot;)"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V95Y9EVdEfCS7cth2SLu0w" name="YEAR_PATTERN" visibility="private" isLeaf="true" isStatic="true" type="_T-aNcUVdEfCS7cth2SLu0w" isReadOnly="true" association="_WAARw0VdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V95Y9UVdEfCS7cth2SLu0w" value="Pattern.compile(&quot;\\b(19|20)\\d{2}\\b&quot;)"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V96nEEVdEfCS7cth2SLu0w" name="DATE_PATTERN" visibility="private" isLeaf="true" isStatic="true" type="_T-aNcUVdEfCS7cth2SLu0w" isReadOnly="true" association="_WAA40UVdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V96nEUVdEfCS7cth2SLu0w" value="Pattern.compile(&quot;\\b\\d{1,2}[./\\-]\\d{1,2}[./\\-]\\d{2,4}\\b&quot;)"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V96nEkVdEfCS7cth2SLu0w" name="PHONE_PATTERN" visibility="private" isLeaf="true" isStatic="true" type="_T-aNcUVdEfCS7cth2SLu0w" isReadOnly="true" association="_WAA41EVdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V96nE0VdEfCS7cth2SLu0w" value="Pattern.compile(&quot;\\b0\\d{9}\\b&quot;)"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V96nFEVdEfCS7cth2SLu0w" name="EMAIL_PATTERN" visibility="private" isLeaf="true" isStatic="true" type="_T-aNcUVdEfCS7cth2SLu0w" isReadOnly="true" association="_WABf4UVdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V96nFUVdEfCS7cth2SLu0w" value="Pattern.compile(&quot;\\b[\\w._%+-]+@[\\w.-]+\\.[A-Z|a-z]{2,}\\b&quot;)"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V96nFkVdEfCS7cth2SLu0w" name="ENHANCED_SEMANTIC_ROLES" visibility="private" isLeaf="true" isStatic="true" type="_T9_9wUVdEfCS7cth2SLu0w" isReadOnly="true" association="_WABf5EVdEfCS7cth2SLu0w">
          <qualifier xmi:id="_V97OIkVdEfCS7cth2SLu0w">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </qualifier>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V97OIUVdEfCS7cth2SLu0w" value="new HashMap&lt;>()"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V971MEVdEfCS7cth2SLu0w" name="FUZZY_DEPARTMENT_VARIANTS" visibility="private" isLeaf="true" isStatic="true" type="_T9_9wUVdEfCS7cth2SLu0w" isReadOnly="true" association="_WACG8UVdEfCS7cth2SLu0w">
          <qualifier xmi:id="_V99DUUVdEfCS7cth2SLu0w">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </qualifier>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V99DUEVdEfCS7cth2SLu0w" value="new HashMap&lt;>()"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V99qYEVdEfCS7cth2SLu0w" name="ENHANCED_ENTITY_PATTERNS" visibility="private" isLeaf="true" isStatic="true" type="_VszB5UVdEfCS7cth2SLu0w" isReadOnly="true" association="_WACG9EVdEfCS7cth2SLu0w">
          <qualifier xmi:id="_V99qYkVdEfCS7cth2SLu0w">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </qualifier>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V99qYUVdEfCS7cth2SLu0w" value="new HashMap&lt;>()"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-2bMEVdEfCS7cth2SLu0w" name="_initializer1" specification="_Vsya0EVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>ENHANCED_SEMANTIC_ROLES.put(&quot;QUERY_INTENT&quot;, Arrays.asList(&#xD;
         &quot;cati&quot;, &quot;cate&quot;, &quot;care&quot;, &quot;ce&quot;, &quot;cum&quot;, &quot;cand&quot;, &quot;unde&quot;, &quot;de ce&quot;, &quot;pentru ce&quot;,&#xD;
         &quot;arata&quot;, &quot;afiseaza&quot;, &quot;listeaza&quot;, &quot;gaseste&quot;, &quot;cauta&quot;, &quot;verifica&quot;, &quot;spune&quot;,&#xD;
         &quot;da-mi&quot;, &quot;vreau&quot;, &quot;doresc&quot;, &quot;as dori&quot;, &quot;mi-ar placea&quot;, &quot;sunt curios&quot;,&#xD;
         &quot;ma intereseaza&quot;, &quot;vreau sa stiu&quot;, &quot;vreau sa aflu&quot;, &quot;poti sa&quot;, &quot;ai putea sa&quot;,&#xD;
         &quot;este posibil sa&quot;, &quot;se poate sa&quot;, &quot;exista&quot;, &quot;ai&quot;, &quot;aveti&quot;, &quot;avem&quot;&#xD;
     ));&#xD;
     &#xD;
     // Quantifiers and comparatives (expanded)&#xD;
     ENHANCED_SEMANTIC_ROLES.put(&quot;QUANTIFIER&quot;, Arrays.asList(&#xD;
         &quot;toti&quot;, &quot;toate&quot;, &quot;fiecare&quot;, &quot;unii&quot;, &quot;unele&quot;, &quot;multi&quot;, &quot;multe&quot;, &quot;putini&quot;, &quot;putine&quot;,&#xD;
         &quot;mai multi&quot;, &quot;mai putini&quot;, &quot;cei mai multi&quot;, &quot;cele mai multe&quot;, &quot;primul&quot;, &quot;ultimul&quot;,&#xD;
         &quot;maxim&quot;, &quot;minim&quot;, &quot;cel mai mare&quot;, &quot;cel mai mic&quot;, &quot;top&quot;, &quot;bottom&quot;, &quot;mai mare&quot;,&#xD;
         &quot;mai mic&quot;, &quot;peste&quot;, &quot;sub&quot;, &quot;intre&quot;, &quot;aproximativ&quot;, &quot;cam&quot;, &quot;circa&quot;, &quot;exact&quot;&#xD;
     ));&#xD;
     &#xD;
     // Enhanced time expressions&#xD;
     ENHANCED_SEMANTIC_ROLES.put(&quot;TIME_EXPR&quot;, Arrays.asList(&#xD;
         &quot;astazi&quot;, &quot;ieri&quot;, &quot;maine&quot;, &quot;alaltaieri&quot;, &quot;poimaine&quot;,&#xD;
         &quot;saptamana aceasta&quot;, &quot;saptamana trecuta&quot;, &quot;saptamana viitoare&quot;,&#xD;
         &quot;luna aceasta&quot;, &quot;luna trecuta&quot;, &quot;luna viitoare&quot;, &#xD;
         &quot;anul acesta&quot;, &quot;anul trecut&quot;, &quot;anul viitor&quot;,&#xD;
         &quot;acum&quot;, &quot;curent&quot;, &quot;actual&quot;, &quot;recent&quot;, &quot;demult&quot;, &quot;devreme&quot;, &quot;tarziu&quot;,&#xD;
         &quot;in trecut&quot;, &quot;in viitor&quot;, &quot;inainte&quot;, &quot;dupa&quot;, &quot;din&quot;, &quot;pana&quot;, &quot;de la&quot;, &quot;catre&quot;,&#xD;
         &quot;ianuarie&quot;, &quot;februarie&quot;, &quot;martie&quot;, &quot;aprilie&quot;, &quot;mai&quot;, &quot;iunie&quot;,&#xD;
         &quot;iulie&quot;, &quot;august&quot;, &quot;septembrie&quot;, &quot;octombrie&quot;, &quot;noiembrie&quot;, &quot;decembrie&quot;,&#xD;
         &quot;primavara&quot;, &quot;vara&quot;, &quot;toamna&quot;, &quot;iarna&quot;, &quot;sarbatori&quot;, &quot;craciun&quot;, &quot;paste&quot;, &quot;revelion&quot;&#xD;
     ));&#xD;
     &#xD;
     // Status indicators (expanded)&#xD;
     ENHANCED_SEMANTIC_ROLES.put(&quot;STATUS&quot;, Arrays.asList(&#xD;
         &quot;activ&quot;, &quot;inactiv&quot;, &quot;aprobat&quot;, &quot;neaprobat&quot;, &quot;respins&quot;, &quot;in asteptare&quot;, &quot;finalizat&quot;,&#xD;
         &quot;in progres&quot;, &quot;terminat&quot;, &quot;neterminat&quot;, &quot;complet&quot;, &quot;incomplet&quot;, &quot;disponibil&quot;,&#xD;
         &quot;ocupat&quot;, &quot;liber&quot;, &quot;suspendat&quot;, &quot;anulat&quot;, &quot;confirmat&quot;, &quot;planificat&quot;, &quot;programat&quot;,&#xD;
         &quot;urgent&quot;, &quot;normal&quot;, &quot;scazut&quot;, &quot;ridicat&quot;, &quot;critic&quot;, &quot;optional&quot;&#xD;
     ));&#xD;
     &#xD;
     // Relationship indicators (expanded)&#xD;
     ENHANCED_SEMANTIC_ROLES.put(&quot;RELATION&quot;, Arrays.asList(&#xD;
         &quot;din&quot;, &quot;in&quot;, &quot;de la&quot;, &quot;pana la&quot;, &quot;cu&quot;, &quot;fara&quot;, &quot;pentru&quot;, &quot;despre&quot;, &quot;asupra&quot;,&#xD;
         &quot;printre&quot;, &quot;intre&quot;, &quot;langa&quot;, &quot;peste&quot;, &quot;sub&quot;, &quot;inainte de&quot;, &quot;dupa&quot;, &quot;conform&quot;,&#xD;
         &quot;potrivit&quot;, &quot;referitor la&quot;, &quot;in legatura cu&quot;, &quot;privind&quot;, &quot;vizavi de&quot;&#xD;
     ));&#xD;
     &#xD;
     // Position/hierarchy indicators&#xD;
     ENHANCED_SEMANTIC_ROLES.put(&quot;HIERARCHY&quot;, Arrays.asList(&#xD;
         &quot;director&quot;, &quot;manager&quot;, &quot;sef&quot;, &quot;coordonator&quot;, &quot;responsabil&quot;, &quot;supervizor&quot;,&#xD;
         &quot;lider&quot;, &quot;administrator&quot;, &quot;specialist&quot;, &quot;expert&quot;, &quot;consultant&quot;, &quot;analist&quot;,&#xD;
         &quot;asistent&quot;, &quot;intern&quot;, &quot;stagiar&quot;, &quot;trainee&quot;, &quot;junior&quot;, &quot;senior&quot;, &quot;principal&quot;,&#xD;
         &quot;executiv&quot;, &quot;adjunct&quot;, &quot;vicepresedinte&quot;, &quot;presedinte&quot;, &quot;ceo&quot;, &quot;cto&quot;, &quot;cfo&quot;&#xD;
     ));&#xD;
     &#xD;
     // Department-specific terms&#xD;
     ENHANCED_SEMANTIC_ROLES.put(&quot;DEPT_SPECIFIC&quot;, Arrays.asList(&#xD;
         &quot;dezvoltare&quot;, &quot;programare&quot;, &quot;testare&quot;, &quot;analiza&quot;, &quot;design&quot;, &quot;arhitectura&quot;,&#xD;
         &quot;contabilitate&quot;, &quot;buget&quot;, &quot;facturare&quot;, &quot;incasari&quot;, &quot;plati&quot;, &quot;audit&quot;,&#xD;
         &quot;recrutare&quot;, &quot;selecție&quot;, &quot;formare&quot;, &quot;evaluare&quot;, &quot;salarizare&quot;, &quot;beneficii&quot;,&#xD;
         &quot;promovare&quot;, &quot;publicitate&quot;, &quot;vanzari&quot;, &quot;clienti&quot;, &quot;relatii publice&quot;,&#xD;
         &quot;productie&quot;, &quot;calitate&quot;, &quot;logistica&quot;, &quot;transport&quot;, &quot;depozitare&quot;&#xD;
     ));&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-2bMUVdEfCS7cth2SLu0w" name="_initializer2" specification="_Vsya1EVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>FUZZY_DEPARTMENT_VARIANTS.put(&quot;HR&quot;, Arrays.asList(&quot;hr&quot;, &quot;h.r&quot;, &quot;human resources&quot;, &quot;resurse umane&quot;, &quot;rh&quot;, &quot;personal&quot;));&#xD;
     FUZZY_DEPARTMENT_VARIANTS.put(&quot;IT&quot;, Arrays.asList(&quot;it&quot;, &quot;i.t&quot;, &quot;ict&quot;, &quot;informatica&quot;, &quot;tehnologia informatiei&quot;, &quot;tehnologie&quot;));&#xD;
     FUZZY_DEPARTMENT_VARIANTS.put(&quot;Finante&quot;, Arrays.asList(&quot;finante&quot;, &quot;financiar&quot;, &quot;contabilitate&quot;, &quot;contabile&quot;, &quot;fin&quot;, &quot;economic&quot;));&#xD;
     FUZZY_DEPARTMENT_VARIANTS.put(&quot;Marketing&quot;, Arrays.asList(&quot;marketing&quot;, &quot;mk&quot;, &quot;promovare&quot;, &quot;publicitate&quot;, &quot;pr&quot;, &quot;comunicare&quot;));&#xD;
     FUZZY_DEPARTMENT_VARIANTS.put(&quot;Vanzari&quot;, Arrays.asList(&quot;vanzari&quot;, &quot;sales&quot;, &quot;comercial&quot;, &quot;vinzari&quot;, &quot;vz&quot;));&#xD;
     FUZZY_DEPARTMENT_VARIANTS.put(&quot;Juridic&quot;, Arrays.asList(&quot;juridic&quot;, &quot;legal&quot;, &quot;drept&quot;, &quot;avocatura&quot;, &quot;jur&quot;));&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-2bMkVdEfCS7cth2SLu0w" name="_initializer3" specification="_VszB4UVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>ENHANCED_ENTITY_PATTERNS.put(&quot;SALARY&quot;, new EntityPattern(&#xD;
         Arrays.asList(&#xD;
             // Primary salary terms&#xD;
             &quot;salariu&quot;, &quot;salarii&quot;, &quot;salariul&quot;, &quot;salariile&quot;, &quot;salariatul&quot;, &quot;salariații&quot;,&#xD;
             &quot;remuneratie&quot;, &quot;remuneratii&quot;, &quot;venit&quot;, &quot;venituri&quot;, &quot;castig&quot;, &quot;castiguri&quot;,&#xD;
             &quot;plata&quot;, &quot;plati&quot;, &quot;compensatie&quot;, &quot;leafă&quot;, &quot;bani&quot;, &quot;sume&quot;,&#xD;
             &#xD;
             // Salary with MINMAX context - CRITICAL for detection&#xD;
             &quot;salariu maxim&quot;, &quot;salariu minim&quot;, &quot;salariul cel mai mare&quot;, &quot;salariul cel mai mic&quot;,&#xD;
             &quot;cele mai mari salarii&quot;, &quot;cele mai mici salarii&quot;, &quot;salarii mari&quot;, &quot;salarii mici&quot;,&#xD;
             &quot;venitul maxim&quot;, &quot;venitul minim&quot;, &quot;castigul maxim&quot;, &quot;castigul minim&quot;,&#xD;
             &#xD;
             // Department + salary patterns&#xD;
             &quot;salariu departament&quot;, &quot;salarii departament&quot;, &quot;salariile din&quot;,&#xD;
             &quot;venitul din&quot;, &quot;castigul din&quot;, &quot;plata din&quot;, &quot;remuneratia din&quot;,&#xD;
             &#xD;
             // Query patterns&#xD;
             &quot;ce salariu&quot;, &quot;care salariu&quot;, &quot;cat salariu&quot;, &quot;cât salariu&quot;,&#xD;
             &quot;cel mai mare salariu&quot;, &quot;cel mai mic salariu&quot;, &quot;cea mai mare plată&quot;&#xD;
         ),&#xD;
         Arrays.asList(&quot;tipuri&quot;, &quot;t&quot;, &quot;useri&quot;, &quot;u&quot;),&#xD;
         Arrays.asList(&quot;salariu&quot;, &quot;denumire&quot;, &quot;nume&quot;, &quot;prenume&quot;, &quot;departament&quot;),&#xD;
         0.95 // Very high confidence for salary queries&#xD;
     ));&#xD;
     &#xD;
     // UPDATED: Enhanced EMPLOYEE pattern with salary context boost&#xD;
     ENHANCED_ENTITY_PATTERNS.put(&quot;EMPLOYEE&quot;, new EntityPattern(&#xD;
         Arrays.asList(&#xD;
             // Primary employee terms&#xD;
             &quot;angajat&quot;, &quot;angajati&quot;, &quot;angajații&quot;, &quot;angajatul&quot;, &quot;angajata&quot;, &quot;angajate&quot;,&#xD;
             &quot;personal&quot;, &quot;personalul&quot;, &quot;persoanele&quot;, &quot;persoana&quot;,&#xD;
             &quot;salariat&quot;, &quot;salariati&quot;, &quot;salariații&quot;, &quot;salariatul&quot;, &quot;salariata&quot;, &quot;salariate&quot;,&#xD;
             &quot;lucrator&quot;, &quot;lucratori&quot;, &quot;lucrătorii&quot;, &quot;lucrătorul&quot;, &quot;lucrătoarea&quot;,&#xD;
             &quot;om&quot;, &quot;oameni&quot;, &quot;oamenii&quot;, &quot;omul&quot;,&#xD;
             &quot;coleg&quot;, &quot;colegi&quot;, &quot;colegii&quot;, &quot;colegul&quot;, &quot;colega&quot;, &quot;colegele&quot;,&#xD;
             &quot;membru&quot;, &quot;membri&quot;, &quot;membrii&quot;, &quot;membrul&quot;, &quot;membra&quot;, &quot;membrele&quot;,&#xD;
             &quot;staff&quot;, &quot;stafful&quot;, &quot;echipa&quot;, &quot;echipele&quot;,&#xD;
             &#xD;
             // Employee with salary context - BOOST for salary queries&#xD;
             &quot;angajatii cu&quot;, &quot;angajații cu&quot;, &quot;personalul cu&quot;, &quot;salariații cu&quot;,&#xD;
             &quot;cei cu&quot;, &quot;persoanele cu&quot;, &quot;oamenii cu&quot;, &quot;colegii cu&quot;,&#xD;
             &quot;angajat cu salariu&quot;, &quot;personal cu salariu&quot;, &quot;salariat cu venit&quot;,&#xD;
             &#xD;
             // Employee query patterns&#xD;
             &quot;care sunt angajati&quot;, &quot;care sunt angajații&quot;, &quot;cine sunt angajatii&quot;, &#xD;
             &quot;cati angajati&quot;, &quot;câți angajați&quot;, &quot;lista angajati&quot;, &quot;lista angajaților&quot;,&#xD;
             &quot;angajatii din&quot;, &quot;angajații din&quot;, &quot;personalul din&quot;, &quot;colegii din&quot;,&#xD;
             &quot;cei din&quot;, &quot;persoanele din&quot;, &quot;membrii din&quot;, &quot;oamenii din&quot;,&#xD;
             &quot;care lucreaza&quot;, &quot;care lucrează&quot;, &quot;cine lucreaza&quot;, &quot;cine lucrează&quot;,&#xD;
             &#xD;
             // Employment context&#xD;
             &quot;resursa umana&quot;, &quot;resurse umane&quot;, &quot;resursele umane&quot;,&#xD;
             &quot;muncitor&quot;, &quot;muncitori&quot;, &quot;muncitorii&quot;, &quot;muncitorul&quot;,&#xD;
             &quot;colaborator&quot;, &quot;colaboratori&quot;, &quot;colaboratorii&quot;, &quot;colaboratorul&quot;&#xD;
         ),&#xD;
         Arrays.asList(&quot;useri&quot;, &quot;u&quot;),&#xD;
         Arrays.asList(&quot;nume&quot;, &quot;prenume&quot;, &quot;email&quot;, &quot;telefon&quot;, &quot;data_nasterii&quot;, &quot;adresa&quot;, &quot;cnp&quot;, &quot;data_ang&quot;),&#xD;
         0.90 // High confidence for employee queries&#xD;
     ));&#xD;
     &#xD;
     // Keep other existing patterns with adjusted priorities&#xD;
     ENHANCED_ENTITY_PATTERNS.put(&quot;POSITION&quot;, new EntityPattern(&#xD;
         Arrays.asList(&#xD;
             &quot;functie&quot;, &quot;functii&quot;, &quot;pozitie&quot;, &quot;pozitii&quot;, &quot;post&quot;, &quot;posturi&quot;, &quot;rol&quot;, &quot;roluri&quot;, &#xD;
             &quot;job&quot;, &quot;joburi&quot;, &quot;tip&quot;, &quot;tipuri&quot;, &quot;specializare&quot;, &quot;ocupatie&quot;, &quot;meserie&quot;,&#xD;
             &quot;ce functii&quot;, &quot;care functii&quot;, &quot;cate functii&quot;, &quot;functii departament&quot;,&#xD;
             &quot;ierarhie&quot;, &quot;nivel&quot;, &quot;rang&quot;, &quot;grad&quot;, &quot;statut&quot;, &quot;titlu&quot;,&#xD;
             &quot;director&quot;, &quot;manager&quot;, &quot;sef&quot;, &quot;coordonator&quot;, &quot;responsabil&quot;, &quot;supervizor&quot;&#xD;
         ),&#xD;
         Arrays.asList(&quot;tipuri&quot;, &quot;t&quot;, &quot;denumiri_pozitii&quot;, &quot;dp&quot;),&#xD;
         Arrays.asList(&quot;tip&quot;, &quot;denumire&quot;, &quot;salariu&quot;, &quot;ierarhie&quot;, &quot;descriere&quot;, &quot;denumire_completa&quot;),&#xD;
         0.85&#xD;
     ));&#xD;
     &#xD;
     ENHANCED_ENTITY_PATTERNS.put(&quot;DEPARTMENT&quot;, new EntityPattern(&#xD;
         Arrays.asList(&#xD;
             &quot;departament&quot;, &quot;departamente&quot;, &quot;departamentul&quot;, &quot;departamentului&quot;,&#xD;
             &quot;divizie&quot;, &quot;sectie&quot;, &quot;grup&quot;, &quot;unitate&quot;, &quot;directie&quot;,&#xD;
             &quot;ce departamente&quot;, &quot;care departamente&quot;, &quot;cate departamente&quot;&#xD;
         ),&#xD;
         Arrays.asList(&quot;departament&quot;, &quot;d&quot;),&#xD;
         Arrays.asList(&quot;nume_dep&quot;, &quot;id_dep&quot;),&#xD;
         0.70&#xD;
     ));&#xD;
     &#xD;
     ENHANCED_ENTITY_PATTERNS.put(&quot;LEAVE&quot;, new EntityPattern(&#xD;
         Arrays.asList(&quot;concediu&quot;, &quot;concedii&quot;, &quot;vacanta&quot;, &quot;absenta&quot;, &quot;invoiri&quot;, &quot;zi libera&quot;, &quot;odihnă&quot;, &quot;medical&quot;, &quot;maternitate&quot;),&#xD;
         Arrays.asList(&quot;concedii&quot;, &quot;c&quot;),&#xD;
         Arrays.asList(&quot;start_c&quot;, &quot;end_c&quot;, &quot;motiv&quot;, &quot;locatie&quot;, &quot;durata&quot;, &quot;status&quot;, &quot;tip&quot;),&#xD;
         0.80&#xD;
     ));&#xD;
     &#xD;
     ENHANCED_ENTITY_PATTERNS.put(&quot;PROJECT&quot;, new EntityPattern(&#xD;
         Arrays.asList(&quot;proiect&quot;, &quot;proiecte&quot;, &quot;task&quot;, &quot;sarcina&quot;, &quot;obiectiv&quot;, &quot;activitate&quot;, &quot;lucrare&quot;),&#xD;
         Arrays.asList(&quot;proiecte&quot;, &quot;p&quot;, &quot;tasks&quot;, &quot;t&quot;),&#xD;
         Arrays.asList(&quot;nume&quot;, &quot;descriere&quot;, &quot;start&quot;, &quot;end&quot;, &quot;supervizor&quot;),&#xD;
         0.70&#xD;
     ));&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-4QYEVdEfCS7cth2SLu0w" name="generateEnhancedSuggestions" specification="_Vs36YEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-4QYUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-4QYkVdEfCS7cth2SLu0w" name="entityConfidences" type="_UAkwoUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-4QY0VdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-4QZEVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;String> suggestions = new ArrayList&lt;>();&#xD;
     &#xD;
     // Find the most confident entity&#xD;
     String topEntity = entityConfidences.entrySet().stream()&#xD;
         .max(Map.Entry.comparingByValue())&#xD;
         .map(Map.Entry::getKey)&#xD;
         .orElse(null);&#xD;
     &#xD;
     if (topEntity != null) {&#xD;
         switch (topEntity) {&#xD;
             case &quot;POSITION&quot;:&#xD;
                 suggestions.add(&quot;Ce funcții există în departamentul IT?&quot;);&#xD;
                 suggestions.add(&quot;Care sunt pozițiile din departamentul HR?&quot;);&#xD;
                 suggestions.add(&quot;Câte tipuri de funcții avem în firmă?&quot;);&#xD;
                 suggestions.add(&quot;Care sunt funcțiile cel mai bine plătite?&quot;);&#xD;
                 suggestions.add(&quot;Ce specializări există în fiecare departament?&quot;);&#xD;
                 suggestions.add(&quot;Arată-mi ierarhia funcțiilor din Marketing&quot;);&#xD;
                 break;&#xD;
                 &#xD;
             case &quot;EMPLOYEE&quot;:&#xD;
                 suggestions.add(&quot;Câți angajați sunt în departamentul IT?&quot;);&#xD;
                 suggestions.add(&quot;Arată-mi angajații cu cel mai mare salariu&quot;);&#xD;
                 suggestions.add(&quot;Care angajați au fost angajați anul acesta?&quot;);&#xD;
                 suggestions.add(&quot;Ce funcții au angajații din HR?&quot;);&#xD;
                 break;&#xD;
                 &#xD;
             case &quot;DEPARTMENT&quot;:&#xD;
                 suggestions.add(&quot;Ce departamente există în firmă?&quot;);&#xD;
                 suggestions.add(&quot;Care departament are cei mai mulți angajați?&quot;);&#xD;
                 suggestions.add(&quot;Unde se află departamentul Marketing?&quot;);&#xD;
                 suggestions.add(&quot;Câți manageri sunt în fiecare departament?&quot;);&#xD;
                 break;&#xD;
                 &#xD;
             case &quot;LEAVE&quot;:&#xD;
                 suggestions.add(&quot;Cine este în concediu astăzi?&quot;);&#xD;
                 suggestions.add(&quot;Câte concedii au fost aprobate luna aceasta?&quot;);&#xD;
                 suggestions.add(&quot;Care sunt concediile din decembrie?&quot;);&#xD;
                 suggestions.add(&quot;Arată-mi concediile medicale din acest an&quot;);&#xD;
                 break;&#xD;
                 &#xD;
             case &quot;PROJECT&quot;:&#xD;
                 suggestions.add(&quot;Ce proiecte active avem?&quot;);&#xD;
                 suggestions.add(&quot;Cine lucrează la proiectul ERP?&quot;);&#xD;
                 suggestions.add(&quot;Care proiecte se termină luna aceasta?&quot;);&#xD;
                 suggestions.add(&quot;Câte task-uri sunt în progres?&quot;);&#xD;
                 break;&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     // Add general suggestions if no specific entity detected or for low confidence&#xD;
     if (suggestions.isEmpty()) {&#xD;
         suggestions.add(&quot;Ce funcții există în departamentul IT?&quot;);&#xD;
         suggestions.add(&quot;Câți angajați sunt în firmă?&quot;);&#xD;
         suggestions.add(&quot;Ce departamente există?&quot;);&#xD;
         suggestions.add(&quot;Cine este în concediu astăzi?&quot;);&#xD;
         suggestions.add(&quot;Ce proiecte active avem?&quot;);&#xD;
     }&#xD;
     &#xD;
     return suggestions;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-43c0VdEfCS7cth2SLu0w" name="enhancedNormalizeText" specification="_Vs8y40VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-43dEVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-43dUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>if (text == null || text.trim().isEmpty()) {&#xD;
         return &quot;&quot;;&#xD;
     }&#xD;
     &#xD;
     String result = text.toLowerCase().trim();&#xD;
     &#xD;
     // Enhanced Romanian diacritics normalization&#xD;
     Map&lt;String, String> diacritics = new HashMap&lt;>();&#xD;
     diacritics.put(&quot;ă&quot;, &quot;a&quot;);&#xD;
     diacritics.put(&quot;â&quot;, &quot;a&quot;);&#xD;
     diacritics.put(&quot;î&quot;, &quot;i&quot;);&#xD;
     diacritics.put(&quot;ș&quot;, &quot;s&quot;);&#xD;
     diacritics.put(&quot;ț&quot;, &quot;t&quot;);&#xD;
     diacritics.put(&quot;Ă&quot;, &quot;a&quot;);&#xD;
     diacritics.put(&quot;Â&quot;, &quot;a&quot;);&#xD;
     diacritics.put(&quot;Î&quot;, &quot;i&quot;);&#xD;
     diacritics.put(&quot;Ș&quot;, &quot;s&quot;);&#xD;
     diacritics.put(&quot;Ț&quot;, &quot;t&quot;);&#xD;
     &#xD;
     for (Map.Entry&lt;String, String> entry : diacritics.entrySet()) {&#xD;
         result = result.replace(entry.getKey(), entry.getValue());&#xD;
     }&#xD;
     &#xD;
     // Handle common Romanian contractions and variations&#xD;
     Map&lt;String, String> contractions = new HashMap&lt;>();&#xD;
     contractions.put(&quot;n-am&quot;, &quot;nu am&quot;);&#xD;
     contractions.put(&quot;n-are&quot;, &quot;nu are&quot;);&#xD;
     contractions.put(&quot;n-au&quot;, &quot;nu au&quot;);&#xD;
     contractions.put(&quot;s-a&quot;, &quot;se a&quot;);&#xD;
     contractions.put(&quot;m-am&quot;, &quot;ma am&quot;);&#xD;
     contractions.put(&quot;v-ati&quot;, &quot;va ati&quot;);&#xD;
     contractions.put(&quot;departamentul&quot;, &quot;departament&quot;);&#xD;
     contractions.put(&quot;angajatii&quot;, &quot;angajati&quot;);&#xD;
     contractions.put(&quot;concediile&quot;, &quot;concedii&quot;);&#xD;
     contractions.put(&quot;salariile&quot;, &quot;salarii&quot;);&#xD;
     &#xD;
     for (Map.Entry&lt;String, String> entry : contractions.entrySet()) {&#xD;
         result = result.replace(entry.getKey(), entry.getValue());&#xD;
     }&#xD;
     &#xD;
     // Normalize punctuation and separators&#xD;
     result = result.replaceAll(&quot;[\\-_.,:;!?\&quot;']+&quot;, &quot; &quot;);&#xD;
     result = result.replaceAll(&quot;\\s+&quot;, &quot; &quot;);&#xD;
     &#xD;
     return result.trim();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-43dkVdEfCS7cth2SLu0w" name="performAdvancedTokenization" specification="_Vs9Z8UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-43d0VdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-43eEVdEfCS7cth2SLu0w" type="_Vs4hcUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>AdvancedTokenization result = new AdvancedTokenization();&#xD;
     &#xD;
     // Original tokenization&#xD;
     List&lt;String> originalTokens = extractTokens(query);&#xD;
     result.setOriginalTokens(originalTokens);&#xD;
     &#xD;
     // Normalize the query&#xD;
     String normalized = enhancedNormalizeText(query);&#xD;
     List&lt;String> normalizedTokens = extractTokens(normalized);&#xD;
     result.setNormalizedTokens(normalizedTokens);&#xD;
     &#xD;
     // Create semantic tokens (group related words)&#xD;
     List&lt;String> semanticTokens = createAdvancedSemanticTokens(normalizedTokens);&#xD;
     result.setSemanticTokens(semanticTokens);&#xD;
     &#xD;
     // Identify semantic roles&#xD;
     Map&lt;String, List&lt;String>> roles = identifyEnhancedSemanticRoles(normalized);&#xD;
     result.setSemanticRoles(roles);&#xD;
     &#xD;
     // Calculate entity confidences&#xD;
     Map&lt;String, Double> entityConfidences = calculateEntityConfidences(normalized);&#xD;
     result.setEntityConfidences(entityConfidences);&#xD;
     &#xD;
     // Extract temporal expressions&#xD;
     List&lt;TemporalExpression> temporalExpressions = extractTemporalExpressions(normalized);&#xD;
     result.setTemporalExpressions(temporalExpressions);&#xD;
     &#xD;
     // Extract numeric expressions&#xD;
     List&lt;NumericExpression> numericExpressions = extractNumericExpressions(normalized);&#xD;
     result.setNumericExpressions(numericExpressions);&#xD;
     &#xD;
     return result;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-43eUVdEfCS7cth2SLu0w" name="extractTokens" specification="_Vs9Z80VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-43ekVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-43e0VdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-43fEVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;String> tokens = new ArrayList&lt;>();&#xD;
     &#xD;
     Matcher wordMatcher = WORD_PATTERN.matcher(text);&#xD;
     while (wordMatcher.find()) {&#xD;
         tokens.add(wordMatcher.group());&#xD;
     }&#xD;
     &#xD;
     return tokens;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-43fUVdEfCS7cth2SLu0w" name="createAdvancedSemanticTokens" specification="_Vs-BAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-43fkVdEfCS7cth2SLu0w" name="tokens" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-43f0VdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-43gEVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;String> semanticTokens = new ArrayList&lt;>();&#xD;
     &#xD;
     for (int i = 0; i &lt; tokens.size(); i++) {&#xD;
         String token = tokens.get(i);&#xD;
         &#xD;
         // Check for 4-grams first&#xD;
         if (i &lt; tokens.size() - 3) {&#xD;
             String fourgram = String.join(&quot; &quot;, tokens.subList(i, i + 4));&#xD;
             if (isAdvancedSemanticUnit(fourgram)) {&#xD;
                 semanticTokens.add(fourgram);&#xD;
                 i += 3;&#xD;
                 continue;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // Check for trigrams&#xD;
         if (i &lt; tokens.size() - 2) {&#xD;
             String trigram = String.join(&quot; &quot;, tokens.subList(i, i + 3));&#xD;
             if (isAdvancedSemanticUnit(trigram)) {&#xD;
                 semanticTokens.add(trigram);&#xD;
                 i += 2;&#xD;
                 continue;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // Check for bigrams&#xD;
         if (i &lt; tokens.size() - 1) {&#xD;
             String bigram = token + &quot; &quot; + tokens.get(i + 1);&#xD;
             if (isAdvancedSemanticUnit(bigram)) {&#xD;
                 semanticTokens.add(bigram);&#xD;
                 i++;&#xD;
                 continue;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         semanticTokens.add(token);&#xD;
     }&#xD;
     &#xD;
     return semanticTokens;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-43gUVdEfCS7cth2SLu0w" name="isAdvancedSemanticUnit" specification="_Vs-oEUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-43gkVdEfCS7cth2SLu0w" name="phrase">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-43g0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>// Enhanced multi-word expressions&#xD;
     String[] multiWordExpressions = {&#xD;
         &quot;resurse umane&quot;, &quot;tehnologia informatiei&quot;, &quot;cercetare si dezvoltare&quot;,&#xD;
         &quot;business intelligence&quot;, &quot;control intern&quot;, &quot;servicii generale&quot;,&#xD;
         &quot;customer support&quot;, &quot;suport clienti&quot;, &quot;relatii publice&quot;,&#xD;
         &quot;cel mai mare&quot;, &quot;cel mai mic&quot;, &quot;cei mai multi&quot;, &quot;cele mai multe&quot;,&#xD;
         &quot;mai mare decat&quot;, &quot;mai mic decat&quot;, &quot;egal cu&quot;, &quot;diferit de&quot;,&#xD;
         &quot;saptamana aceasta&quot;, &quot;saptamana trecuta&quot;, &quot;saptamana viitoare&quot;,&#xD;
         &quot;luna aceasta&quot;, &quot;luna trecuta&quot;, &quot;luna viitoare&quot;,&#xD;
         &quot;anul acesta&quot;, &quot;anul trecut&quot;, &quot;anul viitor&quot;,&#xD;
         &quot;in asteptare&quot;, &quot;in progres&quot;, &quot;zi libera&quot;, &quot;ore suplimentare&quot;,&#xD;
         &quot;data angajarii&quot;, &quot;data nasterii&quot;, &quot;data modificarii&quot;,&#xD;
         &quot;care departament&quot;, &quot;cati angajati&quot;, &quot;ce functii&quot;, &quot;ce tipuri&quot;,&#xD;
         &quot;cum sa&quot;, &quot;unde sa&quot;, &quot;cand sa&quot;, &quot;de ce sa&quot;, &quot;pentru ce sa&quot;&#xD;
     };&#xD;
     &#xD;
     for (String expr : multiWordExpressions) {&#xD;
         if (phrase.equals(expr)) return true;&#xD;
     }&#xD;
     &#xD;
     // Check against known department variants&#xD;
     for (List&lt;String> variants : FUZZY_DEPARTMENT_VARIANTS.values()) {&#xD;
         if (variants.contains(phrase)) return true;&#xD;
     }&#xD;
     &#xD;
     return false;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-43hEVdEfCS7cth2SLu0w" name="identifyEnhancedSemanticRoles" specification="_Vs-oFEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-43hUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-43hkVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, List&lt;String>> roles = new HashMap&lt;>();&#xD;
     &#xD;
     for (Map.Entry&lt;String, List&lt;String>> roleEntry : ENHANCED_SEMANTIC_ROLES.entrySet()) {&#xD;
         String role = roleEntry.getKey();&#xD;
         List&lt;String> keywords = roleEntry.getValue();&#xD;
         List&lt;String> matchedTokens = new ArrayList&lt;>();&#xD;
         &#xD;
         for (String keyword : keywords) {&#xD;
             if (query.contains(keyword)) {&#xD;
                 matchedTokens.add(keyword);&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         if (!matchedTokens.isEmpty()) {&#xD;
             roles.put(role, matchedTokens);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return roles;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-43h0VdEfCS7cth2SLu0w" name="calculateEntityConfidences" specification="_Vs_PIUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-43iEVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-43iUVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Double> confidences = new HashMap&lt;>();&#xD;
     &#xD;
     for (Map.Entry&lt;String, EntityPattern> entry : ENHANCED_ENTITY_PATTERNS.entrySet()) {&#xD;
         String entityType = entry.getKey();&#xD;
         EntityPattern pattern = entry.getValue();&#xD;
         &#xD;
         double confidence = pattern.calculateConfidence(query);&#xD;
         if (confidence > 0.1) { // Only include if above threshold&#xD;
             confidences.put(entityType, confidence);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return confidences;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-43ikVdEfCS7cth2SLu0w" name="extractTemporalExpressions" specification="_Vs_PJUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-43i0VdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-43jEVdEfCS7cth2SLu0w" type="_Vs6WoEVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-43jUVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;TemporalExpression> expressions = new ArrayList&lt;>();&#xD;
     &#xD;
     // Predefined temporal expressions&#xD;
     String[] temporalPatterns = {&#xD;
         &quot;astazi&quot;, &quot;azi&quot;, &quot;ieri&quot;, &quot;maine&quot;, &quot;alaltaieri&quot;, &quot;poimaine&quot;,&#xD;
         &quot;saptamana aceasta&quot;, &quot;saptamana trecuta&quot;, &quot;saptamana viitoare&quot;,&#xD;
         &quot;luna aceasta&quot;, &quot;luna trecuta&quot;, &quot;luna viitoare&quot;,&#xD;
         &quot;anul acesta&quot;, &quot;anul trecut&quot;, &quot;anul viitor&quot;,&#xD;
         &quot;primavara&quot;, &quot;vara&quot;, &quot;toamna&quot;, &quot;iarna&quot;&#xD;
     };&#xD;
     &#xD;
     for (String pattern : temporalPatterns) {&#xD;
         if (query.contains(pattern)) {&#xD;
             expressions.add(new TemporalExpression(pattern, &quot;relative&quot;));&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     // Extract date patterns&#xD;
     Matcher dateMatcher = DATE_PATTERN.matcher(query);&#xD;
     while (dateMatcher.find()) {&#xD;
         expressions.add(new TemporalExpression(dateMatcher.group(), &quot;absolute&quot;));&#xD;
     }&#xD;
     &#xD;
     // Extract year patterns&#xD;
     Matcher yearMatcher = YEAR_PATTERN.matcher(query);&#xD;
     while (yearMatcher.find()) {&#xD;
         expressions.add(new TemporalExpression(yearMatcher.group(), &quot;absolute&quot;));&#xD;
     }&#xD;
     &#xD;
     return expressions;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-5egEVdEfCS7cth2SLu0w" name="extractNumericExpressions" specification="_Vs_2MkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-5egUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-5egkVdEfCS7cth2SLu0w" type="_Vs7kwUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-5eg0VdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;NumericExpression> expressions = new ArrayList&lt;>();&#xD;
     &#xD;
     // Extract numbers with potential operators&#xD;
     Matcher numberMatcher = NUMBER_PATTERN.matcher(query);&#xD;
     while (numberMatcher.find()) {&#xD;
         String numberStr = numberMatcher.group();&#xD;
         try {&#xD;
             Integer value = Integer.parseInt(numberStr);&#xD;
             &#xD;
             // Determine operator from context&#xD;
             String operator = &quot;=&quot;; // default&#xD;
             int start = numberMatcher.start();&#xD;
             int end = numberMatcher.end();&#xD;
             &#xD;
             // Look for operator context around the number&#xD;
             String before = &quot;&quot;;&#xD;
             String after = &quot;&quot;;&#xD;
             &#xD;
             if (start > 5) {&#xD;
                 before = query.substring(Math.max(0, start - 10), start);&#xD;
             }&#xD;
             if (end &lt; query.length() - 5) {&#xD;
                 after = query.substring(end, Math.min(query.length(), end + 10));&#xD;
             }&#xD;
             &#xD;
             String context = before + &quot; &quot; + after;&#xD;
             &#xD;
             if (context.contains(&quot;peste&quot;) || context.contains(&quot;mai mare&quot;) || context.contains(&quot;minim&quot;)) {&#xD;
                 operator = &quot;>&quot;;&#xD;
             } else if (context.contains(&quot;sub&quot;) || context.contains(&quot;mai mic&quot;) || context.contains(&quot;maxim&quot;)) {&#xD;
                 operator = &quot;&lt;&quot;;&#xD;
             } else if (context.contains(&quot;intre&quot;)) {&#xD;
                 operator = &quot;BETWEEN&quot;;&#xD;
             }&#xD;
             &#xD;
             expressions.add(new NumericExpression(numberStr, value, operator));&#xD;
             &#xD;
         } catch (NumberFormatException e) {&#xD;
             // Skip invalid numbers&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return expressions;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-5ehEVdEfCS7cth2SLu0w" name="detectDepartmentWithFuzzyMatching" specification="_VtAdQEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-5ehUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-5ehkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>// Direct mapping check first&#xD;
     for (Map.Entry&lt;String, List&lt;String>> entry : FUZZY_DEPARTMENT_VARIANTS.entrySet()) {&#xD;
         String department = entry.getKey();&#xD;
         List&lt;String> variants = entry.getValue();&#xD;
         &#xD;
         for (String variant : variants) {&#xD;
             if (query.contains(variant)) {&#xD;
                 return department;&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     // Fuzzy matching for partial matches&#xD;
     for (Map.Entry&lt;String, List&lt;String>> entry : FUZZY_DEPARTMENT_VARIANTS.entrySet()) {&#xD;
         String department = entry.getKey();&#xD;
         List&lt;String> variants = entry.getValue();&#xD;
         &#xD;
         for (String variant : variants) {&#xD;
             if (calculateFuzzyMatch(query, variant) > 0.7) {&#xD;
                 return department;&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return null;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-5eh0VdEfCS7cth2SLu0w" name="calculateFuzzyMatch" specification="_VtAdQ0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-5eiEVdEfCS7cth2SLu0w" name="text1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-5eiUVdEfCS7cth2SLu0w" name="text2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-5eikVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>if (text1.equals(text2)) return 1.0;&#xD;
     if (text1.contains(text2) || text2.contains(text1)) return 0.8;&#xD;
     &#xD;
     // Simple Levenshtein-based scoring&#xD;
     int maxLen = Math.max(text1.length(), text2.length());&#xD;
     if (maxLen == 0) return 1.0;&#xD;
     &#xD;
     int distance = calculateLevenshteinDistance(text1, text2);&#xD;
     return 1.0 - (double) distance / maxLen;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-5ei0VdEfCS7cth2SLu0w" name="calculateLevenshteinDistance" specification="_VtAdR0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-5ejEVdEfCS7cth2SLu0w" name="str1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-5ejUVdEfCS7cth2SLu0w" name="str2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-5ejkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>int[][] dp = new int[str1.length() + 1][str2.length() + 1];&#xD;
     &#xD;
     for (int i = 0; i &lt;= str1.length(); i++) {&#xD;
         for (int j = 0; j &lt;= str2.length(); j++) {&#xD;
             if (i == 0) {&#xD;
                 dp[i][j] = j;&#xD;
             } else if (j == 0) {&#xD;
                 dp[i][j] = i;&#xD;
             } else {&#xD;
                 dp[i][j] = Math.min(Math.min(&#xD;
                     dp[i - 1][j] + 1,&#xD;
                     dp[i][j - 1] + 1),&#xD;
                     dp[i - 1][j - 1] + (str1.charAt(i - 1) == str2.charAt(j - 1) ? 0 : 1)&#xD;
                 );&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return dp[str1.length()][str2.length()];&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-5ej0VdEfCS7cth2SLu0w" name="classifyQueryWithConfidence" specification="_VtBEUUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-5ekEVdEfCS7cth2SLu0w" name="entityConfidences" type="_UAkwoUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-5ekUVdEfCS7cth2SLu0w" name="threshold">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-5ekkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>double maxConfidence = entityConfidences.values().stream()&#xD;
         .mapToDouble(Double::doubleValue)&#xD;
         .max()&#xD;
         .orElse(0.0);&#xD;
     &#xD;
     if (maxConfidence >= threshold) {&#xD;
         return &quot;HIGH_CONFIDENCE&quot;;&#xD;
     } else if (maxConfidence >= threshold * 0.6) {&#xD;
         return &quot;MEDIUM_CONFIDENCE&quot;;&#xD;
     } else {&#xD;
         return &quot;LOW_CONFIDENCE&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vsya0EVdEfCS7cth2SLu0w" name="_initializer1" isStatic="true" method="_V-2bMEVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_Vsya0UVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_Vsya0kVdEfCS7cth2SLu0w" key="init"/>
          </eAnnotations>
        </ownedOperation>
        <ownedOperation xmi:id="_Vsya1EVdEfCS7cth2SLu0w" name="_initializer2" isStatic="true" method="_V-2bMUVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_Vsya1UVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_Vsya1kVdEfCS7cth2SLu0w" key="init"/>
          </eAnnotations>
        </ownedOperation>
        <ownedOperation xmi:id="_VszB4UVdEfCS7cth2SLu0w" name="_initializer3" isStatic="true" method="_V-2bMkVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VszB4kVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VszB40VdEfCS7cth2SLu0w" key="init"/>
          </eAnnotations>
        </ownedOperation>
        <ownedOperation xmi:id="_Vs36YEVdEfCS7cth2SLu0w" name="generateEnhancedSuggestions" isStatic="true" method="_V-4QYEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_dfPkVdEfCS7cth2SLu0w">
            <body>Generate enhanced suggestions with better position support</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vs36YUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vs36YkVdEfCS7cth2SLu0w" name="entityConfidences" type="_UAkwoUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vs36Y0VdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Vs36ZEVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vs8y40VdEfCS7cth2SLu0w" name="enhancedNormalizeText" isStatic="true" method="_V-43c0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_eGQEVdEfCS7cth2SLu0w">
            <body>Enhanced text normalization with advanced Romanian language support</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vs8y5EVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vs9Z8EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vs9Z8UVdEfCS7cth2SLu0w" name="performAdvancedTokenization" isStatic="true" method="_V-43dkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_eGQUVdEfCS7cth2SLu0w">
            <body>Advanced tokenization with semantic analysis</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vs9Z8kVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V8ZkIEVdEfCS7cth2SLu0w" type="_Vs4hcUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vs9Z80VdEfCS7cth2SLu0w" name="extractTokens" visibility="private" isStatic="true" method="_V-43eUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_eGQkVdEfCS7cth2SLu0w">
            <body>Extract tokens using multiple patterns</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vs9Z9EVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vs9Z9UVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Vs9Z9kVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vs-BAEVdEfCS7cth2SLu0w" name="createAdvancedSemanticTokens" visibility="private" isStatic="true" method="_V-43fUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_eGQ0VdEfCS7cth2SLu0w">
            <body>Create advanced semantic tokens with better grouping</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vs-BAUVdEfCS7cth2SLu0w" name="tokens" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vs-BAkVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Vs-BA0VdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vs-oEUVdEfCS7cth2SLu0w" name="isAdvancedSemanticUnit" visibility="private" isStatic="true" method="_V-43gUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_eGREVdEfCS7cth2SLu0w">
            <body>Check if a phrase is an advanced semantic unit</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vs-oEkVdEfCS7cth2SLu0w" name="phrase">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vs-oE0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vs-oFEVdEfCS7cth2SLu0w" name="identifyEnhancedSemanticRoles" visibility="private" isStatic="true" method="_V-43hEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_eGRUVdEfCS7cth2SLu0w">
            <body>Identify enhanced semantic roles</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vs-oFUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vs-oFkVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vs_PIUVdEfCS7cth2SLu0w" name="calculateEntityConfidences" visibility="private" isStatic="true" method="_V-43h0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_eGRkVdEfCS7cth2SLu0w">
            <body>Calculate entity confidences using enhanced patterns</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vs_PIkVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vs_PI0VdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vs_PJUVdEfCS7cth2SLu0w" name="extractTemporalExpressions" visibility="private" isStatic="true" method="_V-43ikVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_eGR0VdEfCS7cth2SLu0w">
            <body>Extract temporal expressions with advanced parsing</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vs_PJkVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vs_2MEVdEfCS7cth2SLu0w" type="_Vs6WoEVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Vs_2MUVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vs_2MkVdEfCS7cth2SLu0w" name="extractNumericExpressions" visibility="private" isStatic="true" method="_V-5egEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_eGSEVdEfCS7cth2SLu0w">
            <body>Extract numeric expressions with context</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vs_2M0VdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vs_2NEVdEfCS7cth2SLu0w" type="_Vs7kwUVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Vs_2NUVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtAdQEVdEfCS7cth2SLu0w" name="detectDepartmentWithFuzzyMatching" isStatic="true" method="_V-5ehEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_eGSUVdEfCS7cth2SLu0w">
            <body>Enhanced department detection with fuzzy matching</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtAdQUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtAdQkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtAdQ0VdEfCS7cth2SLu0w" name="calculateFuzzyMatch" visibility="private" isStatic="true" method="_V-5eh0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_eGSkVdEfCS7cth2SLu0w">
            <body>Calculate fuzzy match score between two strings</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtAdREVdEfCS7cth2SLu0w" name="text1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtAdRUVdEfCS7cth2SLu0w" name="text2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtAdRkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtAdR0VdEfCS7cth2SLu0w" name="calculateLevenshteinDistance" visibility="private" isStatic="true" method="_V-5ei0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_eGS0VdEfCS7cth2SLu0w">
            <body>Calculate Levenshtein distance between two strings</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtAdSEVdEfCS7cth2SLu0w" name="str1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtAdSUVdEfCS7cth2SLu0w" name="str2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtBEUEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtBEUUVdEfCS7cth2SLu0w" name="classifyQueryWithConfidence" isStatic="true" method="_V-5ej0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_eGTEVdEfCS7cth2SLu0w">
            <body>Confidence-based query classification</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtBEUkVdEfCS7cth2SLu0w" name="entityConfidences" type="_UAkwoUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtBEU0VdEfCS7cth2SLu0w" name="threshold">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtBEVEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <nestedClassifier xmi:type="uml:Class" xmi:id="_VszB5UVdEfCS7cth2SLu0w" name="EntityPattern">
          <eAnnotations xmi:id="_Vszo8EVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_Vszo8UVdEfCS7cth2SLu0w" key="static"/>
          </eAnnotations>
          <ownedAttribute xmi:id="_V99qY0VdEfCS7cth2SLu0w" name="keywords" visibility="private" isOrdered="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V99qZEVdEfCS7cth2SLu0w" value="*"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V99qZkVdEfCS7cth2SLu0w" name="tableAliases" visibility="private" isOrdered="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V9-RcEVdEfCS7cth2SLu0w" value="*"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V9-RckVdEfCS7cth2SLu0w" name="attributes" visibility="private" isOrdered="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V9-Rc0VdEfCS7cth2SLu0w" value="*"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V9-RdUVdEfCS7cth2SLu0w" name="baseConfidence" visibility="private">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-2bM0VdEfCS7cth2SLu0w" name="EntityPattern" specification="_Vszo8kVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-2bNEVdEfCS7cth2SLu0w" name="keywords" type="_T9_9wUVdEfCS7cth2SLu0w"/>
            <ownedParameter xmi:id="_V-2bNUVdEfCS7cth2SLu0w" name="tableAliases" type="_T9_9wUVdEfCS7cth2SLu0w"/>
            <ownedParameter xmi:id="_V-2bNkVdEfCS7cth2SLu0w" name="attributes" type="_T9_9wUVdEfCS7cth2SLu0w"/>
            <ownedParameter xmi:id="_V-2bN0VdEfCS7cth2SLu0w" name="baseConfidence">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-2bOEVdEfCS7cth2SLu0w" type="_VszB5UVdEfCS7cth2SLu0w" direction="return"/>
            <language>java</language>
            <body>this.keywords = keywords;&#xD;
         this.tableAliases = tableAliases;&#xD;
         this.attributes = attributes;&#xD;
         this.baseConfidence = baseConfidence;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-2bOUVdEfCS7cth2SLu0w" name="calculateConfidence" specification="_Vs1eIUVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-2bOkVdEfCS7cth2SLu0w" name="query">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-2bO0VdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
            </ownedParameter>
            <language>java</language>
            <body>double confidence = 0.0;&#xD;
         int matches = 0;&#xD;
         &#xD;
         for (String keyword : keywords) {&#xD;
             if (query.contains(keyword)) {&#xD;
                 matches++;&#xD;
                 &#xD;
                 // Calculate base keyword score&#xD;
                 double keywordScore = (keyword.length() / 10.0) * baseConfidence;&#xD;
                 &#xD;
                 // SPECIAL BOOST for salary-related keywords&#xD;
                 if (isSalaryKeyword(keyword)) {&#xD;
                     keywordScore *= 2.0; // 100% boost for salary keywords&#xD;
                 }&#xD;
                 &#xD;
                 // SPECIAL BOOST for employee-related keywords&#xD;
                 if (isEmployeeKeyword(keyword)) {&#xD;
                     keywordScore *= 1.8; // 80% boost for employee keywords&#xD;
                 }&#xD;
                 &#xD;
                 // SPECIAL BOOST for position-related keywords&#xD;
                 if (isPositionKeyword(keyword)) {&#xD;
                     keywordScore *= 1.5; // 50% boost for position keywords&#xD;
                 }&#xD;
                 &#xD;
                 // BOOST for multi-word salary patterns&#xD;
                 if (isSalaryQueryPattern(keyword)) {&#xD;
                     keywordScore *= 2.5; // 150% boost for clear salary query patterns&#xD;
                 }&#xD;
                 &#xD;
                 // BOOST for multi-word employee patterns&#xD;
                 if (isEmployeeQueryPattern(keyword)) {&#xD;
                     keywordScore *= 2.0; // 100% boost for clear employee query patterns&#xD;
                 }&#xD;
                 &#xD;
                 confidence += keywordScore;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // Normalize by number of keywords and add bonus for multiple matches&#xD;
         if (matches > 0) {&#xD;
             confidence = (confidence / keywords.size()) + (matches > 1 ? 0.15 : 0.0);&#xD;
         }&#xD;
         &#xD;
         // MAJOR BOOST for salary + department combinations&#xD;
         if (hasSalaryDepartmentCombination(query)) {&#xD;
             confidence += 0.6; // Major boost for &quot;salariu departament&quot; type queries&#xD;
         }&#xD;
         &#xD;
         // MAJOR BOOST for salary + minmax combinations&#xD;
         if (hasSalaryMinMaxCombination(query)) {&#xD;
             confidence += 0.7; // Huge boost for &quot;salariu minim/maxim&quot; type queries&#xD;
         }&#xD;
         &#xD;
         // MAJOR BOOST for employee + department combinations&#xD;
         if (hasEmployeeDepartmentCombination(query)) {&#xD;
             confidence += 0.5; // Major boost for &quot;angajați din departament&quot; type queries&#xD;
         }&#xD;
         &#xD;
         // MAJOR BOOST for position + department combinations&#xD;
         if (hasPositionDepartmentCombination(query)) {&#xD;
             confidence += 0.4; // Major boost for &quot;functii departament&quot; type queries&#xD;
         }&#xD;
         &#xD;
         // Boost for temporal expressions&#xD;
         if (hasTemporalIndicators(query)) {&#xD;
             confidence += 0.3;&#xD;
         }&#xD;
         &#xD;
         // Boost for numeric expressions&#xD;
         if (hasNumericIndicators(query)) {&#xD;
             confidence += 0.2;&#xD;
         }&#xD;
         &#xD;
         return Math.min(confidence, 1.0);&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-2bPEVdEfCS7cth2SLu0w" name="isSalaryKeyword" specification="_Vs2FMEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-2bPUVdEfCS7cth2SLu0w" name="keyword">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-2bPkVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
            <language>java</language>
            <body>String[] coreSalaryWords = {&#xD;
             &quot;salariu&quot;, &quot;salarii&quot;, &quot;salariul&quot;, &quot;venit&quot;, &quot;venituri&quot;, &quot;castig&quot;, &quot;castiguri&quot;,&#xD;
             &quot;plata&quot;, &quot;compensatie&quot;, &quot;remuneratie&quot;, &quot;leafă&quot;, &quot;bani&quot;&#xD;
         };&#xD;
         &#xD;
         for (String salWord : coreSalaryWords) {&#xD;
             if (keyword.contains(salWord)) {&#xD;
                 return true;&#xD;
             }&#xD;
         }&#xD;
         return false;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-2bP0VdEfCS7cth2SLu0w" name="isSalaryQueryPattern" specification="_Vs2FM0VdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-2bQEVdEfCS7cth2SLu0w" name="keyword">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-2bQUVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
            <language>java</language>
            <body>String[] salaryPatterns = {&#xD;
             &quot;salariu maxim&quot;, &quot;salariu minim&quot;, &quot;salariul cel mai mare&quot;, &quot;salariul cel mai mic&quot;,&#xD;
             &quot;cele mai mari salarii&quot;, &quot;cele mai mici salarii&quot;, &quot;salarii mari&quot;, &quot;salarii mici&quot;,&#xD;
             &quot;salariu departament&quot;, &quot;salarii departament&quot;, &quot;venitul maxim&quot;, &quot;castigul minim&quot;&#xD;
         };&#xD;
         &#xD;
         for (String pattern : salaryPatterns) {&#xD;
             if (keyword.equals(pattern)) {&#xD;
                 return true;&#xD;
             }&#xD;
         }&#xD;
         return false;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-2bQkVdEfCS7cth2SLu0w" name="hasSalaryDepartmentCombination" specification="_Vs2FNkVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-2bQ0VdEfCS7cth2SLu0w" name="query">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-2bREVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
            <language>java</language>
            <body>String[] salaryWords = {&#xD;
             &quot;salariu&quot;, &quot;salarii&quot;, &quot;venit&quot;, &quot;venituri&quot;, &quot;castig&quot;, &quot;castiguri&quot;,&#xD;
             &quot;plata&quot;, &quot;compensatie&quot;, &quot;remuneratie&quot;, &quot;leafă&quot;&#xD;
         };&#xD;
         &#xD;
         String[] departmentWords = {&#xD;
             &quot;departament&quot;, &quot;departamentul&quot;, &quot;din departament&quot;,&#xD;
             &quot;it&quot;, &quot;hr&quot;, &quot;finante&quot;, &quot;marketing&quot;, &quot;juridic&quot;&#xD;
         };&#xD;
         &#xD;
         boolean hasSalary = false;&#xD;
         boolean hasDepartment = false;&#xD;
         &#xD;
         for (String sal : salaryWords) {&#xD;
             if (query.contains(sal)) {&#xD;
                 hasSalary = true;&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         for (String dept : departmentWords) {&#xD;
             if (query.contains(dept)) {&#xD;
                 hasDepartment = true;&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         return hasSalary &amp;&amp; hasDepartment;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-2bRUVdEfCS7cth2SLu0w" name="hasSalaryMinMaxCombination" specification="_Vs2FOUVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-2bRkVdEfCS7cth2SLu0w" name="query">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-2bR0VdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
            <language>java</language>
            <body>String[] salaryWords = {&#xD;
             &quot;salariu&quot;, &quot;salarii&quot;, &quot;venit&quot;, &quot;venituri&quot;, &quot;castig&quot;, &quot;castiguri&quot;&#xD;
         };&#xD;
         &#xD;
         String[] minMaxWords = {&#xD;
             &quot;maxim&quot;, &quot;minim&quot;, &quot;cel mai mare&quot;, &quot;cel mai mic&quot;, &quot;cea mai mare&quot;, &quot;cea mai mica&quot;,&#xD;
             &quot;mari&quot;, &quot;mici&quot;, &quot;mare&quot;, &quot;mic&quot;, &quot;maximum&quot;, &quot;minimum&quot;&#xD;
         };&#xD;
         &#xD;
         boolean hasSalary = false;&#xD;
         boolean hasMinMax = false;&#xD;
         &#xD;
         for (String sal : salaryWords) {&#xD;
             if (query.contains(sal)) {&#xD;
                 hasSalary = true;&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         for (String minMax : minMaxWords) {&#xD;
             if (query.contains(minMax)) {&#xD;
                 hasMinMax = true;&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         return hasSalary &amp;&amp; hasMinMax;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-3pUEVdEfCS7cth2SLu0w" name="isEmployeeKeyword" specification="_Vs2sQEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-3pUUVdEfCS7cth2SLu0w" name="keyword">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-3pUkVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
            <language>java</language>
            <body>String[] coreEmployeeWords = {&#xD;
             &quot;angajat&quot;, &quot;angajati&quot;, &quot;angajații&quot;, &quot;personalul&quot;, &quot;personal&quot;,&#xD;
             &quot;salariat&quot;, &quot;salariati&quot;, &quot;salariații&quot;, &quot;lucrator&quot;, &quot;lucratori&quot;,&#xD;
             &quot;om&quot;, &quot;oameni&quot;, &quot;coleg&quot;, &quot;colegi&quot;, &quot;membru&quot;, &quot;membri&quot;, &quot;staff&quot;&#xD;
         };&#xD;
         &#xD;
         for (String empWord : coreEmployeeWords) {&#xD;
             if (keyword.contains(empWord)) {&#xD;
                 return true;&#xD;
             }&#xD;
         }&#xD;
         return false;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-3pU0VdEfCS7cth2SLu0w" name="isEmployeeQueryPattern" specification="_Vs2sQ0VdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-3pVEVdEfCS7cth2SLu0w" name="keyword">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-3pVUVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
            <language>java</language>
            <body>String[] employeePatterns = {&#xD;
             &quot;care sunt angajati&quot;, &quot;care sunt angajații&quot;, &quot;cine sunt angajatii&quot;,&#xD;
             &quot;angajatii din&quot;, &quot;angajații din&quot;, &quot;personalul din&quot;, &quot;colegii din&quot;,&#xD;
             &quot;cei din&quot;, &quot;persoanele din&quot;, &quot;membrii din&quot;, &quot;oamenii din&quot;,&#xD;
             &quot;care lucreaza&quot;, &quot;care lucrează&quot;, &quot;cine lucreaza&quot;, &quot;cine lucrează&quot;&#xD;
         };&#xD;
         &#xD;
         for (String pattern : employeePatterns) {&#xD;
             if (keyword.equals(pattern)) {&#xD;
                 return true;&#xD;
             }&#xD;
         }&#xD;
         return false;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-3pVkVdEfCS7cth2SLu0w" name="hasEmployeeDepartmentCombination" specification="_Vs2sRkVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-3pV0VdEfCS7cth2SLu0w" name="query">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-3pWEVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
            <language>java</language>
            <body>String[] employeeWords = {&#xD;
             &quot;angajat&quot;, &quot;angajati&quot;, &quot;angajații&quot;, &quot;personal&quot;, &quot;personalul&quot;,&#xD;
             &quot;salariat&quot;, &quot;salariati&quot;, &quot;salariații&quot;, &quot;lucrator&quot;, &quot;lucratori&quot;,&#xD;
             &quot;om&quot;, &quot;oameni&quot;, &quot;coleg&quot;, &quot;colegi&quot;, &quot;membru&quot;, &quot;membri&quot;, &quot;staff&quot;,&#xD;
             &quot;care sunt&quot;, &quot;cine sunt&quot;, &quot;cei din&quot;, &quot;persoanele din&quot;&#xD;
         };&#xD;
         &#xD;
         String[] departmentWords = {&#xD;
             &quot;departament&quot;, &quot;departamentul&quot;, &quot;din departament&quot;,&#xD;
             &quot;it&quot;, &quot;hr&quot;, &quot;finante&quot;, &quot;marketing&quot;, &quot;juridic&quot;&#xD;
         };&#xD;
         &#xD;
         boolean hasEmployee = false;&#xD;
         boolean hasDepartment = false;&#xD;
         &#xD;
         for (String emp : employeeWords) {&#xD;
             if (query.contains(emp)) {&#xD;
                 hasEmployee = true;&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         for (String dept : departmentWords) {&#xD;
             if (query.contains(dept)) {&#xD;
                 hasDepartment = true;&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         return hasEmployee &amp;&amp; hasDepartment;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-3pWUVdEfCS7cth2SLu0w" name="isPositionKeyword" specification="_Vs2sSUVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-3pWkVdEfCS7cth2SLu0w" name="keyword">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-3pW0VdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
            <language>java</language>
            <body>String[] corePositionWords = {&#xD;
             &quot;functie&quot;, &quot;functii&quot;, &quot;pozitie&quot;, &quot;pozitii&quot;, &quot;post&quot;, &quot;posturi&quot;, &#xD;
             &quot;rol&quot;, &quot;roluri&quot;, &quot;tip&quot;, &quot;tipuri&quot;, &quot;specializare&quot;, &quot;ierarhie&quot;,&#xD;
             &quot;director&quot;, &quot;manager&quot;, &quot;sef&quot;, &quot;specialist&quot;, &quot;expert&quot;, &quot;consultant&quot;&#xD;
         };&#xD;
         &#xD;
         for (String posWord : corePositionWords) {&#xD;
             if (keyword.contains(posWord)) {&#xD;
                 return true;&#xD;
             }&#xD;
         }&#xD;
         return false;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-3pXEVdEfCS7cth2SLu0w" name="hasPositionDepartmentCombination" specification="_Vs3TUEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-3pXUVdEfCS7cth2SLu0w" name="query">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-3pXkVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
            <language>java</language>
            <body>String[] positionWords = {&quot;functii&quot;, &quot;pozitii&quot;, &quot;tipuri&quot;, &quot;roluri&quot;, &quot;specializari&quot;};&#xD;
         String[] departmentWords = {&quot;departament&quot;, &quot;it&quot;, &quot;hr&quot;, &quot;finante&quot;, &quot;marketing&quot;};&#xD;
         &#xD;
         boolean hasPosition = false;&#xD;
         boolean hasDepartment = false;&#xD;
         &#xD;
         for (String pos : positionWords) {&#xD;
             if (query.contains(pos)) {&#xD;
                 hasPosition = true;&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         for (String dept : departmentWords) {&#xD;
             if (query.contains(dept)) {&#xD;
                 hasDepartment = true;&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         return hasPosition &amp;&amp; hasDepartment;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-3pX0VdEfCS7cth2SLu0w" name="hasTemporalIndicators" specification="_Vs3TU0VdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-3pYEVdEfCS7cth2SLu0w" name="query">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-3pYUVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
            <language>java</language>
            <body>String[] temporalWords = {&#xD;
             &quot;astazi&quot;, &quot;azi&quot;, &quot;ieri&quot;, &quot;maine&quot;, &quot;luna&quot;, &quot;an&quot;, &quot;anul&quot;, &quot;saptamana&quot;,&#xD;
             &quot;aceasta&quot;, &quot;acesta&quot;, &quot;trecuta&quot;, &quot;trecut&quot;, &quot;viitoare&quot;, &quot;viitor&quot;,&#xD;
             &quot;decembrie&quot;, &quot;ianuarie&quot;, &quot;februarie&quot;, &quot;martie&quot;, &quot;aprilie&quot;, &quot;mai&quot;, &quot;iunie&quot;,&#xD;
             &quot;iulie&quot;, &quot;august&quot;, &quot;septembrie&quot;, &quot;octombrie&quot;, &quot;noiembrie&quot;, &quot;craciun&quot;, &quot;paste&quot;&#xD;
         };&#xD;
         &#xD;
         for (String temporal : temporalWords) {&#xD;
             if (query.contains(temporal)) {&#xD;
                 return true;&#xD;
             }&#xD;
         }&#xD;
         return false;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-3pYkVdEfCS7cth2SLu0w" name="hasNumericIndicators" specification="_Vs3TVkVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-3pY0VdEfCS7cth2SLu0w" name="query">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-3pZEVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
            <language>java</language>
            <body>// Check for numbers&#xD;
         if (query.matches(&quot;.*\\d+.*&quot;)) {&#xD;
             return true;&#xD;
         }&#xD;
         &#xD;
         // Check for comparative words&#xD;
         String[] numericWords = {&quot;peste&quot;, &quot;sub&quot;, &quot;mai mare&quot;, &quot;mai mic&quot;, &quot;minim&quot;, &quot;maxim&quot;};&#xD;
         for (String numeric : numericWords) {&#xD;
             if (query.contains(numeric)) {&#xD;
                 return true;&#xD;
             }&#xD;
         }&#xD;
         return false;&#xD;
     </body>
          </ownedBehavior>
          <ownedOperation xmi:id="_Vszo8kVdEfCS7cth2SLu0w" name="EntityPattern" method="_V-2bM0VdEfCS7cth2SLu0w">
            <eAnnotations xmi:id="_Vs0QAEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_Vs0QAUVdEfCS7cth2SLu0w" key="create"/>
            </eAnnotations>
            <ownedParameter xmi:id="_Vszo80VdEfCS7cth2SLu0w" name="keywords" type="_T9_9wUVdEfCS7cth2SLu0w"/>
            <ownedParameter xmi:id="_Vszo9EVdEfCS7cth2SLu0w" name="tableAliases" type="_T9_9wUVdEfCS7cth2SLu0w"/>
            <ownedParameter xmi:id="_Vszo9UVdEfCS7cth2SLu0w" name="attributes" type="_T9_9wUVdEfCS7cth2SLu0w"/>
            <ownedParameter xmi:id="_Vszo9kVdEfCS7cth2SLu0w" name="baseConfidence">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs0QAkVdEfCS7cth2SLu0w" type="_VszB5UVdEfCS7cth2SLu0w" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:id="_Vs1eIUVdEfCS7cth2SLu0w" name="calculateConfidence" method="_V-2bOUVdEfCS7cth2SLu0w">
            <ownedComment xmi:id="_V_dfNUVdEfCS7cth2SLu0w">
              <body>Enhanced confidence calculation with salary query boosting</body>
            </ownedComment>
            <ownedParameter xmi:id="_Vs1eIkVdEfCS7cth2SLu0w" name="query">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs1eI0VdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_Vs2FMEVdEfCS7cth2SLu0w" name="isSalaryKeyword" visibility="private" method="_V-2bPEVdEfCS7cth2SLu0w">
            <ownedComment xmi:id="_V_dfNkVdEfCS7cth2SLu0w">
              <body>Check if keyword is salary-related</body>
            </ownedComment>
            <ownedParameter xmi:id="_Vs2FMUVdEfCS7cth2SLu0w" name="keyword">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs2FMkVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_Vs2FM0VdEfCS7cth2SLu0w" name="isSalaryQueryPattern" visibility="private" method="_V-2bP0VdEfCS7cth2SLu0w">
            <ownedComment xmi:id="_V_dfN0VdEfCS7cth2SLu0w">
              <body>Check if keyword is a clear salary query pattern</body>
            </ownedComment>
            <ownedParameter xmi:id="_Vs2FNEVdEfCS7cth2SLu0w" name="keyword">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs2FNUVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_Vs2FNkVdEfCS7cth2SLu0w" name="hasSalaryDepartmentCombination" visibility="private" method="_V-2bQkVdEfCS7cth2SLu0w">
            <ownedComment xmi:id="_V_dfOEVdEfCS7cth2SLu0w">
              <body>Check for salary + department combinations</body>
            </ownedComment>
            <ownedParameter xmi:id="_Vs2FN0VdEfCS7cth2SLu0w" name="query">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs2FOEVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_Vs2FOUVdEfCS7cth2SLu0w" name="hasSalaryMinMaxCombination" visibility="private" method="_V-2bRUVdEfCS7cth2SLu0w">
            <ownedComment xmi:id="_V_dfOUVdEfCS7cth2SLu0w">
              <body>Check for salary + minmax combinations</body>
            </ownedComment>
            <ownedParameter xmi:id="_Vs2FOkVdEfCS7cth2SLu0w" name="query">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs2FO0VdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_Vs2sQEVdEfCS7cth2SLu0w" name="isEmployeeKeyword" visibility="private" method="_V-3pUEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_Vs2sQUVdEfCS7cth2SLu0w" name="keyword">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs2sQkVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_Vs2sQ0VdEfCS7cth2SLu0w" name="isEmployeeQueryPattern" visibility="private" method="_V-3pU0VdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_Vs2sREVdEfCS7cth2SLu0w" name="keyword">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs2sRUVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_Vs2sRkVdEfCS7cth2SLu0w" name="hasEmployeeDepartmentCombination" visibility="private" method="_V-3pVkVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_Vs2sR0VdEfCS7cth2SLu0w" name="query">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs2sSEVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_Vs2sSUVdEfCS7cth2SLu0w" name="isPositionKeyword" visibility="private" method="_V-3pWUVdEfCS7cth2SLu0w">
            <ownedComment xmi:id="_V_dfOkVdEfCS7cth2SLu0w">
              <body>Check if keyword is position-related</body>
            </ownedComment>
            <ownedParameter xmi:id="_Vs2sSkVdEfCS7cth2SLu0w" name="keyword">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs2sS0VdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_Vs3TUEVdEfCS7cth2SLu0w" name="hasPositionDepartmentCombination" visibility="private" method="_V-3pXEVdEfCS7cth2SLu0w">
            <ownedComment xmi:id="_V_dfO0VdEfCS7cth2SLu0w">
              <body>Check for position + department combinations</body>
            </ownedComment>
            <ownedParameter xmi:id="_Vs3TUUVdEfCS7cth2SLu0w" name="query">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs3TUkVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_Vs3TU0VdEfCS7cth2SLu0w" name="hasTemporalIndicators" visibility="private" method="_V-3pX0VdEfCS7cth2SLu0w">
            <ownedComment xmi:id="_V_dfPEVdEfCS7cth2SLu0w">
              <body>Check if query has temporal indicators</body>
            </ownedComment>
            <ownedParameter xmi:id="_Vs3TVEVdEfCS7cth2SLu0w" name="query">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs3TVUVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_Vs3TVkVdEfCS7cth2SLu0w" name="hasNumericIndicators" visibility="private" method="_V-3pYkVdEfCS7cth2SLu0w">
            <ownedComment xmi:id="_V_dfPUVdEfCS7cth2SLu0w">
              <body>Check if query has numeric indicators</body>
            </ownedComment>
            <ownedParameter xmi:id="_Vs3TV0VdEfCS7cth2SLu0w" name="query">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs3TWEVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
          </ownedOperation>
        </nestedClassifier>
        <nestedClassifier xmi:type="uml:Class" xmi:id="_Vs4hcUVdEfCS7cth2SLu0w" name="AdvancedTokenization">
          <eAnnotations xmi:id="_Vs4hckVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_Vs4hc0VdEfCS7cth2SLu0w" key="static"/>
          </eAnnotations>
          <ownedComment xmi:id="_V_dfP0VdEfCS7cth2SLu0w">
            <body>Advanced tokenization result</body>
          </ownedComment>
          <ownedAttribute xmi:id="_V9-4gUVdEfCS7cth2SLu0w" name="originalTokens" isOrdered="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V9-4gkVdEfCS7cth2SLu0w" value="*"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V9_fkEVdEfCS7cth2SLu0w" name="normalizedTokens" isOrdered="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V9_fkUVdEfCS7cth2SLu0w" value="*"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V9_fkkVdEfCS7cth2SLu0w" name="semanticTokens" isOrdered="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V9_fk0VdEfCS7cth2SLu0w" value="*"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V9_flEVdEfCS7cth2SLu0w" name="semanticRoles" type="_T9_9wUVdEfCS7cth2SLu0w" association="_WACuAEVdEfCS7cth2SLu0w">
            <qualifier xmi:id="_V-AGoUVdEfCS7cth2SLu0w">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </qualifier>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V-AGokVdEfCS7cth2SLu0w" name="entityConfidences">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
            <qualifier xmi:id="_V-AGo0VdEfCS7cth2SLu0w">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </qualifier>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V-AtsEVdEfCS7cth2SLu0w" name="temporalExpressions" type="_Vs6WoEVdEfCS7cth2SLu0w" isOrdered="true" association="_WACuA0VdEfCS7cth2SLu0w">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-AtsUVdEfCS7cth2SLu0w" value="*"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V-AtskVdEfCS7cth2SLu0w" name="numericExpressions" type="_Vs7kwUVdEfCS7cth2SLu0w" isOrdered="true" association="_WADVEUVdEfCS7cth2SLu0w">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-Ats0VdEfCS7cth2SLu0w" value="*"/>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-4QZUVdEfCS7cth2SLu0w" name="AdvancedTokenization" specification="_Vs5IgEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-4QZkVdEfCS7cth2SLu0w" type="_Vs4hcUVdEfCS7cth2SLu0w" direction="return"/>
            <language>java</language>
            <body>this.originalTokens = new ArrayList&lt;>();&#xD;
         this.normalizedTokens = new ArrayList&lt;>();&#xD;
         this.semanticTokens = new ArrayList&lt;>();&#xD;
         this.semanticRoles = new HashMap&lt;>();&#xD;
         this.entityConfidences = new HashMap&lt;>();&#xD;
         this.temporalExpressions = new ArrayList&lt;>();&#xD;
         this.numericExpressions = new ArrayList&lt;>();&#xD;
     </body>
          </ownedBehavior>
          <ownedOperation xmi:id="_Vs5IgEVdEfCS7cth2SLu0w" name="AdvancedTokenization" method="_V-4QZUVdEfCS7cth2SLu0w">
            <eAnnotations xmi:id="_Vs5IgUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_Vs5IgkVdEfCS7cth2SLu0w" key="create"/>
            </eAnnotations>
            <ownedParameter xmi:id="_Vs5Ig0VdEfCS7cth2SLu0w" type="_Vs4hcUVdEfCS7cth2SLu0w" direction="return"/>
          </ownedOperation>
        </nestedClassifier>
        <nestedClassifier xmi:type="uml:Class" xmi:id="_Vs6WoEVdEfCS7cth2SLu0w" name="TemporalExpression">
          <eAnnotations xmi:id="_Vs6WoUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_Vs6WokVdEfCS7cth2SLu0w" key="static"/>
          </eAnnotations>
          <ownedComment xmi:id="_V_dfQEVdEfCS7cth2SLu0w">
            <body>Temporal expression class</body>
          </ownedComment>
          <ownedAttribute xmi:id="_V-AttEVdEfCS7cth2SLu0w" name="originalText" isReadOnly="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V-BUwEVdEfCS7cth2SLu0w" name="normalizedText" isReadOnly="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V-BUwUVdEfCS7cth2SLu0w" name="temporalType" isReadOnly="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V-BUwkVdEfCS7cth2SLu0w" name="specificDate" visibility="private" type="_T-jXYUVdEfCS7cth2SLu0w"/>
          <ownedAttribute xmi:id="_V-BUxEVdEfCS7cth2SLu0w" name="sqlCondition" isReadOnly="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-4QZ0VdEfCS7cth2SLu0w" name="TemporalExpression" specification="_Vs6Wo0VdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-4QaEVdEfCS7cth2SLu0w" name="originalText">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-4QaUVdEfCS7cth2SLu0w" name="temporalType">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-4QakVdEfCS7cth2SLu0w" type="_Vs6WoEVdEfCS7cth2SLu0w" direction="return"/>
            <language>java</language>
            <body>this.originalText = originalText;&#xD;
         this.temporalType = temporalType;&#xD;
         this.normalizedText = normalizeTemporalExpression(originalText);&#xD;
         this.sqlCondition = generateSQLCondition();&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-4Qa0VdEfCS7cth2SLu0w" name="normalizeTemporalExpression" specification="_Vs69tUVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-4QbEVdEfCS7cth2SLu0w" name="expr">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-4QbUVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <language>java</language>
            <body>expr = expr.toLowerCase();&#xD;
         // Replace variations&#xD;
         expr = expr.replace(&quot;astăzi&quot;, &quot;astazi&quot;)&#xD;
                   .replace(&quot;ăsta&quot;, &quot;acesta&quot;)&#xD;
                   .replace(&quot;ăstă&quot;, &quot;aceasta&quot;);&#xD;
         return expr;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-4QbkVdEfCS7cth2SLu0w" name="generateSQLCondition" specification="_Vs69uEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-4Qb0VdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <language>java</language>
            <body>switch (normalizedText) {&#xD;
             case &quot;astazi&quot;:&#xD;
             case &quot;azi&quot;:&#xD;
                 return &quot;DATE(column_name) = CURDATE()&quot;;&#xD;
             case &quot;ieri&quot;:&#xD;
                 return &quot;DATE(column_name) = DATE_SUB(CURDATE(), INTERVAL 1 DAY)&quot;;&#xD;
             case &quot;maine&quot;:&#xD;
                 return &quot;DATE(column_name) = DATE_ADD(CURDATE(), INTERVAL 1 DAY)&quot;;&#xD;
             case &quot;saptamana aceasta&quot;:&#xD;
                 return &quot;YEARWEEK(column_name) = YEARWEEK(CURDATE())&quot;;&#xD;
             case &quot;luna aceasta&quot;:&#xD;
                 return &quot;MONTH(column_name) = MONTH(CURDATE()) AND YEAR(column_name) = YEAR(CURDATE())&quot;;&#xD;
             case &quot;anul acesta&quot;:&#xD;
                 return &quot;YEAR(column_name) = YEAR(CURDATE())&quot;;&#xD;
             default:&#xD;
                 return null;&#xD;
         }&#xD;
     </body>
          </ownedBehavior>
          <ownedOperation xmi:id="_Vs6Wo0VdEfCS7cth2SLu0w" name="TemporalExpression" method="_V-4QZ0VdEfCS7cth2SLu0w">
            <eAnnotations xmi:id="_Vs69skVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_Vs69s0VdEfCS7cth2SLu0w" key="create"/>
            </eAnnotations>
            <ownedParameter xmi:id="_Vs69sEVdEfCS7cth2SLu0w" name="originalText">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs69sUVdEfCS7cth2SLu0w" name="temporalType">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs69tEVdEfCS7cth2SLu0w" type="_Vs6WoEVdEfCS7cth2SLu0w" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:id="_Vs69tUVdEfCS7cth2SLu0w" name="normalizeTemporalExpression" visibility="private" method="_V-4Qa0VdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_Vs69tkVdEfCS7cth2SLu0w" name="expr">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs69t0VdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_Vs69uEVdEfCS7cth2SLu0w" name="generateSQLCondition" visibility="private" method="_V-4QbkVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_Vs7kwEVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
          </ownedOperation>
        </nestedClassifier>
        <nestedClassifier xmi:type="uml:Class" xmi:id="_Vs7kwUVdEfCS7cth2SLu0w" name="NumericExpression">
          <eAnnotations xmi:id="_Vs8L0EVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_Vs8L0UVdEfCS7cth2SLu0w" key="static"/>
          </eAnnotations>
          <ownedComment xmi:id="_V_dfQUVdEfCS7cth2SLu0w">
            <body>Numeric expression class</body>
          </ownedComment>
          <ownedAttribute xmi:id="_V-BUxUVdEfCS7cth2SLu0w" name="originalText" isReadOnly="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V-B70EVdEfCS7cth2SLu0w" name="value" isReadOnly="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V-B70UVdEfCS7cth2SLu0w" name="operator" isReadOnly="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V-B70kVdEfCS7cth2SLu0w" name="context" isReadOnly="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-4QcEVdEfCS7cth2SLu0w" name="NumericExpression" specification="_Vs8L0kVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-4QcUVdEfCS7cth2SLu0w" name="originalText">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-4QckVdEfCS7cth2SLu0w" name="value">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-4Qc0VdEfCS7cth2SLu0w" name="operator">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-4QdEVdEfCS7cth2SLu0w" type="_Vs7kwUVdEfCS7cth2SLu0w" direction="return"/>
            <language>java</language>
            <body>this.originalText = originalText;&#xD;
         this.value = value;&#xD;
         this.operator = operator;&#xD;
         this.context = inferContext(originalText);&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-43cEVdEfCS7cth2SLu0w" name="inferContext" specification="_Vs8y4EVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V-43cUVdEfCS7cth2SLu0w" name="text">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V-43ckVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <language>java</language>
            <body>if (text.contains(&quot;salariu&quot;) || text.contains(&quot;venit&quot;) || text.contains(&quot;castig&quot;)) {&#xD;
             return &quot;salary&quot;;&#xD;
         } else if (text.contains(&quot;varsta&quot;) || text.contains(&quot;ani&quot;) &amp;&amp; text.contains(&quot;vechi&quot;)) {&#xD;
             return &quot;age&quot;;&#xD;
         } else if (text.contains(&quot;cati&quot;) || text.contains(&quot;cate&quot;) || text.contains(&quot;numar&quot;)) {&#xD;
             return &quot;count&quot;;&#xD;
         }&#xD;
         return &quot;unknown&quot;;&#xD;
     </body>
          </ownedBehavior>
          <ownedOperation xmi:id="_Vs8L0kVdEfCS7cth2SLu0w" name="NumericExpression" method="_V-4QcEVdEfCS7cth2SLu0w">
            <eAnnotations xmi:id="_Vs8L1kVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_Vs8L10VdEfCS7cth2SLu0w" key="create"/>
            </eAnnotations>
            <ownedParameter xmi:id="_Vs8L00VdEfCS7cth2SLu0w" name="originalText">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs8L1EVdEfCS7cth2SLu0w" name="value">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs8L1UVdEfCS7cth2SLu0w" name="operator">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs8L2EVdEfCS7cth2SLu0w" type="_Vs7kwUVdEfCS7cth2SLu0w" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:id="_Vs8y4EVdEfCS7cth2SLu0w" name="inferContext" visibility="private" method="_V-43cEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_Vs8y4UVdEfCS7cth2SLu0w" name="text">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_Vs8y4kVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
          </ownedOperation>
        </nestedClassifier>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VtFVwEVdEfCS7cth2SLu0w" name="LoginServlet">
        <generalization xmi:id="_VtIZEEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-Ci4EVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-Ci4UVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-Ci4kVdEfCS7cth2SLu0w" name="loginDao" visibility="private" type="_S4B0MEVdEfCS7cth2SLu0w" association="_WADVFEVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-DJ8UVdEfCS7cth2SLu0w" name="jwtUtil" visibility="private" type="_S5oWsEVdEfCS7cth2SLu0w" association="_WAD8IUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-6FkEVdEfCS7cth2SLu0w" name="init" specification="_VtGj4EVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>loginDao = new LoginDao();&#xD;
     jwtUtil = new JwtUtil();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-6FkUVdEfCS7cth2SLu0w" name="doPost" specification="_VtHK80VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-6FkkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-6Fk0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String username = request.getParameter(&quot;username&quot;);&#xD;
     String password = request.getParameter(&quot;password&quot;);&#xD;
     &#xD;
     System.out.println(&quot;Login attempt for user: &quot; + username); // Debug log&#xD;
     &#xD;
     // Verifica si dezactiveaza utilizatorii cu contracte incetate&#xD;
     checkAndDeactivateTerminatedContracts();&#xD;
     &#xD;
     // Verifica daca utilizatorul are contract incetat&#xD;
     if (hasTerminatedContract(username)) {&#xD;
         System.out.println(&quot;User has terminated contract: &quot; + username); // Debug log&#xD;
         response.sendRedirect(&quot;login.jsp?terminated=true&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     MyUser loginBean = new MyUser();&#xD;
     loginBean.setUsername(username);&#xD;
     loginBean.setPassword(password);&#xD;
&#xD;
     try {&#xD;
         MyUser validatedUser = loginDao.validate(loginBean);&#xD;
         if (validatedUser != null) {&#xD;
             // Verifica daca utilizatorul este activ&#xD;
//                if (validatedUser.getActiv() != 1) {&#xD;
//                    System.out.println(&quot;User account is inactive: &quot; + username); // Debug log&#xD;
//                    response.sendRedirect(&quot;login.jsp?inactive=true&quot;);&#xD;
//                    return;&#xD;
//                }&#xD;
             &#xD;
             System.out.println(&quot;User validated successfully&quot;); // Debug log&#xD;
             &#xD;
             // Invalidate old session if exists&#xD;
             HttpSession session = request.getSession(false);&#xD;
             if (session != null) {&#xD;
                 session.invalidate();&#xD;
             }&#xD;
             &#xD;
             // Create new session&#xD;
             session = request.getSession(true);&#xD;
             session.setAttribute(&quot;username&quot;, username);&#xD;
             session.setAttribute(&quot;currentUser&quot;, validatedUser);&#xD;
             &#xD;
             // Generate JWT token using JwtUtil&#xD;
             String jwtToken = jwtUtil.generateToken(username);&#xD;
             System.out.println(&quot;JWT Token generated&quot;); // Debug log&#xD;
             &#xD;
             session.setAttribute(&quot;token&quot;, &quot;Bearer &quot; + jwtToken);&#xD;
             &#xD;
             // Redirect to OTP&#xD;
             response.sendRedirect(request.getContextPath() + &quot;/OTP?username=&quot; + username);&#xD;
             return;&#xD;
         } else {&#xD;
             System.out.println(&quot;User validation failed&quot;); // Debug log&#xD;
             &#xD;
             // Handle failed login attempts&#xD;
             HttpSession session = request.getSession(true);&#xD;
             Integer loginAttempts = (Integer) session.getAttribute(&quot;loginAttempts&quot;);&#xD;
             loginAttempts = (loginAttempts == null) ? 1 : loginAttempts + 1;&#xD;
             session.setAttribute(&quot;loginAttempts&quot;, loginAttempts);&#xD;
             &#xD;
             if (loginAttempts >= 3) {&#xD;
                 System.out.println(&quot;Too many login attempts, redirecting to password recovery&quot;); // Debug log&#xD;
                 response.sendRedirect(&quot;forgotpass.jsp&quot;);&#xD;
             } else {&#xD;
                 System.out.println(&quot;Login attempt &quot; + loginAttempts + &quot; failed&quot;); // Debug log&#xD;
                 response.sendRedirect(&quot;login.jsp?wup=true&amp;loginAttempts=&quot; + loginAttempts);&#xD;
             }&#xD;
         }&#xD;
     } catch (Exception e) {&#xD;
         System.out.println(&quot;Error during login: &quot; + e.getMessage()); // Debug log&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;login.jsp?wup=true&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-6FlEVdEfCS7cth2SLu0w" name="hasTerminatedContract" specification="_VtHyA0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-6FlUVdEfCS7cth2SLu0w" name="username">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-6FlkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>Connection conn = null;&#xD;
     try {&#xD;
         // incarcare driver MySQL&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Creare conexiune directa&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         &#xD;
         String checkIncetariSql = &quot;SELECT COUNT(*) as count FROM istoric_incetari i &quot; +&#xD;
                                 &quot;JOIN useri u ON i.id_ang = u.id &quot; +&#xD;
                                 &quot;WHERE u.username = ?&quot;;&#xD;
         PreparedStatement checkIncetariPstmt = conn.prepareStatement(checkIncetariSql);&#xD;
         checkIncetariPstmt.setString(1, username);&#xD;
         ResultSet checkIncetariRs = checkIncetariPstmt.executeQuery();&#xD;
         &#xD;
         boolean hasTerminated = false;&#xD;
         if (checkIncetariRs.next() &amp;&amp; checkIncetariRs.getInt(&quot;count&quot;) > 0) {&#xD;
             hasTerminated = true;&#xD;
         }&#xD;
         &#xD;
         checkIncetariRs.close();&#xD;
         checkIncetariPstmt.close();&#xD;
         &#xD;
         return hasTerminated;&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         System.err.println(&quot;Driver MySQL negasit: &quot; + e.getMessage());&#xD;
         e.printStackTrace();&#xD;
         return false;&#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         return false;&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-6Fl0VdEfCS7cth2SLu0w" name="checkAndDeactivateTerminatedContracts" specification="_VtHyBkVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>Connection conn = null;&#xD;
     try {&#xD;
         // incarcare driver MySQL&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Creare conexiune directa&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         &#xD;
         // 1. Dezactiveaza utilizatorii a caror data de incetare a contractului a trecut&#xD;
         String updateSql = &quot;UPDATE useri u &quot; +&#xD;
                           &quot;JOIN istoric_incetari i ON u.id = i.id_ang &quot; +&#xD;
                           &quot;SET u.activ = 0 &quot; +&#xD;
                           &quot;WHERE i.data_incetare &lt;= CURDATE() AND u.activ = 1&quot;;&#xD;
         PreparedStatement updatePstmt = conn.prepareStatement(updateSql);&#xD;
         int updatedRows = updatePstmt.executeUpdate();&#xD;
         updatePstmt.close();&#xD;
         &#xD;
         if (updatedRows > 0) {&#xD;
             System.out.println(&quot;Utilizatori dezactivati cu contracte incetate: &quot; + updatedRows);&#xD;
         }&#xD;
         &#xD;
     } catch (ClassNotFoundException e) {&#xD;
         System.err.println(&quot;Driver MySQL negasit: &quot; + e.getMessage());&#xD;
         e.printStackTrace();&#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VtGj4EVdEfCS7cth2SLu0w" name="init" method="_V-6FkEVdEfCS7cth2SLu0w"/>
        <ownedOperation xmi:id="_VtHK80VdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V-6FkUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VtHK9EVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtHK9UVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VtHyA0VdEfCS7cth2SLu0w" name="hasTerminatedContract" visibility="private" method="_V-6FlEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_eGTUVdEfCS7cth2SLu0w">
            <body>Verifica daca utilizatorul are contract incetat.</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtHyBEVdEfCS7cth2SLu0w" name="username">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtHyBUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtHyBkVdEfCS7cth2SLu0w" name="checkAndDeactivateTerminatedContracts" visibility="private" method="_V-6Fl0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_eGTkVdEfCS7cth2SLu0w">
            <body>Verifica si dezactiveaza utilizatorii cu contracte incetate.</body>
          </ownedComment>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VtIZEUVdEfCS7cth2SLu0w" name="LogoutServlet">
        <generalization xmi:id="_VtK1VEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-DJ80VdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-DJ9EVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-6FmEVdEfCS7cth2SLu0w" name="doPost" specification="_VtJAIUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-6FmUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-6FmkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>logoutUser(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-6Fm0VdEfCS7cth2SLu0w" name="doGet" specification="_VtJnMkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-6FnEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-6FnUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>logoutUser(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-6soEVdEfCS7cth2SLu0w" name="logoutUser" specification="_VtKOQEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-6soUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-6sokVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);&#xD;
     if (session != null &amp;&amp; session.getAttribute(&quot;currentUser&quot;) != null) {&#xD;
         try {&#xD;
             String username = ((MyUser) session.getAttribute(&quot;currentUser&quot;)).getUsername();&#xD;
             if (username != null) {&#xD;
                 updateActiveStatus(username, false);&#xD;
             }&#xD;
             String authHeader = request.getHeader(&quot;Authorization&quot;);&#xD;
             if (authHeader != null &amp;&amp; authHeader.startsWith(&quot;Bearer &quot;)) {&#xD;
                 String token = authHeader.substring(7);&#xD;
                 // TokenBlacklist.blacklistToken(token);&#xD;
             }&#xD;
             session.invalidate(); // This clears the session and all attributes&#xD;
             response.sendRedirect(&quot;login.jsp?logout=true&quot;);&#xD;
         } catch (Exception e) {&#xD;
             handleException(response, e);&#xD;
         }&#xD;
     } else {&#xD;
         response.sendRedirect(&quot;login.jsp&quot;); // Redirect to login page if session is already null&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-6so0VdEfCS7cth2SLu0w" name="updateActiveStatus" specification="_VtKOREVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-6spEVdEfCS7cth2SLu0w" name="username">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-6spUVdEfCS7cth2SLu0w" name="isActive">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>String query = &quot;UPDATE useri SET activ = 0 WHERE username = ?&quot;;&#xD;
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
          PreparedStatement preparedStatement = connection.prepareStatement(query)) {&#xD;
         //preparedStatement.setInt(1, isActive ? 1 : 0);&#xD;
         preparedStatement.setString(1, username);&#xD;
         preparedStatement.executeUpdate();&#xD;
     } catch (SQLException e) {&#xD;
         printSQLException(e);&#xD;
         throw e; // Rethrow the exception to handle it in the calling method&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-6spkVdEfCS7cth2SLu0w" name="handleException" specification="_V9SU8kVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-6sp0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-6sqEVdEfCS7cth2SLu0w" name="e" type="_V9SU8EVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>e.printStackTrace();&#xD;
     response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
     try (PrintWriter out = response.getWriter()) {&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Nu s-a putut face deconectare!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'deldep.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-6sqUVdEfCS7cth2SLu0w" name="printSQLException" specification="_VtK1UUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-6sqkVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e : ex) {&#xD;
         if (e instanceof SQLException) {&#xD;
             System.err.println(&quot;SQLState: &quot; + ((SQLException) e).getSQLState());&#xD;
             System.err.println(&quot;Error Code: &quot; + ((SQLException) e).getErrorCode());&#xD;
             System.err.println(&quot;Message: &quot; + e.getMessage());&#xD;
             Throwable t = e.getCause();&#xD;
             while (t != null) {&#xD;
                 System.out.println(&quot;Cause: &quot; + t);&#xD;
                 t = t.getCause();&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VtJAIUVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V-6FmEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VtJAIkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtJAI0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VtJnMkVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V-6Fm0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VtJnM0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtJnNEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VtKOQEVdEfCS7cth2SLu0w" name="logoutUser" visibility="private" method="_V-6soEVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VtKOQUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtKOQkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VtKOREVdEfCS7cth2SLu0w" name="updateActiveStatus" visibility="private" method="_V-6so0VdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VtKORUVdEfCS7cth2SLu0w" name="username">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtKORkVdEfCS7cth2SLu0w" name="isActive">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtK1UUVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" method="_V-6sqUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VtK1UkVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V9SU8kVdEfCS7cth2SLu0w" name="handleException" visibility="private" method="_V-6spkVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V9SU80VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V9S8AEVdEfCS7cth2SLu0w" name="e" type="_V9SU8EVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VtMDcEVdEfCS7cth2SLu0w" name="ManageSediu">
        <generalization xmi:id="_VtN4o0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-DxAEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-DxAUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-DxAkVdEfCS7cth2SLu0w" name="DB_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-DxA0VdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-DxBEVdEfCS7cth2SLu0w" name="DB_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-DxBUVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-DxBkVdEfCS7cth2SLu0w" name="DB_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-DxB0VdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-6sq0VdEfCS7cth2SLu0w" name="init" specification="_VtMqgEVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>super.init();&#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         System.out.println(&quot;MySQL JDBC Driver Registered!&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         System.out.println(&quot;Error: MySQL JDBC Driver not found!&quot;);&#xD;
         e.printStackTrace();&#xD;
         throw new ServletException(&quot;JDBC Driver not found&quot;, e);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-6srEVdEfCS7cth2SLu0w" name="doGet" specification="_VtMqhEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-6srUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-6srkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String idSediuStr = request.getParameter(&quot;id_sediu&quot;);&#xD;
     &#xD;
     if (idSediuStr == null || idSediuStr.isEmpty()) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         response.getWriter().write(&quot;ID-ul sediului lipsește&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         int idSediu = Integer.parseInt(idSediuStr);&#xD;
         &#xD;
         try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {&#xD;
             PreparedStatement stmt = conn.prepareStatement(&#xD;
                 &quot;SELECT * FROM sedii WHERE id_sediu = ?&quot;&#xD;
             );&#xD;
             stmt.setInt(1, idSediu);&#xD;
             &#xD;
             ResultSet rs = stmt.executeQuery();&#xD;
             &#xD;
             if (rs.next()) {&#xD;
                 JSONObject jsonResponse = new JSONObject();&#xD;
                 jsonResponse.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                 jsonResponse.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;));&#xD;
                 jsonResponse.put(&quot;tip_sediu&quot;, rs.getString(&quot;tip_sediu&quot;));&#xD;
                 jsonResponse.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                 jsonResponse.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                 jsonResponse.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                 jsonResponse.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                 jsonResponse.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                 jsonResponse.put(&quot;telefon&quot;, rs.getString(&quot;telefon&quot;));&#xD;
                 jsonResponse.put(&quot;email&quot;, rs.getString(&quot;email&quot;));&#xD;
                 jsonResponse.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                 jsonResponse.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                 &#xD;
                 response.setContentType(&quot;application/json&quot;);&#xD;
                 response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
                 response.getWriter().write(jsonResponse.toString());&#xD;
             } else {&#xD;
                 response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
                 response.getWriter().write(&quot;Sediul cu ID-ul specificat nu a fost găsit&quot;);&#xD;
             }&#xD;
             &#xD;
             rs.close();&#xD;
             stmt.close();&#xD;
         }&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         response.getWriter().write(&quot;ID-ul sediului nu este valid&quot;);&#xD;
     } catch (Exception e) {&#xD;
         System.err.println(&quot;Eroare la obținerea detaliilor sediului: &quot; + e.getMessage());&#xD;
         e.printStackTrace(); // Print the full stack trace for debugging&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         response.getWriter().write(&quot;Eroare la procesarea cererii: &quot; + e.getMessage());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-6sr0VdEfCS7cth2SLu0w" name="doPost" specification="_VtNRlUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-6ssEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-6ssUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>System.out.println(&quot;ManageSediu doPost called&quot;);&#xD;
     &#xD;
     // Citește corpul cererii&#xD;
     StringBuilder sb = new StringBuilder();&#xD;
     try (BufferedReader reader = request.getReader()) {&#xD;
         String line;&#xD;
         while ((line = reader.readLine()) != null) {&#xD;
             sb.append(line);&#xD;
         }&#xD;
     }&#xD;
     String rawJson = sb.toString();&#xD;
     System.out.println(&quot;Received data: &quot; + rawJson);&#xD;
     &#xD;
     JSONObject json;&#xD;
     try {&#xD;
         json = new JSONObject(rawJson);&#xD;
     } catch (Exception e) {&#xD;
         System.err.println(&quot;Eroare la parsarea JSON: &quot; + e.getMessage());&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         response.getWriter().write(&quot;Eroare: Datele JSON sunt invalide.&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Extrage parametrii din JSON&#xD;
     int idSediu = json.optInt(&quot;id_sediu&quot;, 0);&#xD;
     String numeSediu = json.optString(&quot;nume_sediu&quot;, &quot;&quot;);&#xD;
     String tipSediu = json.optString(&quot;tip_sediu&quot;, &quot;&quot;);&#xD;
     String strada = json.optString(&quot;strada&quot;, &quot;&quot;);&#xD;
     String cod = json.optString(&quot;cod&quot;, &quot;&quot;);&#xD;
     String oras = json.optString(&quot;oras&quot;, &quot;&quot;);&#xD;
     String judet = json.optString(&quot;judet&quot;, &quot;&quot;);&#xD;
     String tara = json.optString(&quot;tara&quot;, &quot;&quot;);&#xD;
     String telefon = json.optString(&quot;telefon&quot;, &quot;&quot;);&#xD;
     String email = json.optString(&quot;email&quot;, &quot;&quot;);&#xD;
     double latitudine = json.optDouble(&quot;latitudine&quot;, 0);&#xD;
     double longitudine = json.optDouble(&quot;longitudine&quot;, 0);&#xD;
     &#xD;
     System.out.println(&quot;Processed data: id=&quot; + idSediu + &quot;, name=&quot; + numeSediu);&#xD;
     &#xD;
     // Validează datele obligatorii&#xD;
     if (numeSediu.isEmpty() || tipSediu.isEmpty() || strada.isEmpty() || &#xD;
         cod.isEmpty() || oras.isEmpty() || judet.isEmpty() || tara.isEmpty()) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         response.getWriter().write(&quot;Eroare: Câmpurile obligatorii nu sunt completate.&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         // Încarcă explicit driver-ul JDBC&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {&#xD;
             PreparedStatement stmt;&#xD;
             boolean isUpdate = idSediu > 0;&#xD;
             &#xD;
             if (isUpdate) {&#xD;
                 // Update existing record&#xD;
                 System.out.println(&quot;Updating existing record with ID: &quot; + idSediu);&#xD;
                 stmt = conn.prepareStatement(&#xD;
                     &quot;UPDATE sedii SET nume_sediu = ?, tip_sediu = ?, strada = ?, cod = ?, &quot; +&#xD;
                     &quot;oras = ?, judet = ?, tara = ?, telefon = ?, email = ?, latitudine = ?, &quot; +&#xD;
                     &quot;longitudine = ?, data_modificare = CURRENT_TIMESTAMP WHERE id_sediu = ?&quot;&#xD;
                 );&#xD;
                 &#xD;
                 stmt.setString(1, numeSediu);&#xD;
                 stmt.setString(2, tipSediu);&#xD;
                 stmt.setString(3, strada);&#xD;
                 stmt.setString(4, cod);&#xD;
                 stmt.setString(5, oras);&#xD;
                 stmt.setString(6, judet);&#xD;
                 stmt.setString(7, tara);&#xD;
                 stmt.setString(8, telefon);&#xD;
                 stmt.setString(9, email);&#xD;
                 stmt.setDouble(10, latitudine);&#xD;
                 stmt.setDouble(11, longitudine);&#xD;
                 stmt.setInt(12, idSediu);&#xD;
             } else {&#xD;
                 // Insert new record&#xD;
                 System.out.println(&quot;Inserting new record&quot;);&#xD;
                 stmt = conn.prepareStatement(&#xD;
                     &quot;INSERT INTO sedii (nume_sediu, tip_sediu, strada, cod, oras, judet, tara, &quot; +&#xD;
                     &quot;telefon, email, latitudine, longitudine, data_creare) &quot; +&#xD;
                     &quot;VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)&quot;,&#xD;
                     Statement.RETURN_GENERATED_KEYS&#xD;
                 );&#xD;
                 &#xD;
                 stmt.setString(1, numeSediu);&#xD;
                 stmt.setString(2, tipSediu);&#xD;
                 stmt.setString(3, strada);&#xD;
                 stmt.setString(4, cod);&#xD;
                 stmt.setString(5, oras);&#xD;
                 stmt.setString(6, judet);&#xD;
                 stmt.setString(7, tara);&#xD;
                 stmt.setString(8, telefon);&#xD;
                 stmt.setString(9, email);&#xD;
                 stmt.setDouble(10, latitudine);&#xD;
                 stmt.setDouble(11, longitudine);&#xD;
             }&#xD;
             &#xD;
             int rowsAffected = stmt.executeUpdate();&#xD;
             System.out.println(&quot;Rows affected: &quot; + rowsAffected);&#xD;
             &#xD;
             if (rowsAffected > 0) {&#xD;
                 if (!isUpdate) {&#xD;
                     // Obține ID-ul noului sediu&#xD;
                     ResultSet generatedKeys = stmt.getGeneratedKeys();&#xD;
                     if (generatedKeys.next()) {&#xD;
                         idSediu = generatedKeys.getInt(1);&#xD;
                     }&#xD;
                     generatedKeys.close();&#xD;
                 }&#xD;
                 &#xD;
                 response.setStatus(HttpServletResponse.SC_OK);&#xD;
                 response.getWriter().write(&quot;Operațiune reușită pentru sediul cu ID-ul: &quot; + idSediu);&#xD;
             } else {&#xD;
                 response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
                 response.getWriter().write(&quot;Nu s-a putut efectua operațiunea pentru sediu.&quot;);&#xD;
             }&#xD;
             &#xD;
             stmt.close();&#xD;
         }&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         System.err.println(&quot;Eroare la încărcarea driver-ului JDBC: &quot; + e.getMessage());&#xD;
         e.printStackTrace();&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         response.getWriter().write(&quot;Eroare la încărcarea driver-ului JDBC: &quot; + e.getMessage());&#xD;
     } catch (Exception e) {&#xD;
         System.err.println(&quot;Eroare la operațiunea în baza de date: &quot; + e.getMessage());&#xD;
         e.printStackTrace();&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         response.getWriter().write(&quot;Eroare la operațiunea în baza de date: &quot; + e.getMessage());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VtMqgEVdEfCS7cth2SLu0w" name="init" method="_V-6sq0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w"/>
        <ownedOperation xmi:id="_VtMqhEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V-6srEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VtNRkEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtNRkUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VtNRlUVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V-6sr0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VtNRlkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtNRl0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VtOfsEVdEfCS7cth2SLu0w" name="ModifAdevServlet">
        <ownedComment xmi:id="_V_etUEVdEfCS7cth2SLu0w">
          <body>Servlet pentru modificarea adeverințelor</body>
        </ownedComment>
        <generalization xmi:id="_VtQU4EVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-EYEEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-EYEUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-EYEkVdEfCS7cth2SLu0w" name="adeverintaDAO" visibility="private" type="_S4S58EVdEfCS7cth2SLu0w" association="_WAEjMEVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-EYFEVdEfCS7cth2SLu0w" name="URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-EYFUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-EYFkVdEfCS7cth2SLu0w" name="USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-EYF0VdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-EYGEVdEfCS7cth2SLu0w" name="PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-EYGUVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-E_IEVdEfCS7cth2SLu0w" name="DRIVER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-E_IUVdEfCS7cth2SLu0w" value="&quot;com.mysql.cj.jdbc.Driver&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-7TsEVdEfCS7cth2SLu0w" name="ModifAdevServlet" specification="_VtPGwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-7TsUVdEfCS7cth2SLu0w" type="_VtOfsEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
     try {&#xD;
         Class.forName(DRIVER);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-7TskVdEfCS7cth2SLu0w" name="init" specification="_VtPt00VdEfCS7cth2SLu0w">
          <language>java</language>
          <body>adeverintaDAO = new AdaugaAdeverintaDAO();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-7Ts0VdEfCS7cth2SLu0w" name="doGet" specification="_VtPt1EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-7TtEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-7TtUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Verificare sesiune&#xD;
     HttpSession sesiune = request.getSession(false);&#xD;
     if (sesiune == null) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Nu există sesiune activă!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'login.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     MyUser currentUser = (MyUser) sesiune.getAttribute(&quot;currentUser&quot;);&#xD;
     if (currentUser == null) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Utilizator neconectat!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'login.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Obține ID-ul adeverinței din parametri&#xD;
     int idAdeverinta;&#xD;
     try {&#xD;
         idAdeverinta = Integer.parseInt(request.getParameter(&quot;idadev&quot;));&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('ID adeverință invalid!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'adeverintenoiuser.jsp?pag=1';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Verifică dacă adeverința există și dacă utilizatorul are dreptul să o modifice&#xD;
     Connection conn = null;&#xD;
     &#xD;
     try {&#xD;
         conn = DriverManager.getConnection(URL, USER, PASSWORD);&#xD;
         &#xD;
         // Verifică existența adeverinței și permisiunile&#xD;
         String sqlVerificare = &quot;SELECT a.*, u.tip AS tip_user FROM adeverinte a JOIN useri u ON a.id_ang = u.id WHERE a.id = ?&quot;;&#xD;
         try (PreparedStatement verificareStmt = conn.prepareStatement(sqlVerificare)) {&#xD;
             verificareStmt.setInt(1, idAdeverinta);&#xD;
             ResultSet rs = verificareStmt.executeQuery();&#xD;
             &#xD;
             if (!rs.next()) {&#xD;
                 response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
                 PrintWriter out = response.getWriter();&#xD;
                 out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
                 out.println(&quot;alert('Adeverința nu există!');&quot;);&#xD;
                 out.println(&quot;window.location.href = 'adeverintenoiuser.jsp?pag=1';&quot;);&#xD;
                 out.println(&quot;&lt;/script>&quot;);&#xD;
                 out.close();&#xD;
                 return;&#xD;
             }&#xD;
             &#xD;
             int idAngajat = rs.getInt(&quot;id_ang&quot;);&#xD;
             int status = rs.getInt(&quot;status&quot;);&#xD;
             int tipAngajat = rs.getInt(&quot;tip_user&quot;);&#xD;
             int tip = rs.getInt(&quot;tip&quot;);&#xD;
             &#xD;
             // Obține valorile din ambele câmpuri&#xD;
             String motiv = rs.getString(&quot;motiv&quot;);&#xD;
             String pentruServi = rs.getString(&quot;pentru_servi&quot;);&#xD;
             &#xD;
             // Folosește valoarea non-null&#xD;
             if ((motiv == null || motiv.trim().isEmpty()) &amp;&amp; pentruServi != null &amp;&amp; !pentruServi.trim().isEmpty()) {&#xD;
                 motiv = pentruServi;&#xD;
             }&#xD;
             &#xD;
             // Verifică permisiunile&#xD;
             int currentUserId = currentUser.getId();&#xD;
             int userType = currentUser.getTip();&#xD;
             &#xD;
             boolean hasPermission = false;&#xD;
             &#xD;
             // Utilizatorul poate modifica adeverințele proprii doar dacă sunt neaprobate (status 0)&#xD;
             if (idAngajat == currentUserId &amp;&amp; status == 0) {&#xD;
                 hasPermission = true;&#xD;
             }&#xD;
             &#xD;
             // Șeful (tip=3) poate modifica adeverințele din departamentul său&#xD;
             boolean isSef = userType == 3 || (userType >= 10 &amp;&amp; userType &lt;= 15);&#xD;
             if (isSef &amp;&amp; status &lt;= 1) {&#xD;
                 // Verifică dacă angajatul este în același departament&#xD;
                 String sqlDep = &quot;SELECT 1 FROM useri WHERE id = ? AND id_dep = (SELECT id_dep FROM useri WHERE id = ?)&quot;;&#xD;
                 try (PreparedStatement depStmt = conn.prepareStatement(sqlDep)) {&#xD;
                     depStmt.setInt(1, idAngajat);&#xD;
                     depStmt.setInt(2, currentUserId);&#xD;
                     ResultSet rsDep = depStmt.executeQuery();&#xD;
                     if (rsDep.next()) {&#xD;
                         hasPermission = true;&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             // Directorul (tip=0) poate modifica orice adeverință&#xD;
             boolean isDirector = userType == 0 || userType == 4 || userType > 15;&#xD;
             if (isDirector) {&#xD;
                 hasPermission = true;&#xD;
             }&#xD;
             &#xD;
             if (!hasPermission) {&#xD;
                 response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
                 PrintWriter out = response.getWriter();&#xD;
                 out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
                 out.println(&quot;alert('Nu aveți permisiunea de a modifica această adeverință!');&quot;);&#xD;
                 out.println(&quot;window.location.href = 'adeverintenoiuser.jsp?pag=1';&quot;);&#xD;
                 out.println(&quot;&lt;/script>&quot;);&#xD;
                 out.close();&#xD;
                 return;&#xD;
             }&#xD;
             &#xD;
             // Adeverința există și utilizatorul are permisiuni, redirecționează către pagina de modificare&#xD;
             // Adaugă datele adeverinței în sesiune pentru a fi folosite în pagina de modificare&#xD;
             Adeverinta adeverinta = new Adeverinta();&#xD;
             adeverinta.setId(idAdeverinta);&#xD;
             adeverinta.setIdAngajat(idAngajat);&#xD;
             adeverinta.setTip(tip);&#xD;
             adeverinta.setMotiv(motiv);&#xD;
             adeverinta.setStatus(status);&#xD;
             &#xD;
             sesiune.setAttribute(&quot;adeverintaDeMod&quot;, adeverinta);&#xD;
             &#xD;
             response.sendRedirect(&quot;modivadev.jsp&quot;);&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Eroare la verificarea adeverinței: &quot; + e.getMessage() + &quot;');&quot;);&#xD;
         out.println(&quot;window.location.href = 'adeverintenoiuser.jsp?pag=1';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
     } finally {&#xD;
         try {&#xD;
             if (conn != null) conn.close();&#xD;
         } catch (SQLException e) {&#xD;
             e.printStackTrace();&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-7TtkVdEfCS7cth2SLu0w" name="doPost" specification="_VtPt10VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-7Tt0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-7TuEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Verificare sesiune&#xD;
     HttpSession sesiune = request.getSession(false);&#xD;
     if (sesiune == null) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Nu există sesiune activă!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'login.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     MyUser currentUser = (MyUser) sesiune.getAttribute(&quot;currentUser&quot;);&#xD;
     if (currentUser == null) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Utilizator neconectat!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'login.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Extrage parametrii din formular&#xD;
     int idAdeverinta;&#xD;
     int tip;&#xD;
     String motiv;&#xD;
     &#xD;
     try {&#xD;
         idAdeverinta = Integer.parseInt(request.getParameter(&quot;idadev&quot;));&#xD;
         tip = Integer.parseInt(request.getParameter(&quot;tip&quot;));&#xD;
         motiv = request.getParameter(&quot;motiv&quot;);&#xD;
         System.out.println(idAdeverinta + &quot; &quot; + tip + &quot; &quot; + motiv);&#xD;
         // Validare date&#xD;
         if (motiv == null || motiv.trim().isEmpty()) {&#xD;
             throw new IllegalArgumentException(&quot;Motivul nu poate fi gol!&quot;);&#xD;
         }&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Parametri invalizi!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'modivadev.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     } catch (IllegalArgumentException e) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('&quot; + e.getMessage() + &quot;');&quot;);&#xD;
         out.println(&quot;window.location.href = 'modivadev.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     Connection conn = null;&#xD;
     PreparedStatement verificareStmt = null;&#xD;
     PreparedStatement modifStmt = null;&#xD;
     &#xD;
     try {&#xD;
         conn = DriverManager.getConnection(URL, USER, PASSWORD);&#xD;
         conn.setAutoCommit(false); // Începe tranzacția&#xD;
         &#xD;
         // Verifică din nou permisiunile (în caz că ceva s-a schimbat între timp)&#xD;
         String sqlVerificare = &quot;SELECT a.id_ang, a.status FROM adeverinte a WHERE a.id = ?&quot;;&#xD;
         verificareStmt = conn.prepareStatement(sqlVerificare);&#xD;
         verificareStmt.setInt(1, idAdeverinta);&#xD;
         ResultSet rs = verificareStmt.executeQuery();&#xD;
         &#xD;
         if (!rs.next()) {&#xD;
             conn.rollback();&#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Adeverința nu există sau a fost ștearsă!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp?pag=1';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         int idAngajat = rs.getInt(&quot;id_ang&quot;);&#xD;
         int status = rs.getInt(&quot;status&quot;);&#xD;
         &#xD;
         int currentUserId = currentUser.getId();&#xD;
         int userType = currentUser.getTip();&#xD;
         &#xD;
         boolean hasPermission = false;&#xD;
         &#xD;
         // Utilizatorul poate modifica adeverințele proprii doar dacă sunt neaprobate (status 0)&#xD;
         if (idAngajat == currentUserId &amp;&amp; status == 0) {&#xD;
             hasPermission = true;&#xD;
         }&#xD;
         &#xD;
         // Șeful (tip=3) poate modifica adeverințele din departamentul său&#xD;
         boolean isSef = userType == 3 || (userType >= 10 &amp;&amp; userType &lt;= 15);&#xD;
         if (isSef &amp;&amp; status &lt;= 1) {&#xD;
             // Verifică dacă angajatul este în același departament&#xD;
             String sqlDep = &quot;SELECT 1 FROM useri WHERE id = ? AND id_dep = (SELECT id_dep FROM useri WHERE id = ?)&quot;;&#xD;
             try (PreparedStatement depStmt = conn.prepareStatement(sqlDep)) {&#xD;
                 depStmt.setInt(1, idAngajat);&#xD;
                 depStmt.setInt(2, currentUserId);&#xD;
                 ResultSet rsDep = depStmt.executeQuery();&#xD;
                 if (rsDep.next()) {&#xD;
                     hasPermission = true;&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // Directorul (tip=0) poate modifica orice adeverință&#xD;
         boolean isDirector = userType == 0 || userType == 4 || userType > 15;&#xD;
         if (isDirector) {&#xD;
             hasPermission = true;&#xD;
         }&#xD;
         &#xD;
         if (!hasPermission) {&#xD;
             conn.rollback();&#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Nu aveți permisiunea de a modifica această adeverință!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp?pag=1';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Modifică adeverința - actualizează ambele câmpuri motiv și pentru_servi&#xD;
         String sqlModificare = &quot;UPDATE adeverinte SET tip = ?, motiv = ?, pentru_servi = ?, modif = CURDATE() WHERE id = ?&quot;;&#xD;
         modifStmt = conn.prepareStatement(sqlModificare);&#xD;
         modifStmt.setInt(1, tip);&#xD;
         modifStmt.setString(2, motiv);&#xD;
         modifStmt.setString(3, motiv); // Asigură actualizarea câmpului pentru_servi&#xD;
         modifStmt.setInt(4, idAdeverinta);&#xD;
         &#xD;
         int rezultat = modifStmt.executeUpdate();&#xD;
         &#xD;
         if (rezultat > 0) {&#xD;
             conn.commit(); // Confirmă tranzacția&#xD;
             &#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Adeverința a fost modificată cu succes!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp?pag=1';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
         } else {&#xD;
             conn.rollback();&#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Nu s-a putut modifica adeverința!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'modivadev.jsp';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             ex.printStackTrace();&#xD;
         }&#xD;
         &#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Eroare la modificarea adeverinței: &quot; + e.getMessage() + &quot;');&quot;);&#xD;
         out.println(&quot;window.location.href = 'modivadev.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
     } finally {&#xD;
         try {&#xD;
             if (verificareStmt != null) verificareStmt.close();&#xD;
             if (modifStmt != null) modifStmt.close();&#xD;
             if (conn != null) {&#xD;
                 conn.setAutoCommit(true); // Resetează autocommit&#xD;
                 conn.close();&#xD;
             }&#xD;
         } catch (SQLException e) {&#xD;
             e.printStackTrace();&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VtPGwEVdEfCS7cth2SLu0w" name="ModifAdevServlet" method="_V-7TsEVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VtPt0EVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VtPt0UVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedComment xmi:id="_V_etUUVdEfCS7cth2SLu0w">
            <body>Constructor</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtPt0kVdEfCS7cth2SLu0w" type="_VtOfsEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VtPt00VdEfCS7cth2SLu0w" name="init" method="_V-7TskVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_etUkVdEfCS7cth2SLu0w">
            <body>Inițializare servlet</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:id="_VtPt1EVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V-7Ts0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_etU0VdEfCS7cth2SLu0w">
            <body>Metoda GET - folosită pentru a afișa datele adeverinței</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtPt1UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtPt1kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VtPt10VdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V-7TtkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_etVEVdEfCS7cth2SLu0w">
            <body>Metoda POST - folosită pentru a salva modificările adeverinței</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtPt2EVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtPt2UVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VtQ78EVdEfCS7cth2SLu0w" name="ModifConServlet">
        <generalization xmi:id="_VtVNZEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-E_IkVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-E_I0VdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-E_JUVdEfCS7cth2SLu0w" name="concediu" visibility="private" type="_S4GssEVdEfCS7cth2SLu0w" association="_WAEjM0VdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-7TuUVdEfCS7cth2SLu0w" name="ModifConServlet" specification="_VtRjAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-7TukVdEfCS7cth2SLu0w" type="_VtQ78EVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-7Tu0VdEfCS7cth2SLu0w" name="init" specification="_VtRjBUVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>concediu = new ModifConDao();
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-7TvEVdEfCS7cth2SLu0w" name="doGet" specification="_VtRjB0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-7TvUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-7TvkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doPost(request, response);
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-7Tv0VdEfCS7cth2SLu0w" name="doPost" specification="_VtSKEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-7TwEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-7TwUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// declarare si initializare variabile
		// date despre concediu
		int id = Integer.valueOf(request.getParameter(&quot;idcon&quot;));
		int tip = Integer.valueOf(request.getParameter(&quot;tip&quot;));
		String inceput = request.getParameter(&quot;start&quot;);
		String sfarsit = request.getParameter(&quot;end&quot;);
 	String motiv = request.getParameter(&quot;motiv&quot;);
 	String locatie = request.getParameter(&quot;locatie&quot;);
 	
 	// extra date despre concediu
 	int durata1 = 0;
	 	LocalDate inceput2 = LocalDate.parse(inceput);
	    LocalDate sfarsit2 = LocalDate.parse(sfarsit);
	    long durata0 = ChronoUnit.DAYS.between(inceput2, sfarsit2); 
	    int uid = -1;
     String sql = &quot;select id_ang from concedii where id = ?;&quot;;
     durata1 = (int)durata0;
     final int durata2 = durata1;
     
	    // un concediu propriu zis ca sa incarc in dao si baza de date
	    Concediu concediul = new Concediu();
	
		durata1 = (int) durata0;
     concediul.setId(id);
     concediul.setTip(tip);
     concediul.setInceput(inceput);
     concediul.setSfarsit(sfarsit);
     concediul.setMotiv(motiv);
     concediul.setLocatie(locatie);
     concediul.setDurata(durata1);
     
	    try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;); 
		        PreparedStatement stm = conexiune.prepareStatement(sql)) {
		        stm.setInt(1, id);
		        try (ResultSet rezultat = stm.executeQuery()) {
		            if (rezultat.next()) {
		                uid = rezultat.getInt(&quot;id_ang&quot;);
		            }
		        }
		    } catch (SQLException e) {
		        printSQLException(e);
		        throw new IOException(&quot;Eroare la baza de date&quot;, e);
		    }
	    final int uid2 = uid;
	    // verificari concordanta date concediu -> majoritatea sunt cu try&amp;catch pentru ca se bazeaza pe request, response, concediu
     // cum majoritatea metodelor implementate pentru verificarea concordantei concediului sunt similare, 
     // au acelasi tip de erori, functioneaza dupa acelasi principiu, difera numai interogarea in baza de date, alte cateva variabile
	    try {
     	// verificare daca are mai mult de 3 concedii pe an
			if (maimulteconcedii(request)) {
				response.setContentType(&quot;text/html;charset=UTF-8&quot;);
				PrintWriter out = response.getWriter();
				out.println(&quot;&lt;script type='text/javascript'>&quot;);
			    out.println(&quot;alert('Utilizatorul nu poate avea mai mult de 3 perioade diefrite de concediu!');&quot;);
			    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
			    out.println(&quot;&lt;/script>&quot;);
			    out.close();
				return;
			}
		} catch (ClassNotFoundException e) {
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);
		    PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Nu a gasit clasa - debug only!');&quot;);
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
		    e.printStackTrace();
		} catch (IOException e) {
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);
			PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Eroare IO - debug only!');&quot;);
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
		    e.printStackTrace();
		}
     
     try {
			if (!maimultezile(request)) {
				// verificare daca are mai mult de 30 sau 40 de zile de concediu pe an
				response.setContentType(&quot;text/html;charset=UTF-8&quot;);
				PrintWriter out = response.getWriter();
				out.println(&quot;&lt;script type='text/javascript'>&quot;);
			    out.println(&quot;alert('Utilizatorul are deja prea multe zile de concediu!');&quot;);
			    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
			    out.println(&quot;&lt;/script>&quot;);
			    out.close();
				return;
			}
		} catch (ClassNotFoundException e) {
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);
		    PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Nu a gasit clasa - debug only!');&quot;);
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
		    e.printStackTrace();
		} catch (IOException e) {
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);
			PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Eroare IO - debug only!');&quot;);
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
		    e.printStackTrace();
		}
     
     try {
			if (!odatavara(request, concediul) &amp;&amp; (stringToDate(concediul.getInceput()).getLuna() >= 6 &amp;&amp; stringToDate(concediul.getInceput()).getLuna() &lt;= 8)) {
				// verificare daca are deja un concediu pe perioada verii
				response.setContentType(&quot;text/html;charset=UTF-8&quot;);
				PrintWriter out = response.getWriter();
				out.println(&quot;&lt;script type='text/javascript'>&quot;);
			    out.println(&quot;alert('Utilizatorul nu poate avea mai mult de un concediu pe timpul verii!');&quot;);
			    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
			    out.println(&quot;&lt;/script>&quot;);
			    out.close();
				return;
			}
		} catch (ClassNotFoundException e) {
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);
		    PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Nu a gasit clasa - debug only!');&quot;);
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
		    e.printStackTrace();
		} catch (IOException e) {
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);
			PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Eroare IO - debug only!');&quot;);
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
		    e.printStackTrace();
		}
     
     if (!maimultezileodata(concediul)) {
     	// verificare daca are mai mult de 21 de concediu pe o perioada de concediu
     	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
     	PrintWriter out = response.getWriter();
			out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Utilizatorul nu poate avea mai mult de 21 de zile / concediu!');&quot;);
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
			return;
		}
     
     try {
			if (!preamulti(concediul, request)) {
				// verificare daca sunt prea multi angajati (mai mult de jumatate) dintr-un departament plecati in concediu
				response.setContentType(&quot;text/html;charset=UTF-8&quot;);
				PrintWriter out = response.getWriter();
				out.println(&quot;&lt;script type='text/javascript'>&quot;);
			    out.println(&quot;alert('Au concediu prea multi utilizatori dintr-un singur departament!');&quot;);
			    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
			    out.println(&quot;&lt;/script>&quot;);
			    out.close();
				return;
			}
		} catch (ClassNotFoundException e) {
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);
		    PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Nu a gasit clasa - debug only!');&quot;);
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
		    e.printStackTrace();
		} catch (IOException e) {
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);
			PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Eroare IO - debug only!');&quot;);
		    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
		    e.printStackTrace();
		}
     
     // acum, diferit de celalte metode, se verifica tipul de utilizator pentru ca daca este sef (3) sau director (0), nu pot fi 2/departament
     String sql2 = &quot;select * from useri where id = ?;&quot;; // interogarea este un string
	    int tip2 = -1; // pentru cazul in care nu se gaseste nimic in baza de date sau introgarea nu este corecta, ar ramane -1
	    try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;); 
	    		// se creaza conexiune (uneori mai puneam si Class.forName pentru driver, acum a mers si asa
		        PreparedStatement stm = conexiune.prepareStatement(sql2)) { //se pregateste pentru a face interogarea
		        stm.setInt(1, id); // adaug variabile
		        try (ResultSet rezultat = stm.executeQuery()) { // se executa interogarea
		            if (rezultat.next()) { // se extrag date din rezultatul interogarii, mai exact tipul de utilizator care a adaugat concediul
		                tip2 = rezultat.getInt(&quot;tip&quot;);
		            }
		        }
		    } catch (SQLException e) { // interogarile pot arunca exceptii si daca da, atunci semnalizez cu alerta si redirectare la pagina de adaugare/modificare concediu
		        printSQLException(e);
		        response.setContentType(&quot;text/html;charset=UTF-8&quot;);
				PrintWriter out = response.getWriter();
			    out.println(&quot;&lt;script type='text/javascript'>&quot;);
			    out.println(&quot;alert('Eroare la baza de date - debug only!');&quot;);
			    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
			    out.println(&quot;&lt;/script>&quot;);
			    out.close();
			    e.printStackTrace();
		        throw new IOException(&quot;Eroare la baza de date =(&quot;, e);
		    }
	    
	    if (tip2 == 0) {
	    	// daca utilizatorul este director, pot face verificarea sa nu fie mai mult de 2 directori plecati
	    	 try {
	 			if (!preamultid(concediul, request)) {
	 				response.setContentType(&quot;text/html;charset=UTF-8&quot;);
	 				PrintWriter out = response.getWriter();
					out.println(&quot;&lt;script type='text/javascript'>&quot;);
				    out.println(&quot;alert('Au concediu prea multi directori!');&quot;);
				    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
				    out.println(&quot;&lt;/script>&quot;);
				    out.close();
					return;
				}
			} catch (ClassNotFoundException e) {
				// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu
				response.setContentType(&quot;text/html;charset=UTF-8&quot;);
			    PrintWriter out = response.getWriter();
			    out.println(&quot;&lt;script type='text/javascript'>&quot;);
			    out.println(&quot;alert('Nu a gasit clasa - debug only!');&quot;);
			    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
			    out.println(&quot;&lt;/script>&quot;);
			    out.close();
			    e.printStackTrace();
			} catch (IOException e) {
				// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu
				response.setContentType(&quot;text/html;charset=UTF-8&quot;);
				PrintWriter out = response.getWriter();
			    out.println(&quot;&lt;script type='text/javascript'>&quot;);
			    out.println(&quot;alert('Eroare IO - debug only!');&quot;);
			    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
			    out.println(&quot;&lt;/script>&quot;);
			    out.close();
			    e.printStackTrace();
			}
	    }
	    
	    // daca utilizatorul este director sau sef, atunci concediul este deja aprobat sef, altfel este neaprobat
	    if (tip2 == 0 || tip2 == 3) {
	    	concediul.setStatus(1);
	    } else {
	    	concediul.setStatus(0);
	    }
	    
	    // verificare daca se incareaza in numarul de zile conform tipului de concediu (concediu medical, concediu de odihna, concediu fara plata etc)
	    try {
			if (oktip(concediul)) {
			    response.setContentType(&quot;text/html;charset=UTF-8&quot;);
			    PrintWriter out = response.getWriter();
			    out.println(&quot;&lt;script type='text/javascript'>&quot;);
			    out.println(&quot;alert('Nu poate avea mai multe zile decat tipul concediului!');&quot;);
			    out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
			    out.println(&quot;&lt;/script>&quot;);
			    out.close();
			    return; 
			}
		} catch (SQLException e) {
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu
			e.printStackTrace();
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);
	        PrintWriter out = response.getWriter();
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);
	        out.println(&quot;alert('Eroare la baza de date!');&quot;);
	        out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
	        out.println(&quot;&lt;/script>&quot;);
	        out.close();
	        return; 
		} catch (IOException e) {
			// daca este eroare, apare alerta + se intoarce la pagina de actiuni, adaugare/modficiare/stergere concediu
			e.printStackTrace();
			response.setContentType(&quot;text/html;charset=UTF-8&quot;);
	        PrintWriter out = response.getWriter();
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);
	        out.println(&quot;alert('Eroare la baza de date!');&quot;);
	        out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
	        out.println(&quot;&lt;/script>&quot;);
	        out.close();
	        return; 
		}
	    
	    // hai sa facem un before and after =)
     String inceputold = &quot;&quot;;
     String sfarsitold = &quot;&quot;;
     String locatieold = &quot;&quot;;
     String motivold = &quot;&quot;;
     String tipold = &quot;&quot;;
     int tipold2 = -1;
     int durataold2 = -1;
     String data = &quot;&quot;;
     try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
   	         PreparedStatement stmt = conexiune.prepareStatement(&quot;select datediff(end_c, start_c) as durata from concedii where id = ?;&quot;); 
     		PreparedStatement stmt2 = conexiune.prepareStatement(&quot;select * from concedii where id = ?;&quot;);
     		PreparedStatement stmt3 = conexiune.prepareStatement(&quot;select motiv from tipcon where tip = ?;&quot;)
     				) {
   	        stmt.setInt(1, id);
   	        ResultSet rs = stmt.executeQuery();
   	        if (rs.next()) {
   	            
   	            durataold2 = rs.getInt(&quot;durata&quot;) + 1;
   	        }
   	        
   	      stmt2.setInt(1, id);
  	        ResultSet rs2 = stmt2.executeQuery();
  	        if (rs2.next()) {
  	            inceputold = rs2.getString(&quot;start_c&quot;);
  	            sfarsitold = rs2.getString(&quot;end_c&quot;);
  	            locatieold = rs2.getString(&quot;locatie&quot;);
  	            motivold = rs2.getString(&quot;motiv&quot;);
  	            tipold2 = rs2.getInt(&quot;tip&quot;);
  	            data = rs2.getString(&quot;added&quot;);
  	        }
  	        
 	        stmt3.setInt(1, tipold2);
 	        ResultSet rs3 = stmt3.executeQuery();
 	        if (rs3.next()) {
 	        }
  	        
   	    } catch (SQLException e) {
   	        throw new ServletException(&quot;Eroare BD =(&quot;, e);
   	    }
	    final String inceputold2 = inceputold;
	    final String sfarsitold2 = sfarsitold;
	    final String tipold21 = tipold;
	    final String locatieold2 = locatieold;
	    final String motivold21 = motivold;
	    final int durataold21 = durataold2;
	    final String dataold2 = data;
	    // cum la neindeplinirea unei reguli de verificare a concediului se intampla redirectare si return, 
	    // daca a ajuns in acest punct inseamna ca concediul este valid si, deci, se poate incarca in baza de date
     try {
         concediu.check(concediul);
         
      // aici vine partea asincrona
        
         jakarta.servlet.AsyncContext asyncContext = request.startAsync();
         

         asyncContext.start(() -> {
             try {
             	// am facut o clasa/un obiect separat ce trimite mailuri, separat de un mail sender, ci efectiv ceva ce pregatste un email
                 MailAsincron.send2(uid2, id, tip, inceput, sfarsit, motiv, locatie, durata2, inceputold2, sfarsitold2, locatieold2, motivold21, tipold21, durataold21, dataold2);
                 asyncContext.complete();  // Completarea actiunii asincrone
             } catch (Exception e) {
                 e.printStackTrace();  // in caz de eroare, afisez in concola serverului sa vad de ce + redirectare la pagina de adaugare/modificare concediu + alerta
                 asyncContext.complete();  // Context asincron finalizat indiferent de situatie
                 response.setContentType(&quot;text/html;charset=UTF-8&quot;);
     	        PrintWriter out = null;
					try {
						out = response.getWriter();
					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
     	        out.println(&quot;&lt;script type='text/javascript'>&quot;);
     	        out.println(&quot;alert('eroare din cauze necunoscute!');&quot;);
     	        out.println(&quot;window.location.href = 'actiuni.jsp';&quot;);
     	        out.println(&quot;&lt;/script>&quot;);
     	        out.close();
     	        return; 
                 
             }
         });
         
         // abia dupa ce trimit mail-ul trec mai departe             
         PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Modificare cu succes!');&quot;);
		    out.println(&quot;window.location.href = 'concediinoisef.jsp?pag=1';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
     } catch (Exception e) {
     	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
		    PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Nu s-a putut modifica din motive necunoscute.');&quot;);
		    out.println(&quot;window.location.href = 'concediinoieu.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
			e.printStackTrace();
     }
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-7TwkVdEfCS7cth2SLu0w" name="oktip" specification="_VtSKFEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-7Tw0VdEfCS7cth2SLu0w" name="concediul" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-7TxEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile
		String inceput = concediul.getInceput();
		String sfarsit = concediul.getSfarsit();
		LocalDate inceput2 = LocalDate.parse(inceput);
	    LocalDate sfarsit2 = LocalDate.parse(sfarsit);
	    long durata = ChronoUnit.DAYS.between(inceput2, sfarsit2) + 1; // ultimul - primul + 1
	    int durata2 = 0;
	    durata2 = (int) durata + 1;
	    int durata3 = 0;
		String sql = &quot;select nr_zile from tipcon;&quot;;
	   
	    try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
		        PreparedStatement stm = conexiune.prepareStatement(sql)) {
		        try (ResultSet rezultat = stm.executeQuery()) {
		            if (rezultat.next()) {
		                durata3 = rezultat.getInt(&quot;nr_zile&quot;);
		            }
		        }
		    } 
	    
	    return durata3 &lt; durata2;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-7TxUVdEfCS7cth2SLu0w" name="maimulteconcedii" specification="_VtSKGEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-7TxkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-7Tx0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile
	    int nr = 0;
	    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
	    String sql = &quot;SELECT * FROM useri WHERE useri.id = ?;&quot;;
	    int id = Integer.valueOf(request.getParameter(&quot;userId&quot;));

	    try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	        PreparedStatement stm = conexiune.prepareStatement(sql)) {
	        stm.setInt(1, id);
	        try (ResultSet rs = stm.executeQuery()) {
	            if (rs.next()) {
	                nr = rs.getInt(&quot;conramase&quot;); // aici da, le ia pe alea cu status pozitiv sau 0
	            }
	        }
	    } catch (SQLException e) {
	        printSQLException(e);
	        throw new IOException(&quot;Eroare la baza de date&quot;, e);
	    }

	    return nr > 3;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-76wEVdEfCS7cth2SLu0w" name="maimultezile" specification="_VtSxIkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-76wUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-76wkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>// initializare si declarare variabile
	    int nr = 0;
	    int id = Integer.valueOf(request.getParameter(&quot;userId&quot;));
	    Set&lt;LocalDate> libere = getLibereLegale();
	    String sql = &quot;SELECT start_c, end_c FROM concedii WHERE id_ang = ? and status >= 0;&quot;;
	    String sql2 = &quot;select * from useri where id = ?;&quot;;
	    int tip = 0;
	    
	    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
	    
	    try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	    	PreparedStatement stm = conexiune.prepareStatement(sql);  
	    	PreparedStatement stm2 = conexiune.prepareStatement(sql2)) {
	        stm2.setInt(1, id);
	        try (ResultSet rezultat = stm2.executeQuery()) {
	            if (rezultat.next()) {
	                tip = rezultat.getInt(&quot;tip&quot;);
	            }
	        }
	        
	        stm.setInt(1, id);
	        try (ResultSet rezultat = stm.executeQuery()) {
	            while (rezultat.next()) {
	                LocalDate inceput = rezultat.getDate(&quot;start_c&quot;).toLocalDate();
	                LocalDate sfarsit = rezultat.getDate(&quot;end_c&quot;).toLocalDate();
	                while (!inceput.isAfter(sfarsit)) {
	                    if (!libere.contains(inceput)) {
	                        nr++;
	                    }
	                    inceput = inceput.plusDays(1);
	                }
	            }
	        }
	        
	    } catch (SQLException e) {
	        printSQLException(e);
	        throw new IOException(&quot;Eroare la baza de date&quot;, e);
	    }
	    
	    // daca e utilizator de tip 2, atunci nu are voie mai mult de 30 zile, altfel are 40
	    if (tip == 2) {
	        return nr &lt; 30;
	    }
	    
	    return nr &lt; 40;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-76w0VdEfCS7cth2SLu0w" name="getLibereLegale" specification="_VtSxJkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-76xEVdEfCS7cth2SLu0w" type="_T_hnwEVdEfCS7cth2SLu0w" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-76xUVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>return new HashSet&lt;>(Arrays.asList(
	        LocalDate.of(LocalDate.now().getYear(), 1, 1),
	        LocalDate.of(LocalDate.now().getYear(), 1, 2),
	        LocalDate.of(LocalDate.now().getYear(), 1, 6),
	        LocalDate.of(LocalDate.now().getYear(), 1, 7),
	        LocalDate.of(LocalDate.now().getYear(), 1, 24),
	        LocalDate.of(LocalDate.now().getYear(), 5, 1),
	        LocalDate.of(LocalDate.now().getYear(), 6, 1),
	        LocalDate.of(LocalDate.now().getYear(), 8, 15),
	        LocalDate.of(LocalDate.now().getYear(), 11, 30),
	        LocalDate.of(LocalDate.now().getYear(), 12, 1),
	        LocalDate.of(LocalDate.now().getYear(), 12, 25),
	        LocalDate.of(LocalDate.now().getYear(), 12, 26)
	    ));
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-76xkVdEfCS7cth2SLu0w" name="odatavara" specification="_VtTYMUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-76x0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-76yEVdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-76yUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile
		int nr = 0;
		String sql = &quot;SELECT count(*) as total FROM concedii JOIN useri ON concedii.id_ang = useri.id WHERE id_ang = ? AND MONTH(start_c) >=6 AND MONTH(start_c) &lt;= 8 and concedii.id &lt;> ? and concedii.status >= 0;&quot;;
	    int id = Integer.valueOf(request.getParameter(&quot;idcon&quot;));
	    int uid = -1;
     String sql2 = &quot;select id_ang from concedii where id = ?;&quot;;
     
	    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
	   
	    try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;); // aci crapa
		        PreparedStatement stm = conexiune.prepareStatement(sql2); 
	    		PreparedStatement preparedStatement = conexiune.prepareStatement(sql)) {
		        stm.setInt(1, id);
		        try (ResultSet rezultat = stm.executeQuery()) {
		            if (rezultat.next()) {
		                uid = rezultat.getInt(&quot;id_ang&quot;);
		            }
		        }
		        preparedStatement.setInt(1, uid);
		        preparedStatement.setInt(2, id);
		        try (ResultSet rs = preparedStatement.executeQuery()) {
		            if (rs.next()) {
		                nr = rs.getInt(&quot;total&quot;);
		            }
		        }
		    } catch (SQLException e) {
		        printSQLException(e);
		        throw new IOException(&quot;Eroare la baza de date =(&quot;, e);
		    }

	    return nr &lt; 1;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-76ykVdEfCS7cth2SLu0w" name="contor" specification="_VtTYNkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-76y0VdEfCS7cth2SLu0w" name="startt" type="_UAIrwEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-76zEVdEfCS7cth2SLu0w" name="endd" type="_UAIrwEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-76zUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>int contor = 0;
     if (startt.getLuna() == endd.getLuna()) {
         contor = endd.getZi() - startt.getZi() + 1;
     } else {
         if (startt.getLuna() == 1 || startt.getLuna() == 3 || startt.getLuna() == 5 || startt.getLuna() == 7
                 || startt.getLuna() == 8 || startt.getLuna() == 10 || startt.getLuna() == 12) {
             contor = 31 - startt.getZi() + endd.getZi() + 1;
         } else if (startt.getLuna() == 4 || startt.getLuna() == 6 || startt.getLuna() == 9 || startt.getLuna() == 11) {
             contor = 30 - startt.getZi() + endd.getZi() + 1;
         } else {
             if (startt.getAn() % 4 == 0) {
                 contor = 29 - startt.getZi() + endd.getZi() + 1;
             } else {
                 contor = 28 - startt.getZi() + endd.getZi() + 1;
             }
         }
     }
     return contor;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-76zkVdEfCS7cth2SLu0w" name="maimultezileodata" specification="_VtT_QkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-76z0VdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-760EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>int nr = 0;
		 Data start_c = stringToDate(concediu.getInceput());
	     Data end_c = stringToDate(concediu.getSfarsit());
	     nr = contor(start_c, end_c);
	     return nr &lt; 21;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-760UVdEfCS7cth2SLu0w" name="stringToDate" specification="_VtT_RkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-760kVdEfCS7cth2SLu0w" name="dateString">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-7600VdEfCS7cth2SLu0w" type="_UAIrwEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>String[] parts = dateString.split(&quot;-&quot;);
     int an = Integer.parseInt(parts[0]);
     int luna = Integer.parseInt(parts[1]);
     int zi = Integer.parseInt(parts[2]);
     return new Data(zi, luna, an);
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-761EVdEfCS7cth2SLu0w" name="preamulti" specification="_VtUmU0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-761UVdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-761kVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-7610VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare date
	    int nr = -1;
	    int total = -1;
	    int depid = -1;
	    String sql = &quot;SELECT id_dep FROM useri WHERE id = ?&quot;;
	    String sql2 = &quot;SELECT COUNT(*) AS total FROM useri WHERE id_dep = ?&quot;;
	    String sql3 = &quot;SELECT COUNT(*) AS total FROM concedii JOIN useri ON useri.id = concedii.id_ang &quot; +
	        &quot;WHERE useri.id_dep = ? AND start_c >= ? AND end_c &lt;= ? and status > 0&quot;;
	    int id = Integer.parseInt(request.getParameter(&quot;userId&quot;));

	    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);

	    try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	        PreparedStatement stmt = conexiune.prepareStatement(sql);  
	    	PreparedStatement stmt2 = conexiune.prepareStatement(sql2);
	    	PreparedStatement stmt3 = conexiune.prepareStatement(sql3)){
	    	
	    	Data inceput = stringToDate(concediu.getInceput());
	        Data sfarsit = stringToDate(concediu.getSfarsit());

	        stmt.setInt(1, id);
	        try (ResultSet rezultat = stmt.executeQuery()) {
	            if (rezultat.next()) {
	                depid = rezultat.getInt(&quot;id_dep&quot;);
	            }
	        }
	        
	        stmt2.setInt(1, depid);
	        try (ResultSet rsTotalUsers = stmt2.executeQuery()) {
	            if (rsTotalUsers.next()) {
	                total = rsTotalUsers.getInt(&quot;total&quot;);
	            }
	        }

	        stmt3.setInt(1, depid);
	        stmt3.setDate(2, java.sql.Date.valueOf(inceput.getAn() + &quot;-&quot; + inceput.getLuna() + &quot;-&quot; + inceput.getZi()));
	        stmt3.setDate(3, java.sql.Date.valueOf(sfarsit.getAn() + &quot;-&quot; + sfarsit.getLuna() + &quot;-&quot; + sfarsit.getZi()));
	        try (ResultSet rsTotalLeaves = stmt3.executeQuery()) {
	            if (rsTotalLeaves.next()) {
	                nr = rsTotalLeaves.getInt(&quot;total&quot;);
	            }
	        }
		        
	    } catch (SQLException e) {
	        printSQLException(e);
	        throw new IOException(&quot;Eroare la baza de date&quot;, e);
	    }
	    
	    return nr &lt; (total / 2);
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-8h0EVdEfCS7cth2SLu0w" name="preamultid" specification="_VtUmWEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-8h0UVdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-8h0kVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-8h00VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile
		int nr = 0;
		String sql = &quot;select count(*) as total from concedii join useri on useri.id = concedii.id_ang where day(start_c) >= ? and month(start_c) = ?&quot;
				+ &quot; and day(start_c) &lt;= ? and month(start_c) &lt;= ? and status > 0 group by useri.tip having useri.tip = 0;&quot;;
		Data inceput = stringToDate(concediu.getInceput());
     Data sfarsit = stringToDate(concediu.getSfarsit());
	    Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
	    
	    try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	        PreparedStatement stm = conexiune.prepareStatement(sql)) {

	        stm.setInt(1, inceput.getZi());
	        stm.setInt(2, inceput.getLuna());
	        stm.setInt(3, sfarsit.getZi());
	        stm.setInt(4, sfarsit.getLuna());
	        try (ResultSet rezultat = stm.executeQuery() ) {
	            if (rezultat.next()) {
	                nr = rezultat.getInt(&quot;total&quot;);
	            }
	        }
	    } catch (SQLException e) {
	        printSQLException(e);
	        throw new IOException(&quot;Eroare la baza de date&quot;, e);
	    }

	    return nr &lt; 2;
		</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-8h1EVdEfCS7cth2SLu0w" name="printSQLException" specification="_VtVNYUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-8h1UVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {
         if (e instanceof SQLException) {
             e.printStackTrace(System.err);
             System.err.println(&quot;Stare: &quot; + ((SQLException) e).getSQLState());
             System.err.println(&quot;Cod eroare: &quot; + ((SQLException) e).getErrorCode());
             System.err.println(&quot;Explicatie: &quot; + e.getMessage());
             Throwable t = ex.getCause();
             while (t != null) {
                 System.out.println(&quot;Cauza: &quot; + t);
                 t = t.getCause();
             }
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VtRjAEVdEfCS7cth2SLu0w" name="ModifConServlet" method="_V-7TuUVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VtRjAUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VtRjAkVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedComment xmi:id="_V_etVkVdEfCS7cth2SLu0w">
            <body>constructor
     * @see HttpServlet#HttpServlet()</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtRjA0VdEfCS7cth2SLu0w" type="_VtQ78EVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VtRjBUVdEfCS7cth2SLu0w" name="init" method="_V-7Tu0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_etV0VdEfCS7cth2SLu0w">
            <body>initializarea datelor de clasa</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:id="_VtRjB0VdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V-7TvEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_etWEVdEfCS7cth2SLu0w">
            <body>in cazul in care se face un get pe server, serverul e mai mult folosit pentru post
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtRjCEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtRjCUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VtSKEEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V-7Tv0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_etWUVdEfCS7cth2SLu0w">
            <body>@see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtSKEUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtSKEkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VtSKFEVdEfCS7cth2SLu0w" name="oktip" visibility="private" method="_V-7TwkVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_etWkVdEfCS7cth2SLu0w">
            <body>verificare daca se incareaza in numarul de zile conform tipului de concediu (concediu medical, concediu de odihna, concediu fara plata etc)
	 * @param concediul
	 * @return true daca durata concediului este mai mica decat cea prevazuta pentru acel tip de concediu
	 * @throws SQLException</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtSKFUVdEfCS7cth2SLu0w" name="concediul" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtSKFkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtSKGEVdEfCS7cth2SLu0w" name="maimulteconcedii" isStatic="true" method="_V-7TxUVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_etW0VdEfCS7cth2SLu0w">
            <body>verificare daca are deja mai mult de 3 concedii pe an
	 * @param request
	 * @return true daca are mai mult de 3 perioade diferite de concediu pe an
	 * @throws ClassNotFoundException
	 * @throws IOException</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtSKGUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtSxIEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtSxIkVdEfCS7cth2SLu0w" name="maimultezile" isStatic="true" method="_V-76wEVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_etXEVdEfCS7cth2SLu0w">
            <body>verificare daca are deja mai multe zile pe an
	 * @param request
	 * @return true daca are mai mult de 30/40 zile de concediu luate per total pe an
	 * @throws ClassNotFoundException
	 * @throws IOException</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtSxI0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtSxJEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtSxJkVdEfCS7cth2SLu0w" name="getLibereLegale" isStatic="true" method="_V-76w0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_etXUVdEfCS7cth2SLu0w">
            <body>
	 * @return map cu liberele legale</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtSxJ0VdEfCS7cth2SLu0w" type="_T_hnwEVdEfCS7cth2SLu0w" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VtSxKEVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtTYMUVdEfCS7cth2SLu0w" name="odatavara" isStatic="true" method="_V-76xkVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VtTYMkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtTYM0VdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtTYNEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtTYNkVdEfCS7cth2SLu0w" name="contor" isStatic="true" method="_V-76ykVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_etXkVdEfCS7cth2SLu0w">
            <body>Functie ce numara cate zile sunt intre 2 date de tipul Data creat de mine
	 * @param startt
	 * @param endd
	 * @return numarul de zile dintre doua date</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtTYN0VdEfCS7cth2SLu0w" name="startt" type="_UAIrwEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtTYOEVdEfCS7cth2SLu0w" name="endd" type="_UAIrwEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtT_QEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtT_QkVdEfCS7cth2SLu0w" name="maimultezileodata" isStatic="true" method="_V-76zkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_etX0VdEfCS7cth2SLu0w">
            <body>verificare numar de zile / concediu
	 * @param concediu
	 * @return daca un concediu are mai mult de 21 de zile</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtT_Q0VdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtT_REVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtT_RkVdEfCS7cth2SLu0w" name="stringToDate" isStatic="true" method="_V-760UVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_etYEVdEfCS7cth2SLu0w">
            <body>Transformare tip de date din String in date
	 * @param dateString
	 * @return data in format Data</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtUmUEVdEfCS7cth2SLu0w" name="dateString">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtUmUUVdEfCS7cth2SLu0w" type="_UAIrwEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VtUmU0VdEfCS7cth2SLu0w" name="preamulti" isStatic="true" method="_V-761EVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_etYUVdEfCS7cth2SLu0w">
            <body>Verificare daca intr-un departament sunt plecati mai mult de jumatate de angajati
	 * @param concediu
	 * @param request
	 * @return
	 * @throws ClassNotFoundException
	 * @throws IOException</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtUmVEVdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtUmVUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtUmVkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtUmWEVdEfCS7cth2SLu0w" name="preamultid" isStatic="true" method="_V-8h0EVdEfCS7cth2SLu0w" raisedException="_UCPkkUVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_etYkVdEfCS7cth2SLu0w">
            <body>Verificare daca mai mult de 2 directori sunt plecati in concediu
	 * @param concediu
	 * @param request
	 * @return true, daca daca mai mult de 2 directori sunt plecati in concediu
	 * @throws ClassNotFoundException
	 * @throws IOException</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtUmWUVdEfCS7cth2SLu0w" name="concediu" type="_T9pYcEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtUmWkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtUmW0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtVNYUVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" isStatic="true" method="_V-8h1EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_etY0VdEfCS7cth2SLu0w">
            <body>Afiseaza frumos / Pretty print o eroare dintr-o baza de date
	 * @param ex</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtVNYkVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VtWbgEVdEfCS7cth2SLu0w" name="ModifDepServlet">
        <ownedComment xmi:id="_V_etZEVdEfCS7cth2SLu0w">
          <body>Servlet pentru modificarea numelor departamentelor.</body>
        </ownedComment>
        <generalization xmi:id="_VtXCk0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-FmMEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-FmMUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-FmMkVdEfCS7cth2SLu0w" name="dep" visibility="private" type="_S4JwAEVdEfCS7cth2SLu0w" association="_WAFKQUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-8h1kVdEfCS7cth2SLu0w" name="init" specification="_VtWbgUVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>dep = new ModifDepDao();
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-8h10VdEfCS7cth2SLu0w" name="doPost" specification="_VtXCkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-8h2EVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-8h2UVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;text/html;charset=UTF-8&quot;);
     String departament = request.getParameter(&quot;username&quot;);
     String old = request.getParameter(&quot;password&quot;);

     if (departament == null || old == null) {
         PrintWriter out = response.getWriter();
 		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
 		    out.println(&quot;alert('Nu s-au încărcat datele necesare pentru modificare!');&quot;);
 		    out.println(&quot;window.location.href = 'modifdeldep.jsp';&quot;);
 		    out.println(&quot;&lt;/script>&quot;);
 		    out.close();
         return;
     }

     if (!NameValidator.validateName(departament)) {
         response.sendRedirect(&quot;modifdep2.jsp?n=true&quot;);
         return;
     }

     try {
         dep.modif(departament, old);

         PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Modificare efectuată cu succes!');&quot;);
		    out.println(&quot;window.location.href = 'modifdeldep.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();

		 // Cea mai simplă alternativă
		    new Thread(() -> {
		        try {
		            // Codul operațiunii asincrone (ex: trimitere email)
		            MailAsincron.send4(old, departament);
		        } catch (Exception e) {
		            e.printStackTrace();
		        }
		    }).start();

     } catch (Exception e) {
		    PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Eroare la modificare: &quot; + e.getMessage() + &quot;');&quot;);
		    out.println(&quot;window.location.href = 'modifdeldep.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VtWbgUVdEfCS7cth2SLu0w" name="init" method="_V-8h1kVdEfCS7cth2SLu0w"/>
        <ownedOperation xmi:id="_VtXCkEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V-8h10VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VtXCkUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtXCkkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VtXpoEVdEfCS7cth2SLu0w" name="ModifPasdServlet">
        <generalization xmi:id="_VtYQtkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-FmNEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-FmNUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-FmNkVdEfCS7cth2SLu0w" name="employeeDao" visibility="private" type="_S39iwEVdEfCS7cth2SLu0w" association="_WAFKREVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-8h2kVdEfCS7cth2SLu0w" name="init" specification="_VtXpoUVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>employeeDao = new ModifPasdDao();
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-8h20VdEfCS7cth2SLu0w" name="doPost" specification="_VtXpokVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-8h3EVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-8h3UVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>int id = Integer.parseInt(request.getParameter(&quot;id&quot;));
 	String cod =  request.getParameter(&quot;cnp&quot;);
 	if (cod != null) {
 		 String cod2 = null;
 	        try {
 	            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
 	            try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
 	                 PreparedStatement preparedStatement = connection.prepareStatement(&quot;SELECT cnp FROM useri WHERE id = ?&quot;)) {
 	                preparedStatement.setInt(1, id);
 	                try (ResultSet rs = preparedStatement.executeQuery()) {
 	                    if (rs.next()) {
 	                        cod2 = rs.getString(&quot;cnp&quot;);
 	                    }
 	                }
 	            }
 	        } catch (ClassNotFoundException e) {
 				// TODO Auto-generated catch block
				 response.setContentType(&quot;text/html;charset=UTF-8&quot;);
				    PrintWriter out = response.getWriter();
				    out.println(&quot;&lt;script type='text/javascript'>&quot;);
				    out.println(&quot;alert('Nu a gasit clasa - debug only!');&quot;);
				    out.println(&quot;window.location.href = 'err.jsp';&quot;);
				    out.println(&quot;&lt;/script>&quot;);
				    out.close();
				    e.printStackTrace();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				response.setContentType(&quot;text/html;charset=UTF-8&quot;);
				 PrintWriter out = response.getWriter();
				    out.println(&quot;&lt;script type='text/javascript'>&quot;);
				    out.println(&quot;alert('Eroare la baza de date - debug only!');&quot;);
				    out.println(&quot;window.location.href = 'err.jsp';&quot;);
				    out.println(&quot;&lt;/script>&quot;);
				    out.close();
				    e.printStackTrace();
			}
 	        if (cod2.compareTo(cod) != 0) {
 	        	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
				    PrintWriter out = response.getWriter();
				    out.println(&quot;&lt;script type='text/javascript'>&quot;);
				    out.println(&quot;alert('Cod introdus gresit!');&quot;);
				    out.println(&quot;window.location.href = 'forgotpass.jsp';&quot;);
				    out.println(&quot;&lt;/script>&quot;);
				    out.close();
 	        	return;
 	        }
 	}
     
     String password = request.getParameter(&quot;password&quot;);

     // Validate password
     if (!PasswordValidator.validatePassword(password)) {
     	PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Nume de utilizator introdus gresit!');&quot;);
		    out.println(&quot;window.location.href = 'modifpasd2.jsp?p=true';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
     	// response.sendRedirect(&quot;modifpasd2.jsp?p=true&quot;);
     	return;
     }

     // Fetch username from the database using the ID
     String username = fetchUsernameById(id);
     // System.out.println(username);
     if (username == null) {
     	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
			    PrintWriter out = response.getWriter();
			    out.println(&quot;&lt;script type='text/javascript'>&quot;);
			    out.println(&quot;alert('Nume de utilizator introdus gresit!');&quot;);
			    out.println(&quot;window.location.href = 'modifdel.jsp';&quot;);
			    out.println(&quot;&lt;/script>&quot;);
			    out.close();
     	return;
     }

     // Obțin parola veche (hash-ul din baza de date)
     String oldHashedPassword = fetchPasswdById(id);
     if (oldHashedPassword == null) {
     	PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Nu s-a putut obtine parola veche!');&quot;);
		    out.println(&quot;window.location.href = 'modifdel.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
         return;
     }

     // Compar parola nouă cu cea veche folosind BCrypt.checkpw()
     if (BCrypt.checkpw(password, oldHashedPassword)) {
     	PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('E aceeasi parola!');&quot;);
		    out.println(&quot;window.location.href = 'modifdel.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
 	return;
     }
     
     // Update password in database
     try {
         employeeDao.registerEmployee(password, username);
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);
         PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Modificare cu succes!');&quot;);
		    out.println(&quot;window.location.href = 'homedir.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
     } catch (Exception e) {
     	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
		    PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Nu s-a putut modifica din motive necunoscute.');&quot;);
		    out.println(&quot;window.location.href = 'modifdel.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
			e.printStackTrace();
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-8h3kVdEfCS7cth2SLu0w" name="fetchUsernameById" specification="_VtYQsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-8h30VdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-8h4EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>String username = null;
     try {
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
         try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
              PreparedStatement preparedStatement = connection.prepareStatement(&quot;SELECT username FROM useri WHERE id = ?&quot;)) {
             preparedStatement.setInt(1, userId);
             try (ResultSet rs = preparedStatement.executeQuery()) {
                 if (rs.next()) {
                     username = rs.getString(&quot;username&quot;);
                 }
             }
         }
     } catch (ClassNotFoundException | SQLException e) {
         e.printStackTrace();
     }
     return username;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-8h4UVdEfCS7cth2SLu0w" name="fetchPasswdById" specification="_VtYQs0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-8h4kVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-8h40VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>String pass = null;
     try {
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
         try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
              PreparedStatement preparedStatement = connection.prepareStatement(&quot;SELECT password FROM useri WHERE id = ?&quot;)) {
             preparedStatement.setInt(1, userId);
             try (ResultSet rs = preparedStatement.executeQuery()) {
                 if (rs.next()) {
                     pass = rs.getString(&quot;password&quot;);
                 }
             }
         }
     } catch (ClassNotFoundException | SQLException e) {
         e.printStackTrace();
     }
     return pass;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VtXpoUVdEfCS7cth2SLu0w" name="init" method="_V-8h2kVdEfCS7cth2SLu0w"/>
        <ownedOperation xmi:id="_VtXpokVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V-8h20VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VtXpo0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtXppEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VtYQsEVdEfCS7cth2SLu0w" name="fetchUsernameById" visibility="private" method="_V-8h3kVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VtYQsUVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtYQskVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtYQs0VdEfCS7cth2SLu0w" name="fetchPasswdById" visibility="private" method="_V-8h4UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VtYQtEVdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtYQtUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VtY3wEVdEfCS7cth2SLu0w" name="ModifUsrServlet">
        <generalization xmi:id="_VtZe1UVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-GNQUVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-GNQkVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-9I4EVdEfCS7cth2SLu0w" name="doPost" specification="_VtZe0UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-9I4UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-9I4kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>//String originalUsername = request.getParameter(&quot;originalUsername&quot;);
		String idd = request.getParameter(&quot;id&quot;);
		System.out.println(idd);
 	int id = Integer.valueOf(request.getParameter(&quot;id&quot;));
 	int id2 = Integer.valueOf(idd);
     String newUsername = request.getParameter(&quot;username&quot;);
     String nume = request.getParameter(&quot;nume&quot;);
     String prenume = request.getParameter(&quot;prenume&quot;);
     String data_nasterii = request.getParameter(&quot;data_nasterii&quot;);
     String adresa = request.getParameter(&quot;adresa&quot;);
     String email = request.getParameter(&quot;email&quot;);
     String telefon = request.getParameter(&quot;telefon&quot;);
     int departament = Integer.valueOf(request.getParameter(&quot;departament&quot;));
     int tip = Integer.valueOf(request.getParameter(&quot;tip&quot;));
     
     if (!NameValidator.validateName(nume)) {
     	if (tip != 4) {
     		response.sendRedirect(&quot;despr.jsp?n=true&quot;);
		    } else {
		    	response.sendRedirect(&quot;signin.jsp?n=true&quot;);
		    }
         return;
     }
     if (!NameValidator.validateName(prenume)) {
     	if (tip != 4) {
     		response.sendRedirect(&quot;despr.jsp?pn=true&quot;);
		    } else {
		    	response.sendRedirect(&quot;signin.jsp?pn=true&quot;);
		    }
         return;
     }
     if (!EmailValidator.validare(email)) {
     	if (tip != 4) {
     		response.sendRedirect(&quot;despr.jsp?e=true&quot;);
		    } else {
		    	response.sendRedirect(&quot;signin.jsp?e=true&quot;);
		    }
         return;
     }

     if (!PhoneNumberValidator.validatePhoneNumber(telefon)) {
     	if (tip != 4) {
     		response.sendRedirect(&quot;despr.jsp?t=true&quot;);
		    } else {
		    	response.sendRedirect(&quot;signin.jsp?t=true&quot;);
		    }
         return;
     }

     if (!CheckerDataNasterii.valideaza(data_nasterii)) {
     	if (tip != 4) {
     		response.sendRedirect(&quot;despr.jsp?dn=true&quot;);
		    } else {
		    	response.sendRedirect(&quot;signin.jsp?dn=true&quot;);
		    }
         return;
     }
     
     int nrsef = -1;
     int nrdir = -1;
     try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
   	         PreparedStatement preparedStatement = connection.prepareStatement(&quot;select count(*) as total from useri where tip = 0 and id != ? group by id_dep having id_dep = ?;&quot;);
     		 PreparedStatement stmt = connection.prepareStatement(&quot;select count(*) as total from useri where tip = 3 and id != ? group by id_dep having id_dep = ?;&quot;)) {
     	preparedStatement.setInt(2, departament);
     	preparedStatement.setInt(1, id2);
     	stmt.setInt(2, departament);
     	stmt.setInt(1, id2);
               ResultSet rs = preparedStatement.executeQuery();
               ResultSet res = stmt.executeQuery();
            while (rs.next()) {
               nrsef = rs.getInt(&quot;total&quot;);
            }
            while (res.next()) {
                nrdir = res.getInt(&quot;total&quot;);
            }
        } catch (SQLException e) {
		        // printSQLException(e);
		        response.setContentType(&quot;text/html;charset=UTF-8&quot;);
				 PrintWriter out1 = response.getWriter();
				    out1.println(&quot;&lt;script type='text/javascript'>&quot;);
				    out1.println(&quot;alert('Eroare la baza de date - debug only!');&quot;);
				    if (tip != 4) {
				    	out1.println(&quot;window.location.href = 'despr.jsp';&quot;);
				    } else {
				    out1.println(&quot;window.location.href = 'modifdel.jsp';&quot;);
				    }
				    out1.println(&quot;&lt;/script>&quot;);
				    out1.close();
				    e.printStackTrace();
		        throw new IOException(&quot;Eroare la baza de date =(&quot;, e);
		       
		    }
     
     if (tip == 3 &amp;&amp; nrsef == 2) {
     	response.sendRedirect(&quot;despr.jsp?pms=true&quot;);
         return;
     }
     
     if (tip == 0 &amp;&amp; nrdir == 2) {
     	response.sendRedirect(&quot;despr.jsp?pmd=true&quot;);
         return;
     }

     try {
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
         Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
         PreparedStatement preparedStatement = connection.prepareStatement(&quot;UPDATE useri SET nume =?, prenume = ?, data_nasterii = ?, adresa = ?, email = ?, telefon = ?, username = ?, id_dep = ?, tip = ? WHERE id = ?&quot;);
         preparedStatement.setString(1, nume);
         preparedStatement.setString(2, prenume);
         preparedStatement.setString(3, data_nasterii);
         preparedStatement.setString(4, adresa);
         preparedStatement.setString(5, email);
         preparedStatement.setString(6, telefon);
         preparedStatement.setString(7, newUsername);
         preparedStatement.setInt(8, departament);
         preparedStatement.setInt(9, tip);
         //preparedStatement.setString(10, originalUsername);
         preparedStatement.setInt(10, id);
         preparedStatement.executeUpdate();

         preparedStatement.close();
         connection.close();
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);
         PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Modificare cu succes!');&quot;);
		    if (tip != 4) {
		    	out.println(&quot;window.location.href = 'despr.jsp';&quot;);
		    } else {
		    out.println(&quot;window.location.href = 'modifdel.jsp';&quot;);
		    }
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
     } catch (Exception e) {
     	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
		    PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Nu s-a putut modifica din motive necunoscute.');&quot;);
		    if (tip != 4) {
		    	out.println(&quot;window.location.href = 'despr.jsp';&quot;);
		    } else {
		    out.println(&quot;window.location.href = 'modifdel.jsp';&quot;);
		    }
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
			e.printStackTrace();
     }
     
     Part filePart = request.getPart(&quot;image&quot;); // Retrieves &lt;input type=&quot;file&quot; name=&quot;image&quot;>
     InputStream inputStream = null;
     if (filePart != null) {
         // Obtains input stream of the upload file
         inputStream = filePart.getInputStream();
     }
     Connection conn = null; // connection to the database
     try {
         // Connects to the database
         DriverManager.registerDriver(new com.mysql.cj.jdbc.Driver());
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);

         // Constructs SQL statement
         String sql = &quot;UPDATE useri profil=? WHERE id=?&quot;;
         PreparedStatement statement = conn.prepareStatement(sql);

         if (inputStream != null) {
             // Fetches input stream of the upload file for the blob column
             statement.setBlob(1, inputStream);
         }

         int userId = Integer.parseInt(request.getParameter(&quot;id&quot;)); // Fetch this from your form or session
         statement.setInt(2, userId);

         // Sends the statement to the database server
         int row = statement.executeUpdate();
         if (row > 0) {
         }
     } catch (SQLException ex) {
         ex.printStackTrace();
     } finally {
         if (conn != null) {
             // Closes the database connection
             try {
                 conn.close();
             } catch (SQLException ex) {
                 ex.printStackTrace();
             }
         }
     }  
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VtZe0UVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V-9I4EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VtZe0kVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtZe00VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vtas8EVdEfCS7cth2SLu0w" name="MyUserServlet">
        <generalization xmi:id="_Vtb7HEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-GNREVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-GNRUVdEfCS7cth2SLu0w" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-GNR0VdEfCS7cth2SLu0w" name="employeeDao" visibility="private" type="_S4d5EEVdEfCS7cth2SLu0w" association="_WAFxUUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-GNSEVdEfCS7cth2SLu0w" name="DB_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-GNSUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-G0UUVdEfCS7cth2SLu0w" name="DB_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-G0UkVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-G0VEVdEfCS7cth2SLu0w" name="DB_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-G0VUVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-9I40VdEfCS7cth2SLu0w" name="init" specification="_Vtas8kVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>employeeDao = new MyUserDao();
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-9I5EVdEfCS7cth2SLu0w" name="usernameExists" specification="_VtbUAUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-9I5UVdEfCS7cth2SLu0w" name="connection" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-9I5kVdEfCS7cth2SLu0w" name="username">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-9I50VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>String query = &quot;SELECT 1 FROM useri WHERE username = ? LIMIT 1&quot;; //  Limităm rezultatele la 1
     try (PreparedStatement stmt = connection.prepareStatement(query)) {
         stmt.setString(1, username);
         try (ResultSet rs = stmt.executeQuery()) {
             return rs.next(); //  Returnează `true` dacă există, `false` dacă nu
         }
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-9I6EVdEfCS7cth2SLu0w" name="generareUsername" specification="_VtbUBkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-9I6UVdEfCS7cth2SLu0w" name="nume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-9I6kVdEfCS7cth2SLu0w" name="prenume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-9I60VdEfCS7cth2SLu0w" name="data_nasterii">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-9I7EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>//  Evităm adăugarea recursivă în listă
     List&lt;String> potentialUsernames = new ArrayList&lt;>();
     
     //  Construim nume fără să creștem lista exponențial
     potentialUsernames.add(formatUsername(prenume, nume, null));
     if (prenume.contains(&quot;-&quot;)) {
         potentialUsernames.add(formatUsername(prenume.split(&quot;-&quot;)[1], nume, null));
     }
     
     //  Adăugăm variante cu data nașterii
     String zzll = data_nasterii.substring(8, 10) + data_nasterii.substring(5, 7);  // ZZLL
     String zzllaa = zzll + data_nasterii.substring(2, 4);  // ZZLLAA
     potentialUsernames.add(formatUsername(prenume, nume, zzll));
     potentialUsernames.add(formatUsername(prenume, nume, zzllaa));

     try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
         for (String username : potentialUsernames) {
             if (!usernameExists(connection, username)) {
                 return username;
             }
         }

         //  Dacă toate variantele sunt ocupate, adăugăm un număr incremental (până la 99)
         String baseUsername = potentialUsernames.get(potentialUsernames.size() - 1);
         for (int counter = 2; counter &lt; 100; counter++) {
             String newUsername = baseUsername + counter;
             if (!usernameExists(connection, newUsername)) {
                 return newUsername;
             }
         }

     } catch (SQLException e) {
         e.printStackTrace();
     }

     //  Fallback final (dacă toate numele sunt ocupate)
     return &quot;user&quot; + System.currentTimeMillis();
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-9I7UVdEfCS7cth2SLu0w" name="formatUsername" specification="_Vtb7EkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-9I7kVdEfCS7cth2SLu0w" name="prenume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-9I70VdEfCS7cth2SLu0w" name="nume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-9I8EVdEfCS7cth2SLu0w" name="extra">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-9I8UVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>String base = prenume.split(&quot;-&quot;)[0] + &quot;.&quot; + nume.split(&quot;-&quot;)[0];  // Evităm split necontrolat
     return (extra != null) ? base + extra : base;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-9I8kVdEfCS7cth2SLu0w" name="doPost" specification="_Vtb7GEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-9I80VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-9I9EVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String nume = request.getParameter(&quot;nume&quot;);
 	String prenume = request.getParameter(&quot;prenume&quot;);
 	String data_nasterii = request.getParameter(&quot;data_nasterii&quot;);
 	// String adresa = request.getParameter(&quot;data_nasterii&quot;); // nu mai am nevoie de asta
 	String email = request.getParameter(&quot;email&quot;); // email personal, ca sa poata primi prin mail instructiuni utilizare platforma -> vei avea in bd o coloana cu email personal =))
 	String telefon = request.getParameter(&quot;telefon&quot;); // telefon de serviciu are numai hr ul, dar asta hai ca e prea specific asa ca da 
     // String username = request.getParameter(&quot;username&quot;); // asta o sa l generezi tu
     // String password = request.getParameter(&quot;password&quot;); // asta by default faci un TFRiD2024:) pe care toata lumea tre sa l schimbe la first use sau ceva 
 	// -> faci un compare cu TFRiD2024:) si daca are parola asta il pui sa si-o schimbe =))
 	String password = &quot;TFRiD2024:)&quot;; // se incadreaza in standard, adica 
 	// minim o litera mare, minim o litera mica, minim un caractrer special, minim o cifra, cifre si litere neconsecutive, lungime minima de 8 caractere
     int dep = Integer.valueOf(request.getParameter(&quot;departament&quot;));
     int tip = Integer.valueOf(request.getParameter(&quot;rang&quot;));
     int pozitie = Integer.valueOf(request.getParameter(&quot;pozitie&quot;));
     String cnp = request.getParameter(&quot;cnp&quot;);
     int id = RandomNumberGenerator.generate();
     String culoare = RandomColorGenerator.generate(id);
     String username = new String(generareUsername(nume, prenume, data_nasterii));
     MyUser employee = new MyUser();
     employee.setNume(nume);
     employee.setPrenume(prenume);
     employee.setData_nasterii(data_nasterii);
    // employee.setAdresa(adresa);
     employee.setEmail(email);
     employee.setTelefon(telefon);
     employee.setUsername(username);
     employee.setPassword(password);
     employee.setDepartament(dep);
     employee.setTip(tip);
     employee.setCnp(cnp);
     employee.setCuloare(culoare);
     /* 
     if (!PasswordValidator.validatePassword(password)) {
         response.sendRedirect(&quot;signin.jsp?p=true&quot;);
         return;
     }
     */
     if (!CNPValidator.isValidCNP(cnp)) {
         response.sendRedirect(&quot;signin.jsp?cnp=true&quot;);
         return;
     }
     if (!NameValidator.validateName(nume)) {
         response.sendRedirect(&quot;signin.jsp?n=true&quot;);
         return;
     }
     if (!NameValidator.validateName(prenume)) {
         response.sendRedirect(&quot;signin.jsp?pn=true&quot;);
         return;
     }
     if (!EmailValidator.validare(email)) {
         response.sendRedirect(&quot;signin.jsp?e=true&quot;);
         return;
     }

     if (!PhoneNumberValidator.validatePhoneNumber(telefon)) {
         response.sendRedirect(&quot;signin.jsp?t=true&quot;);
         return;
     }

     if (!CheckerDataNasterii.valideaza(data_nasterii)) {
         response.sendRedirect(&quot;signin.jsp?dn=true&quot;);
         return;
     }
    
     try {
         employeeDao.registerEmployee(employee);
         
      // trimit notificare la angajat
         
         GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;, &quot;rtmz fzcp onhv minb&quot;);
         String to = &quot;&quot;;
        
         try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
    	         PreparedStatement stmt = connection.prepareStatement(&quot;select email from useri where id_dep = ? and username != ?;&quot;
    	         		+ &quot;&quot;)) {
    	        stmt.setInt(1, dep);
    	        stmt.setString(2, username); 
    	        ResultSet rs = stmt.executeQuery();
    	        if (rs.next()) {
    	        	while (rs.next()) {
    	        		to = rs.getString(&quot;email&quot;);
        	            

     	    	    String subject1 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;
     	    	    String message11 = &quot;&lt;h1>Ultimile noutati &lt;/h1>&quot;; 
     	    	    String message12 = &quot;&lt;h2>Avem un nou coleg de departament si anume pe &quot; + nume + &quot; &quot; + prenume + &quot;! &lt;/h2>&quot;; 
     	    	    
     	    	    String message16 = &quot;&lt;p>Sa-i uram bun venit si sa facem cunostinta cu aceasta persoana. &amp;#x1F609;\r\n&quot;
     	    	    		+ &quot; &lt;br> Doar suntem o familie! &amp;#x1F917;\r\n&quot;
     	    	    		+ &quot; &lt;br> Va dorim toate cele bune! &amp;#x1F607; \r\n&quot;
     	    	    		+ &quot; &lt;/p>&quot;;
     	    	    String message1 = message11 + message12 + message16 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;\r\n&quot;
     	    	    		+ &quot;&lt;/i>&lt;/b>&quot;;
     	    	   
     	    	    try {
     	    	        sender.send(subject1, message1, &quot;liviaaamp@gmail.com&quot;, to);
     	    	       
     	    	    } catch (Exception e) {
     	    	        e.printStackTrace();
     	    	       
     	    	    }  
                 
    	        	}
    	            
    	        }
    	    } catch (SQLException e) {
    	        throw new ServletException(&quot;Eroare BD =(&quot;, e);
    	    } 
         
         String subject1 = &quot;Bun venit in companie!&quot;;
 	    String message11 = &quot;&lt;h1>Ne bucuram sa va avem in echipa noastra! =) &lt;/h1>&quot;; 
 	    String message12 = &quot;&lt;h2>Ne face placere de cunostinta! Mult succes in continuare! &lt;/h2>&quot;; 
 	    String message13 = &quot;&lt;h3>Date de conectare: &lt;/h3> &lt;p> &lt;b>Nume de utilizator: &lt;/b>&quot; + username + &quot;&lt;br>&lt;b>Parola: &lt;/b>&quot; + password + &quot;&lt;br>&lt;/p>&quot;;
 	    String message16 = &quot;&lt;p>Mai jos aveti atasat un scurt ghid de utilizare al platfomei. =) &lt;br> Va dorim toate cele bune! &amp;#x1F607; \r\n&quot;
 	    		+ &quot; &lt;/p>&quot;;
 	    String message1 = message11 + message12 + message13 + message16 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;\r\n&quot;
 	    		+ &quot;&lt;/i>&lt;/b>&quot;;
 	   
 	    try {
 	        sender.sendattach(subject1, message1, &quot;liviaaamp@gmail.com&quot;, email, &quot;C:\\Users\\Popi\\eclipse-workspace\\Proiect\\ghid.pdf&quot;);
 	       
 	    } catch (Exception e) {
 	        e.printStackTrace();
 	       
 	    }  
         
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);
         PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Adaugare cu succes!');&quot;);
		    out.println(&quot;window.location.href = 'modifdel.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
     } catch (Exception e) {
     	System.out.println(&quot;NOT OK&quot;);
     	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
		    PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Nu s-a putut adauga din motive necunoscute.');&quot;);
		    out.println(&quot;window.location.href = 'modifdel.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
			e.printStackTrace();
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vtas8kVdEfCS7cth2SLu0w" name="init" method="_V-9I40VdEfCS7cth2SLu0w"/>
        <ownedOperation xmi:id="_VtbUAUVdEfCS7cth2SLu0w" name="usernameExists" visibility="private" isStatic="true" method="_V-9I5EVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VtbUAkVdEfCS7cth2SLu0w" name="connection" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtbUA0VdEfCS7cth2SLu0w" name="username">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtbUBEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtbUBkVdEfCS7cth2SLu0w" name="generareUsername" isStatic="true" method="_V-9I6EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VtbUB0VdEfCS7cth2SLu0w" name="nume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtbUCEVdEfCS7cth2SLu0w" name="prenume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtbUCUVdEfCS7cth2SLu0w" name="data_nasterii">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vtb7EEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vtb7EkVdEfCS7cth2SLu0w" name="formatUsername" visibility="private" isStatic="true" method="_V-9I7UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vtb7E0VdEfCS7cth2SLu0w" name="prenume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vtb7FEVdEfCS7cth2SLu0w" name="nume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vtb7FUVdEfCS7cth2SLu0w" name="extra">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vtb7FkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vtb7GEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V-9I8kVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vtb7GUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vtb7GkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VtdJMEVdEfCS7cth2SLu0w" name="NaturalLanguageToSQLTranslator">
        <ownedComment xmi:id="_V_fUYkVdEfCS7cth2SLu0w">
          <body>Improved translator for converting natural language questions to SQL queries&#xD;
Based on the original NaturalLanguageToSQLTranslator with enhanced capabilities</body>
        </ownedComment>
        <ownedAttribute xmi:id="_V-G0V0VdEfCS7cth2SLu0w" name="INQUIRY_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-HbYEVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-HbYUVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;da-mi&quot;, &quot;da mi&quot;, &quot;sa-mi dai&quot;, &quot;sa mi dai&quot;, &quot;arata-mi&quot;, &quot;arata mi&quot;, &#xD;&#xA;        &quot;sa-mi arati&quot;, &quot;sa mi arati&quot;, &quot;afiseaza-mi&quot;, &quot;afiseaza mi&quot;, &quot;sa-mi afisezi&quot;, &#xD;&#xA;        &quot;sa mi afisezi&quot;, &quot;scrie-mi&quot;, &quot;scrie mi&quot;, &quot;sa-mi scrii&quot;, &quot;sa mi scrii&quot;, &#xD;&#xA;        &quot;spune-mi&quot;, &quot;spune mi&quot;, &quot;sa-mi spui&quot;, &quot;sa mi spui&quot;, &quot;te rog sa&quot;, &quot;as dori ca&quot;, &#xD;&#xA;        &quot;as dori sa&quot;, &quot;vreau sa stiu&quot;, &quot;vreau sa aflu&quot;, &quot;as dori sa stiu&quot;, &#xD;&#xA;        &quot;as dori sa aflu&quot;, &quot;mi-ar placea sa stiu&quot;, &quot;sa faci&quot;, &quot;fa&quot;, &quot;da&quot;, &quot;exista&quot;,&#xD;&#xA;        &quot;gaseste&quot;, &quot;gaseste-mi&quot;, &quot;determina&quot;, &quot;calculeaza&quot;, &quot;cauta&quot;, &quot;cauta-mi&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-HbYkVdEfCS7cth2SLu0w" name="FOLLOWUP_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-HbY0VdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-HbZEVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;da, te rog&quot;, &quot;da&quot;, &quot;te rog&quot;, &quot;vreau&quot;, &quot;doresc&quot;, &quot;mi-ar placea sa stiu&quot;, &#xD;&#xA;        &quot;mi-ar placea sa aflu&quot;, &quot;ai o idee buna&quot;, &quot;buna idee&quot;, &#xD;&#xA;        &quot;nu m-am gandit la asta&quot;, &quot;nu m-am gandit la asta, asa ca te rog sa&quot;,&#xD;&#xA;        &quot;sigur&quot;, &quot;bineinteles&quot;, &quot;desigur&quot;, &quot;arata-mi&quot;, &quot;mai multe&quot;, &quot;mai mult&quot;,&#xD;&#xA;        &quot;detalii&quot;, &quot;detaliat&quot;, &quot;continua&quot;, &quot;mai departe&quot;, &quot;inteleg&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-HbZUVdEfCS7cth2SLu0w" name="STOP_KEYWORDS" isLeaf="true" isStatic="true" isReadOnly="true">
          <eAnnotations xmi:id="_V-HbZkVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_V-HbZ0VdEfCS7cth2SLu0w" key="ConstantWithGetter"/>
          </eAnnotations>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-HbaEVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-HbaUVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;nu&quot;, &quot;suficient&quot;, &quot;e suficient&quot;, &quot;nu e nevoie&quot;, &quot;nu, mersi&quot;, &quot;nu, multumesc&quot;,&#xD;&#xA;        &quot;gata&quot;, &quot;stop&quot;, &quot;opreste&quot;, &quot;inchide&quot;, &quot;am terminat&quot;, &quot;ajunge&quot;, &quot;multumesc&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-HbakVdEfCS7cth2SLu0w" name="COUNT_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-Hba0VdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-ICcEVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;cati&quot;, &quot;cate&quot;, &quot;numarul&quot;, &quot;numar&quot;, &quot;numara&quot;, &quot;cat la suta&quot;, &quot;cate procente&quot;, &#xD;&#xA;        &quot;ce procent&quot;, &quot;cati sunt&quot;, &quot;cate sunt&quot;, &quot;count&quot;, &quot;statistica&quot;, &quot;statistici&quot;,&#xD;&#xA;        &quot;total&quot;, &quot;suma&quot;, &quot;cati angajati&quot;, &quot;cate persoane&quot;, &quot;cate concedii&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-ICcUVdEfCS7cth2SLu0w" name="MINMAX_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-ICckVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-ICc0VdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;maxim&quot;, &quot;minim&quot;, &quot;cel mai mare&quot;, &quot;cea mai mare&quot;, &quot;cel mai mic&quot;, &quot;cea mai mica&quot;, &#xD;&#xA;        &quot;cei mai multi&quot;, &quot;cei mai putini&quot;, &quot;cele mai multe&quot;, &quot;cele mai putine&quot;,&#xD;&#xA;        &quot;top&quot;, &quot;primii&quot;, &quot;primele&quot;, &quot;ultimii&quot;, &quot;ultimele&quot;, &quot;maximul&quot;, &quot;minimul&quot;,&#xD;&#xA;        &quot;mai mult&quot;, &quot;mai putin&quot;, &quot;mai mare&quot;, &quot;mai mic&quot;, &quot;record&quot;, &quot;limita&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-ICdEVdEfCS7cth2SLu0w" name="LIST_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-ICdUVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-ICdkVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;care&quot;, &quot;lista&quot;, &quot;ce&quot;, &quot;detalii&quot;, &quot;detaliaza&quot;, &quot;descrie&quot;, &quot;prezinta&quot;, &quot;arata&quot;,&#xD;&#xA;        &quot;informatii&quot;, &quot;date&quot;, &quot;tabel&quot;, &quot;listare&quot;, &quot;listeaza&quot;, &quot;evidenta&quot;, &quot;rezultate&quot;,&#xD;&#xA;        &quot;toate&quot;, &quot;toti&quot;, &quot;informeaza-ma&quot;, &quot;spune-mi despre&quot;, &quot;vezi&quot;, &quot;gaseste&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-ICd0VdEfCS7cth2SLu0w" name="DEPARTMENT_KEYWORDS" isLeaf="true" isStatic="true" isReadOnly="true">
          <eAnnotations xmi:id="_V-ICeEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_V-ICeUVdEfCS7cth2SLu0w" key="ConstantWithGetter"/>
          </eAnnotations>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-ICekVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-ICe0VdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;departament&quot;, &quot;departamente&quot;, &quot;departamentul&quot;, &quot;divizie&quot;, &quot;divizia&quot;, &quot;sectie&quot;,&#xD;&#xA;        &quot;sector&quot;, &quot;echipa&quot;, &quot;team&quot;, &quot;directie&quot;, &quot;biroul&quot;, &quot;compartiment&quot;, &quot;group&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-ICfEVdEfCS7cth2SLu0w" name="FIRM_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-ICfUVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-ICfkVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;firma&quot;, &quot;toata firma&quot;, &quot;compania&quot;, &quot;organizatia&quot;, &quot;societatea&quot;, &quot;peste tot&quot;, &#xD;&#xA;        &quot;intreprinderea&quot;, &quot;in general&quot;, &quot;companie&quot;, &quot;toti&quot;, &quot;toate&quot;, &quot;global&quot;, &quot;overall&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-ICf0VdEfCS7cth2SLu0w" name="EMPLOYEE_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-ICgEVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-IpgEVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        // Primary employee terms&#xD;&#xA;        &quot;angajat&quot;, &quot;angajati&quot;, &quot;angajații&quot;, &quot;angajatul&quot;, &#xD;&#xA;        &quot;personal&quot;, &quot;personalul&quot;, &quot;persoanele&quot;, &quot;persoana&quot;,&#xD;&#xA;        &quot;salariat&quot;, &quot;salariati&quot;, &quot;salariații&quot;, &quot;salariatul&quot;,&#xD;&#xA;        &quot;lucrator&quot;, &quot;lucratori&quot;, &quot;lucrătorii&quot;, &quot;lucrătorul&quot;,&#xD;&#xA;        &quot;om&quot;, &quot;oameni&quot;, &quot;oamenii&quot;, &#xD;&#xA;        &quot;coleg&quot;, &quot;colegi&quot;, &quot;colegii&quot;, &quot;colegul&quot;,&#xD;&#xA;        &quot;membru&quot;, &quot;membri&quot;, &quot;membrii&quot;, &quot;membrul&quot;,&#xD;&#xA;        &quot;staff&quot;, &quot;stafful&quot;, &quot;echipa&quot;, &quot;echipele&quot;,&#xD;&#xA;        &#xD;&#xA;        // Employment status terms&#xD;&#xA;        &quot;activ&quot;, &quot;activi&quot;, &quot;activii&quot;, &quot;activul&quot;,&#xD;&#xA;        &quot;inactiv&quot;, &quot;inactivi&quot;, &quot;inactivii&quot;, &quot;inactivul&quot;,&#xD;&#xA;        &quot;angajat&quot;, &quot;angajata&quot;, &quot;angajate&quot;, &quot;angajatul&quot;,&#xD;&#xA;        &#xD;&#xA;        // Job-related terms&#xD;&#xA;        &quot;muncitor&quot;, &quot;muncitori&quot;, &quot;muncitorii&quot;, &quot;muncitorul&quot;,&#xD;&#xA;        &quot;colaborator&quot;, &quot;colaboratori&quot;, &quot;colaboratorii&quot;, &quot;colaboratorul&quot;,&#xD;&#xA;        &quot;resursa umana&quot;, &quot;resurse umane&quot;, &quot;resursele umane&quot;,&#xD;&#xA;        &#xD;&#xA;        // Query patterns for employees&#xD;&#xA;        &quot;cine sunt&quot;, &quot;care sunt&quot;, &quot;cati sunt&quot;, &quot;care persoane&quot;,&#xD;&#xA;        &quot;cine lucreaza&quot;, &quot;cine lucrează&quot;, &quot;care lucreaza&quot;, &quot;care lucrează&quot;,&#xD;&#xA;        &quot;lista angajati&quot;, &quot;lista personalului&quot;, &quot;toti angajatii&quot;,&#xD;&#xA;        &quot;personalul din&quot;, &quot;angajatii din&quot;, &quot;colegii din&quot;,&#xD;&#xA;        &quot;membrii din&quot;, &quot;oamenii din&quot;, &quot;cei din&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-IpgUVdEfCS7cth2SLu0w" name="LEAVE_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-IpgkVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-Ipg0VdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;concediu&quot;, &quot;concedii&quot;, &quot;vacanta&quot;, &quot;absenta&quot;, &quot;absente&quot;, &quot;vacant&quot;, &quot;liber&quot;,&#xD;&#xA;        &quot;zi libera&quot;, &quot;zile libere&quot;, &quot;odihna&quot;, &quot;medical&quot;, &quot;maternitate&quot;, &quot;paternitate&quot;,&#xD;&#xA;        &quot;invoiri&quot;, &quot;invoire&quot;, &quot;time off&quot;, &quot;absence&quot;, &quot;lipsa&quot;, &quot;inlocuire&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-IphEVdEfCS7cth2SLu0w" name="LOCATION_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-IphUVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-IphkVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;locatie&quot;, &quot;locatii&quot;, &quot;adresa&quot;, &quot;adrese&quot;, &quot;oras&quot;, &quot;tara&quot;, &quot;judet&quot;, &quot;strada&quot;, &#xD;&#xA;        &quot;locul&quot;, &quot;zona&quot;, &quot;regiune&quot;, &quot;cartier&quot;, &quot;localitate&quot;, &quot;spatiu&quot;, &quot;cladire&quot;,&#xD;&#xA;        &quot;cod postal&quot;, &quot;coordonate&quot;, &quot;amplasare&quot;, &quot;sediul&quot;, &quot;punctul de lucru&quot;, &quot;location&quot;, &#xD;&#xA;        &quot;locatii&quot;, &quot;locația&quot;, &quot;locațiile&quot;, &quot;unde&quot;, &quot;unde se afla&quot;, &quot;unde se află&quot;,&#xD;&#xA;        &quot;adresa&quot;, &quot;adrese&quot;, &quot;amplasare&quot;, &quot;amplasament&quot;, &quot;pozitie geografica&quot;, &quot;poziție geografică&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-Iph0VdEfCS7cth2SLu0w" name="OFFICE_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-IpiEVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-IpiUVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;sediu&quot;, &quot;sedii&quot;, &quot;cladire&quot;, &quot;cladiri&quot;, &quot;pavilion&quot;, &quot;birouri&quot;, &quot;birou&quot;, &#xD;&#xA;        &quot;centru&quot;, &quot;punct de lucru&quot;, &quot;sucursala&quot;, &quot;filiala&quot;, &quot;reprezentanta&quot;,&#xD;&#xA;        &quot;headquarters&quot;, &quot;hq&quot;, &quot;building&quot;, &quot;office&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-IpikVdEfCS7cth2SLu0w" name="CERTIFICATE_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-Ipi0VdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-IpjEVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;adeverinta&quot;, &quot;adeverinte&quot;, &quot;document&quot;, &quot;documente&quot;, &quot;certificat&quot;, &quot;certificate&quot;,&#xD;&#xA;        &quot;act&quot;, &quot;acte&quot;, &quot;fisa&quot;, &quot;dosar&quot;, &quot;atestat&quot;, &quot;diploma&quot;, &quot;formular&quot;, &quot;legitimatie&quot;,&#xD;&#xA;        &quot;carte&quot;, &quot;documente oficiale&quot;, &quot;hartii&quot;, &quot;dovada&quot;, &quot;dovezi&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-IpjUVdEfCS7cth2SLu0w" name="POSITION_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-IpjkVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-Ipj0VdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        // Primary position words&#xD;&#xA;        &quot;functie&quot;, &quot;functii&quot;, &quot;post&quot;, &quot;posturi&quot;, &quot;pozitie&quot;, &quot;pozitii&quot;, &quot;job&quot;, &quot;joburi&quot;,&#xD;&#xA;        &quot;rol&quot;, &quot;roluri&quot;, &quot;tip&quot;, &quot;tipuri&quot;, &quot;specializare&quot;, &quot;ocupatie&quot;, &quot;meserie&quot;, &quot;nivel&quot;,&#xD;&#xA;        &#xD;&#xA;        // Hierarchy terms&#xD;&#xA;        &quot;rank&quot;, &quot;ierarhie&quot;, &quot;titlu&quot;, &quot;responsabilitate&quot;, &quot;statut&quot;, &quot;grad&quot;, &quot;rang&quot;,&#xD;&#xA;        &#xD;&#xA;        // Specific role types&#xD;&#xA;        &quot;director&quot;, &quot;manager&quot;, &quot;sef&quot;, &quot;coordonator&quot;, &quot;responsabil&quot;, &quot;supervizor&quot;,&#xD;&#xA;        &quot;lider&quot;, &quot;administrator&quot;, &quot;specialist&quot;, &quot;expert&quot;, &quot;consultant&quot;, &quot;analist&quot;,&#xD;&#xA;        &quot;asistent&quot;, &quot;intern&quot;, &quot;stagiar&quot;, &quot;trainee&quot;, &quot;junior&quot;, &quot;senior&quot;, &quot;principal&quot;,&#xD;&#xA;        &quot;executiv&quot;, &quot;adjunct&quot;, &quot;vicepresedinte&quot;, &quot;presedinte&quot;, &quot;ceo&quot;, &quot;cto&quot;, &quot;cfo&quot;,&#xD;&#xA;        &#xD;&#xA;        // Job-related terms&#xD;&#xA;        &quot;munca&quot;, &quot;lucru&quot;, &quot;activitate&quot;, &quot;profesie&quot;, &quot;cariera&quot;, &quot;domeniu&quot;,&#xD;&#xA;        &quot;competenta&quot;, &quot;calificare&quot;, &quot;experienta&quot;, &quot;abilitate&quot;, &quot;skill&quot;,&#xD;&#xA;        &#xD;&#xA;        // Organizational terms&#xD;&#xA;        &quot;structura&quot;, &quot;organizare&quot;, &quot;echipa&quot;, &quot;grup&quot;, &quot;colectiv&quot;, &quot;personal&quot;,&#xD;&#xA;        &quot;formatie&quot;, &quot;unitate&quot;, &quot;celula&quot;, &quot;compartiment&quot;,&#xD;&#xA;        &#xD;&#xA;        // Employment types&#xD;&#xA;        &quot;angajare&quot;, &quot;contract&quot;, &quot;colaborare&quot;, &quot;prestatii&quot;, &quot;servicii&quot;, &quot;consultanta&quot;,&#xD;&#xA;        &quot;freelance&quot;, &quot;part-time&quot;, &quot;full-time&quot;, &quot;temporar&quot;, &quot;permanent&quot;,&#xD;&#xA;        &#xD;&#xA;        // Position queries&#xD;&#xA;        &quot;ce functii&quot;, &quot;ce pozitii&quot;, &quot;ce tipuri&quot;, &quot;ce roluri&quot;, &quot;care functii&quot;,&#xD;&#xA;        &quot;care pozitii&quot;, &quot;care tipuri&quot;, &quot;care roluri&quot;, &quot;cate functii&quot;, &quot;cati pe functii&quot;,&#xD;&#xA;        &quot;structura organizatorica&quot;, &quot;organigramma&quot;, &quot;ierarhie organizationala&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-IpkEVdEfCS7cth2SLu0w" name="SALARY_KEYWORDS" isLeaf="true" isStatic="true" isReadOnly="true">
          <eAnnotations xmi:id="_V-JQkEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_V-JQkUVdEfCS7cth2SLu0w" key="ConstantWithGetter"/>
          </eAnnotations>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-JQkkVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-JQk0VdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        // Primary salary terms&#xD;&#xA;        &quot;salariu&quot;, &quot;salarii&quot;, &quot;salariul&quot;, &quot;salariile&quot;, &quot;salariatul&quot;, &quot;salariații&quot;,&#xD;&#xA;        &quot;remuneratie&quot;, &quot;remuneratii&quot;, &quot;remuneratia&quot;, &quot;remuneratiile&quot;,&#xD;&#xA;        &quot;venit&quot;, &quot;venituri&quot;, &quot;venitul&quot;, &quot;veniturile&quot;, &quot;veniturile&quot;, &quot;venitul&quot;,&#xD;&#xA;        &quot;castig&quot;, &quot;castiguri&quot;, &quot;castigul&quot;, &quot;castigurile&quot;, &quot;câștig&quot;, &quot;câștiguri&quot;,&#xD;&#xA;        &quot;plata&quot;, &quot;plati&quot;, &quot;plăți&quot;, &quot;plata&quot;, &quot;compensatie&quot;, &quot;compensatii&quot;,&#xD;&#xA;        &quot;recompensa&quot;, &quot;recompense&quot;, &quot;leafă&quot;, &quot;bani&quot;, &quot;sume&quot;, &quot;compensare&quot;,&#xD;&#xA;        &#xD;&#xA;        // Salary with modifiers&#xD;&#xA;        &quot;salariu mare&quot;, &quot;salariu mic&quot;, &quot;salarii mari&quot;, &quot;salarii mici&quot;,&#xD;&#xA;        &quot;salariu maxim&quot;, &quot;salariu minim&quot;, &quot;salariul cel mai mare&quot;, &quot;salariul cel mai mic&quot;,&#xD;&#xA;        &quot;salariul maxim&quot;, &quot;salariul minim&quot;, &quot;salarii maxime&quot;, &quot;salarii minime&quot;,&#xD;&#xA;        &quot;venitul maxim&quot;, &quot;venitul minim&quot;, &quot;venituri mari&quot;, &quot;venituri mici&quot;,&#xD;&#xA;        &quot;castigul maxim&quot;, &quot;castigul minim&quot;, &quot;castiguri mari&quot;, &quot;castiguri mici&quot;,&#xD;&#xA;        &#xD;&#xA;        // Salary query patterns&#xD;&#xA;        &quot;ce salariu&quot;, &quot;care salariu&quot;, &quot;cat salariu&quot;, &quot;cât salariu&quot;,&#xD;&#xA;        &quot;salariile din&quot;, &quot;salarii departament&quot;, &quot;salariu departament&quot;,&#xD;&#xA;        &quot;cel mai mare salariu&quot;, &quot;cel mai mic salariu&quot;, &quot;cea mai mare plată&quot;,&#xD;&#xA;        &quot;cele mai mari salarii&quot;, &quot;cele mai mici salarii&quot;,&#xD;&#xA;        &#xD;&#xA;        // Income-related terms&#xD;&#xA;        &quot;income&quot;, &quot;retributie&quot;, &quot;retribuții&quot;, &quot;tarif&quot;, &quot;onorariu&quot;, &quot;valoare&quot;,&#xD;&#xA;        &quot;suma de bani&quot;, &quot;sumele de bani&quot;, &quot;banii&quot;, &quot;banilor&quot;,&#xD;&#xA;        &#xD;&#xA;        // Comparative salary terms&#xD;&#xA;        &quot;salariu superior&quot;, &quot;salariu inferior&quot;, &quot;salarii competitive&quot;,&#xD;&#xA;        &quot;plata buna&quot;, &quot;plata mică&quot;, &quot;remunerare bună&quot;, &quot;remunerare scăzută&quot;,&#xD;&#xA;        &#xD;&#xA;        // Salary ranges and levels&#xD;&#xA;        &quot;intervalul salarial&quot;, &quot;gama salariala&quot;, &quot;nivelul salarial&quot;,&#xD;&#xA;        &quot;banda salariala&quot;, &quot;categoria salariala&quot;, &quot;scara salariala&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-JQlEVdEfCS7cth2SLu0w" name="LANGUAGE_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-JQlUVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-J3oEVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;limba&quot;, &quot;limbi&quot;, &quot;limbaj&quot;, &quot;limbaje&quot;, &quot;limbile&quot;, &quot;language&quot;, &quot;languages&quot;,&#xD;&#xA;        &quot;straina&quot;, &quot;strain&quot;, &quot;native&quot;, &quot;materna&quot;, &quot;competenta lingvistica&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-J3oUVdEfCS7cth2SLu0w" name="EDUCATION_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-J3okVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-J3o0VdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;studii&quot;, &quot;studiu&quot;, &quot;ciclu&quot;, &quot;cicluri&quot;, &quot;facultate&quot;, &quot;facultati&quot;, &quot;specializare&quot;, &#xD;&#xA;        &quot;specializari&quot;, &quot;universitate&quot;, &quot;universitati&quot;, &quot;scoala&quot;, &quot;liceu&quot;, &quot;educatie&quot;,&#xD;&#xA;        &quot;calificare&quot;, &quot;diploma&quot;, &quot;certificare&quot;, &quot;absolvent&quot;, &quot;academic&quot;, &quot;invatamant&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-J3pEVdEfCS7cth2SLu0w" name="SENIORITY_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-J3pUVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-J3pkVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;vechime&quot;, &quot;experienta&quot;, &quot;ani de vechime&quot;, &quot;ani de experienta&quot;, &quot;senioritate&quot;,&#xD;&#xA;        &quot;stagiu&quot;, &quot;practica&quot;, &quot;xp&quot;, &quot;exp&quot;, &quot;background&quot;, &quot;cariera&quot;, &quot;istoric&quot;, &quot;cv&quot;,&#xD;&#xA;        &quot;durata&quot;, &quot;timp&quot;, &quot;perioada&quot;, &quot;termen&quot;, &quot;senior&quot;, &quot;junior&quot;, &quot;mid&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-J3p0VdEfCS7cth2SLu0w" name="BONUS_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-J3qEVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-J3qUVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;spor&quot;, &quot;sporuri&quot;, &quot;bonus&quot;, &quot;bonusuri&quot;, &quot;beneficiu&quot;, &quot;beneficii&quot;, &quot;prima&quot;,&#xD;&#xA;        &quot;prime&quot;, &quot;stimulent&quot;, &quot;stimulente&quot;, &quot;avantaj&quot;, &quot;compensare&quot;, &quot;extra&quot;,&#xD;&#xA;        &quot;supliment&quot;, &quot;recompensa&quot;, &quot;incentive&quot;, &quot;facilitate&quot;, &quot;premiu&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-J3qkVdEfCS7cth2SLu0w" name="PENALTY_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-KesEVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-KesUVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;penalizare&quot;, &quot;penalizari&quot;, &quot;sanctiune&quot;, &quot;sanctiuni&quot;, &quot;pedeapsa&quot;, &quot;pedepse&quot;,&#xD;&#xA;        &quot;amenda&quot;, &quot;amenzi&quot;, &quot;avertisment&quot;, &quot;disciplinar&quot;, &quot;disciplina&quot;, &quot;retinere&quot;,&#xD;&#xA;        &quot;taiere&quot;, &quot;reducere&quot;, &quot;suspendare&quot;, &quot;restrictie&quot;, &quot;sanctionare&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-KeskVdEfCS7cth2SLu0w" name="RESIGNATION_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-Kes0VdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-KetEVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;demisie&quot;, &quot;demisii&quot;, &quot;plecare&quot;, &quot;plecari&quot;, &quot;renuntare&quot;, &quot;parasire&quot;, &quot;retragere&quot;,&#xD;&#xA;        &quot;incheierea contractului&quot;, &quot;terminarea contractului&quot;, &quot;preaviz&quot;, &quot;notificare&quot;,&#xD;&#xA;        &quot;renuntare&quot;, &quot;abandon&quot;, &quot;despartire&quot;, &quot;exit&quot;, &quot;quit&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-KetUVdEfCS7cth2SLu0w" name="FIRING_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-KetkVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-Ket0VdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;concediere&quot;, &quot;concedieri&quot;, &quot;desfacere&quot;, &quot;terminare&quot;, &quot;incetare&quot;, &quot;incetari&quot;, &#xD;&#xA;        &quot;disponibilizare&quot;, &quot;eliberare&quot;, &quot;excludere&quot;, &quot;eliminare&quot;, &quot;restructurare&quot;,&#xD;&#xA;        &quot;reducere&quot;, &quot;renuntare&quot;, &quot;destituire&quot;, &quot;inlaturare&quot;, &quot;dizolvare&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-KeuEVdEfCS7cth2SLu0w" name="PROJECT_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-KeuUVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-KeukVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;proiect&quot;, &quot;proiecte&quot;, &quot;initiativa&quot;, &quot;initiativă&quot;, &quot;lucrare&quot;, &quot;campanie&quot;, &#xD;&#xA;        &quot;program&quot;, &quot;task&quot;, &quot;taskuri&quot;, &quot;obiectiv&quot;, &quot;milestone&quot;, &quot;dezvoltare&quot;, &quot;implementare&quot;,&#xD;&#xA;        &quot;constructie&quot;, &quot;plan&quot;, &quot;strategie&quot;, &quot;misiune&quot;, &quot;activitate&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-Keu0VdEfCS7cth2SLu0w" name="TEAM_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-KevEVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-LFwEVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;echipa&quot;, &quot;echipe&quot;, &quot;grup&quot;, &quot;grupuri&quot;, &quot;formatie&quot;, &quot;divizie&quot;, &quot;unitate&quot;, &#xD;&#xA;        &quot;celula&quot;, &quot;department&quot;, &quot;sectie&quot;, &quot;colectiv&quot;, &quot;staff&quot;, &quot;personal&quot;, &quot;membri&quot;,&#xD;&#xA;        &quot;colaboratori&quot;, &quot;coechipieri&quot;, &quot;squad&quot;, &quot;tribu&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-LFwUVdEfCS7cth2SLu0w" name="STATUS_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-LFwkVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-LFw0VdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;status&quot;, &quot;stare&quot;, &quot;situatie&quot;, &quot;situația&quot;, &quot;etapa&quot;, &quot;faza&quot;, &quot;stagiu&quot;, &quot;progres&quot;,&#xD;&#xA;        &quot;evolutie&quot;, &quot;stadiu&quot;, &quot;conditie&quot;, &quot;nivel&quot;, &quot;categorie&quot;, &quot;clasificare&quot;, &quot;starea&quot;,&#xD;&#xA;        &quot;pozitie&quot;, &quot;rang&quot;, &quot;statut&quot;, &quot;starea actuala&quot;, &quot;etapa curenta&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-LFxEVdEfCS7cth2SLu0w" name="TIME_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-LFxUVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-LFxkVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;an&quot;, &quot;ani&quot;, &quot;luna&quot;, &quot;luni&quot;, &quot;saptamana&quot;, &quot;saptamani&quot;, &quot;zi&quot;, &quot;zile&quot;, &quot;data&quot;,&#xD;&#xA;        &quot;perioada&quot;, &quot;durata&quot;, &quot;termen&quot;, &quot;interval&quot;, &quot;moment&quot;, &quot;calendar&quot;, &quot;cronologie&quot;,&#xD;&#xA;        &quot;istoric&quot;, &quot;trecut&quot;, &quot;prezent&quot;, &quot;viitor&quot;, &quot;actual&quot;, &quot;curent&quot;, &quot;recent&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-LFx0VdEfCS7cth2SLu0w" name="PROJECT_STATUS_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-LFyEVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-LFyUVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;active&quot;, &quot;activ&quot;, &quot;activa&quot;, &quot;activi&quot;, &quot;inactive&quot;, &quot;inactiv&quot;, &quot;inactiva&quot;, &quot;inactivi&quot;,&#xD;&#xA;        &quot;in prezent&quot;, &quot;în prezent&quot;, &quot;curent&quot;, &quot;curente&quot;, &quot;acum&quot;, &quot;momentan&quot;, &quot;moment&quot;,&#xD;&#xA;        &quot;in desfasurare&quot;, &quot;în desfășurare&quot;, &quot;ongoing&quot;, &quot;running&quot;, &quot;live&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-LFykVdEfCS7cth2SLu0w" name="CERTIFICATE_STATUS_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-Ls0EVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-Ls0UVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;in asteptare&quot;, &quot;în așteptare&quot;, &quot;asteptare&quot;, &quot;așteptare&quot;, &quot;pending&quot;,&#xD;&#xA;        &quot;neaprobat&quot;, &quot;neaprobate&quot;, &quot;respins&quot;, &quot;respinse&quot;, &quot;aprobat&quot;, &quot;aprobate&quot;,&#xD;&#xA;        &quot;cu statusul&quot;, &quot;cu status&quot;, &quot;status&quot;, &quot;stare&quot;, &quot;situatie&quot;, &quot;situația&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-Ls0kVdEfCS7cth2SLu0w" name="PERSONAL_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-Ls00VdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-Ls1EVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;cate zile de concediu am&quot;, &quot;câte zile de concediu am&quot;, &quot;concedii am&quot;, &quot;zile am&quot;,&#xD;&#xA;        &quot;cate concedii mai am&quot;, &quot;câte concedii mai am&quot;, &quot;mai am&quot;, &quot;imi mai raman&quot;,&#xD;&#xA;        &quot;îmi mai rămân&quot;, &quot;pot sa mi iau&quot;, &quot;pot să-mi iau&quot;, &quot;e ok daca&quot;, &quot;e ok dacă&quot;,&#xD;&#xA;        &quot;salariul meu&quot;, &quot;salariul meu net&quot;, &quot;cati bani iau&quot;, &quot;câți bani iau&quot;,&#xD;&#xA;        &quot;superiorul meu&quot;, &quot;managerul meu&quot;, &quot;șeful meu&quot;, &quot;seful meu&quot;, &quot;seful din departamentul meu&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-Ls1UVdEfCS7cth2SLu0w" name="AVERAGE_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-Ls1kVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-Ls10VdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;salariu mediu&quot;, &quot;salariul mediu&quot;, &quot;media salariilor&quot;, &quot;media salariala&quot;,&#xD;&#xA;        &quot;medie&quot;, &quot;mediu&quot;, &quot;average&quot;, &quot;în medie&quot;, &quot;in medie&quot;, &quot;per total&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-Ls2EVdEfCS7cth2SLu0w" name="TASK_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-Ls2UVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-Ls2kVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;task&quot;, &quot;taskuri&quot;, &quot;sarcina&quot;, &quot;sarcini&quot;, &quot;de finalizat&quot;, &quot;pentru astazi&quot;, &quot;pentru azi&quot;,&#xD;&#xA;        &quot;deadline&quot;, &quot;termen limita&quot;, &quot;termen limită&quot;, &quot;scadent&quot;, &quot;scadente&quot;,&#xD;&#xA;        &quot;de terminat&quot;, &quot;neterminate&quot;, &quot;incomplete&quot;, &quot;in progres&quot;, &quot;în progres&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-MT4EVdEfCS7cth2SLu0w" name="AVAILABILITY_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-MT4UVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-MT4kVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;disponibil&quot;, &quot;disponibile&quot;, &quot;vacant&quot;, &quot;vacante&quot;, &quot;liber&quot;, &quot;libere&quot;,&#xD;&#xA;        &quot;deschis&quot;, &quot;deschise&quot;, &quot;open&quot;, &quot;posturi&quot;, &quot;pozitii&quot;, &quot;poziții&quot;, &quot;joburi&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-MT40VdEfCS7cth2SLu0w" name="WORK_MODE_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-MT5EVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-MT5UVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;remote&quot;, &quot;de acasa&quot;, &quot;de acasă&quot;, &quot;la distanta&quot;, &quot;la distanță&quot;, &quot;online&quot;,&#xD;&#xA;        &quot;hibrid&quot;, &quot;fizic&quot;, &quot;la birou&quot;, &quot;on-site&quot;, &quot;telecomanda&quot;, &quot;telecomunca&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-MT5kVdEfCS7cth2SLu0w" name="ENHANCED_TIME_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-MT50VdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-MT6EVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;azi&quot;, &quot;astazi&quot;, &quot;astăzi&quot;, &quot;maine&quot;, &quot;mâine&quot;, &quot;poimaine&quot;, &quot;poimâine&quot;,&#xD;&#xA;        &quot;ieri&quot;, &quot;alaltaieri&quot;, &quot;alaltăieri&quot;,&#xD;&#xA;        &quot;saptamana aceasta&quot;, &quot;săptămâna aceasta&quot;, &quot;saptamana viitoare&quot;, &quot;săptămâna viitoare&quot;,&#xD;&#xA;        &quot;saptamana trecuta&quot;, &quot;săptămâna trecută&quot;, &quot;luna aceasta&quot;, &quot;luna viitoare&quot;, &quot;luna trecuta&quot;, &quot;luna trecută&quot;,&#xD;&#xA;        &quot;anul acesta&quot;, &quot;anul trecut&quot;, &quot;anul viitor&quot;,&#xD;&#xA;        &quot;de craciun&quot;, &quot;de crăciun&quot;, &quot;de revelion&quot;, &quot;de anul nou&quot;, &quot;de boboteaza&quot;, &quot;de bobotează&quot;,&#xD;&#xA;        &quot;de paste&quot;, &quot;de paște&quot;, &quot;de 1 mai&quot;, &quot;de 1 iunie&quot;,&#xD;&#xA;        &quot;ultimele&quot;, &quot;ultimii&quot;, &quot;ultimul&quot;, &quot;ultima&quot;, &quot;in ultimele&quot;, &quot;în ultimele&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-MT6UVdEfCS7cth2SLu0w" name="KNOWN_DEPARTMENTS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <qualifier xmi:id="_V-MT60VdEfCS7cth2SLu0w">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </qualifier>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-MT6kVdEfCS7cth2SLu0w" value="new HashMap&lt;>()"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-MT7EVdEfCS7cth2SLu0w" name="ENHANCED_MINMAX_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-MT7UVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-MT7kVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        // Superlative indicators&#xD;&#xA;        &quot;cel mai mare&quot;, &quot;cea mai mare&quot;, &quot;cei mai mari&quot;, &quot;cele mai mari&quot;,&#xD;&#xA;        &quot;cel mai mic&quot;, &quot;cea mai mica&quot;, &quot;cei mai mici&quot;, &quot;cele mai mici&quot;, &#xD;&#xA;        &#xD;&#xA;        // Direct comparatives&#xD;&#xA;        &quot;mai mare&quot;, &quot;mai mari&quot;, &quot;mai mic&quot;, &quot;mai mici&quot;,&#xD;&#xA;        &quot;maxim&quot;, &quot;minim&quot;, &quot;maximum&quot;, &quot;minimum&quot;, &quot;maximul&quot;, &quot;minimul&quot;,&#xD;&#xA;        &#xD;&#xA;        // TOP indicators - IMPORTANT ADDITION&#xD;&#xA;        &quot;top&quot;, &quot;primul&quot;, &quot;prima&quot;, &quot;primii&quot;, &quot;primele&quot;, &quot;primului&quot;, &quot;primei&quot;,&#xD;&#xA;        &quot;ultimul&quot;, &quot;ultima&quot;, &quot;ultimii&quot;, &quot;ultimele&quot;, &quot;ultimului&quot;, &quot;ultimei&quot;,&#xD;&#xA;        &#xD;&#xA;        // Quantity-based TOP indicators&#xD;&#xA;        &quot;top 1&quot;, &quot;top 3&quot;, &quot;top 5&quot;, &quot;top 10&quot;, &quot;primii 3&quot;, &quot;primele 3&quot;,&#xD;&#xA;        &quot;cei mai buni&quot;, &quot;cele mai bune&quot;, &quot;cei mai slabi&quot;, &quot;cele mai slabe&quot;,&#xD;&#xA;        &#xD;&#xA;        // Ranking indicators&#xD;&#xA;        &quot;clasament&quot;, &quot;ierarhie&quot;, &quot;rangul&quot;, &quot;locul&quot;, &quot;pozitia&quot;,&#xD;&#xA;        &quot;pe primul loc&quot;, &quot;pe ultimul loc&quot;, &quot;pe primele locuri&quot;,&#xD;&#xA;        &#xD;&#xA;        // Extremes&#xD;&#xA;        &quot;extrem&quot;, &quot;extreme&quot;, &quot;record&quot;, &quot;recordul&quot;, &quot;varf&quot;, &quot;varful&quot;,&#xD;&#xA;        &quot;cel putin&quot;, &quot;cel mult&quot;, &quot;maximal&quot;, &quot;minimal&quot;,&#xD;&#xA;        &#xD;&#xA;        // Performance indicators&#xD;&#xA;        &quot;performanta&quot;, &quot;performante&quot;, &quot;cel mai bun&quot;, &quot;cea mai buna&quot;,&#xD;&#xA;        &quot;cei mai buni&quot;, &quot;cele mai bune&quot;, &quot;exceptional&quot;, &quot;exceptionala&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-MT70VdEfCS7cth2SLu0w" name="CALENDAR_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-MT8EVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-M68EVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;zi libera&quot;, &quot;zi liberă&quot;, &quot;zile libere&quot;, &quot;zile libera&quot;, &quot;zile liberă&quot;,&#xD;&#xA;        &quot;urmatoarea zi libera&quot;, &quot;următoarea zi liberă&quot;, &quot;proxima zi libera&quot;, &quot;următoarea zi liberă&quot;,&#xD;&#xA;        &quot;sarbatoare&quot;, &quot;sărbătoare&quot;, &quot;sarbatori&quot;, &quot;sărbători&quot;, &quot;libera de la stat&quot;, &quot;liberă de la stat&quot;,&#xD;&#xA;        &quot;zi nationala&quot;, &quot;zi națională&quot;, &quot;calendar&quot;, &quot;calendarul&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-M68UVdEfCS7cth2SLu0w" name="TASK_MANAGEMENT_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-M68kVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-M680VdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;programeaza&quot;, &quot;programează&quot;, &quot;programeaza task&quot;, &quot;programează task&quot;,&#xD;&#xA;        &quot;programeaza meet&quot;, &quot;programează meet&quot;, &quot;programeaza meeting&quot;, &quot;programează meeting&quot;,&#xD;&#xA;        &quot;pune task&quot;, &quot;pune meeting&quot;, &quot;creeaza task&quot;, &quot;creează task&quot;, &quot;nou task&quot;, &quot;task nou&quot;,&#xD;&#xA;        &quot;intalnire&quot;, &quot;întâlnire&quot;, &quot;meeting&quot;, &quot;sedinta&quot;, &quot;ședință&quot;, &quot;task&quot;, &quot;sarcina&quot;, &quot;sarcină&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-M69EVdEfCS7cth2SLu0w" name="MONTH_DAYS_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-M69UVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-M69kVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;cate zile are&quot;, &quot;câte zile are&quot;, &quot;cate zile are luna&quot;, &quot;câte zile are luna&quot;,&#xD;&#xA;        &quot;zile in luna&quot;, &quot;zile în luna&quot;, &quot;numarul de zile&quot;, &quot;numărul de zile&quot;,&#xD;&#xA;        &quot;durata lunii&quot;, &quot;lungimea lunii&quot;, &quot;calendar luna&quot;, &quot;calendar pentru luna&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-M690VdEfCS7cth2SLu0w" name="LEGAL_HOLIDAYS_KEYWORDS" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-M6-EVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-M6-UVdEfCS7cth2SLu0w" value="new HashSet&lt;>(Arrays.asList(&#xD;&#xA;        &quot;zile libere legale&quot;, &quot;sarbatori legale&quot;, &quot;sărbători legale&quot;, &quot;zile de sarbatoare&quot;, &quot;zile de sărbătoare&quot;,&#xD;&#xA;        &quot;concedii legale&quot;, &quot;zile nationale&quot;, &quot;zile naționale&quot;, &quot;libere de la stat&quot;, &quot;libera de la stat&quot;,&#xD;&#xA;        &quot;cate zile libere&quot;, &quot;câte zile libere&quot;, &quot;numarul zilelor libere&quot;, &quot;numărul zilelor libere&quot;&#xD;&#xA;    ))"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-M6-kVdEfCS7cth2SLu0w" name="TOP_NUMBER_PATTERN" visibility="private" isLeaf="true" isStatic="true" type="_T-aNcUVdEfCS7cth2SLu0w" isReadOnly="true" association="_WAGYYEVdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-M6-0VdEfCS7cth2SLu0w" value="Pattern.compile(&#xD;&#xA;        &quot;\\b(top|primii|primele|cei mai|cele mai|ultimii|ultimele)\\s+(\\d+)\\b&quot;,&#xD;&#xA;        Pattern.CASE_INSENSITIVE&#xD;&#xA;    )"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-M6_EVdEfCS7cth2SLu0w" name="LIMIT_NUMBER_PATTERN" visibility="private" isLeaf="true" isStatic="true" type="_T-aNcUVdEfCS7cth2SLu0w" isReadOnly="true" association="_WAGYY0VdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-M6_UVdEfCS7cth2SLu0w" value="Pattern.compile(&#xD;&#xA;        &quot;\\b(\\d+)\\s+(angajati|angajați|rezultate|persoane|oameni|concedii|pozitii|poziții)\\b&quot;,&#xD;&#xA;        Pattern.CASE_INSENSITIVE&#xD;&#xA;    )"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-M6_kVdEfCS7cth2SLu0w" name="MONTH_MAPPING" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          <qualifier xmi:id="_V-M7AEVdEfCS7cth2SLu0w">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </qualifier>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-M6_0VdEfCS7cth2SLu0w" value="new HashMap&lt;>()"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-9v8EVdEfCS7cth2SLu0w" name="_initializer1" specification="_Vte-YEVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>KNOWN_DEPARTMENTS.put(&quot;hr&quot;, &quot;HR&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;resurse umane&quot;, &quot;HR&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;it&quot;, &quot;IT&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;tehnologia informatiei&quot;, &quot;IT&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;informatica&quot;, &quot;IT&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;finante&quot;, &quot;Finante&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;financiar&quot;, &quot;Finante&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;contabilitate&quot;, &quot;Finante&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;marketing&quot;, &quot;Marketing&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;vanzari&quot;, &quot;Vanzari&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;juridic&quot;, &quot;Juridic&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;legal&quot;, &quot;Juridic&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;productie&quot;, &quot;Productie&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;logistica&quot;, &quot;Logistica&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;achizitii&quot;, &quot;Achizitii&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;cercetare&quot;, &quot;Cercetare si Dezvoltare&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;dezvoltare&quot;, &quot;Cercetare si Dezvoltare&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;cercetare si dezvoltare&quot;, &quot;Cercetare si Dezvoltare&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;customer support&quot;, &quot;Customer Support&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;suport clienti&quot;, &quot;Customer Support&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;administrativ&quot;, &quot;Administrativ&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;comunicare&quot;, &quot;Comunicare&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;pr&quot;, &quot;Comunicare&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;training&quot;, &quot;Training&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;formare&quot;, &quot;Training&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;instruire&quot;, &quot;Training&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;security&quot;, &quot;Security&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;securitate&quot;, &quot;Security&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;management&quot;, &quot;Management&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;conducere&quot;, &quot;Management&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;business intelligence&quot;, &quot;Business Intelligence&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;control intern&quot;, &quot;Control Intern&quot;);&#xD;
     KNOWN_DEPARTMENTS.put(&quot;servicii generale&quot;, &quot;Servicii Generale&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-9v8UVdEfCS7cth2SLu0w" name="isPositionQuery" specification="_VtflcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-9v8kVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-9v80VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>// Direct keyword match&#xD;
     if (containsAny(text, POSITION_KEYWORDS)) {&#xD;
         return true;&#xD;
     }&#xD;
     &#xD;
     // Pattern-based detection&#xD;
     String[] positionPatterns = {&#xD;
         &quot;ce .*functii.*&quot;, &quot;care .*functii.*&quot;, &quot;cate .*functii.*&quot;,&#xD;
         &quot;ce .*pozitii.*&quot;, &quot;care .*pozitii.*&quot;, &quot;cate .*pozitii.*&quot;,&#xD;
         &quot;ce .*tipuri.*&quot;, &quot;care .*tipuri.*&quot;, &quot;cate .*tipuri.*&quot;,&#xD;
         &quot;ce .*roluri.*&quot;, &quot;care .*roluri.*&quot;, &quot;cate .*roluri.*&quot;,&#xD;
         &quot;structura.*departament.*&quot;, &quot;ierarhia.*departament.*&quot;,&#xD;
         &quot;functii.*departament.*&quot;, &quot;pozitii.*departament.*&quot;,&#xD;
         &quot;tipuri.*departament.*&quot;, &quot;roluri.*departament.*&quot;&#xD;
     };&#xD;
     &#xD;
     for (String pattern : positionPatterns) {&#xD;
         if (text.matches(&quot;.*&quot; + pattern + &quot;.*&quot;)) {&#xD;
             return true;&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return false;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-9v9EVdEfCS7cth2SLu0w" name="hasSalaryFocus" specification="_Vtflc0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-9v9UVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-9v9kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>// Direct salary keywords&#xD;
     if (containsAny(text, SALARY_KEYWORDS)) {&#xD;
         return true;&#xD;
     }&#xD;
     &#xD;
     // Salary patterns with MINMAX indicators&#xD;
     String[] salaryMinMaxPatterns = {&#xD;
         &quot;.*salariu.*maxim.*&quot;, &quot;.*salariu.*minim.*&quot;,&#xD;
         &quot;.*cele mai.*salar.*&quot;, &quot;.*cel mai.*salar.*&quot;,&#xD;
         &quot;.*mari.*salar.*&quot;, &quot;.*mici.*salar.*&quot;,&#xD;
         &quot;.*venit.*mare.*&quot;, &quot;.*venit.*mic.*&quot;&#xD;
     };&#xD;
     &#xD;
     for (String pattern : salaryMinMaxPatterns) {&#xD;
         if (text.matches(pattern)) {&#xD;
             return true;&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return false;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-9v90VdEfCS7cth2SLu0w" name="isDepartmentVsPositionQuery" specification="_VtfldkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-9v-EVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-9v-UVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>// If both department and position keywords are present, &#xD;
     // determine the primary intent&#xD;
     &#xD;
     boolean hasPositionKeywords = containsAny(text, POSITION_KEYWORDS);&#xD;
     boolean hasDepartmentKeywords = containsAny(text, DEPARTMENT_KEYWORDS);&#xD;
     &#xD;
     if (hasPositionKeywords &amp;&amp; hasDepartmentKeywords) {&#xD;
         // Look for indicators that suggest positions are the main focus&#xD;
         String[] positionFocusIndicators = {&#xD;
             &quot;functii&quot;, &quot;pozitii&quot;, &quot;tipuri&quot;, &quot;roluri&quot;, &quot;specializari&quot;,&#xD;
             &quot;ce functii&quot;, &quot;care functii&quot;, &quot;cate functii&quot;,&#xD;
             &quot;ce pozitii&quot;, &quot;care pozitii&quot;, &quot;cate pozitii&quot;&#xD;
         };&#xD;
         &#xD;
         for (String indicator : positionFocusIndicators) {&#xD;
             if (text.contains(indicator)) {&#xD;
                 return false; // This is a position query, not department&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // Look for indicators that suggest departments are the main focus&#xD;
         String[] departmentFocusIndicators = {&#xD;
             &quot;ce departamente&quot;, &quot;care departamente&quot;, &quot;cate departamente&quot;,&#xD;
             &quot;departamentul&quot;, &quot;in departament&quot;, &quot;din departament&quot;&#xD;
         };&#xD;
         &#xD;
         for (String indicator : departmentFocusIndicators) {&#xD;
             if (text.contains(indicator)) {&#xD;
                 return true; // This is a department query&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     // Default: if position keywords are present, treat as position query&#xD;
     return !hasPositionKeywords;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-9v-kVdEfCS7cth2SLu0w" name="translateToSQL" specification="_VtgMgEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-9v-0VdEfCS7cth2SLu0w" name="naturalLanguageQuery">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-9v_EVdEfCS7cth2SLu0w" type="_Vtp9gEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>// Normalize the text for easier processing&#xD;
     String normalizedQuery = normalizeText(naturalLanguageQuery);&#xD;
     &#xD;
     QueryInfo queryInfo = new QueryInfo();&#xD;
     &#xD;
     // Check if this is a follow-up question&#xD;
     if (isFollowUp(normalizedQuery)) {&#xD;
         queryInfo.setFollowUp(true);&#xD;
         return queryInfo;&#xD;
     }&#xD;
     &#xD;
     // Check if this is a stop request&#xD;
     if (isStopRequest(normalizedQuery)) {&#xD;
         queryInfo.setStopRequest(true);&#xD;
         return queryInfo;&#xD;
     }&#xD;
     &#xD;
     // Identify the query type (COUNT, MINMAX, LIST)&#xD;
     queryInfo.setQueryType(identifyQueryType(normalizedQuery));&#xD;
     &#xD;
     // Identify entities mentioned in the query&#xD;
     Map&lt;String, String> entities = identifyEntities(normalizedQuery);&#xD;
     queryInfo.setEntities(entities);&#xD;
     &#xD;
     // Identify requested attributes&#xD;
     List&lt;String> requestedAttributes = identifyRequestedAttributes(normalizedQuery);&#xD;
     queryInfo.setRequestedAttributes(requestedAttributes);&#xD;
     &#xD;
     // Generate SQL query based on entities and query type&#xD;
     String sqlQuery = generateSQLQuery(queryInfo);&#xD;
     queryInfo.setSqlQuery(sqlQuery);&#xD;
     &#xD;
     return queryInfo;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-9v_UVdEfCS7cth2SLu0w" name="normalizeText" specification="_VtgMgkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-9v_kVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-9v_0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>String result = text.toLowerCase().trim();&#xD;
     &#xD;
     // Remove diacritics&#xD;
     result = result.replace(&quot;ă&quot;, &quot;a&quot;)&#xD;
                    .replace(&quot;â&quot;, &quot;a&quot;)&#xD;
                    .replace(&quot;î&quot;, &quot;i&quot;)&#xD;
                    .replace(&quot;ș&quot;, &quot;s&quot;)&#xD;
                    .replace(&quot;ș&quot;, &quot;s&quot;)&#xD;
                    .replace(&quot;ț&quot;, &quot;t&quot;)&#xD;
                    .replace(&quot;ț&quot;, &quot;t&quot;);&#xD;
     &#xD;
     // Standardize separators (-, ., _)&#xD;
     result = result.replace(&quot;-&quot;, &quot; &quot;)&#xD;
                    .replace(&quot;.&quot;, &quot; &quot;)&#xD;
                    .replace(&quot;_&quot;, &quot; &quot;)&#xD;
                    .replace(&quot;,&quot;, &quot; &quot;)&#xD;
                    .replace(&quot;:&quot;, &quot; &quot;)&#xD;
                    .replace(&quot;;&quot;, &quot; &quot;)&#xD;
                    .replace(&quot;?&quot;, &quot; &quot;)&#xD;
                    .replace(&quot;!&quot;, &quot; &quot;);&#xD;
     &#xD;
     // Replace multiple spaces with a single space&#xD;
     result = result.replaceAll(&quot;\\s+&quot;, &quot; &quot;);&#xD;
     &#xD;
     return result;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-9wAEVdEfCS7cth2SLu0w" name="isFollowUp" specification="_VtgMhUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-9wAUVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-9wAkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>for (String keyword : FOLLOWUP_KEYWORDS) {&#xD;
         if (text.equals(keyword) || text.startsWith(keyword + &quot; &quot;) || &#xD;
             text.contains(&quot; &quot; + keyword + &quot; &quot;)) {&#xD;
             return true;&#xD;
         }&#xD;
     }&#xD;
     return false;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V--XAEVdEfCS7cth2SLu0w" name="isStopRequest" specification="_VtgzkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V--XAUVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V--XAkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>for (String keyword : STOP_KEYWORDS) {&#xD;
         if (text.equals(keyword) || text.startsWith(keyword + &quot; &quot;) || &#xD;
             text.contains(&quot; &quot; + keyword + &quot; &quot;)) {&#xD;
             return true;&#xD;
         }&#xD;
     }&#xD;
     return false;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V--XA0VdEfCS7cth2SLu0w" name="identifyQueryType" specification="_VtgzlEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V--XBEVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V--XBUVdEfCS7cth2SLu0w" type="_VtovYUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>System.out.println(&quot;DEBUG: ===== QUERY TYPE IDENTIFICATION =====&quot;);&#xD;
     System.out.println(&quot;DEBUG: Analyzing text: \&quot;&quot; + text + &quot;\&quot;&quot;);&#xD;
     &#xD;
     // PRIORITY 1: Check for MINMAX indicators first&#xD;
     boolean hasMinMaxKeywords = containsAny(text, ENHANCED_MINMAX_KEYWORDS);&#xD;
     boolean hasTopPattern = TOP_NUMBER_PATTERN.matcher(text).find();&#xD;
     boolean hasSuperlatives = text.contains(&quot;cel mai&quot;) || text.contains(&quot;cea mai&quot;) || &#xD;
                              text.contains(&quot;cei mai&quot;) || text.contains(&quot;cele mai&quot;);&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: - Has MINMAX keywords: &quot; + hasMinMaxKeywords);&#xD;
     System.out.println(&quot;DEBUG: - Has TOP pattern: &quot; + hasTopPattern);&#xD;
     System.out.println(&quot;DEBUG: - Has superlatives: &quot; + hasSuperlatives);&#xD;
     &#xD;
     // If any MINMAX indicator is present, this is a MINMAX query&#xD;
     if (hasMinMaxKeywords || hasTopPattern || hasSuperlatives) {&#xD;
         System.out.println(&quot;DEBUG: ✅ DETECTED: MINMAX query type&quot;);&#xD;
         return QueryType.MINMAX;&#xD;
     }&#xD;
     &#xD;
     // PRIORITY 2: Check for COUNT indicators&#xD;
     boolean hasCountKeywords = containsAny(text, COUNT_KEYWORDS);&#xD;
     System.out.println(&quot;DEBUG: - Has COUNT keywords: &quot; + hasCountKeywords);&#xD;
     &#xD;
     if (hasCountKeywords) {&#xD;
         System.out.println(&quot;DEBUG: ✅ DETECTED: COUNT query type&quot;);&#xD;
         return QueryType.COUNT;&#xD;
     }&#xD;
     &#xD;
     // PRIORITY 3: Default to LIST&#xD;
     System.out.println(&quot;DEBUG: ✅ DETECTED: LIST query type (default)&quot;);&#xD;
     return QueryType.LIST;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V--XBkVdEfCS7cth2SLu0w" name="extractTopNumber" specification="_VtgzlkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V--XB0VdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V--XCEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>System.out.println(&quot;DEBUG: Extracting TOP number from: \&quot;&quot; + text + &quot;\&quot;&quot;);&#xD;
     &#xD;
     // Check for explicit TOP patterns&#xD;
     Matcher topMatcher = TOP_NUMBER_PATTERN.matcher(text);&#xD;
     if (topMatcher.find()) {&#xD;
         int number = Integer.parseInt(topMatcher.group(2));&#xD;
         System.out.println(&quot;DEBUG: Found TOP number via pattern: &quot; + number);&#xD;
         return number;&#xD;
     }&#xD;
     &#xD;
     // Check for limit patterns&#xD;
     Matcher limitMatcher = LIMIT_NUMBER_PATTERN.matcher(text);&#xD;
     if (limitMatcher.find()) {&#xD;
         int number = Integer.parseInt(limitMatcher.group(1));&#xD;
         System.out.println(&quot;DEBUG: Found LIMIT number via pattern: &quot; + number);&#xD;
         return number;&#xD;
     }&#xD;
     &#xD;
     // Default based on superlatives&#xD;
     if (text.contains(&quot;primul&quot;) || text.contains(&quot;prima&quot;) || &#xD;
         text.contains(&quot;cel mai&quot;) || text.contains(&quot;cea mai&quot;)) {&#xD;
         System.out.println(&quot;DEBUG: Superlative detected - returning 1&quot;);&#xD;
         return 1;&#xD;
     }&#xD;
     &#xD;
     // Default for general queries&#xD;
     System.out.println(&quot;DEBUG: No specific number found - returning default 5&quot;);&#xD;
     return 5;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V--XCUVdEfCS7cth2SLu0w" name="containsTemporalExpression" specification="_VthaoUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V--XCkVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V--XC0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>String[] temporalExpressions = {&#xD;
         &quot;astazi&quot;, &quot;azi&quot;, &quot;ieri&quot;, &quot;maine&quot;,&#xD;
         &quot;luna aceasta&quot;, &quot;luna trecuta&quot;, &quot;luna viitoare&quot;,&#xD;
         &quot;anul acesta&quot;, &quot;anul trecut&quot;, &quot;anul viitor&quot;, &#xD;
         &quot;saptamana aceasta&quot;, &quot;saptamana trecuta&quot;, &quot;saptamana viitoare&quot;,&#xD;
         &quot;decembrie&quot;, &quot;ianuarie&quot;, &quot;februarie&quot;, &quot;martie&quot;, &quot;aprilie&quot;, &quot;mai&quot;, &quot;iunie&quot;,&#xD;
         &quot;iulie&quot;, &quot;august&quot;, &quot;septembrie&quot;, &quot;octombrie&quot;, &quot;noiembrie&quot;,&#xD;
         &quot;craciun&quot;, &quot;paste&quot;, &quot;vara&quot;, &quot;iarna&quot;, &quot;primavara&quot;, &quot;toamna&quot;&#xD;
     };&#xD;
     &#xD;
     for (String expr : temporalExpressions) {&#xD;
         if (text.contains(expr)) {&#xD;
             return true;&#xD;
         }&#xD;
     }&#xD;
     return false;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V--XDEVdEfCS7cth2SLu0w" name="extractTemporalExpression" specification="_VthapEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V--XDUVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V--XDkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>String[] temporalExpressions = {&#xD;
         &quot;luna aceasta&quot;, &quot;luna trecuta&quot;, &quot;luna viitoare&quot;,&#xD;
         &quot;anul acesta&quot;, &quot;anul trecut&quot;, &quot;anul viitor&quot;,&#xD;
         &quot;saptamana aceasta&quot;, &quot;saptamana trecuta&quot;, &quot;saptamana viitoare&quot;,&#xD;
         &quot;astazi&quot;, &quot;azi&quot;, &quot;ieri&quot;, &quot;maine&quot;,&#xD;
         &quot;decembrie&quot;, &quot;ianuarie&quot;, &quot;februarie&quot;, &quot;martie&quot;, &quot;aprilie&quot;, &quot;mai&quot;, &quot;iunie&quot;,&#xD;
         &quot;iulie&quot;, &quot;august&quot;, &quot;septembrie&quot;, &quot;octombrie&quot;, &quot;noiembrie&quot;,&#xD;
         &quot;craciun&quot;, &quot;paste&quot;, &quot;vara&quot;, &quot;iarna&quot;, &quot;primavara&quot;, &quot;toamna&quot;&#xD;
     };&#xD;
     &#xD;
     // Sort by length descending to match longer expressions first&#xD;
     Arrays.sort(temporalExpressions, (a, b) -> b.length() - a.length());&#xD;
     &#xD;
     for (String expr : temporalExpressions) {&#xD;
         if (text.contains(expr)) {&#xD;
             return expr;&#xD;
         }&#xD;
     }&#xD;
     return null;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V--XD0VdEfCS7cth2SLu0w" name="_initializer2" specification="_Vthap0VdEfCS7cth2SLu0w">
          <language>java</language>
          <body>MONTH_MAPPING.put(&quot;ianuarie&quot;, 1);&#xD;
     MONTH_MAPPING.put(&quot;ianuarie&quot;, 1);&#xD;
     MONTH_MAPPING.put(&quot;februarie&quot;, 2);&#xD;
     MONTH_MAPPING.put(&quot;martie&quot;, 3);&#xD;
     MONTH_MAPPING.put(&quot;aprilie&quot;, 4);&#xD;
     MONTH_MAPPING.put(&quot;mai&quot;, 5);&#xD;
     MONTH_MAPPING.put(&quot;iunie&quot;, 6);&#xD;
     MONTH_MAPPING.put(&quot;iulie&quot;, 7);&#xD;
     MONTH_MAPPING.put(&quot;august&quot;, 8);&#xD;
     MONTH_MAPPING.put(&quot;septembrie&quot;, 9);&#xD;
     MONTH_MAPPING.put(&quot;octombrie&quot;, 10);&#xD;
     MONTH_MAPPING.put(&quot;noiembrie&quot;, 11);&#xD;
     MONTH_MAPPING.put(&quot;decembrie&quot;, 12);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V--XEEVdEfCS7cth2SLu0w" name="identifyEntities" specification="_VtiBsUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V--XEUVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V--XEkVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, String> entities = new HashMap&lt;>();&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: ===== ENHANCED ENTITY DETECTION =====&quot;);&#xD;
     System.out.println(&quot;DEBUG: Analyzing text: \&quot;&quot; + text + &quot;\&quot;&quot;);&#xD;
     &#xD;
     // PRIORITY 1: PERSONAL QUERIES (about current user)&#xD;
     if (containsAny(text, PERSONAL_KEYWORDS)) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Personal query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;personal&quot;);&#xD;
         &#xD;
         if (text.contains(&quot;concediu&quot;) || text.contains(&quot;concedii&quot;) || text.contains(&quot;zile&quot;)) {&#xD;
             entities.put(&quot;personal_type&quot;, &quot;leave_balance&quot;);&#xD;
         } else if (text.contains(&quot;salariu&quot;) || text.contains(&quot;bani&quot;) || text.contains(&quot;net&quot;)) {&#xD;
             entities.put(&quot;personal_type&quot;, &quot;salary&quot;);&#xD;
         } else if (text.contains(&quot;superior&quot;) || text.contains(&quot;manager&quot;) || text.contains(&quot;sef&quot;) || text.contains(&quot;șef&quot;)) {&#xD;
             entities.put(&quot;personal_type&quot;, &quot;hierarchy&quot;);&#xD;
         }&#xD;
         &#xD;
         extractDepartmentName(text, entities);&#xD;
         return entities;&#xD;
     }&#xD;
     &#xD;
     // PRIORITY 2: PROJECT STATUS QUERIES&#xD;
     if (containsAny(text, PROJECT_KEYWORDS) &amp;&amp; containsAny(text, PROJECT_STATUS_KEYWORDS)) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Project status query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;project&quot;);&#xD;
         &#xD;
         if (text.contains(&quot;activ&quot;) || text.contains(&quot;prezent&quot;) || text.contains(&quot;curent&quot;) || &#xD;
             text.contains(&quot;desfasurare&quot;) || text.contains(&quot;desfășurare&quot;)) {&#xD;
             entities.put(&quot;project_status&quot;, &quot;active&quot;);&#xD;
         } else if (text.contains(&quot;inactiv&quot;) || text.contains(&quot;terminat&quot;) || text.contains(&quot;finalizat&quot;)) {&#xD;
             entities.put(&quot;project_status&quot;, &quot;inactive&quot;);&#xD;
         }&#xD;
         &#xD;
         return entities;&#xD;
     }&#xD;
     &#xD;
     // PRIORITY 3: CERTIFICATE STATUS QUERIES&#xD;
     if (containsAny(text, CERTIFICATE_KEYWORDS) &amp;&amp; containsAny(text, CERTIFICATE_STATUS_KEYWORDS)) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Certificate status query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;certificate&quot;);&#xD;
         &#xD;
         if (text.contains(&quot;asteptare&quot;) || text.contains(&quot;așteptare&quot;) || text.contains(&quot;pending&quot;)) {&#xD;
             entities.put(&quot;certificate_status&quot;, &quot;pending&quot;);&#xD;
         } else if (text.contains(&quot;aprobat&quot;) || text.contains(&quot;aprobate&quot;)) {&#xD;
             entities.put(&quot;certificate_status&quot;, &quot;approved&quot;);&#xD;
         } else if (text.contains(&quot;respins&quot;) || text.contains(&quot;respinse&quot;)) {&#xD;
             entities.put(&quot;certificate_status&quot;, &quot;rejected&quot;);&#xD;
         }&#xD;
         &#xD;
         return entities;&#xD;
     }&#xD;
     &#xD;
     // PRIORITY 4: LOCATION QUERIES&#xD;
     if (containsAny(text, LOCATION_KEYWORDS)) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Location query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;location&quot;);&#xD;
         &#xD;
         if (containsAny(text, DEPARTMENT_KEYWORDS)) {&#xD;
             entities.put(&quot;location_type&quot;, &quot;department&quot;);&#xD;
             extractDepartmentName(text, entities);&#xD;
         } else if (containsAny(text, OFFICE_KEYWORDS)) {&#xD;
             entities.put(&quot;location_type&quot;, &quot;office&quot;);&#xD;
         } else if (containsAny(text, EMPLOYEE_KEYWORDS)) {&#xD;
             entities.put(&quot;location_type&quot;, &quot;employee&quot;);&#xD;
         }&#xD;
         &#xD;
         return entities;&#xD;
     }&#xD;
     &#xD;
     // PRIORITY 5: AVERAGE/STATISTICAL QUERIES&#xD;
     if (containsAny(text, AVERAGE_KEYWORDS)) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Average/statistical query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;average&quot;);&#xD;
         &#xD;
         if (containsAny(text, SALARY_KEYWORDS)) {&#xD;
             entities.put(&quot;average_type&quot;, &quot;salary&quot;);&#xD;
             extractDepartmentName(text, entities);&#xD;
             &#xD;
             // Check if it's for a specific position&#xD;
             if (containsAny(text, POSITION_KEYWORDS)) {&#xD;
                 entities.put(&quot;average_scope&quot;, &quot;position&quot;);&#xD;
             } else if (containsAny(text, DEPARTMENT_KEYWORDS)) {&#xD;
                 entities.put(&quot;average_scope&quot;, &quot;department&quot;);&#xD;
             } else if (text.contains(&quot;per total&quot;) || text.contains(&quot;total&quot;) || text.contains(&quot;general&quot;)) {&#xD;
                 entities.put(&quot;average_scope&quot;, &quot;company&quot;);&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         return entities;&#xD;
     }&#xD;
     &#xD;
     // PRIORITY 6: TASK QUERIES with temporal context&#xD;
     if (containsAny(text, TASK_KEYWORDS)) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Task query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;task&quot;);&#xD;
         &#xD;
         if (text.contains(&quot;finalizat&quot;) || text.contains(&quot;terminat&quot;) || text.contains(&quot;deadline&quot;)) {&#xD;
             entities.put(&quot;task_status&quot;, &quot;deadline&quot;);&#xD;
         } else if (text.contains(&quot;progres&quot;) || text.contains(&quot;lucru&quot;)) {&#xD;
             entities.put(&quot;task_status&quot;, &quot;in_progress&quot;);&#xD;
         }&#xD;
         &#xD;
         // Enhanced temporal detection for tasks&#xD;
         if (containsTemporalExpression(text)) {&#xD;
             entities.put(&quot;has_temporal&quot;, &quot;true&quot;);&#xD;
             String temporal = extractTemporalExpression(text);&#xD;
             if (temporal != null) {&#xD;
                 entities.put(&quot;temporal_filter&quot;, temporal);&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         return entities;&#xD;
     }&#xD;
     &#xD;
     // PRIORITY 7: AVAILABILITY QUERIES&#xD;
     if (containsAny(text, AVAILABILITY_KEYWORDS)) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Availability query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;availability&quot;);&#xD;
         &#xD;
         if (containsAny(text, POSITION_KEYWORDS) || text.contains(&quot;post&quot;) || text.contains(&quot;job&quot;)) {&#xD;
             entities.put(&quot;availability_type&quot;, &quot;position&quot;);&#xD;
         }&#xD;
         &#xD;
         return entities;&#xD;
     }&#xD;
     &#xD;
     // PRIORITY 8: WORK MODE QUERIES&#xD;
     if (containsAny(text, WORK_MODE_KEYWORDS)) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Work mode query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;work_mode&quot;);&#xD;
         &#xD;
         if (text.contains(&quot;remote&quot;) || text.contains(&quot;acasa&quot;) || text.contains(&quot;acasă&quot;) || text.contains(&quot;distanta&quot;) || text.contains(&quot;distanță&quot;)) {&#xD;
             entities.put(&quot;work_mode_type&quot;, &quot;remote&quot;);&#xD;
         } else if (text.contains(&quot;hibrid&quot;)) {&#xD;
             entities.put(&quot;work_mode_type&quot;, &quot;hybrid&quot;);&#xD;
         } else if (text.contains(&quot;fizic&quot;) || text.contains(&quot;birou&quot;) || text.contains(&quot;on-site&quot;)) {&#xD;
             entities.put(&quot;work_mode_type&quot;, &quot;physical&quot;);&#xD;
         }&#xD;
         &#xD;
         return entities;&#xD;
     }&#xD;
     &#xD;
     // PRIORITY 9: ENHANCED LEAVE QUERIES with temporal context&#xD;
     if (containsAny(text, LEAVE_KEYWORDS)) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Enhanced leave query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;leave&quot;);&#xD;
         &#xD;
         // Check for &quot;who is on leave&quot; queries&#xD;
         if (text.contains(&quot;cine e&quot;) || text.contains(&quot;cine este&quot;) || text.contains(&quot;exista angajati&quot;) || text.contains(&quot;există angajați&quot;)) {&#xD;
             entities.put(&quot;leave_query_type&quot;, &quot;who_is_on_leave&quot;);&#xD;
         }&#xD;
         &#xD;
         // Enhanced temporal detection&#xD;
         if (containsTemporalExpression(text)) {&#xD;
             entities.put(&quot;has_temporal&quot;, &quot;true&quot;);&#xD;
             String temporal = extractTemporalExpression(text);&#xD;
             if (temporal != null) {&#xD;
                 entities.put(&quot;temporal_filter&quot;, temporal);&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // Check for specific leave types&#xD;
         if (text.contains(&quot;medical&quot;)) {&#xD;
             entities.put(&quot;leave_type&quot;, &quot;medical&quot;);&#xD;
         } else if (text.contains(&quot;odihna&quot;) || text.contains(&quot;odihnă&quot;)) {&#xD;
             entities.put(&quot;leave_type&quot;, &quot;vacation&quot;);&#xD;
         } else if (text.contains(&quot;maternitate&quot;)) {&#xD;
             entities.put(&quot;leave_type&quot;, &quot;maternity&quot;);&#xD;
         }&#xD;
         &#xD;
         extractDepartmentName(text, entities);&#xD;
         return entities;&#xD;
     } else if (containsAny(text, POSITION_KEYWORDS)) {&#xD;
         entities.put(&quot;entity&quot;, &quot;position&quot;);&#xD;
     } else if (containsAny(text, SALARY_KEYWORDS)) {&#xD;
         entities.put(&quot;entity&quot;, &quot;salary&quot;);&#xD;
     }&#xD;
     &#xD;
     extractDepartmentName(text, entities);&#xD;
     &#xD;
  // 1. TASK/MEETING SCHEDULING&#xD;
     if (containsAny(text, TASK_MANAGEMENT_KEYWORDS)) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Task/Meeting scheduling query&quot;);&#xD;
         Map&lt;String, String> entities1 = new HashMap&lt;>();&#xD;
         entities1.put(&quot;entity&quot;, &quot;task_scheduling&quot;);&#xD;
         &#xD;
         if (text.contains(&quot;task&quot;) || text.contains(&quot;sarcina&quot;) || text.contains(&quot;sarcină&quot;)) {&#xD;
             entities1.put(&quot;scheduling_type&quot;, &quot;task&quot;);&#xD;
         } else if (text.contains(&quot;meet&quot;) || text.contains(&quot;intalnire&quot;) || text.contains(&quot;întâlnire&quot;) || &#xD;
                    text.contains(&quot;sedinta&quot;) || text.contains(&quot;ședință&quot;)) {&#xD;
             entities1.put(&quot;scheduling_type&quot;, &quot;meeting&quot;);&#xD;
         }&#xD;
         &#xD;
         // Extract person name if mentioned&#xD;
         String personName = extractPersonName(text);&#xD;
         if (personName != null) {&#xD;
             entities1.put(&quot;target_person&quot;, personName);&#xD;
         }&#xD;
         &#xD;
         return entities1;&#xD;
     }&#xD;
     &#xD;
     // 2. NEXT FREE DAY QUERIES&#xD;
     if (containsAny(text, CALENDAR_KEYWORDS)) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Calendar/free day query&quot;);&#xD;
         Map&lt;String, String> entities1 = new HashMap&lt;>();&#xD;
         entities1.put(&quot;entity&quot;, &quot;calendar&quot;);&#xD;
         &#xD;
         if (text.contains(&quot;urmatoarea&quot;) || text.contains(&quot;următoarea&quot;) || text.contains(&quot;proxima&quot;)) {&#xD;
             entities1.put(&quot;calendar_type&quot;, &quot;next_free_day&quot;);&#xD;
         } else if (text.contains(&quot;toate&quot;) || text.contains(&quot;lista&quot;) || text.contains(&quot;care sunt&quot;)) {&#xD;
             entities1.put(&quot;calendar_type&quot;, &quot;all_holidays&quot;);&#xD;
         }&#xD;
         &#xD;
         return entities1;&#xD;
     }&#xD;
     &#xD;
     // 3. LEGAL HOLIDAYS COUNT&#xD;
     if (containsAny(text, LEGAL_HOLIDAYS_KEYWORDS)) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Legal holidays query&quot;);&#xD;
         Map&lt;String, String> entities1 = new HashMap&lt;>();&#xD;
         entities1.put(&quot;entity&quot;, &quot;legal_holidays&quot;);&#xD;
         entities1.put(&quot;calendar_type&quot;, &quot;count_legal_holidays&quot;);&#xD;
         &#xD;
         // Check for specific year&#xD;
         String year = extractYear(text);&#xD;
         if (year != null) {&#xD;
             entities1.put(&quot;target_year&quot;, year);&#xD;
         }&#xD;
         &#xD;
         return entities1;&#xD;
     }&#xD;
     &#xD;
     // 4. MONTH DAYS QUERIES&#xD;
     if (containsAny(text, MONTH_DAYS_KEYWORDS)) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Month days query&quot;);&#xD;
         Map&lt;String, String> entities1 = new HashMap&lt;>();&#xD;
         entities1.put(&quot;entity&quot;, &quot;month_days&quot;);&#xD;
         &#xD;
         String monthName = extractMonthName(text);&#xD;
         if (monthName != null) {&#xD;
             entities1.put(&quot;target_month&quot;, monthName);&#xD;
         }&#xD;
         &#xD;
         String year = extractYear(text);&#xD;
         if (year != null) {&#xD;
             entities1.put(&quot;target_year&quot;, year);&#xD;
         } else {&#xD;
             entities1.put(&quot;target_year&quot;, String.valueOf(java.time.LocalDate.now().getYear()));&#xD;
         }&#xD;
         &#xD;
         return entities1;&#xD;
     }&#xD;
     &#xD;
     // FALL BACK to existing logic&#xD;
     return identifyEntities1(text);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V--XE0VdEfCS7cth2SLu0w" name="extractPersonName" specification="_VtiowEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V--XFEVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V--XFUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>// Pattern: &quot;programeaza task/meet cu [name]&quot;&#xD;
     Pattern pattern = Pattern.compile(&quot;cu\\s+([a-zA-ZăâîșțĂÂÎȘȚ]+(?:\\s+[a-zA-ZăâîșțĂÂÎȘȚ]+)?)&quot;, &#xD;
                                      Pattern.CASE_INSENSITIVE);&#xD;
     Matcher matcher = pattern.matcher(text);&#xD;
     &#xD;
     if (matcher.find()) {&#xD;
         String name = matcher.group(1).trim();&#xD;
         System.out.println(&quot;DEBUG: Extracted person name: &quot; + name);&#xD;
         return name;&#xD;
     }&#xD;
     &#xD;
     return null;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V---EEVdEfCS7cth2SLu0w" name="extractMonthName" specification="_Vtiow0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V---EUVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V---EkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>for (String month : MONTH_MAPPING.keySet()) {&#xD;
         if (text.contains(month)) {&#xD;
             System.out.println(&quot;DEBUG: Extracted month: &quot; + month);&#xD;
             return month;&#xD;
         }&#xD;
     }&#xD;
     return null;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V---E0VdEfCS7cth2SLu0w" name="extractYear" specification="_VtioxkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V---FEVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V---FUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>Pattern yearPattern = Pattern.compile(&quot;\\b(20\\d{2})\\b&quot;);&#xD;
     Matcher matcher = yearPattern.matcher(text);&#xD;
     &#xD;
     if (matcher.find()) {&#xD;
         String year = matcher.group(1);&#xD;
         System.out.println(&quot;DEBUG: Extracted year: &quot; + year);&#xD;
         return year;&#xD;
     }&#xD;
     &#xD;
     return null;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V---FkVdEfCS7cth2SLu0w" name="generateTaskSchedulingQuery" specification="_V8fDsUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V---F0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V---GEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     String schedulingType = entities.getOrDefault(&quot;scheduling_type&quot;, &quot;&quot;);&#xD;
     String targetPerson = entities.get(&quot;target_person&quot;);&#xD;
     &#xD;
     if (targetPerson != null) {&#xD;
         // Find the person first&#xD;
         StringBuilder sql = new StringBuilder();&#xD;
         sql.append(&quot;SELECT u.id, u.nume, u.prenume, d.nume_dep AS departament, &quot;);&#xD;
         sql.append(&quot;t.denumire AS functie, u.email, u.telefon, &quot;);&#xD;
         sql.append(&quot;'Pentru programarea unui &quot;);&#xD;
         &#xD;
         if (&quot;task&quot;.equals(schedulingType)) {&#xD;
             sql.append(&quot;task&quot;);&#xD;
         } else if (&quot;meeting&quot;.equals(schedulingType)) {&#xD;
             sql.append(&quot;meeting&quot;);&#xD;
         } else {&#xD;
             sql.append(&quot;task/meeting&quot;);&#xD;
         }&#xD;
         &#xD;
         sql.append(&quot;, contactați această persoană direct sau folosiți sistemul intern de task-uri.' AS instructiuni &quot;);&#xD;
         sql.append(&quot;FROM useri u &quot;);&#xD;
         sql.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
         sql.append(&quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot;);&#xD;
         sql.append(&quot;WHERE (LOWER(u.nume) LIKE LOWER('%&quot;).append(targetPerson).append(&quot;%') &quot;);&#xD;
         sql.append(&quot;OR LOWER(u.prenume) LIKE LOWER('%&quot;).append(targetPerson).append(&quot;%') &quot;);&#xD;
         sql.append(&quot;OR LOWER(CONCAT(u.nume, ' ', u.prenume)) LIKE LOWER('%&quot;).append(targetPerson).append(&quot;%')) &quot;);&#xD;
         sql.append(&quot;AND u.activ = 1 &quot;);&#xD;
         sql.append(&quot;ORDER BY u.nume, u.prenume&quot;);&#xD;
         &#xD;
         return sql.toString();&#xD;
     } else {&#xD;
         // General scheduling guidance&#xD;
         return &quot;SELECT 'Pentru programarea de task-uri sau meeting-uri, &quot; +&#xD;
                &quot;specificați numele persoanei cu care doriți să programați. &quot; +&#xD;
                &quot;Exemplu: \&quot;programează meeting cu Ion Popescu\&quot;' AS ghid_programare&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V---GUVdEfCS7cth2SLu0w" name="generateCalendarQuery" specification="_V8fDtEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V---GkVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V---G0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     String calendarType = entities.getOrDefault(&quot;calendar_type&quot;, &quot;&quot;);&#xD;
     &#xD;
     switch (calendarType) {&#xD;
         case &quot;next_free_day&quot;:&#xD;
             // Find next free day (weekend or holiday)&#xD;
             return &quot;SELECT &quot; +&#xD;
                    &quot;CASE &quot; +&#xD;
                    &quot;  WHEN EXISTS (SELECT 1 FROM sarbatori WHERE zi > CURDATE() ORDER BY zi LIMIT 1) THEN &quot; +&#xD;
                    &quot;    (SELECT zi FROM sarbatori WHERE zi > CURDATE() ORDER BY zi LIMIT 1) &quot; +&#xD;
                    &quot;  WHEN EXISTS (SELECT 1 FROM libere WHERE zi > CURDATE() ORDER BY zi LIMIT 1) THEN &quot; +&#xD;
                    &quot;    (SELECT zi FROM libere WHERE zi > CURDATE() ORDER BY zi LIMIT 1) &quot; +&#xD;
                    &quot;  ELSE &quot; +&#xD;
                    &quot;    CASE DAYOFWEEK(CURDATE()) &quot; +&#xD;
                    &quot;      WHEN 1 THEN DATE_ADD(CURDATE(), INTERVAL 6 DAY) &quot; + // Sunday -> next Saturday&#xD;
                    &quot;      WHEN 7 THEN DATE_ADD(CURDATE(), INTERVAL 1 DAY) &quot; + // Saturday -> Sunday&#xD;
                    &quot;      ELSE DATE_ADD(CURDATE(), INTERVAL (7 - DAYOFWEEK(CURDATE()) + 1) DAY) &quot; + // Weekday -> next Saturday&#xD;
                    &quot;    END &quot; +&#xD;
                    &quot;END AS urmatoarea_zi_libera, &quot; +&#xD;
                    &quot;CASE &quot; +&#xD;
                    &quot;  WHEN EXISTS (SELECT 1 FROM sarbatori WHERE zi > CURDATE() ORDER BY zi LIMIT 1) THEN &quot; +&#xD;
                    &quot;    (SELECT nume FROM sarbatori WHERE zi > CURDATE() ORDER BY zi LIMIT 1) &quot; +&#xD;
                    &quot;  WHEN EXISTS (SELECT 1 FROM libere WHERE zi > CURDATE() ORDER BY zi LIMIT 1) THEN &quot; +&#xD;
                    &quot;    (SELECT nume FROM libere WHERE zi > CURDATE() ORDER BY zi LIMIT 1) &quot; +&#xD;
                    &quot;  ELSE 'Weekend' &quot; +&#xD;
                    &quot;END AS tip_zi_libera&quot;;&#xD;
                    &#xD;
         case &quot;all_holidays&quot;:&#xD;
             // List all holidays this year&#xD;
             return &quot;SELECT zi AS data_sarbatoare, nume AS denumire_sarbatoare, &quot; +&#xD;
                    &quot;'Sărbătoare legală' AS tip &quot; +&#xD;
                    &quot;FROM sarbatori &quot; +&#xD;
                    &quot;WHERE YEAR(zi) = YEAR(CURDATE()) AND zi >= CURDATE() &quot; +&#xD;
                    &quot;UNION ALL &quot; +&#xD;
                    &quot;SELECT zi AS data_sarbatoare, nume AS denumire_sarbatoare, &quot; +&#xD;
                    &quot;'Zi liberă suplimentară' AS tip &quot; +&#xD;
                    &quot;FROM libere &quot; +&#xD;
                    &quot;WHERE YEAR(zi) = YEAR(CURDATE()) AND zi >= CURDATE() &quot; +&#xD;
                    &quot;ORDER BY data_sarbatoare&quot;;&#xD;
                    &#xD;
         default:&#xD;
             return &quot;SELECT 'Tip interogare calendar nerecunoscut' AS mesaj&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V---HEVdEfCS7cth2SLu0w" name="generateLegalHolidaysQuery" specification="_V8fqwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V---HUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V---HkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     String targetYear = entities.getOrDefault(&quot;target_year&quot;, String.valueOf(java.time.LocalDate.now().getYear()));&#xD;
     &#xD;
     return &quot;SELECT &quot; +&#xD;
            &quot;COUNT(s.zi) AS zile_libere_legale, &quot; +&#xD;
            &quot;COUNT(l.zi) AS zile_libere_suplimentare, &quot; +&#xD;
            &quot;(COUNT(s.zi) + COUNT(l.zi)) AS total_zile_libere, &quot; +&#xD;
            &quot;'&quot; + targetYear + &quot;' AS anul &quot; +&#xD;
            &quot;FROM sarbatori s &quot; +&#xD;
            &quot;FULL OUTER JOIN libere l ON YEAR(s.zi) = YEAR(l.zi) &quot; +&#xD;
            &quot;WHERE (YEAR(s.zi) = &quot; + targetYear + &quot; OR YEAR(l.zi) = &quot; + targetYear + &quot;)&quot;;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V---H0VdEfCS7cth2SLu0w" name="generateMonthDaysQuery" specification="_V8fqw0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V---IEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V---IUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     String targetMonth = entities.get(&quot;target_month&quot;);&#xD;
     String targetYear = entities.getOrDefault(&quot;target_year&quot;, String.valueOf(java.time.LocalDate.now().getYear()));&#xD;
     &#xD;
     if (targetMonth != null) {&#xD;
         Integer monthNumber = MONTH_MAPPING.get(targetMonth.toLowerCase());&#xD;
         &#xD;
         if (monthNumber != null) {&#xD;
             return &quot;SELECT &quot; +&#xD;
                    &quot;DAY(LAST_DAY('&quot; + targetYear + &quot;-&quot; + String.format(&quot;%02d&quot;, monthNumber) + &quot;-01')) AS zile_in_luna, &quot; +&#xD;
                    &quot;'&quot; + targetMonth + &quot;' AS luna, &quot; +&#xD;
                    &quot;'&quot; + targetYear + &quot;' AS anul, &quot; +&#xD;
                    &quot;CASE &quot; +&#xD;
                    &quot;  WHEN &quot; + monthNumber + &quot; = 2 AND (&quot; + targetYear + &quot; % 4 = 0 AND (&quot; + targetYear + &quot; % 100 != 0 OR &quot; + targetYear + &quot; % 400 = 0)) THEN 'An bisect' &quot; +&#xD;
                    &quot;  ELSE 'An normal' &quot; +&#xD;
                    &quot;END AS tip_an&quot;;&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return &quot;SELECT 'Luna specificată nu este validă. Folosiți numele lunii în română (ianuarie, februarie, etc.)' AS mesaj&quot;;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V---IkVdEfCS7cth2SLu0w" name="calculateDaysInMonth" specification="_VtjP0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V---I0VdEfCS7cth2SLu0w" name="month">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V---JEVdEfCS7cth2SLu0w" name="year">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V---JUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>switch (month) {&#xD;
         case 1: case 3: case 5: case 7: case 8: case 10: case 12:&#xD;
             return 31;&#xD;
         case 4: case 6: case 9: case 11:&#xD;
             return 30;&#xD;
         case 2:&#xD;
             return isLeapYear(year) ? 29 : 28;&#xD;
         default:&#xD;
             return 0;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V---JkVdEfCS7cth2SLu0w" name="isLeapYear" specification="_VtjP1EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V---J0VdEfCS7cth2SLu0w" name="year">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V---KEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>return (year % 4 == 0 &amp;&amp; year % 100 != 0) || (year % 400 == 0);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-_lIEVdEfCS7cth2SLu0w" name="getNextWeekend" specification="_VtjP10VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-_lIUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>java.time.LocalDate today = java.time.LocalDate.now();&#xD;
     java.time.DayOfWeek dayOfWeek = today.getDayOfWeek();&#xD;
     &#xD;
     int daysUntilSaturday = 6 - dayOfWeek.getValue(); // Saturday is 6&#xD;
     if (daysUntilSaturday &lt;= 0) {&#xD;
         daysUntilSaturday += 7; // Next week's Saturday&#xD;
     }&#xD;
     &#xD;
     return today.plusDays(daysUntilSaturday).toString();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-_lIkVdEfCS7cth2SLu0w" name="formatTaskSchedulingResponse" specification="_V8fqxkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-_lI0VdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-_lJEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-_lJUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>String schedulingType = queryInfo.getEntities().getOrDefault(&quot;scheduling_type&quot;, &quot;task/meeting&quot;);&#xD;
     String targetPerson = queryInfo.getEntities().get(&quot;target_person&quot;);&#xD;
     &#xD;
     if (resultList.isEmpty()) {&#xD;
         return &quot;Nu am găsit nicio persoană cu numele \&quot;&quot; + targetPerson + &quot;\&quot;. &quot; +&#xD;
                &quot;Verificați numele și încercați din nou, sau căutați în directorul de angajați.&quot;;&#xD;
     } else if (resultList.size() == 1) {&#xD;
         Map&lt;String, Object> person = resultList.get(0);&#xD;
         return String.format(&#xD;
             &quot;**Pentru programarea unui %s cu %s %s:**\n\n&quot; +&#xD;
             &quot;👤 **Nume:** %s %s\n&quot; +&#xD;
             &quot;🏢 **Departament:** %s\n&quot; +&#xD;
             &quot;👔 **Funcția:** %s\n&quot; +&#xD;
             &quot;📧 **Email:** %s\n&quot; +&#xD;
             &quot;📞 **Telefon:** %s\n\n&quot; +&#xD;
             &quot;💡 **Opțiuni de programare:**\n&quot; +&#xD;
             &quot;• Contactați direct prin email sau telefon\n&quot; +&#xD;
             &quot;• Folosiți sistemul intern de task-uri/calendar\n&quot; +&#xD;
             &quot;• Verificați disponibilitatea în calendar-ul companiei&quot;,&#xD;
             schedulingType,&#xD;
             person.get(&quot;nume&quot;), person.get(&quot;prenume&quot;),&#xD;
             person.get(&quot;nume&quot;), person.get(&quot;prenume&quot;),&#xD;
             person.get(&quot;departament&quot;),&#xD;
             person.get(&quot;functie&quot;),&#xD;
             person.get(&quot;email&quot;),&#xD;
             person.get(&quot;telefon&quot;)&#xD;
         );&#xD;
     } else {&#xD;
         return &quot;Am găsit &quot; + resultList.size() + &quot; persoane cu numele \&quot;&quot; + targetPerson + &quot;\&quot;. &quot; +&#xD;
                &quot;Iată lista pentru a alege persoana corectă:&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-_lJkVdEfCS7cth2SLu0w" name="formatCalendarResponse" specification="_V8g44UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-_lJ0VdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-_lKEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-_lKUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>String calendarType = queryInfo.getEntities().getOrDefault(&quot;calendar_type&quot;, &quot;&quot;);&#xD;
     &#xD;
     if (&quot;next_free_day&quot;.equals(calendarType) &amp;&amp; resultList.size() == 1) {&#xD;
         Map&lt;String, Object> result = resultList.get(0);&#xD;
         String nextFreeDay = (String) result.get(&quot;urmatoarea_zi_libera&quot;);&#xD;
         String tipZi = (String) result.get(&quot;tip_zi_libera&quot;);&#xD;
         &#xD;
         return String.format(&#xD;
             &quot;**Următoarea zi liberă:**\n\n&quot; +&#xD;
             &quot;📅 **Data:** %s\n&quot; +&#xD;
             &quot;🎉 **Tipul:** %s\n\n&quot; +&#xD;
             &quot;ℹ️ *Aceasta este următoarea zi în care nu se lucrează conform calendarului oficial.*&quot;,&#xD;
             nextFreeDay, tipZi&#xD;
         );&#xD;
     }&#xD;
     &#xD;
     return &quot;Iată informațiile de calendar solicitate:&quot;;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-_lKkVdEfCS7cth2SLu0w" name="formatLegalHolidaysResponse" specification="_V8g45kVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-_lK0VdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-_lLEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-_lLUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>if (resultList.size() == 1) {&#xD;
         Map&lt;String, Object> result = resultList.get(0);&#xD;
         int zileLegale = ((Number) result.getOrDefault(&quot;zile_libere_legale&quot;, 0)).intValue();&#xD;
         int zileSuplimentare = ((Number) result.getOrDefault(&quot;zile_libere_suplimentare&quot;, 0)).intValue();&#xD;
         int total = ((Number) result.getOrDefault(&quot;total_zile_libere&quot;, 0)).intValue();&#xD;
         String anul = (String) result.get(&quot;anul&quot;);&#xD;
         &#xD;
         return String.format(&#xD;
             &quot;**Zile libere legale pentru anul %s:**\n\n&quot; +&#xD;
             &quot;🏛️ **Sărbători legale:** %d zile\n&quot; +&#xD;
             &quot;📅 **Zile libere suplimentare:** %d zile\n&quot; +&#xD;
             &quot;📊 **Total zile libere:** %d zile\n\n&quot; +&#xD;
             &quot;ℹ️ *Aceste zile sunt stabilite prin lege și calendar oficial.*&quot;,&#xD;
             anul, zileLegale, zileSuplimentare, total&#xD;
         );&#xD;
     }&#xD;
     &#xD;
     return &quot;Nu am putut calcula zilele libere legale pentru anul specificat.&quot;;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-_lLkVdEfCS7cth2SLu0w" name="formatMonthDaysResponse" specification="_V8g460VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-_lL0VdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-_lMEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V-_lMUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>if (resultList.size() == 1) {&#xD;
         Map&lt;String, Object> result = resultList.get(0);&#xD;
         int zileInLuna = ((Number) result.get(&quot;zile_in_luna&quot;)).intValue();&#xD;
         String luna = (String) result.get(&quot;luna&quot;);&#xD;
         String anul = (String) result.get(&quot;anul&quot;);&#xD;
         String tipAn = (String) result.get(&quot;tip_an&quot;);&#xD;
         &#xD;
         return String.format(&#xD;
             &quot;**Luna %s %s:**\n\n&quot; +&#xD;
             &quot;📅 **Numărul de zile:** %d zile\n&quot; +&#xD;
             &quot;📊 **Tipul anului:** %s\n\n&quot; +&#xD;
             &quot;ℹ️ *%s&quot;,&#xD;
             luna, anul, zileInLuna, tipAn,&#xD;
             &quot;An bisect&quot;.equals(tipAn) ? &#xD;
                 &quot;Februarie are 29 de zile în anii biseţi.&quot; : &#xD;
                 &quot;Anul normal - februarie are 28 de zile.&quot;&#xD;
         );&#xD;
     }&#xD;
     &#xD;
     return &quot;Nu am putut calcula zilele pentru luna specificată.&quot;;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-_lMkVdEfCS7cth2SLu0w" name="identifyEntities1" specification="_Vtj24EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-_lM0VdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-_lNEVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, String> entities = new HashMap&lt;>();&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: ===== ENHANCED ENTITY DETECTION =====&quot;);&#xD;
     System.out.println(&quot;DEBUG: Analyzing text: \&quot;&quot; + text + &quot;\&quot;&quot;);&#xD;
     &#xD;
     // Detect all keyword types first&#xD;
     boolean hasEmployeeKeywords = containsAny(text, EMPLOYEE_KEYWORDS);&#xD;
     boolean hasPositionKeywords = containsAny(text, POSITION_KEYWORDS);&#xD;
     boolean hasDepartmentKeywords = containsAny(text, DEPARTMENT_KEYWORDS);&#xD;
     boolean hasLeaveKeywords = containsAny(text, LEAVE_KEYWORDS);&#xD;
     boolean hasCountKeywords = containsAny(text, COUNT_KEYWORDS);&#xD;
     boolean hasTemporalKeywords = containsTemporalExpression(text);&#xD;
     boolean hasSalaryKeywords = containsAny(text, SALARY_KEYWORDS); // IMPORTANT!&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: Keyword analysis:&quot;);&#xD;
     System.out.println(&quot;DEBUG: - Employee keywords: &quot; + hasEmployeeKeywords);&#xD;
     System.out.println(&quot;DEBUG: - Position keywords: &quot; + hasPositionKeywords);&#xD;
     System.out.println(&quot;DEBUG: - Department keywords: &quot; + hasDepartmentKeywords);&#xD;
     System.out.println(&quot;DEBUG: - Leave keywords: &quot; + hasLeaveKeywords);&#xD;
     System.out.println(&quot;DEBUG: - Count keywords: &quot; + hasCountKeywords);&#xD;
     System.out.println(&quot;DEBUG: - Temporal keywords: &quot; + hasTemporalKeywords);&#xD;
     System.out.println(&quot;DEBUG: - Salary keywords: &quot; + hasSalaryKeywords);&#xD;
     &#xD;
     // ========================================================================&#xD;
     // PRIORITY 1: TEMPORAL + ENTITY combinations&#xD;
     // ========================================================================&#xD;
     &#xD;
     if (hasTemporalKeywords) {&#xD;
         System.out.println(&quot;DEBUG: Processing temporal expressions...&quot;);&#xD;
         &#xD;
         if (hasLeaveKeywords) {&#xD;
             entities.put(&quot;entity&quot;, &quot;leave&quot;);&#xD;
             entities.put(&quot;has_temporal&quot;, &quot;true&quot;);&#xD;
             &#xD;
             String temporal = extractTemporalExpression(text);&#xD;
             if (temporal != null) {&#xD;
                 entities.put(&quot;temporal_filter&quot;, temporal);&#xD;
             }&#xD;
             &#xD;
             extractDepartmentName(text, entities);&#xD;
             &#xD;
             System.out.println(&quot;DEBUG: 🎯 DETECTED: Temporal leave query: &quot; + entities);&#xD;
             return entities;&#xD;
         }&#xD;
         &#xD;
         if (hasEmployeeKeywords) {&#xD;
             entities.put(&quot;entity&quot;, &quot;employee&quot;);&#xD;
             entities.put(&quot;has_temporal&quot;, &quot;true&quot;);&#xD;
             &#xD;
             String temporal = extractTemporalExpression(text);&#xD;
             if (temporal != null) {&#xD;
                 entities.put(&quot;temporal_filter&quot;, temporal);&#xD;
             }&#xD;
             &#xD;
             extractDepartmentName(text, entities);&#xD;
             &#xD;
             System.out.println(&quot;DEBUG: 🎯 DETECTED: Temporal employee query: &quot; + entities);&#xD;
             return entities;&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     // ========================================================================&#xD;
     // PRIORITY 2: SALARY QUERIES - CRITICAL FIX!&#xD;
     // ========================================================================&#xD;
     &#xD;
     // CASE: &quot;salariu minim/maxim departament X&quot; - Salary-focused query&#xD;
     if (hasSalaryKeywords &amp;&amp; (hasDepartmentKeywords || hasEmployeeKeywords)) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Salary query with context&quot;);&#xD;
         &#xD;
         // For salary queries, we want to show employees with their salaries&#xD;
         entities.put(&quot;entity&quot;, &quot;employee&quot;);&#xD;
         entities.put(&quot;focus&quot;, &quot;salary&quot;); // Add focus indicator&#xD;
         &#xD;
         extractDepartmentName(text, entities);&#xD;
         &#xD;
         System.out.println(&quot;DEBUG: Final entities: &quot; + entities);&#xD;
         return entities;&#xD;
     }&#xD;
     &#xD;
     // ========================================================================&#xD;
     // PRIORITY 3: SPECIFIC ENTITY COMBINATIONS (order is critical!)&#xD;
     // ========================================================================&#xD;
     &#xD;
     // CASE 1: &quot;Care sunt angajații din departamentul X&quot; - Employee query with department filter&#xD;
     if (hasEmployeeKeywords &amp;&amp; hasDepartmentKeywords) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Employee query with department context&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;employee&quot;);&#xD;
         extractDepartmentName(text, entities);&#xD;
         &#xD;
         System.out.println(&quot;DEBUG: Final entities: &quot; + entities);&#xD;
         return entities;&#xD;
     }&#xD;
     &#xD;
     // CASE 2: &quot;Funcții/poziții din departamentul X&quot; - Position query with department context&#xD;
     if (hasPositionKeywords &amp;&amp; hasDepartmentKeywords) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Position query with department context&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;tipuri_pozitii&quot;);&#xD;
         extractDepartmentName(text, entities);&#xD;
         &#xD;
         System.out.println(&quot;DEBUG: Final entities: &quot; + entities);&#xD;
         return entities;&#xD;
     }&#xD;
     &#xD;
     // CASE 3: &quot;Concedii din departamentul X&quot; - Leave query with department context&#xD;
     if (hasLeaveKeywords &amp;&amp; hasDepartmentKeywords) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Leave query with department context&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;leave&quot;);&#xD;
         extractDepartmentName(text, entities);&#xD;
         &#xD;
         System.out.println(&quot;DEBUG: Final entities: &quot; + entities);&#xD;
         return entities;&#xD;
     }&#xD;
     &#xD;
     // ========================================================================&#xD;
     // PRIORITY 4: COUNT-based queries (what are we counting?)&#xD;
     // ========================================================================&#xD;
     &#xD;
     if (hasCountKeywords) {&#xD;
         System.out.println(&quot;DEBUG: Processing count-based query...&quot;);&#xD;
         &#xD;
         if (hasEmployeeKeywords) {&#xD;
             System.out.println(&quot;DEBUG: 🎯 DETECTED: Count employees query&quot;);&#xD;
             entities.put(&quot;entity&quot;, &quot;employee&quot;);&#xD;
             extractDepartmentName(text, entities);&#xD;
             return entities;&#xD;
             &#xD;
         } else if (hasPositionKeywords) {&#xD;
             System.out.println(&quot;DEBUG: 🎯 DETECTED: Count positions query&quot;);&#xD;
             entities.put(&quot;entity&quot;, &quot;tipuri_pozitii&quot;);&#xD;
             extractDepartmentName(text, entities);&#xD;
             return entities;&#xD;
             &#xD;
         } else if (hasLeaveKeywords) {&#xD;
             entities.put(&quot;entity&quot;, &quot;leave&quot;);&#xD;
             extractDepartmentName(text, entities);&#xD;
             return entities;&#xD;
             &#xD;
         } else if (hasDepartmentKeywords) {&#xD;
             entities.put(&quot;entity&quot;, &quot;department&quot;);&#xD;
             extractDepartmentName(text, entities);&#xD;
             return entities;&#xD;
             &#xD;
         } else if (containsAny(text, PROJECT_KEYWORDS)) {&#xD;
             entities.put(&quot;entity&quot;, &quot;project&quot;);&#xD;
             return entities;&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     // ========================================================================&#xD;
     // PRIORITY 5: LOCATION-based queries&#xD;
     // ========================================================================&#xD;
     &#xD;
     if (containsAny(text, LOCATION_KEYWORDS)) {&#xD;
         if (hasDepartmentKeywords) {&#xD;
             entities.put(&quot;entity&quot;, &quot;locatii_departamente&quot;);&#xD;
             extractDepartmentName(text, entities);&#xD;
             return entities;&#xD;
         } else if (hasEmployeeKeywords) {&#xD;
             entities.put(&quot;entity&quot;, &quot;locatii_useri&quot;);&#xD;
             extractDepartmentName(text, entities);&#xD;
             return entities;&#xD;
         } else if (hasLeaveKeywords) {&#xD;
             entities.put(&quot;entity&quot;, &quot;locatii_concedii&quot;);&#xD;
             extractDepartmentName(text, entities);&#xD;
             return entities;&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     // ========================================================================&#xD;
     // PRIORITY 6: SINGLE ENTITY DETECTION (in priority order)&#xD;
     // ========================================================================&#xD;
     &#xD;
     // Salary queries should be treated as employee queries with salary focus&#xD;
     if (hasSalaryKeywords) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Salary query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;employee&quot;);&#xD;
         entities.put(&quot;focus&quot;, &quot;salary&quot;);&#xD;
         extractDepartmentName(text, entities);&#xD;
         &#xD;
     } else if (hasEmployeeKeywords) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Employee query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;employee&quot;);&#xD;
         extractDepartmentName(text, entities);&#xD;
         &#xD;
     } else if (hasPositionKeywords) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Position query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;tipuri_pozitii&quot;);&#xD;
         extractDepartmentName(text, entities);&#xD;
         &#xD;
     } else if (hasLeaveKeywords) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Leave query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;leave&quot;);&#xD;
         &#xD;
         // Check for leave periods&#xD;
         if (text.contains(&quot;craciun&quot;) || text.contains(&quot;crăciun&quot;)) {&#xD;
             entities.put(&quot;period&quot;, &quot;christmas&quot;);&#xD;
         } else if (text.contains(&quot;vara&quot;) || text.contains(&quot;vară&quot;)) {&#xD;
             entities.put(&quot;period&quot;, &quot;summer&quot;);&#xD;
         } else if (text.contains(&quot;iarna&quot;) || text.contains(&quot;iarnă&quot;)) {&#xD;
             entities.put(&quot;period&quot;, &quot;winter&quot;);&#xD;
         } else if (text.contains(&quot;paste&quot;) || text.contains(&quot;paște&quot;)) {&#xD;
             entities.put(&quot;period&quot;, &quot;easter&quot;);&#xD;
         }&#xD;
         &#xD;
         extractDepartmentName(text, entities);&#xD;
         &#xD;
     } else if (containsAny(text, CERTIFICATE_KEYWORDS)) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Certificate query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;adeverinte&quot;);&#xD;
         extractDepartmentName(text, entities);&#xD;
         &#xD;
     } else if (containsAny(text, PROJECT_KEYWORDS)) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Project query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;proiecte&quot;);&#xD;
         &#xD;
         if (text.contains(&quot;active&quot;) || text.contains(&quot;curente&quot;) || &#xD;
             text.contains(&quot;actuale&quot;) || text.contains(&quot;in desfasurare&quot;) ||&#xD;
             text.contains(&quot;în desfășurare&quot;)) {&#xD;
             entities.put(&quot;status&quot;, &quot;active&quot;);&#xD;
         }&#xD;
         &#xD;
     } else if (containsAny(text, OFFICE_KEYWORDS)) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Office query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;sedii&quot;);&#xD;
         &#xD;
     } else if (containsAny(text, TEAM_KEYWORDS)) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Team query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;echipa&quot;);&#xD;
         &#xD;
     } else if (containsAny(text, FIRM_KEYWORDS)) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Firm-wide query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;useri&quot;);&#xD;
         &#xD;
     } else if (hasDepartmentKeywords) {&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Department query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;department&quot;);&#xD;
         extractDepartmentName(text, entities);&#xD;
         &#xD;
     } else {&#xD;
         // Default fallback&#xD;
         System.out.println(&quot;DEBUG: 🎯 DETECTED: Default to employee query&quot;);&#xD;
         entities.put(&quot;entity&quot;, &quot;employee&quot;);&#xD;
         extractDepartmentName(text, entities);&#xD;
     }&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: Final detected entities: &quot; + entities);&#xD;
     System.out.println(&quot;DEBUG: ===== ENTITY DETECTION COMPLETE =====&quot;);&#xD;
     &#xD;
     return entities;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V-_lNUVdEfCS7cth2SLu0w" name="extractDepartmentName" specification="_Vtkd8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V-_lNkVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V-_lN0VdEfCS7cth2SLu0w" name="entities" type="_UAkwoUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Map.Entry&lt;String, String> entry : KNOWN_DEPARTMENTS.entrySet()) {&#xD;
         if (text.contains(entry.getKey())) {&#xD;
             entities.put(&quot;department_name&quot;, entry.getValue());&#xD;
             System.out.println(&quot;DEBUG: Found department: &quot; + entry.getKey() + &quot; -> &quot; + entry.getValue());&#xD;
             return;&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     // Try regex pattern if direct match fails&#xD;
     Pattern pattern = Pattern.compile(&quot;departament(?:ul)?\\s+([a-z0-9]+)&quot;, Pattern.CASE_INSENSITIVE);&#xD;
     Matcher matcher = pattern.matcher(text);&#xD;
     &#xD;
     if (matcher.find()) {&#xD;
         String deptName = matcher.group(1).toUpperCase();&#xD;
         entities.put(&quot;department_name&quot;, deptName);&#xD;
         System.out.println(&quot;DEBUG: Found department via regex: &quot; + deptName);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_AMMEVdEfCS7cth2SLu0w" name="identifyRequestedAttributes" specification="_VtlFAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_AMMUVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_AMMkVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V_AMM0VdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;String> attributes = new ArrayList&lt;>();&#xD;
     &#xD;
     // Common attributes to look for&#xD;
     Map&lt;String, String> attributeMap = new HashMap&lt;>();&#xD;
     attributeMap.put(&quot;nume&quot;, &quot;nume&quot;);&#xD;
     attributeMap.put(&quot;prenume&quot;, &quot;prenume&quot;);&#xD;
     attributeMap.put(&quot;data nasterii&quot;, &quot;data_nasterii&quot;);&#xD;
     attributeMap.put(&quot;data nașterii&quot;, &quot;data_nasterii&quot;);&#xD;
     attributeMap.put(&quot;data de nastere&quot;, &quot;data_nasterii&quot;);&#xD;
     attributeMap.put(&quot;email&quot;, &quot;email&quot;);&#xD;
     attributeMap.put(&quot;mail&quot;, &quot;email&quot;);&#xD;
     attributeMap.put(&quot;telefon&quot;, &quot;telefon&quot;);&#xD;
     attributeMap.put(&quot;numar telefon&quot;, &quot;telefon&quot;);&#xD;
     attributeMap.put(&quot;numar de telefon&quot;, &quot;telefon&quot;);&#xD;
     attributeMap.put(&quot;adresa&quot;, &quot;adresa&quot;);&#xD;
     attributeMap.put(&quot;strada&quot;, &quot;strada&quot;);&#xD;
     attributeMap.put(&quot;oras&quot;, &quot;oras&quot;);&#xD;
     attributeMap.put(&quot;oraș&quot;, &quot;oras&quot;);&#xD;
     attributeMap.put(&quot;judet&quot;, &quot;judet&quot;);&#xD;
     attributeMap.put(&quot;județ&quot;, &quot;judet&quot;);&#xD;
     attributeMap.put(&quot;tara&quot;, &quot;tara&quot;);&#xD;
     attributeMap.put(&quot;țara&quot;, &quot;tara&quot;);&#xD;
     attributeMap.put(&quot;functie&quot;, &quot;functie&quot;);&#xD;
     attributeMap.put(&quot;funcție&quot;, &quot;functie&quot;);&#xD;
     attributeMap.put(&quot;pozitie&quot;, &quot;functie&quot;);&#xD;
     attributeMap.put(&quot;poziție&quot;, &quot;functie&quot;);&#xD;
     attributeMap.put(&quot;rol&quot;, &quot;functie&quot;);&#xD;
     attributeMap.put(&quot;departament&quot;, &quot;departament&quot;);&#xD;
     attributeMap.put(&quot;salariu&quot;, &quot;salariu&quot;);&#xD;
     attributeMap.put(&quot;venit&quot;, &quot;salariu&quot;);&#xD;
     attributeMap.put(&quot;castig&quot;, &quot;salariu&quot;);&#xD;
     attributeMap.put(&quot;câștig&quot;, &quot;salariu&quot;);&#xD;
     attributeMap.put(&quot;data angajarii&quot;, &quot;data_ang&quot;);&#xD;
     attributeMap.put(&quot;data angajării&quot;, &quot;data_ang&quot;);&#xD;
     attributeMap.put(&quot;data de angajare&quot;, &quot;data_ang&quot;);&#xD;
     attributeMap.put(&quot;sediu&quot;, &quot;sediu&quot;);&#xD;
     attributeMap.put(&quot;echipa&quot;, &quot;echipa&quot;);&#xD;
     attributeMap.put(&quot;echipă&quot;, &quot;echipa&quot;);&#xD;
     attributeMap.put(&quot;status&quot;, &quot;status&quot;);&#xD;
     attributeMap.put(&quot;stare&quot;, &quot;status&quot;);&#xD;
     &#xD;
     // Check for each attribute in the normalized text&#xD;
     for (Map.Entry&lt;String, String> entry : attributeMap.entrySet()) {&#xD;
         if (text.contains(entry.getKey())) {&#xD;
             // Add unique attribute names only (avoid duplicates)&#xD;
             if (!attributes.contains(entry.getValue())) {&#xD;
                 attributes.add(entry.getValue());&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return attributes;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_AMNEVdEfCS7cth2SLu0w" name="generateSQLQuery" specification="_V8hf8UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_AMNUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_AMNkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     String entityType = entities.getOrDefault(&quot;entity&quot;, &quot;&quot;);&#xD;
     &#xD;
     // Delegate to specific entity handlers&#xD;
     switch (entityType) {&#xD;
         case &quot;department&quot;:&#xD;
             return generateDepartmentQuery(queryInfo);&#xD;
         case &quot;employee&quot;:&#xD;
             return generateEmployeeQuery(queryInfo);&#xD;
         case &quot;leave&quot;:&#xD;
             return generateLeaveQuery(queryInfo);&#xD;
         case &quot;position&quot;:&#xD;
             return generatePositionQuery(queryInfo);&#xD;
         case &quot;salary&quot;:&#xD;
             return generateSalaryQuery(queryInfo);&#xD;
         case &quot;certificate&quot;:&#xD;
             return generateCertificateQuery(queryInfo);&#xD;
         case &quot;office&quot;:&#xD;
             return generateOfficeQuery(queryInfo);&#xD;
         case &quot;project&quot;:&#xD;
             return generateProjectQuery(queryInfo);&#xD;
         case &quot;team&quot;:&#xD;
             return generateTeamQuery(queryInfo);&#xD;
         case &quot;firm&quot;:&#xD;
             return generateFirmQuery(queryInfo);&#xD;
         case &quot;personal&quot;:&#xD;
             return generatePersonalQuery(queryInfo);&#xD;
        &#xD;
         case &quot;location&quot;:&#xD;
             return generateLocationQuery(queryInfo);&#xD;
         case &quot;average&quot;:&#xD;
             return generateAverageQuery(queryInfo);&#xD;
         case &quot;task&quot;:&#xD;
             return generateTaskQuery(queryInfo);&#xD;
         case &quot;availability&quot;:&#xD;
             return generateAvailabilityQuery(queryInfo);&#xD;
         case &quot;work_mode&quot;:&#xD;
             return generateWorkModeQuery(queryInfo);&#xD;
         case &quot;task_scheduling&quot;:&#xD;
             return generateTaskSchedulingQuery(queryInfo);&#xD;
         case &quot;calendar&quot;:&#xD;
             return generateCalendarQuery(queryInfo);&#xD;
         case &quot;legal_holidays&quot;:&#xD;
             return generateLegalHolidaysQuery(queryInfo);&#xD;
         case &quot;month_days&quot;:&#xD;
             return generateMonthDaysQuery(queryInfo);&#xD;
         default:&#xD;
             return generateGenericQuery(queryInfo);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_AMN0VdEfCS7cth2SLu0w" name="generatePersonalQuery" specification="_V8hf9EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_AMOEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_AMOUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     String personalType = entities.getOrDefault(&quot;personal_type&quot;, &quot;&quot;);&#xD;
     &#xD;
     switch (personalType) {&#xD;
         case &quot;leave_balance&quot;:&#xD;
             // &quot;cate zile de concediu am?&quot;&#xD;
             return &quot;SELECT u.zileramase AS zile_ramase, u.zilecons AS zile_consumate, &quot; +&#xD;
                    &quot;u.conramase AS concedii_ramase, u.conluate AS concedii_luate &quot; +&#xD;
                    &quot;FROM useri u WHERE u.id = ?&quot;; // Will be replaced with current user condition&#xD;
                    &#xD;
         case &quot;salary&quot;:&#xD;
             // &quot;salariul meu net&quot;&#xD;
             return &quot;SELECT t.salariu AS salariu_brut, &quot; +&#xD;
                    &quot;ROUND(t.salariu * 0.585, 2) AS salariu_net_aproximativ, &quot; +&#xD;
                    &quot;t.denumire AS functie, d.nume_dep AS departament &quot; +&#xD;
                    &quot;FROM useri u &quot; +&#xD;
                    &quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                    &quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                    &quot;WHERE u.id = ?&quot;;&#xD;
                    &#xD;
         case &quot;hierarchy&quot;:&#xD;
             // &quot;cine este superiorul meu?&quot;&#xD;
             return &quot;SELECT sup.nume, sup.prenume, sup_t.denumire AS functie_superior, &quot; +&#xD;
                    &quot;sup_d.nume_dep AS departament_superior &quot; +&#xD;
                    &quot;FROM useri u &quot; +&#xD;
                    &quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                    &quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                    &quot;LEFT JOIN useri sup ON (sup.id_dep = d.id_dep AND sup_t.ierarhie &lt; t.ierarhie) &quot; +&#xD;
                    &quot;LEFT JOIN tipuri sup_t ON sup.tip = sup_t.tip &quot; +&#xD;
                    &quot;LEFT JOIN departament sup_d ON sup.id_dep = sup_d.id_dep &quot; +&#xD;
                    &quot;WHERE u.id = ? ORDER BY sup_t.ierarhie ASC LIMIT 1&quot;;&#xD;
                    &#xD;
         default:&#xD;
             return &quot;SELECT 'Tip interogare personală nerecunoscut' AS mesaj&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_AMOkVdEfCS7cth2SLu0w" name="generateProjectQuery" specification="_V8hf90VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_AMO0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_AMPEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     String projectStatus = entities.getOrDefault(&quot;project_status&quot;, &quot;&quot;);&#xD;
     QueryType queryType = queryInfo.getQueryType();&#xD;
     &#xD;
     StringBuilder sql = new StringBuilder();&#xD;
     &#xD;
     switch (queryType) {&#xD;
         case COUNT:&#xD;
             sql.append(&quot;SELECT COUNT(*) AS numar_proiecte FROM proiecte p WHERE 1=1 &quot;);&#xD;
             break;&#xD;
         case LIST:&#xD;
         default:&#xD;
             sql.append(&quot;SELECT p.id, p.nume, p.descriere, p.start AS data_inceput, &quot;);&#xD;
             sql.append(&quot;p.end AS data_sfarsit, u.nume AS supervizor_nume, u.prenume AS supervizor_prenume &quot;);&#xD;
             sql.append(&quot;FROM proiecte p &quot;);&#xD;
             sql.append(&quot;LEFT JOIN useri u ON p.supervizor = u.id &quot;);&#xD;
             sql.append(&quot;WHERE 1=1 &quot;);&#xD;
     }&#xD;
     &#xD;
     // Add status filter&#xD;
     if (&quot;active&quot;.equals(projectStatus)) {&#xD;
         sql.append(&quot;AND p.start &lt;= CURDATE() AND (p.end >= CURDATE() OR p.end IS NULL) &quot;);&#xD;
     } else if (&quot;inactive&quot;.equals(projectStatus)) {&#xD;
         sql.append(&quot;AND (p.end &lt; CURDATE() OR p.start > CURDATE()) &quot;);&#xD;
     }&#xD;
     &#xD;
     if (queryType == QueryType.LIST) {&#xD;
         sql.append(&quot;ORDER BY p.start DESC&quot;);&#xD;
     }&#xD;
     &#xD;
     return sql.toString();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_AMPUVdEfCS7cth2SLu0w" name="generateCertificateQuery" specification="_V8iHAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_AMPkVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_AMP0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     String certificateStatus = entities.getOrDefault(&quot;certificate_status&quot;, &quot;&quot;);&#xD;
     QueryType queryType = queryInfo.getQueryType();&#xD;
     &#xD;
     StringBuilder sql = new StringBuilder();&#xD;
     &#xD;
     switch (queryType) {&#xD;
         case COUNT:&#xD;
             sql.append(&quot;SELECT COUNT(*) AS numar_adeverinte FROM adeverinte a WHERE 1=1 &quot;);&#xD;
             break;&#xD;
         case LIST:&#xD;
         default:&#xD;
             sql.append(&quot;SELECT a.id, ta.denumire AS tip_adeverinta, a.motiv, &quot;);&#xD;
             sql.append(&quot;s.nume_status AS status, a.creare AS data_creare, &quot;);&#xD;
             sql.append(&quot;u.nume, u.prenume, d.nume_dep AS departament &quot;);&#xD;
             sql.append(&quot;FROM adeverinte a &quot;);&#xD;
             sql.append(&quot;LEFT JOIN tip_adev ta ON a.tip = ta.id &quot;);&#xD;
             sql.append(&quot;LEFT JOIN statusuri s ON a.status = s.status &quot;);&#xD;
             sql.append(&quot;LEFT JOIN useri u ON a.id_ang = u.id &quot;);&#xD;
             sql.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
             sql.append(&quot;WHERE 1=1 &quot;);&#xD;
     }&#xD;
     &#xD;
     // Add status filter&#xD;
     if (&quot;pending&quot;.equals(certificateStatus)) {&#xD;
         sql.append(&quot;AND a.status = 0 &quot;);&#xD;
     } else if (&quot;approved&quot;.equals(certificateStatus)) {&#xD;
         sql.append(&quot;AND a.status > 0 &quot;);&#xD;
     } else if (&quot;rejected&quot;.equals(certificateStatus)) {&#xD;
         sql.append(&quot;AND a.status &lt; 0 &quot;);&#xD;
     }&#xD;
     &#xD;
     if (queryType == QueryType.LIST) {&#xD;
         sql.append(&quot;ORDER BY a.creare DESC&quot;);&#xD;
     }&#xD;
     &#xD;
     return sql.toString();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_AMQEVdEfCS7cth2SLu0w" name="generateLocationQuery" specification="_V8iHA0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_AMQUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_AMQkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     String locationType = entities.getOrDefault(&quot;location_type&quot;, &quot;&quot;);&#xD;
     String departmentName = entities.get(&quot;department_name&quot;);&#xD;
     &#xD;
     switch (locationType) {&#xD;
         case &quot;department&quot;:&#xD;
             StringBuilder sql = new StringBuilder();&#xD;
             sql.append(&quot;SELECT d.nume_dep AS departament, ld.strada, ld.oras, ld.judet, ld.tara &quot;);&#xD;
             sql.append(&quot;FROM departament d &quot;);&#xD;
             sql.append(&quot;LEFT JOIN locatii_departamente ld ON d.id_dep = ld.id_dep &quot;);&#xD;
             sql.append(&quot;WHERE 1=1 &quot;);&#xD;
             &#xD;
             if (departmentName != null) {&#xD;
                 sql.append(&quot;AND UPPER(d.nume_dep) LIKE UPPER('%&quot;).append(departmentName).append(&quot;%') &quot;);&#xD;
             }&#xD;
             &#xD;
             sql.append(&quot;ORDER BY d.nume_dep&quot;);&#xD;
             return sql.toString();&#xD;
             &#xD;
         case &quot;office&quot;:&#xD;
             return &quot;SELECT nume_sediu, tip_sediu, strada, oras, judet, tara, telefon &quot; +&#xD;
                    &quot;FROM sedii ORDER BY tip_sediu, nume_sediu&quot;;&#xD;
                    &#xD;
         case &quot;employee&quot;:&#xD;
             return &quot;SELECT u.nume, u.prenume, d.nume_dep AS departament, &quot; +&#xD;
                    &quot;lu.strada, lu.oras, lu.judet, lu.tara &quot; +&#xD;
                    &quot;FROM useri u &quot; +&#xD;
                    &quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                    &quot;LEFT JOIN locatii_useri lu ON u.id = lu.id_user &quot; +&#xD;
                    &quot;ORDER BY d.nume_dep, u.nume&quot;;&#xD;
                    &#xD;
         default:&#xD;
             return &quot;SELECT 'Tip locație nerecunoscut' AS mesaj&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_AMQ0VdEfCS7cth2SLu0w" name="generateAverageQuery" specification="_V8iHBkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_AMREVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_AMRUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     String averageType = entities.getOrDefault(&quot;average_type&quot;, &quot;&quot;);&#xD;
     String averageScope = entities.getOrDefault(&quot;average_scope&quot;, &quot;&quot;);&#xD;
     String departmentName = entities.get(&quot;department_name&quot;);&#xD;
     &#xD;
     if (&quot;salary&quot;.equals(averageType)) {&#xD;
         StringBuilder sql = new StringBuilder();&#xD;
         &#xD;
         switch (averageScope) {&#xD;
             case &quot;department&quot;:&#xD;
                 sql.append(&quot;SELECT d.nume_dep AS departament, AVG(t.salariu) AS salariu_mediu, &quot;);&#xD;
                 sql.append(&quot;COUNT(u.id) AS numar_angajati &quot;);&#xD;
                 sql.append(&quot;FROM useri u &quot;);&#xD;
                 sql.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
                 sql.append(&quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot;);&#xD;
                 sql.append(&quot;WHERE 1=1 &quot;);&#xD;
                 &#xD;
                 if (departmentName != null) {&#xD;
                     sql.append(&quot;AND UPPER(d.nume_dep) LIKE UPPER('%&quot;).append(departmentName).append(&quot;%') &quot;);&#xD;
                 }&#xD;
                 &#xD;
                 sql.append(&quot;GROUP BY d.id_dep, d.nume_dep ORDER BY AVG(t.salariu) DESC&quot;);&#xD;
                 break;&#xD;
                 &#xD;
             case &quot;position&quot;:&#xD;
                 sql.append(&quot;SELECT t.denumire AS pozitie, AVG(t.salariu) AS salariu_mediu, &quot;);&#xD;
                 sql.append(&quot;COUNT(u.id) AS numar_angajati &quot;);&#xD;
                 sql.append(&quot;FROM tipuri t &quot;);&#xD;
                 sql.append(&quot;LEFT JOIN useri u ON t.tip = u.tip &quot;);&#xD;
                 &#xD;
                 if (departmentName != null) {&#xD;
                     sql.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
                     sql.append(&quot;WHERE UPPER(d.nume_dep) LIKE UPPER('%&quot;).append(departmentName).append(&quot;%') &quot;);&#xD;
                 } else {&#xD;
                     sql.append(&quot;WHERE 1=1 &quot;);&#xD;
                 }&#xD;
                 &#xD;
                 sql.append(&quot;GROUP BY t.tip, t.denumire ORDER BY AVG(t.salariu) DESC&quot;);&#xD;
                 break;&#xD;
                 &#xD;
             case &quot;company&quot;:&#xD;
             default:&#xD;
                 sql.append(&quot;SELECT AVG(t.salariu) AS salariu_mediu_general, &quot;);&#xD;
                 sql.append(&quot;COUNT(u.id) AS total_angajati &quot;);&#xD;
                 sql.append(&quot;FROM useri u &quot;);&#xD;
                 sql.append(&quot;LEFT JOIN tipuri t ON u.tip = t.tip&quot;);&#xD;
                 break;&#xD;
         }&#xD;
         &#xD;
         return sql.toString();&#xD;
     }&#xD;
     &#xD;
     return &quot;SELECT 'Tip medie nerecunoscut' AS mesaj&quot;;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_AMRkVdEfCS7cth2SLu0w" name="generateTaskQuery" specification="_V8iHCUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_AMR0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_AMSEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     String taskStatus = entities.getOrDefault(&quot;task_status&quot;, &quot;&quot;);&#xD;
     String temporalFilter = entities.get(&quot;temporal_filter&quot;);&#xD;
     QueryType queryType = queryInfo.getQueryType();&#xD;
     &#xD;
     StringBuilder sql = new StringBuilder();&#xD;
     &#xD;
     switch (queryType) {&#xD;
         case COUNT:&#xD;
             sql.append(&quot;SELECT COUNT(*) AS numar_taskuri FROM tasks t WHERE 1=1 &quot;);&#xD;
             break;&#xD;
         case LIST:&#xD;
         default:&#xD;
             sql.append(&quot;SELECT t.id, t.nume AS nume_task, p.nume AS nume_proiect, &quot;);&#xD;
             sql.append(&quot;u.nume, u.prenume, s.procent AS progres, &quot;);&#xD;
             sql.append(&quot;t.start AS data_inceput, t.end AS data_sfarsit &quot;);&#xD;
             sql.append(&quot;FROM tasks t &quot;);&#xD;
             sql.append(&quot;LEFT JOIN proiecte p ON t.id_prj = p.id &quot;);&#xD;
             sql.append(&quot;LEFT JOIN useri u ON t.id_ang = u.id &quot;);&#xD;
             sql.append(&quot;LEFT JOIN statusuri2 s ON t.status = s.id &quot;);&#xD;
             sql.append(&quot;WHERE 1=1 &quot;);&#xD;
     }&#xD;
     &#xD;
     // Add status filter&#xD;
     if (&quot;deadline&quot;.equals(taskStatus)) {&#xD;
         sql.append(&quot;AND t.end = CURDATE() &quot;);&#xD;
     } else if (&quot;in_progress&quot;.equals(taskStatus)) {&#xD;
         sql.append(&quot;AND s.procent &lt; 100 AND t.start &lt;= CURDATE() AND t.end >= CURDATE() &quot;);&#xD;
     }&#xD;
     &#xD;
     // Add temporal filter&#xD;
     if (temporalFilter != null) {&#xD;
         String temporalCondition = generateTemporalCondition(temporalFilter, &quot;t.end&quot;);&#xD;
         if (temporalCondition != null) {&#xD;
             sql.append(&quot;AND &quot;).append(temporalCondition).append(&quot; &quot;);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     if (queryType == QueryType.LIST) {&#xD;
         sql.append(&quot;ORDER BY t.end ASC&quot;);&#xD;
     }&#xD;
     &#xD;
     return sql.toString();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_AMSUVdEfCS7cth2SLu0w" name="generateAvailabilityQuery" specification="_V8iHDEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_AMSkVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_AMS0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     String availabilityType = entities.getOrDefault(&quot;availability_type&quot;, &quot;&quot;);&#xD;
     &#xD;
     if (&quot;position&quot;.equals(availabilityType)) {&#xD;
         return &quot;SELECT j.id, j.titlu, j.req AS cerinte, j.resp AS responsabilitati, &quot; +&#xD;
                &quot;d.nume_dep AS departament, t.denumire AS pozitie, &quot; +&#xD;
                &quot;j.start AS data_publicare, j.end AS data_expirare &quot; +&#xD;
                &quot;FROM joburi j &quot; +&#xD;
                &quot;LEFT JOIN departament d ON j.departament = d.id_dep &quot; +&#xD;
                &quot;LEFT JOIN tipuri t ON j.pozitie = t.tip &quot; +&#xD;
                &quot;WHERE j.activ = 1 AND (j.end >= CURDATE() OR j.end IS NULL) &quot; +&#xD;
                &quot;ORDER BY j.start DESC&quot;;&#xD;
     }&#xD;
     &#xD;
     return &quot;SELECT 'Tip disponibilitate nerecunoscut' AS mesaj&quot;;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_AzQEVdEfCS7cth2SLu0w" name="generateWorkModeQuery" specification="_V8iuEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_AzQUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_AzQkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     String workModeType = entities.getOrDefault(&quot;work_mode_type&quot;, &quot;&quot;);&#xD;
     QueryType queryType = queryInfo.getQueryType();&#xD;
     &#xD;
     StringBuilder sql = new StringBuilder();&#xD;
     &#xD;
     // Note: This assumes you have a work_mode column in your database&#xD;
     // If not, you might need to add this functionality&#xD;
     &#xD;
     switch (queryType) {&#xD;
         case COUNT:&#xD;
             sql.append(&quot;SELECT COUNT(*) AS numar_angajati FROM useri u &quot;);&#xD;
             sql.append(&quot;LEFT JOIN joburi j ON u.tip = j.pozitie WHERE 1=1 &quot;);&#xD;
             break;&#xD;
         case LIST:&#xD;
         default:&#xD;
             sql.append(&quot;SELECT u.id, u.nume, u.prenume, d.nume_dep AS departament, &quot;);&#xD;
             sql.append(&quot;t.denumire AS functie &quot;);&#xD;
             sql.append(&quot;FROM useri u &quot;);&#xD;
             sql.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
             sql.append(&quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot;);&#xD;
             sql.append(&quot;WHERE 1=1 &quot;);&#xD;
     }&#xD;
     &#xD;
     // For now, return a placeholder query since work mode isn't in the schema&#xD;
     if (&quot;remote&quot;.equals(workModeType)) {&#xD;
         sql.append(&quot;-- AND work_mode = 'remote' -- Column not yet implemented&quot;);&#xD;
     }&#xD;
     &#xD;
     if (queryType == QueryType.LIST) {&#xD;
         sql.append(&quot;ORDER BY d.nume_dep, u.nume&quot;);&#xD;
     }&#xD;
     &#xD;
     return sql.toString();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_AzQ0VdEfCS7cth2SLu0w" name="generateEnhancedLeaveQuery" specification="_V8iuE0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_AzREVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_AzRUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     String leaveQueryType = entities.getOrDefault(&quot;leave_query_type&quot;, &quot;&quot;);&#xD;
     String temporalFilter = entities.get(&quot;temporal_filter&quot;);&#xD;
     String departmentName = entities.get(&quot;department_name&quot;);&#xD;
     String leaveType = entities.get(&quot;leave_type&quot;);&#xD;
     QueryType queryType = queryInfo.getQueryType();&#xD;
     &#xD;
     StringBuilder sql = new StringBuilder();&#xD;
     &#xD;
     if (&quot;who_is_on_leave&quot;.equals(leaveQueryType)) {&#xD;
         // &quot;cine e in concediu azi/astazi&quot;&#xD;
         sql.append(&quot;SELECT u.nume, u.prenume, d.nume_dep AS departament, &quot;);&#xD;
         sql.append(&quot;t.denumire AS functie, c.start_c, c.end_c, c.motiv, &quot;);&#xD;
         sql.append(&quot;tc.motiv AS tip_concediu, c.durata &quot;);&#xD;
         sql.append(&quot;FROM concedii c &quot;);&#xD;
         sql.append(&quot;LEFT JOIN useri u ON c.id_ang = u.id &quot;);&#xD;
         sql.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
         sql.append(&quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot;);&#xD;
         sql.append(&quot;LEFT JOIN tipcon tc ON c.tip = tc.tip &quot;);&#xD;
         sql.append(&quot;WHERE c.status >= 1 &quot;); // Approved leaves only&#xD;
         &#xD;
         // Add temporal filter&#xD;
         if (temporalFilter != null) {&#xD;
             String temporalCondition = generateTemporalCondition(temporalFilter, &quot;c.start_c&quot;, &quot;c.end_c&quot;);&#xD;
             if (temporalCondition != null) {&#xD;
                 sql.append(&quot;AND &quot;).append(temporalCondition).append(&quot; &quot;);&#xD;
             }&#xD;
         } else {&#xD;
             // Default to today if no temporal filter&#xD;
             sql.append(&quot;AND CURDATE() BETWEEN c.start_c AND c.end_c &quot;);&#xD;
         }&#xD;
         &#xD;
         // Add department filter&#xD;
         if (departmentName != null) {&#xD;
             sql.append(&quot;AND UPPER(d.nume_dep) LIKE UPPER('%&quot;).append(departmentName).append(&quot;%') &quot;);&#xD;
         }&#xD;
         &#xD;
         // Add leave type filter&#xD;
         if (leaveType != null) {&#xD;
             sql.append(&quot;AND LOWER(tc.motiv) LIKE LOWER('%&quot;).append(leaveType).append(&quot;%') &quot;);&#xD;
         }&#xD;
         &#xD;
         sql.append(&quot;ORDER BY c.start_c DESC&quot;);&#xD;
         &#xD;
     } else {&#xD;
         // Default leave query (existing logic)&#xD;
         return generateLeaveQuery(queryInfo);&#xD;
     }&#xD;
     &#xD;
     return sql.toString();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_AzRkVdEfCS7cth2SLu0w" name="generateTemporalCondition" specification="_VtmTIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_AzR0VdEfCS7cth2SLu0w" name="temporal">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_AzSEVdEfCS7cth2SLu0w" name="startColumn">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_AzSUVdEfCS7cth2SLu0w" name="endColumn">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_AzSkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>if (temporal == null) {&#xD;
         return generateTemporalCondition(temporal, startColumn);&#xD;
     }&#xD;
     &#xD;
     switch (temporal.toLowerCase()) {&#xD;
         case &quot;astazi&quot;:&#xD;
         case &quot;azi&quot;:&#xD;
             return &quot;CURDATE() BETWEEN &quot; + startColumn + &quot; AND &quot; + endColumn;&#xD;
             &#xD;
         case &quot;maine&quot;:&#xD;
             return &quot;DATE_ADD(CURDATE(), INTERVAL 1 DAY) BETWEEN &quot; + startColumn + &quot; AND &quot; + endColumn;&#xD;
             &#xD;
         case &quot;saptamana aceasta&quot;:&#xD;
             return &quot;(&quot; + startColumn + &quot; &lt;= DATE_ADD(CURDATE(), INTERVAL (7 - DAYOFWEEK(CURDATE())) DAY) &quot; +&#xD;
                    &quot;AND &quot; + endColumn + &quot; >= DATE_SUB(CURDATE(), INTERVAL (DAYOFWEEK(CURDATE()) - 1) DAY))&quot;;&#xD;
                    &#xD;
         case &quot;saptamana viitoare&quot;:&#xD;
             return &quot;(&quot; + startColumn + &quot; &lt;= DATE_ADD(CURDATE(), INTERVAL (14 - DAYOFWEEK(CURDATE())) DAY) &quot; +&#xD;
                    &quot;AND &quot; + endColumn + &quot; >= DATE_ADD(CURDATE(), INTERVAL (8 - DAYOFWEEK(CURDATE())) DAY))&quot;;&#xD;
                    &#xD;
         case &quot;luna aceasta&quot;:&#xD;
             return &quot;(&quot; + startColumn + &quot; &lt;= LAST_DAY(CURDATE()) &quot; +&#xD;
                    &quot;AND &quot; + endColumn + &quot; >= DATE_FORMAT(CURDATE(), '%Y-%m-01'))&quot;;&#xD;
                    &#xD;
         case &quot;luna viitoare&quot;:&#xD;
             return &quot;(&quot; + startColumn + &quot; &lt;= LAST_DAY(DATE_ADD(CURDATE(), INTERVAL 1 MONTH)) &quot; +&#xD;
                    &quot;AND &quot; + endColumn + &quot; >= DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL 1 MONTH), '%Y-%m-01'))&quot;;&#xD;
                    &#xD;
         case &quot;de craciun&quot;:&#xD;
         case &quot;de crăciun&quot;:&#xD;
             return &quot;(&quot; + startColumn + &quot; &lt;= '2025-12-26' AND &quot; + endColumn + &quot; >= '2025-12-24')&quot;;&#xD;
             &#xD;
         case &quot;de revelion&quot;:&#xD;
             return &quot;(&quot; + startColumn + &quot; &lt;= '2025-01-02' AND &quot; + endColumn + &quot; >= '2024-12-31') &quot; +&#xD;
                    &quot;OR (&quot; + startColumn + &quot; &lt;= '2026-01-02' AND &quot; + endColumn + &quot; >= '2025-12-31')&quot;;&#xD;
                    &#xD;
         default:&#xD;
             return generateTemporalCondition(temporal, startColumn);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_AzS0VdEfCS7cth2SLu0w" name="generateLeaveQuery" specification="_V8iuFkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_AzTEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_AzTUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>QueryType queryType = queryInfo.getQueryType();&#xD;
     Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     &#xD;
     StringBuilder sql = new StringBuilder();&#xD;
     &#xD;
     switch (queryType) {&#xD;
         case COUNT:&#xD;
             sql.append(&quot;SELECT COUNT(*) AS numar_concedii FROM concedii c&quot;);&#xD;
             &#xD;
             // Add joins if needed&#xD;
             boolean needsUserJoin = entities.containsKey(&quot;department_name&quot;) || entities.containsKey(&quot;has_temporal&quot;);&#xD;
             if (needsUserJoin) {&#xD;
                 sql.append(&quot; LEFT JOIN useri u ON c.id_ang = u.id&quot;);&#xD;
             }&#xD;
             &#xD;
             if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
                 sql.append(&quot; LEFT JOIN departament d ON u.id_dep = d.id_dep&quot;);&#xD;
             }&#xD;
             &#xD;
             // Build WHERE clause&#xD;
             List&lt;String> whereConditions = new ArrayList&lt;>();&#xD;
             &#xD;
             if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
                 whereConditions.add(&quot;UPPER(d.nume_dep) LIKE UPPER('%&quot; + entities.get(&quot;department_name&quot;) + &quot;%')&quot;);&#xD;
             }&#xD;
             &#xD;
             // Enhanced temporal filtering&#xD;
             if (entities.containsKey(&quot;temporal_filter&quot;)) {&#xD;
                 String temporal = entities.get(&quot;temporal_filter&quot;);&#xD;
                 String temporalCondition = generateTemporalCondition(temporal, &quot;c.start_c&quot;);&#xD;
                 if (temporalCondition != null) {&#xD;
                     whereConditions.add(temporalCondition);&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             // Add WHERE clause if we have conditions&#xD;
             if (!whereConditions.isEmpty()) {&#xD;
                 sql.append(&quot; WHERE &quot;).append(String.join(&quot; AND &quot;, whereConditions));&#xD;
             }&#xD;
             &#xD;
             return sql.toString();&#xD;
             &#xD;
         case LIST:&#xD;
             sql.append(&quot;SELECT c.id, u.nume, u.prenume, d.nume_dep AS departament, &quot;);&#xD;
             sql.append(&quot;t.denumire AS functie, c.start_c, c.end_c, c.motiv, c.locatie, &quot;);&#xD;
             sql.append(&quot;s.nume_status AS status, c.durata, tc.motiv AS tip_concediu &quot;);&#xD;
             sql.append(&quot;FROM concedii c &quot;);&#xD;
             sql.append(&quot;LEFT JOIN useri u ON c.id_ang = u.id &quot;);&#xD;
             sql.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
             sql.append(&quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot;);&#xD;
             sql.append(&quot;LEFT JOIN statusuri s ON c.status = s.status &quot;);&#xD;
             sql.append(&quot;LEFT JOIN tipcon tc ON c.tip = tc.tip &quot;);&#xD;
             &#xD;
             // Build WHERE clause&#xD;
             List&lt;String> whereConditions2 = new ArrayList&lt;>();&#xD;
             &#xD;
             if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
                 whereConditions2.add(&quot;UPPER(d.nume_dep) LIKE UPPER('%&quot; + entities.get(&quot;department_name&quot;) + &quot;%')&quot;);&#xD;
             }&#xD;
             &#xD;
             // Enhanced temporal filtering&#xD;
             if (entities.containsKey(&quot;temporal_filter&quot;)) {&#xD;
                 String temporal = entities.get(&quot;temporal_filter&quot;);&#xD;
                 String temporalCondition = generateTemporalCondition(temporal, &quot;c.start_c&quot;);&#xD;
                 if (temporalCondition != null) {&#xD;
                     whereConditions2.add(temporalCondition);&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             // Add WHERE clause if we have conditions&#xD;
             if (!whereConditions2.isEmpty()) {&#xD;
                 sql.append(&quot;WHERE &quot;).append(String.join(&quot; AND &quot;, whereConditions2));&#xD;
             }&#xD;
             &#xD;
             sql.append(&quot; ORDER BY c.start_c DESC&quot;);&#xD;
             return sql.toString();&#xD;
             &#xD;
         default:&#xD;
             // Default to list of current leaves&#xD;
             return &quot;SELECT c.id, u.nume, u.prenume, d.nume_dep AS departament, t.denumire AS functie, c.start_c, c.end_c, c.motiv, c.durata FROM concedii c LEFT JOIN useri u ON c.id_ang = u.id LEFT JOIN departament d ON u.id_dep = d.id_dep LEFT JOIN tipuri t ON u.tip = t.tip WHERE CURDATE() BETWEEN c.start_c AND c.end_c ORDER BY c.start_c DESC&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_AzTkVdEfCS7cth2SLu0w" name="debugTemporalDetection" specification="_Vtm6MEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_AzT0VdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>System.out.println(&quot;DEBUG: ===== TEMPORAL DETECTION ANALYSIS =====&quot;);&#xD;
     System.out.println(&quot;DEBUG: Query: \&quot;&quot; + query + &quot;\&quot;&quot;);&#xD;
     &#xD;
     // Check individual temporal words&#xD;
     String[] temporalWords = {&#xD;
         &quot;luna aceasta&quot;, &quot;luna trecuta&quot;, &quot;astazi&quot;, &quot;azi&quot;, &quot;ieri&quot;, &quot;maine&quot;,&#xD;
         &quot;anul acesta&quot;, &quot;anul trecut&quot;, &quot;saptamana aceasta&quot;, &quot;decembrie&quot;, &#xD;
         &quot;ianuarie&quot;, &quot;februarie&quot;, &quot;martie&quot;, &quot;aprilie&quot;, &quot;mai&quot;, &quot;iunie&quot;,&#xD;
         &quot;iulie&quot;, &quot;august&quot;, &quot;septembrie&quot;, &quot;octombrie&quot;, &quot;noiembrie&quot;&#xD;
     };&#xD;
     &#xD;
     for (String temporal : temporalWords) {&#xD;
         if (query.contains(temporal)) {&#xD;
             System.out.println(&quot;DEBUG: Found temporal expression: \&quot;&quot; + temporal + &quot;\&quot;&quot;);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     // Check entity words&#xD;
     String[] leaveWords = {&quot;concediu&quot;, &quot;concedii&quot;, &quot;vacanta&quot;, &quot;absenta&quot;};&#xD;
     for (String leave : leaveWords) {&#xD;
         if (query.contains(leave)) {&#xD;
             System.out.println(&quot;DEBUG: Found leave keyword: \&quot;&quot; + leave + &quot;\&quot;&quot;);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     String[] employeeWords = {&quot;angajat&quot;, &quot;angajati&quot;, &quot;personal&quot;, &quot;salariat&quot;};&#xD;
     for (String emp : employeeWords) {&#xD;
         if (query.contains(emp)) {&#xD;
             System.out.println(&quot;DEBUG: Found employee keyword: \&quot;&quot; + emp + &quot;\&quot;&quot;);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: ===== TEMPORAL DETECTION COMPLETE =====&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_AzUEVdEfCS7cth2SLu0w" name="generateTemporalCondition" specification="_Vtm6MkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_AzUUVdEfCS7cth2SLu0w" name="temporal">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_AzUkVdEfCS7cth2SLu0w" name="columnName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_AzU0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>if (temporal == null || columnName == null) {&#xD;
         return null;&#xD;
     }&#xD;
     &#xD;
     switch (temporal.toLowerCase()) {&#xD;
         case &quot;astazi&quot;:&#xD;
         case &quot;azi&quot;:&#xD;
             return &quot;DATE(&quot; + columnName + &quot;) = CURDATE()&quot;;&#xD;
             &#xD;
         case &quot;ieri&quot;:&#xD;
             return &quot;DATE(&quot; + columnName + &quot;) = DATE_SUB(CURDATE(), INTERVAL 1 DAY)&quot;;&#xD;
             &#xD;
         case &quot;maine&quot;:&#xD;
             return &quot;DATE(&quot; + columnName + &quot;) = DATE_ADD(CURDATE(), INTERVAL 1 DAY)&quot;;&#xD;
             &#xD;
         case &quot;luna aceasta&quot;:&#xD;
             return &quot;MONTH(&quot; + columnName + &quot;) = MONTH(CURDATE()) AND YEAR(&quot; + columnName + &quot;) = YEAR(CURDATE())&quot;;&#xD;
             &#xD;
         case &quot;luna trecuta&quot;:&#xD;
             return &quot;MONTH(&quot; + columnName + &quot;) = MONTH(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) AND YEAR(&quot; + columnName + &quot;) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 MONTH))&quot;;&#xD;
             &#xD;
         case &quot;luna viitoare&quot;:&#xD;
             return &quot;MONTH(&quot; + columnName + &quot;) = MONTH(DATE_ADD(CURDATE(), INTERVAL 1 MONTH)) AND YEAR(&quot; + columnName + &quot;) = YEAR(DATE_ADD(CURDATE(), INTERVAL 1 MONTH))&quot;;&#xD;
             &#xD;
         case &quot;anul acesta&quot;:&#xD;
             return &quot;YEAR(&quot; + columnName + &quot;) = YEAR(CURDATE())&quot;;&#xD;
             &#xD;
         case &quot;anul trecut&quot;:&#xD;
             return &quot;YEAR(&quot; + columnName + &quot;) = YEAR(CURDATE()) - 1&quot;;&#xD;
             &#xD;
         case &quot;anul viitor&quot;:&#xD;
             return &quot;YEAR(&quot; + columnName + &quot;) = YEAR(CURDATE()) + 1&quot;;&#xD;
             &#xD;
         case &quot;saptamana aceasta&quot;:&#xD;
             return &quot;YEARWEEK(&quot; + columnName + &quot;) = YEARWEEK(CURDATE())&quot;;&#xD;
             &#xD;
         case &quot;saptamana trecuta&quot;:&#xD;
             return &quot;YEARWEEK(&quot; + columnName + &quot;) = YEARWEEK(DATE_SUB(CURDATE(), INTERVAL 1 WEEK))&quot;;&#xD;
             &#xD;
         case &quot;saptamana viitoare&quot;:&#xD;
             return &quot;YEARWEEK(&quot; + columnName + &quot;) = YEARWEEK(DATE_ADD(CURDATE(), INTERVAL 1 WEEK))&quot;;&#xD;
             &#xD;
         // Specific months&#xD;
         case &quot;decembrie&quot;:&#xD;
             return &quot;MONTH(&quot; + columnName + &quot;) = 12&quot;;&#xD;
         case &quot;ianuarie&quot;:&#xD;
             return &quot;MONTH(&quot; + columnName + &quot;) = 1&quot;;&#xD;
         case &quot;februarie&quot;:&#xD;
             return &quot;MONTH(&quot; + columnName + &quot;) = 2&quot;;&#xD;
         case &quot;martie&quot;:&#xD;
             return &quot;MONTH(&quot; + columnName + &quot;) = 3&quot;;&#xD;
         case &quot;aprilie&quot;:&#xD;
             return &quot;MONTH(&quot; + columnName + &quot;) = 4&quot;;&#xD;
         case &quot;mai&quot;:&#xD;
             return &quot;MONTH(&quot; + columnName + &quot;) = 5&quot;;&#xD;
         case &quot;iunie&quot;:&#xD;
             return &quot;MONTH(&quot; + columnName + &quot;) = 6&quot;;&#xD;
         case &quot;iulie&quot;:&#xD;
             return &quot;MONTH(&quot; + columnName + &quot;) = 7&quot;;&#xD;
         case &quot;august&quot;:&#xD;
             return &quot;MONTH(&quot; + columnName + &quot;) = 8&quot;;&#xD;
         case &quot;septembrie&quot;:&#xD;
             return &quot;MONTH(&quot; + columnName + &quot;) = 9&quot;;&#xD;
         case &quot;octombrie&quot;:&#xD;
             return &quot;MONTH(&quot; + columnName + &quot;) = 10&quot;;&#xD;
         case &quot;noiembrie&quot;:&#xD;
             return &quot;MONTH(&quot; + columnName + &quot;) = 11&quot;;&#xD;
             &#xD;
         // Seasons&#xD;
         case &quot;iarna&quot;:&#xD;
             return &quot;MONTH(&quot; + columnName + &quot;) IN (12, 1, 2)&quot;;&#xD;
         case &quot;primavara&quot;:&#xD;
             return &quot;MONTH(&quot; + columnName + &quot;) IN (3, 4, 5)&quot;;&#xD;
         case &quot;vara&quot;:&#xD;
             return &quot;MONTH(&quot; + columnName + &quot;) IN (6, 7, 8)&quot;;&#xD;
         case &quot;toamna&quot;:&#xD;
             return &quot;MONTH(&quot; + columnName + &quot;) IN (9, 10, 11)&quot;;&#xD;
             &#xD;
         // Holidays&#xD;
         case &quot;craciun&quot;:&#xD;
             return &quot;(&quot; + columnName + &quot; BETWEEN '2023-12-24' AND '2023-12-26' OR &quot; +&#xD;
                    columnName + &quot; BETWEEN '2024-12-24' AND '2024-12-26' OR &quot; +&#xD;
                    columnName + &quot; BETWEEN '2025-12-24' AND '2025-12-26')&quot;;&#xD;
                    &#xD;
         default:&#xD;
             return null;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_AzVEVdEfCS7cth2SLu0w" name="generateDepartmentQuery" specification="_V8iuGUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_AzVUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_AzVkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>QueryType queryType = queryInfo.getQueryType();&#xD;
     Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     List&lt;String> attributes = queryInfo.getRequestedAttributes();&#xD;
     &#xD;
     StringBuilder sql = new StringBuilder();&#xD;
     &#xD;
     switch (queryType) {&#xD;
         case COUNT:&#xD;
             sql.append(&quot;SELECT COUNT(*) AS numar_departamente FROM departament&quot;);&#xD;
             &#xD;
             // Add filters if any specific department is mentioned&#xD;
             if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
                 sql.append(&quot; WHERE UPPER(nume_dep) LIKE UPPER('%&quot;).append(entities.get(&quot;department_name&quot;)).append(&quot;%')&quot;);&#xD;
             }&#xD;
             &#xD;
             return sql.toString();&#xD;
             &#xD;
         case MINMAX:&#xD;
             System.out.println(&quot;DEBUG: 🎯 Generating MINMAX query for employees&quot;);&#xD;
             &#xD;
             // Enhanced MINMAX query for employees with salary focus&#xD;
             sql.append(&quot;SELECT u.id, u.nume, u.prenume, d.nume_dep AS departament, &quot;);&#xD;
             sql.append(&quot;t.denumire AS functie, t.salariu &quot;);&#xD;
             &#xD;
             // Check if we're looking for seniority/experience&#xD;
             if (queryInfo.toString().contains(&quot;vechime&quot;) || queryInfo.toString().contains(&quot;experienta&quot;)) {&#xD;
                 sql.append(&quot;, TIMESTAMPDIFF(YEAR, u.data_ang, CURDATE()) AS ani_vechime &quot;);&#xD;
             }&#xD;
             &#xD;
             sql.append(&quot;FROM useri u &quot;);&#xD;
             sql.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
             sql.append(&quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot;);&#xD;
             &#xD;
             // Build WHERE clause&#xD;
             List&lt;String> whereConditions = new ArrayList&lt;>();&#xD;
             &#xD;
             // Add department filter if specified&#xD;
             if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
                 whereConditions.add(&quot;UPPER(d.nume_dep) LIKE UPPER('%&quot; + entities.get(&quot;department_name&quot;) + &quot;%')&quot;);&#xD;
             }&#xD;
             &#xD;
             // Add active employee filter&#xD;
             whereConditions.add(&quot;u.activ = 1&quot;);&#xD;
             &#xD;
             // Add WHERE clause if we have conditions&#xD;
             if (!whereConditions.isEmpty()) {&#xD;
                 sql.append(&quot;WHERE &quot;).append(String.join(&quot; AND &quot;, whereConditions)).append(&quot; &quot;);&#xD;
             }&#xD;
             &#xD;
             // Enhanced ordering logic based on what's being asked&#xD;
             String queryString = queryInfo.toString().toLowerCase();&#xD;
             &#xD;
             // Check if it's a salary-focused query&#xD;
             boolean isSalaryQuery = entities.containsKey(&quot;focus&quot;) &amp;&amp; &quot;salary&quot;.equals(entities.get(&quot;focus&quot;)) ||&#xD;
                                    queryString.contains(&quot;salariu&quot;) || queryString.contains(&quot;salarii&quot;);&#xD;
             &#xD;
             if (isSalaryQuery) {&#xD;
                 // Salary-based MINMAX&#xD;
                 if (queryString.contains(&quot;mic&quot;) || queryString.contains(&quot;minim&quot;) || &#xD;
                     queryString.contains(&quot;putin&quot;) || queryString.contains(&quot;putini&quot;)) {&#xD;
                     System.out.println(&quot;DEBUG: Ordering by MINIMUM salary&quot;);&#xD;
                     sql.append(&quot;ORDER BY t.salariu ASC &quot;);&#xD;
                 } else {&#xD;
                     System.out.println(&quot;DEBUG: Ordering by MAXIMUM salary&quot;);&#xD;
                     sql.append(&quot;ORDER BY t.salariu DESC &quot;);&#xD;
                 }&#xD;
             } else if (queryString.contains(&quot;vechime&quot;) || queryString.contains(&quot;experienta&quot;)) {&#xD;
                 // Seniority-based MINMAX&#xD;
                 if (queryString.contains(&quot;mic&quot;) || queryString.contains(&quot;putin&quot;) || &#xD;
                     queryString.contains(&quot;recent&quot;) || queryString.contains(&quot;nou&quot;)) {&#xD;
                     System.out.println(&quot;DEBUG: Ordering by LEAST seniority&quot;);&#xD;
                     sql.append(&quot;ORDER BY u.data_ang DESC &quot;); // Most recent hires first&#xD;
                 } else {&#xD;
                     System.out.println(&quot;DEBUG: Ordering by MOST seniority&quot;);&#xD;
                     sql.append(&quot;ORDER BY u.data_ang ASC &quot;); // Oldest hires first&#xD;
                 }&#xD;
             } else {&#xD;
                 // Default to salary ordering&#xD;
                 if (queryString.contains(&quot;mic&quot;) || queryString.contains(&quot;minim&quot;) || &#xD;
                     queryString.contains(&quot;putin&quot;) || queryString.contains(&quot;putini&quot;)) {&#xD;
                     System.out.println(&quot;DEBUG: Default ordering by MINIMUM salary&quot;);&#xD;
                     sql.append(&quot;ORDER BY t.salariu ASC &quot;);&#xD;
                 } else {&#xD;
                     System.out.println(&quot;DEBUG: Default ordering by MAXIMUM salary&quot;);&#xD;
                     sql.append(&quot;ORDER BY t.salariu DESC &quot;);&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             // Limit results for MINMAX (typically want top/bottom results)&#xD;
             int limit = 5; // Default to top 5&#xD;
             if (queryString.contains(&quot;primul&quot;) || queryString.contains(&quot;prima&quot;) || &#xD;
                 queryString.contains(&quot;cel mai&quot;) || queryString.contains(&quot;cea mai&quot;)) {&#xD;
                 limit = 1; // Just the top result&#xD;
             } else if (queryString.contains(&quot;top 10&quot;) || queryString.contains(&quot;primii 10&quot;)) {&#xD;
                 limit = 10;&#xD;
             }&#xD;
             &#xD;
             sql.append(&quot;LIMIT &quot;).append(limit);&#xD;
             &#xD;
             System.out.println(&quot;DEBUG: Generated MINMAX SQL: &quot; + sql.toString());&#xD;
             return sql.toString();&#xD;
             &#xD;
         case LIST:&#xD;
             // For LIST, show department details&#xD;
             if (attributes.isEmpty()) {&#xD;
                 // Default attributes if none specifically requested&#xD;
                 sql.append(&quot;SELECT d.id_dep, d.nume_dep AS departament, COUNT(u.id) AS numar_angajati &quot;);&#xD;
             } else {&#xD;
                 sql.append(&quot;SELECT d.id_dep, d.nume_dep AS departament&quot;);&#xD;
                 &#xD;
                 // Add requested attributes&#xD;
                 for (String attribute : attributes) {&#xD;
                     if (!attribute.equals(&quot;nume_dep&quot;) &amp;&amp; !attribute.equals(&quot;departament&quot;)) {&#xD;
                         // Handle special attributes for departament entity&#xD;
                         if (attribute.equals(&quot;adresa&quot;)) {&#xD;
                             sql.append(&quot;, CONCAT(ld.strada, ', ', ld.oras, ', ', ld.judet, ', ', ld.tara) AS adresa&quot;);&#xD;
                         } else if (attribute.equals(&quot;strada&quot;) || attribute.equals(&quot;oras&quot;) || &#xD;
                                    attribute.equals(&quot;judet&quot;) || attribute.equals(&quot;tara&quot;)) {&#xD;
                             sql.append(&quot;, ld.&quot;).append(attribute).append(&quot; AS &quot;).append(attribute);&#xD;
                         }&#xD;
                     }&#xD;
                 }&#xD;
                 &#xD;
                 // Always include employee count if not explicitly requested&#xD;
                 if (!attributes.contains(&quot;numar_angajati&quot;)) {&#xD;
                     sql.append(&quot;, COUNT(u.id) AS numar_angajati&quot;);&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             sql.append(&quot; FROM departament d &quot;);&#xD;
             sql.append(&quot;LEFT JOIN useri u ON d.id_dep = u.id_dep &quot;);&#xD;
             &#xD;
             // Add location data join if needed&#xD;
             if (attributes.contains(&quot;adresa&quot;) || attributes.contains(&quot;strada&quot;) || &#xD;
                 attributes.contains(&quot;oras&quot;) || attributes.contains(&quot;judet&quot;) || &#xD;
                 attributes.contains(&quot;tara&quot;)) {&#xD;
                 sql.append(&quot;LEFT JOIN locatii_departamente ld ON d.id_dep = ld.id_dep &quot;);&#xD;
             }&#xD;
             &#xD;
             // Add filters&#xD;
             if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
                 sql.append(&quot;WHERE UPPER(d.nume_dep) LIKE UPPER('%&quot;).append(entities.get(&quot;department_name&quot;)).append(&quot;%') &quot;);&#xD;
             }&#xD;
             &#xD;
             sql.append(&quot;GROUP BY d.id_dep, d.nume_dep&quot;);&#xD;
             &#xD;
             // Add location columns to GROUP BY if needed&#xD;
             if (attributes.contains(&quot;adresa&quot;) || attributes.contains(&quot;strada&quot;) || &#xD;
                 attributes.contains(&quot;oras&quot;) || attributes.contains(&quot;judet&quot;) || &#xD;
                 attributes.contains(&quot;tara&quot;)) {&#xD;
                 sql.append(&quot;, ld.strada, ld.oras, ld.judet, ld.tara&quot;);&#xD;
             }&#xD;
             &#xD;
             sql.append(&quot; ORDER BY d.nume_dep&quot;);&#xD;
             &#xD;
             return sql.toString();&#xD;
             &#xD;
         default:&#xD;
             // Default to a simple list of departments&#xD;
             return &quot;SELECT id_dep, nume_dep AS departament FROM departament ORDER BY nume_dep&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_AzV0VdEfCS7cth2SLu0w" name="generateEmployeeQuery" specification="_V8iuHEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_AzWEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_AzWUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>QueryType queryType = queryInfo.getQueryType();&#xD;
     Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     String originalQuery = queryInfo.toString().toLowerCase();&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: ===== GENERATING EMPLOYEE QUERY =====&quot;);&#xD;
     System.out.println(&quot;DEBUG: Query type: &quot; + queryType);&#xD;
     System.out.println(&quot;DEBUG: Original query: &quot; + originalQuery);&#xD;
     &#xD;
     StringBuilder sql = new StringBuilder();&#xD;
     &#xD;
     int limitNumber = 1;&#xD;
		switch (queryType) {&#xD;
     case MINMAX:&#xD;
         System.out.println(&quot;DEBUG: 🎯 Generating MINMAX query for employees&quot;);&#xD;
         &#xD;
         // Enhanced MINMAX query for employees with salary focus&#xD;
         sql.append(&quot;SELECT u.id, u.nume, u.prenume, d.nume_dep AS departament, &quot;);&#xD;
         sql.append(&quot;t.denumire AS functie, t.salariu &quot;);&#xD;
         &#xD;
         // Check if we're looking for seniority/experience&#xD;
         if (queryInfo.toString().contains(&quot;vechime&quot;) || queryInfo.toString().contains(&quot;experienta&quot;)) {&#xD;
             sql.append(&quot;, TIMESTAMPDIFF(YEAR, u.data_ang, CURDATE()) AS ani_vechime &quot;);&#xD;
         }&#xD;
         &#xD;
         sql.append(&quot;FROM useri u &quot;);&#xD;
         sql.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
         sql.append(&quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot;);&#xD;
         &#xD;
         // Build WHERE clause&#xD;
         List&lt;String> whereConditions = new ArrayList&lt;>();&#xD;
         &#xD;
         // Add department filter if specified&#xD;
         if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
             whereConditions.add(&quot;UPPER(d.nume_dep) LIKE UPPER('%&quot; + entities.get(&quot;department_name&quot;) + &quot;%')&quot;);&#xD;
             System.out.println(&quot;DEBUG: Added department filter: &quot; + entities.get(&quot;department_name&quot;));&#xD;
         }&#xD;
         &#xD;
         // Add active employee filter&#xD;
         whereConditions.add(&quot;u.activ = 1&quot;);&#xD;
         &#xD;
         // Add WHERE clause if we have conditions&#xD;
         if (!whereConditions.isEmpty()) {&#xD;
             sql.append(&quot;WHERE &quot;).append(String.join(&quot; AND &quot;, whereConditions)).append(&quot; &quot;);&#xD;
         }&#xD;
         &#xD;
         // CRITICAL FIX: Enhanced MIN/MAX detection logic&#xD;
         String originalQuery1 = queryInfo.toString().toLowerCase();&#xD;
         System.out.println(&quot;DEBUG: ===== MIN/MAX DETECTION ANALYSIS =====&quot;);&#xD;
         System.out.println(&quot;DEBUG: Original query for analysis: \&quot;&quot; + originalQuery1 + &quot;\&quot;&quot;);&#xD;
         &#xD;
         // STEP 1: Detect if it's explicitly a MINIMUM query&#xD;
         boolean isMinimumQuery = false;&#xD;
         String[] minimumIndicators = {&#xD;
             &quot;minim&quot;, &quot;minimum&quot;, &quot;minimul&quot;, &quot;minimele&quot;, &quot;minimele&quot;,&#xD;
             &quot;cel mai mic&quot;, &quot;cea mai mica&quot;, &quot;cei mai mici&quot;, &quot;cele mai mici&quot;,&#xD;
             &quot;mai mic&quot;, &quot;mai mici&quot;, &quot;mai putin&quot;, &quot;mai putini&quot;, &quot;mai putine&quot;,&#xD;
             &quot;cel mai putin&quot;, &quot;cea mai putina&quot;, &quot;cei mai putini&quot;, &quot;cele mai putine&quot;,&#xD;
             &quot;ultimul&quot;, &quot;ultima&quot;, &quot;ultimii&quot;, &quot;ultimele&quot;, &quot;sfarsit&quot;, &quot;coada&quot;,&#xD;
             &quot;salariu minim&quot;, &quot;salarii mici&quot;, &quot;cele mai mici salarii&quot;,&#xD;
             &quot;salariul cel mai mic&quot;, &quot;venitul cel mai mic&quot;, &quot;castigul cel mai mic&quot;&#xD;
         };&#xD;
         &#xD;
         for (String indicator : minimumIndicators) {&#xD;
             if (originalQuery1.contains(indicator)) {&#xD;
                 isMinimumQuery = true;&#xD;
                 System.out.println(&quot;DEBUG: 🔍 FOUND MINIMUM indicator: \&quot;&quot; + indicator + &quot;\&quot;&quot;);&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // STEP 2: Double-check for maximum indicators (should override if present)&#xD;
         boolean isMaximumQuery = false;&#xD;
         String[] maximumIndicators = {&#xD;
             &quot;maxim&quot;, &quot;maximum&quot;, &quot;maximul&quot;, &quot;maximele&quot;,&#xD;
             &quot;cel mai mare&quot;, &quot;cea mai mare&quot;, &quot;cei mai mari&quot;, &quot;cele mai mari&quot;,&#xD;
             &quot;mai mare&quot;, &quot;mai mari&quot;, &quot;mai mult&quot;, &quot;mai multe&quot;, &quot;mai bine&quot;,&#xD;
             &quot;cel mai mult&quot;, &quot;cea mai multa&quot;, &quot;cei mai multi&quot;, &quot;cele mai multe&quot;,&#xD;
             &quot;primul&quot;, &quot;prima&quot;, &quot;primii&quot;, &quot;primele&quot;, &quot;inceput&quot;, &quot;frunte&quot;, &quot;top&quot;,&#xD;
             &quot;salariu maxim&quot;, &quot;salarii mari&quot;, &quot;cele mai mari salarii&quot;,&#xD;
             &quot;salariul cel mai mare&quot;, &quot;venitul cel mai mare&quot;, &quot;castigul cel mai mare&quot;&#xD;
         };&#xD;
         &#xD;
         for (String indicator : maximumIndicators) {&#xD;
             if (originalQuery1.contains(indicator)) {&#xD;
                 isMaximumQuery = true;&#xD;
                 System.out.println(&quot;DEBUG: 🔍 FOUND MAXIMUM indicator: \&quot;&quot; + indicator + &quot;\&quot;&quot;);&#xD;
                 break;&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // STEP 3: Determine final ordering&#xD;
         boolean orderAscending = false; // Default to descending (maximum first)&#xD;
         &#xD;
         if (isMinimumQuery &amp;&amp; !isMaximumQuery) {&#xD;
             orderAscending = true;&#xD;
             System.out.println(&quot;DEBUG: ✅ DECISION: MINIMUM query detected -> ORDER BY ASC&quot;);&#xD;
         } else if (isMaximumQuery &amp;&amp; !isMinimumQuery) {&#xD;
             orderAscending = false;&#xD;
             System.out.println(&quot;DEBUG: ✅ DECISION: MAXIMUM query detected -> ORDER BY DESC&quot;);&#xD;
         } else if (isMinimumQuery &amp;&amp; isMaximumQuery) {&#xD;
             // Both found - prioritize the last one mentioned&#xD;
             int minIndex = originalQuery1.lastIndexOf(&quot;minim&quot;);&#xD;
             int maxIndex = originalQuery1.lastIndexOf(&quot;maxim&quot;);&#xD;
             if (minIndex > maxIndex) {&#xD;
                 orderAscending = true;&#xD;
                 System.out.println(&quot;DEBUG: ✅ DECISION: Both found, MINIMUM appears last -> ORDER BY ASC&quot;);&#xD;
             } else {&#xD;
                 orderAscending = false;&#xD;
                 System.out.println(&quot;DEBUG: ✅ DECISION: Both found, MAXIMUM appears last -> ORDER BY DESC&quot;);&#xD;
             }&#xD;
         } else {&#xD;
             // Neither explicitly found - default to maximum (descending)&#xD;
             orderAscending = false;&#xD;
             System.out.println(&quot;DEBUG: ✅ DECISION: No clear indicator -> DEFAULT TO MAXIMUM (ORDER BY DESC)&quot;);&#xD;
         }&#xD;
         &#xD;
         // STEP 4: Apply ordering based on what we're comparing&#xD;
         if (originalQuery1.contains(&quot;salariu&quot;) || originalQuery1.contains(&quot;salarii&quot;) || &#xD;
             entities.containsKey(&quot;focus&quot;) &amp;&amp; &quot;salary&quot;.equals(entities.get(&quot;focus&quot;))) {&#xD;
             // Salary-based ordering&#xD;
             if (orderAscending) {&#xD;
                 System.out.println(&quot;DEBUG: 🎯 APPLYING: ORDER BY t.salariu ASC (MINIMUM salary)&quot;);&#xD;
                 sql.append(&quot;ORDER BY t.salariu ASC &quot;);&#xD;
             } else {&#xD;
                 System.out.println(&quot;DEBUG: 🎯 APPLYING: ORDER BY t.salariu DESC (MAXIMUM salary)&quot;);&#xD;
                 sql.append(&quot;ORDER BY t.salariu DESC &quot;);&#xD;
             }&#xD;
         } else if (originalQuery1.contains(&quot;vechime&quot;) || originalQuery1.contains(&quot;experienta&quot;)) {&#xD;
             // Seniority-based ordering&#xD;
             if (orderAscending) {&#xD;
                 System.out.println(&quot;DEBUG: 🎯 APPLYING: ORDER BY u.data_ang DESC (LEAST seniority - newest hires)&quot;);&#xD;
                 sql.append(&quot;ORDER BY u.data_ang DESC &quot;); // Most recent hires first (least seniority)&#xD;
             } else {&#xD;
                 System.out.println(&quot;DEBUG: 🎯 APPLYING: ORDER BY u.data_ang ASC (MOST seniority - oldest hires)&quot;);&#xD;
                 sql.append(&quot;ORDER BY u.data_ang ASC &quot;); // Oldest hires first (most seniority)&#xD;
             }&#xD;
         } else {&#xD;
             // Default to salary ordering&#xD;
             if (orderAscending) {&#xD;
                 System.out.println(&quot;DEBUG: 🎯 APPLYING: ORDER BY t.salariu ASC (DEFAULT - MINIMUM)&quot;);&#xD;
                 sql.append(&quot;ORDER BY t.salariu ASC &quot;);&#xD;
             } else {&#xD;
                 System.out.println(&quot;DEBUG: 🎯 APPLYING: ORDER BY t.salariu DESC (DEFAULT - MAXIMUM)&quot;);&#xD;
                 sql.append(&quot;ORDER BY t.salariu DESC &quot;);&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         // STEP 5: Determine limit&#xD;
         int limit = 5; // Default to top 5&#xD;
         if (originalQuery1.contains(&quot;primul&quot;) || originalQuery1.contains(&quot;prima&quot;) || &#xD;
             originalQuery1.contains(&quot;cel mai&quot;) || originalQuery1.contains(&quot;cea mai&quot;)) {&#xD;
             limit = 1; // Just the top result for superlatives&#xD;
             System.out.println(&quot;DEBUG: 🎯 LIMIT: 1 (superlative detected)&quot;);&#xD;
         } else if (originalQuery1.contains(&quot;top 10&quot;) || originalQuery1.contains(&quot;primii 10&quot;)) {&#xD;
             limit = 10;&#xD;
             System.out.println(&quot;DEBUG: 🎯 LIMIT: 10 (top 10 requested)&quot;);&#xD;
         } else {&#xD;
             System.out.println(&quot;DEBUG: 🎯 LIMIT: 5 (default)&quot;);&#xD;
         }&#xD;
         &#xD;
         sql.append(&quot;LIMIT &quot;).append(limit);&#xD;
         &#xD;
         System.out.println(&quot;DEBUG: ===== MIN/MAX DETECTION COMPLETE =====&quot;);&#xD;
         System.out.println(&quot;DEBUG: Generated MINMAX SQL: &quot; + sql.toString());&#xD;
         return sql.toString();&#xD;
      &#xD;
         case COUNT:&#xD;
             sql.append(&quot;SELECT COUNT(*) AS numar_angajati FROM useri u&quot;);&#xD;
             &#xD;
             if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
                 sql.append(&quot; LEFT JOIN departament d ON u.id_dep = d.id_dep&quot;);&#xD;
                 sql.append(&quot; WHERE UPPER(d.nume_dep) LIKE UPPER('%&quot;).append(entities.get(&quot;department_name&quot;)).append(&quot;%')&quot;);&#xD;
             } else if (queryInfo.toString().contains(&quot;activ&quot;)) {&#xD;
                 sql.append(&quot; WHERE u.activ = 1&quot;);&#xD;
             } else if (queryInfo.toString().contains(&quot;inactiv&quot;)) {&#xD;
                 sql.append(&quot; WHERE u.activ = 0&quot;);&#xD;
             }&#xD;
             &#xD;
             System.out.println(&quot;DEBUG: Generated COUNT SQL: &quot; + sql.toString());&#xD;
             return sql.toString();&#xD;
             &#xD;
		case LIST:&#xD;
             // LIST logic remains the same but with reasonable limit&#xD;
             sql.append(&quot;SELECT u.id, u.nume, u.prenume, d.nume_dep AS departament, &quot;);&#xD;
             sql.append(&quot;t.denumire AS functie, u.email, u.telefon, t.salariu &quot;);&#xD;
             sql.append(&quot;FROM useri u &quot;);&#xD;
             sql.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
             sql.append(&quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot;);&#xD;
             &#xD;
             List&lt;String> whereConditions2 = new ArrayList&lt;>();&#xD;
             if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
                 whereConditions2.add(&quot;UPPER(d.nume_dep) LIKE UPPER('%&quot; + entities.get(&quot;department_name&quot;) + &quot;%')&quot;);&#xD;
             }&#xD;
             &#xD;
             if (!whereConditions2.isEmpty()) {&#xD;
                 sql.append(&quot;WHERE &quot;).append(String.join(&quot; AND &quot;, whereConditions2)).append(&quot; &quot;);&#xD;
             }&#xD;
             &#xD;
             sql.append(&quot;ORDER BY u.nume, u.prenume &quot;);&#xD;
             &#xD;
             // Add reasonable limit for LIST queries too&#xD;
             if (originalQuery.contains(&quot;top&quot;) || LIMIT_NUMBER_PATTERN.matcher(originalQuery).find()) {&#xD;
                 limitNumber = extractTopNumber(originalQuery);&#xD;
                 sql.append(&quot;LIMIT &quot;).append(limitNumber);&#xD;
             }&#xD;
             &#xD;
             return sql.toString();&#xD;
     &#xD;
         default:&#xD;
             // Default employee query&#xD;
             String defaultSQL = &quot;SELECT u.id, u.nume, u.prenume, d.nume_dep AS departament, t.denumire AS functie, u.email, u.telefon &quot; +&#xD;
                                &quot;FROM useri u &quot; +&#xD;
                                &quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                                &quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot;;&#xD;
             &#xD;
             if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
                 defaultSQL += &quot;WHERE UPPER(d.nume_dep) LIKE UPPER('%&quot; + entities.get(&quot;department_name&quot;) + &quot;%') &quot;;&#xD;
             }&#xD;
             &#xD;
             defaultSQL += &quot;ORDER BY u.nume, u.prenume&quot;;&#xD;
             &#xD;
             return defaultSQL;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_AzWkVdEfCS7cth2SLu0w" name="debugMinMaxDetection" specification="_VtnhQEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_AzW0VdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>System.out.println(&quot;DEBUG: ===== MIN/MAX DEBUG ANALYSIS =====&quot;);&#xD;
     System.out.println(&quot;DEBUG: Original query: \&quot;&quot; + query + &quot;\&quot;&quot;);&#xD;
     &#xD;
     // Check for minimum indicators&#xD;
     String[] minIndicators = {&quot;minim&quot;, &quot;cel mai mic&quot;, &quot;cea mai mica&quot;, &quot;mai mic&quot;, &quot;mai mici&quot;};&#xD;
     System.out.println(&quot;DEBUG: Minimum indicators found:&quot;);&#xD;
     for (String min : minIndicators) {&#xD;
         if (query.contains(min)) {&#xD;
             System.out.println(&quot;DEBUG: - FOUND: \&quot;&quot; + min + &quot;\&quot;&quot;);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     // Check for maximum indicators  &#xD;
     String[] maxIndicators = {&quot;maxim&quot;, &quot;cel mai mare&quot;, &quot;cea mai mare&quot;, &quot;mai mare&quot;, &quot;mai mari&quot;};&#xD;
     System.out.println(&quot;DEBUG: Maximum indicators found:&quot;);&#xD;
     for (String max : maxIndicators) {&#xD;
         if (query.contains(max)) {&#xD;
             System.out.println(&quot;DEBUG: - FOUND: \&quot;&quot; + max + &quot;\&quot;&quot;);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: ===== MIN/MAX DEBUG COMPLETE =====&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_BaUEVdEfCS7cth2SLu0w" name="generateLeaveQuery2" specification="_V8iuH0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_BaUUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_BaUkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>QueryType queryType = queryInfo.getQueryType();&#xD;
     Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     &#xD;
     StringBuilder sql = new StringBuilder();&#xD;
     &#xD;
     switch (queryType) {&#xD;
         case COUNT:&#xD;
             sql.append(&quot;SELECT COUNT(*) AS numar_concedii FROM concedii c&quot;);&#xD;
             &#xD;
             // Add joins and filters if needed&#xD;
             boolean hasJoin = false;&#xD;
             &#xD;
             if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
                 sql.append(&quot; LEFT JOIN useri u ON c.id_ang = u.id&quot;);&#xD;
                 sql.append(&quot; LEFT JOIN departament d ON u.id_dep = d.id_dep&quot;);&#xD;
                 hasJoin = true;&#xD;
             }&#xD;
             &#xD;
             boolean hasWhere = false;&#xD;
             &#xD;
             if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
                 sql.append(&quot; WHERE UPPER(d.nume_dep) LIKE UPPER('%&quot;).append(entities.get(&quot;department_name&quot;)).append(&quot;%')&quot;);&#xD;
                 hasWhere = true;&#xD;
             }&#xD;
             &#xD;
             // Time period filters&#xD;
             if (entities.containsKey(&quot;period&quot;)) {&#xD;
                 sql.append(hasWhere ? &quot; AND &quot; : &quot; WHERE &quot;);&#xD;
                 &#xD;
                 switch (entities.get(&quot;period&quot;)) {&#xD;
                     case &quot;christmas&quot;:&#xD;
                         sql.append(&quot;c.start_c &lt;= '2025-12-25' AND c.end_c >= '2025-12-24'&quot;);&#xD;
                         break;&#xD;
                     case &quot;summer&quot;:&#xD;
                         sql.append(&quot;(MONTH(c.start_c) BETWEEN 6 AND 8 OR MONTH(c.end_c) BETWEEN 6 AND 8)&quot;);&#xD;
                         break;&#xD;
                     case &quot;winter&quot;:&#xD;
                         sql.append(&quot;(MONTH(c.start_c) IN (12, 1, 2) OR MONTH(c.end_c) IN (12, 1, 2))&quot;);&#xD;
                         break;&#xD;
                     case &quot;easter&quot;:&#xD;
                         sql.append(&quot;(MONTH(c.start_c) = 4 OR MONTH(c.end_c) = 4)&quot;);&#xD;
                         break;&#xD;
                 }&#xD;
                 &#xD;
                 hasWhere = true;&#xD;
             } else if (queryInfo.toString().contains(&quot;astazi&quot;) || queryInfo.toString().contains(&quot;azi&quot;)) {&#xD;
                 sql.append(hasWhere ? &quot; AND &quot; : &quot; WHERE &quot;);&#xD;
                 sql.append(&quot;CURDATE() BETWEEN c.start_c AND c.end_c&quot;);&#xD;
                 hasWhere = true;&#xD;
             } else if (queryInfo.toString().contains(&quot;luna&quot;) || queryInfo.toString().contains(&quot;curent&quot;)) {&#xD;
                 sql.append(hasWhere ? &quot; AND &quot; : &quot; WHERE &quot;);&#xD;
                 sql.append(&quot;MONTH(c.start_c) = MONTH(CURDATE()) AND YEAR(c.start_c) = YEAR(CURDATE())&quot;);&#xD;
                 hasWhere = true;&#xD;
             } else if (queryInfo.toString().contains(&quot;an&quot;) || queryInfo.toString().contains(&quot;anul&quot;)) {&#xD;
                 sql.append(hasWhere ? &quot; AND &quot; : &quot; WHERE &quot;);&#xD;
                 sql.append(&quot;YEAR(c.start_c) = YEAR(CURDATE())&quot;);&#xD;
                 hasWhere = true;&#xD;
             }&#xD;
             &#xD;
             // Status filters&#xD;
             if (queryInfo.toString().contains(&quot;aprobat&quot;)) {&#xD;
                 sql.append(hasWhere ? &quot; AND &quot; : &quot; WHERE &quot;);&#xD;
                 sql.append(&quot;c.status IN (1, 2)&quot;);&#xD;
                 hasWhere = true;&#xD;
             } else if (queryInfo.toString().contains(&quot;neaprobat&quot;)) {&#xD;
                 sql.append(hasWhere ? &quot; AND &quot; : &quot; WHERE &quot;);&#xD;
                 sql.append(&quot;c.status = 0&quot;);&#xD;
                 hasWhere = true;&#xD;
             } else if (queryInfo.toString().contains(&quot;respins&quot;) || queryInfo.toString().contains(&quot;dezaprobat&quot;)) {&#xD;
                 sql.append(hasWhere ? &quot; AND &quot; : &quot; WHERE &quot;);&#xD;
                 sql.append(&quot;c.status IN (-1, -2)&quot;);&#xD;
                 hasWhere = true;&#xD;
             }&#xD;
             &#xD;
             return sql.toString();&#xD;
             &#xD;
         case MINMAX:&#xD;
             // For MIN/MAX, show longest/shortest leaves&#xD;
             sql.append(&quot;SELECT c.id, u.nume, u.prenume, d.nume_dep AS departament, &quot;);&#xD;
             sql.append(&quot;c.start_c, c.end_c, c.motiv, c.durata &quot;);&#xD;
             sql.append(&quot;FROM concedii c &quot;);&#xD;
             sql.append(&quot;LEFT JOIN useri u ON c.id_ang = u.id &quot;);&#xD;
             sql.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
             &#xD;
             // Add filters&#xD;
             hasWhere = false;&#xD;
             &#xD;
             if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
                 sql.append(&quot;WHERE UPPER(d.nume_dep) LIKE UPPER('%&quot;).append(entities.get(&quot;department_name&quot;)).append(&quot;%')&quot;);&#xD;
                 hasWhere = true;&#xD;
             }&#xD;
             &#xD;
             // Time period filters&#xD;
             if (entities.containsKey(&quot;period&quot;)) {&#xD;
                 sql.append(hasWhere ? &quot; AND &quot; : &quot; WHERE &quot;);&#xD;
                 &#xD;
                 switch (entities.get(&quot;period&quot;)) {&#xD;
                     case &quot;christmas&quot;:&#xD;
                         sql.append(&quot;c.start_c &lt;= '2025-12-25' AND c.end_c >= '2025-12-24'&quot;);&#xD;
                         break;&#xD;
                     case &quot;summer&quot;:&#xD;
                         sql.append(&quot;(MONTH(c.start_c) BETWEEN 6 AND 8 OR MONTH(c.end_c) BETWEEN 6 AND 8)&quot;);&#xD;
                         break;&#xD;
                     case &quot;winter&quot;:&#xD;
                         sql.append(&quot;(MONTH(c.start_c) IN (12, 1, 2) OR MONTH(c.end_c) IN (12, 1, 2))&quot;);&#xD;
                         break;&#xD;
                     case &quot;easter&quot;:&#xD;
                         sql.append(&quot;(MONTH(c.start_c) = 4 OR MONTH(c.end_c) = 4)&quot;);&#xD;
                         break;&#xD;
                 }&#xD;
                 &#xD;
                 hasWhere = true;&#xD;
             } else if (queryInfo.toString().contains(&quot;an&quot;) || queryInfo.toString().contains(&quot;anul&quot;)) {&#xD;
                 sql.append(hasWhere ? &quot; AND &quot; : &quot; WHERE &quot;);&#xD;
                 sql.append(&quot;YEAR(c.start_c) = YEAR(CURDATE())&quot;);&#xD;
                 hasWhere = true;&#xD;
             }&#xD;
             &#xD;
             // Order by duration (ascending or descending)&#xD;
             if (queryInfo.toString().contains(&quot;putin&quot;) || queryInfo.toString().contains(&quot;mic&quot;) || queryInfo.toString().contains(&quot;min&quot;) || queryInfo.toString().contains(&quot;minim&quot;) || queryInfo.toString().contains(&quot;minimul&quot;) ||  &#xD;
                     queryInfo.toString().contains(&quot;putini&quot;) || queryInfo.toString().contains(&quot;putine&quot;)) {&#xD;
                 sql.append(&quot; ORDER BY c.durata ASC&quot;);&#xD;
             } else {&#xD;
                 sql.append(&quot; ORDER BY c.durata DESC&quot;);&#xD;
             }&#xD;
             &#xD;
             // Limit to 10 results&#xD;
             sql.append(&quot; LIMIT 1&quot;);&#xD;
             &#xD;
             return sql.toString();&#xD;
             &#xD;
         case LIST:&#xD;
             // For LIST, show leave details&#xD;
             sql.append(&quot;SELECT c.id, u.nume, u.prenume, d.nume_dep AS departament, &quot;);&#xD;
             sql.append(&quot;t.denumire AS functie, c.start_c, c.end_c, c.motiv, c.locatie, &quot;);&#xD;
             sql.append(&quot;s.nume_status AS status, c.durata, tc.motiv AS tip_concediu &quot;);&#xD;
             sql.append(&quot;FROM concedii c &quot;);&#xD;
             sql.append(&quot;LEFT JOIN useri u ON c.id_ang = u.id &quot;);&#xD;
             sql.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
             sql.append(&quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot;);&#xD;
             sql.append(&quot;LEFT JOIN statusuri s ON c.status = s.status &quot;);&#xD;
             sql.append(&quot;LEFT JOIN tipcon tc ON c.tip = tc.tip &quot;);&#xD;
             &#xD;
             // Add filters&#xD;
             hasWhere = false;&#xD;
             &#xD;
             if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
                 sql.append(&quot;WHERE UPPER(d.nume_dep) LIKE UPPER('%&quot;).append(entities.get(&quot;department_name&quot;)).append(&quot;%')&quot;);&#xD;
                 hasWhere = true;&#xD;
             }&#xD;
             &#xD;
             // Time period filters&#xD;
             if (entities.containsKey(&quot;period&quot;)) {&#xD;
                 sql.append(hasWhere ? &quot; AND &quot; : &quot; WHERE &quot;);&#xD;
                 &#xD;
                 switch (entities.get(&quot;period&quot;)) {&#xD;
                     case &quot;christmas&quot;:&#xD;
                         sql.append(&quot;c.start_c &lt;= '2025-12-25' AND c.end_c >= '2025-12-24'&quot;);&#xD;
                         break;&#xD;
                     case &quot;summer&quot;:&#xD;
                         sql.append(&quot;(MONTH(c.start_c) BETWEEN 6 AND 8 OR MONTH(c.end_c) BETWEEN 6 AND 8)&quot;);&#xD;
                         break;&#xD;
                     case &quot;winter&quot;:&#xD;
                         sql.append(&quot;(MONTH(c.start_c) IN (12, 1, 2) OR MONTH(c.end_c) IN (12, 1, 2))&quot;);&#xD;
                         break;&#xD;
                     case &quot;easter&quot;:&#xD;
                         sql.append(&quot;(MONTH(c.start_c) = 4 OR MONTH(c.end_c) = 4)&quot;);&#xD;
                         break;&#xD;
                 }&#xD;
                 &#xD;
                 hasWhere = true;&#xD;
             } else if (queryInfo.toString().contains(&quot;astazi&quot;) || queryInfo.toString().contains(&quot;azi&quot;)) {&#xD;
                 sql.append(hasWhere ? &quot; AND &quot; : &quot; WHERE &quot;);&#xD;
                 sql.append(&quot;CURDATE() BETWEEN c.start_c AND c.end_c&quot;);&#xD;
                 hasWhere = true;&#xD;
             } else if (queryInfo.toString().contains(&quot;luna&quot;) || queryInfo.toString().contains(&quot;curent&quot;)) {&#xD;
                 sql.append(hasWhere ? &quot; AND &quot; : &quot; WHERE &quot;);&#xD;
                 sql.append(&quot;MONTH(c.start_c) = MONTH(CURDATE()) AND YEAR(c.start_c) = YEAR(CURDATE())&quot;);&#xD;
                 hasWhere = true;&#xD;
             } else if (queryInfo.toString().contains(&quot;an&quot;) || queryInfo.toString().contains(&quot;anul&quot;)) {&#xD;
                 sql.append(hasWhere ? &quot; AND &quot; : &quot; WHERE &quot;);&#xD;
                 sql.append(&quot;YEAR(c.start_c) = YEAR(CURDATE())&quot;);&#xD;
                 hasWhere = true;&#xD;
             }&#xD;
             &#xD;
             // Status filters&#xD;
             if (queryInfo.toString().contains(&quot;aprobat&quot;)) {&#xD;
                 sql.append(hasWhere ? &quot; AND &quot; : &quot; WHERE &quot;);&#xD;
                 sql.append(&quot;c.status IN (1, 2)&quot;);&#xD;
                 hasWhere = true;&#xD;
             } else if (queryInfo.toString().contains(&quot;neaprobat&quot;)) {&#xD;
                 sql.append(hasWhere ? &quot; AND &quot; : &quot; WHERE &quot;);&#xD;
                 sql.append(&quot;c.status = 0&quot;);&#xD;
                 hasWhere = true;&#xD;
             } else if (queryInfo.toString().contains(&quot;respins&quot;) || queryInfo.toString().contains(&quot;dezaprobat&quot;)) {&#xD;
                 sql.append(hasWhere ? &quot; AND &quot; : &quot; WHERE &quot;);&#xD;
                 sql.append(&quot;c.status IN (-1, -2)&quot;);&#xD;
                 hasWhere = true;&#xD;
             }&#xD;
             &#xD;
             // Order by start date (most recent first)&#xD;
             sql.append(&quot; ORDER BY c.start_c DESC&quot;);&#xD;
             &#xD;
             return sql.toString();&#xD;
             &#xD;
         default:&#xD;
             // Default to a list of ongoing leaves&#xD;
             return &quot;SELECT c.id, u.nume, u.prenume, d.nume_dep AS departament, t.denumire AS functie, c.start_c, c.end_c, c.motiv, c.durata FROM concedii c LEFT JOIN useri u ON c.id_ang = u.id LEFT JOIN departament d ON u.id_dep = d.id_dep LEFT JOIN tipuri t ON u.tip = t.tip WHERE CURDATE() BETWEEN c.start_c AND c.end_c ORDER BY c.start_c DESC&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_BaU0VdEfCS7cth2SLu0w" name="generatePositionQuery" specification="_V8jVIUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_BaVEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_BaVUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>QueryType queryType = queryInfo.getQueryType();&#xD;
     Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: ===== GENERATING POSITION QUERY =====&quot;);&#xD;
     System.out.println(&quot;DEBUG: Query type: &quot; + queryType);&#xD;
     System.out.println(&quot;DEBUG: Entities: &quot; + entities);&#xD;
     &#xD;
     StringBuilder sql = new StringBuilder();&#xD;
     &#xD;
     switch (queryType) {&#xD;
         case COUNT:&#xD;
             if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
                 System.out.println(&quot;DEBUG: Generating COUNT query for positions in department: &quot; + entities.get(&quot;department_name&quot;));&#xD;
                 sql.append(&quot;SELECT COUNT(DISTINCT t.tip) AS numar_pozitii &quot;);&#xD;
                 sql.append(&quot;FROM useri u &quot;);&#xD;
                 sql.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
                 sql.append(&quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot;);&#xD;
                 sql.append(&quot;WHERE UPPER(d.nume_dep) LIKE UPPER('%&quot;).append(entities.get(&quot;department_name&quot;)).append(&quot;%')&quot;);&#xD;
             } else {&#xD;
                 sql.append(&quot;SELECT COUNT(DISTINCT tip) AS numar_pozitii FROM tipuri&quot;);&#xD;
             }&#xD;
             &#xD;
             System.out.println(&quot;DEBUG: Generated COUNT SQL: &quot; + sql.toString());&#xD;
             return sql.toString();&#xD;
             &#xD;
         case MINMAX:&#xD;
             // For MIN/MAX, show highest/lowest paid positions&#xD;
             sql.append(&quot;SELECT t.tip, t.denumire, t.salariu, d.nume_dep AS departament_specific &quot;);&#xD;
             sql.append(&quot;FROM tipuri t &quot;);&#xD;
             sql.append(&quot;LEFT JOIN departament d ON t.departament_specific = d.id_dep &quot;);&#xD;
             &#xD;
             // Add filters&#xD;
             if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
                 sql.append(&quot;WHERE t.departament_specific IN (SELECT id_dep FROM departament WHERE UPPER(nume_dep) LIKE UPPER('%&quot;).append(entities.get(&quot;department_name&quot;)).append(&quot;%'))&quot;);&#xD;
             }&#xD;
             &#xD;
             // Order by salary (ascending or descending)&#xD;
             if (queryInfo.toString().contains(&quot;putin&quot;) || queryInfo.toString().contains(&quot;mic&quot;) || &#xD;
                 queryInfo.toString().contains(&quot;min&quot;) || queryInfo.toString().contains(&quot;minim&quot;) || &#xD;
                 queryInfo.toString().contains(&quot;putini&quot;) || queryInfo.toString().contains(&quot;putine&quot;)) {&#xD;
                 sql.append(&quot; ORDER BY t.salariu ASC&quot;);&#xD;
             } else {&#xD;
                 sql.append(&quot; ORDER BY t.salariu DESC&quot;);&#xD;
             }&#xD;
             &#xD;
             sql.append(&quot; LIMIT 1&quot;);&#xD;
             return sql.toString();&#xD;
             &#xD;
         case LIST:&#xD;
             // Enhanced LIST query for positions&#xD;
             if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
                 System.out.println(&quot;DEBUG: Generating LIST query for positions in department: &quot; + entities.get(&quot;department_name&quot;));&#xD;
                 &#xD;
                 sql.append(&quot;SELECT DISTINCT t.tip, t.denumire AS pozitie, t.salariu, t.ierarhie, &quot;);&#xD;
                 sql.append(&quot;d.nume_dep AS departament, &quot;);&#xD;
                 sql.append(&quot;dp.denumire_completa AS denumire_specifica, &quot;);&#xD;
                 sql.append(&quot;COUNT(u.id) AS numar_angajati &quot;);&#xD;
                 sql.append(&quot;FROM tipuri t &quot;);&#xD;
                 sql.append(&quot;LEFT JOIN useri u ON t.tip = u.tip &quot;);&#xD;
                 sql.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
                 sql.append(&quot;LEFT JOIN denumiri_pozitii dp ON t.tip = dp.tip_pozitie AND d.id_dep = dp.id_dep &quot;);&#xD;
                 sql.append(&quot;WHERE UPPER(d.nume_dep) LIKE UPPER('%&quot;).append(entities.get(&quot;department_name&quot;)).append(&quot;%') &quot;);&#xD;
                 sql.append(&quot;GROUP BY t.tip, t.denumire, t.salariu, t.ierarhie, d.nume_dep, dp.denumire_completa &quot;);&#xD;
                 sql.append(&quot;ORDER BY t.ierarhie ASC, t.salariu DESC&quot;);&#xD;
                 &#xD;
             } else {&#xD;
                 System.out.println(&quot;DEBUG: Generating LIST query for all positions&quot;);&#xD;
                 &#xD;
                 sql.append(&quot;SELECT t.tip, t.denumire AS pozitie, t.salariu, t.ierarhie, &quot;);&#xD;
                 sql.append(&quot;d.nume_dep AS departament_specific, &quot;);&#xD;
                 sql.append(&quot;(SELECT COUNT(*) FROM useri WHERE tip = t.tip) AS numar_angajati &quot;);&#xD;
                 sql.append(&quot;FROM tipuri t &quot;);&#xD;
                 sql.append(&quot;LEFT JOIN departament d ON t.departament_specific = d.id_dep &quot;);&#xD;
                 sql.append(&quot;ORDER BY t.ierarhie ASC, t.salariu DESC&quot;);&#xD;
             }&#xD;
             &#xD;
             System.out.println(&quot;DEBUG: Generated LIST SQL: &quot; + sql.toString());&#xD;
             return sql.toString();&#xD;
             &#xD;
         default:&#xD;
             // Default to a list of all positions&#xD;
             return &quot;SELECT tip, denumire AS pozitie, salariu, ierarhie FROM tipuri ORDER BY ierarhie ASC, denumire&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_BaVkVdEfCS7cth2SLu0w" name="debugEntityDetection" specification="_VtnhQkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_BaV0VdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>System.out.println(&quot;DEBUG: ===== ENTITY DETECTION DEBUG =====&quot;);&#xD;
     System.out.println(&quot;DEBUG: Query: \&quot;&quot; + query + &quot;\&quot;&quot;);&#xD;
     &#xD;
     // Check each keyword set&#xD;
     System.out.println(&quot;DEBUG: Position keywords found: &quot; + containsAny(query, POSITION_KEYWORDS));&#xD;
     System.out.println(&quot;DEBUG: Department keywords found: &quot; + containsAny(query, DEPARTMENT_KEYWORDS));&#xD;
     System.out.println(&quot;DEBUG: Employee keywords found: &quot; + containsAny(query, EMPLOYEE_KEYWORDS));&#xD;
     System.out.println(&quot;DEBUG: Leave keywords found: &quot; + containsAny(query, LEAVE_KEYWORDS));&#xD;
     System.out.println(&quot;DEBUG: Count keywords found: &quot; + containsAny(query, COUNT_KEYWORDS));&#xD;
     &#xD;
     // Check for specific position words&#xD;
     String[] positionWords = {&quot;functie&quot;, &quot;functii&quot;, &quot;pozitie&quot;, &quot;pozitii&quot;, &quot;post&quot;, &quot;posturi&quot;, &quot;rol&quot;, &quot;roluri&quot;, &quot;tip&quot;, &quot;tipuri&quot;};&#xD;
     for (String word : positionWords) {&#xD;
         if (query.contains(word)) {&#xD;
             System.out.println(&quot;DEBUG: Found position word: \&quot;&quot; + word + &quot;\&quot;&quot;);&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     // Check for department names&#xD;
     for (Map.Entry&lt;String, String> entry : KNOWN_DEPARTMENTS.entrySet()) {&#xD;
         if (query.contains(entry.getKey())) {&#xD;
             System.out.println(&quot;DEBUG: Found department: \&quot;&quot; + entry.getKey() + &quot;\&quot; -> &quot; + entry.getValue());&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     System.out.println(&quot;DEBUG: ===== ENTITY DETECTION DEBUG COMPLETE =====&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_BaWEVdEfCS7cth2SLu0w" name="generateSalaryQuery" specification="_V8jVJEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_BaWUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_BaWkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>QueryType queryType = queryInfo.getQueryType();&#xD;
     Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     &#xD;
     StringBuilder sql = new StringBuilder();&#xD;
     &#xD;
     switch (queryType) {&#xD;
         case COUNT:&#xD;
             // For COUNT, calculate average salary&#xD;
             sql.append(&quot;SELECT AVG(t.salariu) AS salariu_mediu &quot;);&#xD;
             sql.append(&quot;FROM tipuri t &quot;);&#xD;
             &#xD;
             if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
                 sql.append(&quot;LEFT JOIN useri u ON t.tip = u.tip &quot;);&#xD;
                 sql.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
                 sql.append(&quot;WHERE UPPER(d.nume_dep) LIKE UPPER('%&quot;).append(entities.get(&quot;department_name&quot;)).append(&quot;%')&quot;);&#xD;
             }&#xD;
             &#xD;
             return sql.toString();&#xD;
             &#xD;
         case MINMAX:&#xD;
             // For MIN/MAX, show highest/lowest salaries&#xD;
             sql.append(&quot;SELECT t.denumire, t.salariu &quot;);&#xD;
             sql.append(&quot;FROM tipuri t &quot;);&#xD;
             &#xD;
             // Add filters&#xD;
             if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
                 sql.append(&quot;LEFT JOIN useri u ON t.tip = u.tip &quot;);&#xD;
                 sql.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
                 sql.append(&quot;WHERE UPPER(d.nume_dep) LIKE UPPER('%&quot;).append(entities.get(&quot;department_name&quot;)).append(&quot;%') &quot;);&#xD;
                 sql.append(&quot;GROUP BY t.denumire, t.salariu &quot;);&#xD;
             }&#xD;
             &#xD;
             // Order by salary (ascending or descending)&#xD;
             if (queryInfo.toString().contains(&quot;putin&quot;) || queryInfo.toString().contains(&quot;mic&quot;) || &#xD;
                 queryInfo.toString().contains(&quot;putini&quot;) || queryInfo.toString().contains(&quot;putine&quot;)) {&#xD;
                 sql.append(&quot;ORDER BY t.salariu ASC&quot;);&#xD;
             } else {&#xD;
                 sql.append(&quot;ORDER BY t.salariu DESC&quot;);&#xD;
             }&#xD;
             &#xD;
             // Limit to top 10&#xD;
             sql.append(&quot; LIMIT 1&quot;);&#xD;
             &#xD;
             return sql.toString();&#xD;
             &#xD;
         case LIST:&#xD;
             // For LIST, show salary details by position&#xD;
             sql.append(&quot;SELECT t.denumire, t.salariu, COUNT(u.id) AS numar_angajati &quot;);&#xD;
             sql.append(&quot;FROM tipuri t &quot;);&#xD;
             sql.append(&quot;LEFT JOIN useri u ON t.tip = u.tip &quot;);&#xD;
             &#xD;
             if (entities.containsKey(&quot;department_name&quot;)) {&#xD;
                 sql.append(&quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot;);&#xD;
                 sql.append(&quot;WHERE UPPER(d.nume_dep) LIKE UPPER('%&quot;).append(entities.get(&quot;department_name&quot;)).append(&quot;%') &quot;);&#xD;
             }&#xD;
             &#xD;
             sql.append(&quot;GROUP BY t.denumire, t.salariu &quot;);&#xD;
             sql.append(&quot;ORDER BY t.salariu DESC&quot;);&#xD;
             &#xD;
             return sql.toString();&#xD;
             &#xD;
         default:&#xD;
             // Default to list of positions with salaries&#xD;
             return &quot;SELECT t.denumire, t.salariu FROM tipuri t ORDER BY t.salariu DESC&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_BaW0VdEfCS7cth2SLu0w" name="generateOfficeQuery" specification="_V8jVJ0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_BaXEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_BaXUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>QueryType queryType = queryInfo.getQueryType();&#xD;
     Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     &#xD;
     StringBuilder sql = new StringBuilder();&#xD;
     &#xD;
     switch (queryType) {&#xD;
         case COUNT:&#xD;
             sql.append(&quot;SELECT COUNT(*) AS numar_sedii FROM sedii&quot;);&#xD;
             return sql.toString();&#xD;
             &#xD;
         case LIST:&#xD;
             sql.append(&quot;SELECT id_sediu, nume_sediu, tip_sediu, strada, oras, judet, tara, &quot;);&#xD;
             sql.append(&quot;telefon, email, data_creare &quot;);&#xD;
             sql.append(&quot;FROM sedii &quot;);&#xD;
             sql.append(&quot;ORDER BY tip_sediu, nume_sediu&quot;);&#xD;
             return sql.toString();&#xD;
             &#xD;
         case MINMAX:&#xD;
             // For MIN/MAX, perhaps show the oldest/newest offices&#xD;
             sql.append(&quot;SELECT id_sediu, nume_sediu, tip_sediu, strada, oras, judet, tara, &quot;);&#xD;
             sql.append(&quot;telefon, email, data_creare &quot;);&#xD;
             sql.append(&quot;FROM sedii &quot;);&#xD;
             &#xD;
             // Order by creation date (newest or oldest first)&#xD;
             if (queryInfo.toString().contains(&quot;vechi&quot;) || &#xD;
                 queryInfo.toString().contains(&quot;primul&quot;) || &#xD;
                 queryInfo.toString().contains(&quot;primul infiintat&quot;)) {&#xD;
                 sql.append(&quot;ORDER BY data_creare ASC&quot;);&#xD;
             } else {&#xD;
                 sql.append(&quot;ORDER BY data_creare DESC&quot;);&#xD;
             }&#xD;
             &#xD;
             return sql.toString();&#xD;
             &#xD;
         default:&#xD;
             return &quot;SELECT id_sediu, nume_sediu, tip_sediu, strada, oras, judet, tara, telefon, email FROM sedii ORDER BY tip_sediu, nume_sediu&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_BaXkVdEfCS7cth2SLu0w" name="generateTeamQuery" specification="_V8jVKkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_BaX0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_BaYEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>QueryType queryType = queryInfo.getQueryType();&#xD;
     Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     &#xD;
     StringBuilder sql = new StringBuilder();&#xD;
     &#xD;
     switch (queryType) {&#xD;
         case COUNT:&#xD;
             sql.append(&quot;SELECT COUNT(*) AS numar_echipe FROM echipe&quot;);&#xD;
             return sql.toString();&#xD;
             &#xD;
         case LIST:&#xD;
             sql.append(&quot;SELECT e.id, e.nume AS nume_echipa, p.nume AS nume_proiect, &quot;);&#xD;
             sql.append(&quot;u.nume AS supervizor_nume, u.prenume AS supervizor_prenume, &quot;);&#xD;
             sql.append(&quot;(SELECT COUNT(*) FROM useri WHERE id_echipa = e.id) AS numar_membri &quot;);&#xD;
             sql.append(&quot;FROM echipe e &quot;);&#xD;
             sql.append(&quot;LEFT JOIN proiecte p ON e.id_prj = p.id &quot;);&#xD;
             sql.append(&quot;LEFT JOIN useri u ON e.supervizor = u.id &quot;);&#xD;
             sql.append(&quot;ORDER BY e.nume&quot;);&#xD;
             &#xD;
             return sql.toString();&#xD;
             &#xD;
         case MINMAX:&#xD;
             // For MIN/MAX, show teams with most/least members&#xD;
             sql.append(&quot;SELECT e.id, e.nume AS nume_echipa, p.nume AS nume_proiect, &quot;);&#xD;
             sql.append(&quot;u.nume AS supervizor_nume, u.prenume AS supervizor_prenume, &quot;);&#xD;
             sql.append(&quot;(SELECT COUNT(*) FROM useri WHERE id_echipa = e.id) AS numar_membri &quot;);&#xD;
             sql.append(&quot;FROM echipe e &quot;);&#xD;
             sql.append(&quot;LEFT JOIN proiecte p ON e.id_prj = p.id &quot;);&#xD;
             sql.append(&quot;LEFT JOIN useri u ON e.supervizor = u.id &quot;);&#xD;
             &#xD;
             // Order by member count&#xD;
             if (queryInfo.toString().contains(&quot;putine&quot;) || &#xD;
                 queryInfo.toString().contains(&quot;putini&quot;) || &#xD;
                 queryInfo.toString().contains(&quot;mica&quot;) || &#xD;
                 queryInfo.toString().contains(&quot;mic&quot;)) {&#xD;
                 sql.append(&quot;ORDER BY numar_membri ASC&quot;);&#xD;
             } else {&#xD;
                 sql.append(&quot;ORDER BY numar_membri DESC&quot;);&#xD;
             }&#xD;
             &#xD;
             // Limit to top 5&#xD;
             sql.append(&quot; LIMIT 5&quot;);&#xD;
             &#xD;
             return sql.toString();&#xD;
             &#xD;
         default:&#xD;
             return &quot;SELECT e.id, e.nume AS nume_echipa, p.nume AS nume_proiect, u.nume AS supervizor_nume, u.prenume AS supervizor_prenume FROM echipe e LEFT JOIN proiecte p ON e.id_prj = p.id LEFT JOIN useri u ON e.supervizor = u.id ORDER BY e.nume&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_BaYUVdEfCS7cth2SLu0w" name="generateFirmQuery" specification="_V8jVLUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_BaYkVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_BaY0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>QueryType queryType = queryInfo.getQueryType();&#xD;
     Map&lt;String, String> entities = queryInfo.getEntities();&#xD;
     &#xD;
     // Check what other entities are mentioned in the query&#xD;
     String queryText = queryInfo.toString();&#xD;
     &#xD;
     if (containsAny(queryText, EMPLOYEE_KEYWORDS)) {&#xD;
         // Query about employees across the entire company&#xD;
         switch (queryType) {&#xD;
             case COUNT:&#xD;
                 return &quot;SELECT COUNT(*) AS numar_angajati FROM useri&quot;;&#xD;
             case LIST:&#xD;
                 return &quot;SELECT d.nume_dep AS departament, COUNT(u.id) AS numar_angajati &quot; +&#xD;
                        &quot;FROM departament d &quot; +&#xD;
                        &quot;LEFT JOIN useri u ON d.id_dep = u.id_dep &quot; +&#xD;
                        &quot;GROUP BY d.nume_dep, d.id_dep &quot; +&#xD;
                        &quot;ORDER BY COUNT(u.id) DESC&quot;;&#xD;
             case MINMAX:&#xD;
                 if (queryText.contains(&quot;departament&quot;)) {&#xD;
                     // Find departments with most/least employees&#xD;
                     if (queryText.contains(&quot;putin&quot;) || queryText.contains(&quot;mic&quot;) || &#xD;
                         queryText.contains(&quot;putini&quot;) || queryText.contains(&quot;putine&quot;)) {&#xD;
                         return &quot;SELECT d.nume_dep AS departament, COUNT(u.id) AS numar_angajati &quot; +&#xD;
                                &quot;FROM departament d &quot; +&#xD;
                                &quot;LEFT JOIN useri u ON d.id_dep = u.id_dep &quot; +&#xD;
                                &quot;GROUP BY d.nume_dep, d.id_dep &quot; +&#xD;
                                &quot;ORDER BY COUNT(u.id) ASC &quot; +&#xD;
                                &quot;LIMIT 5&quot;;&#xD;
                     } else {&#xD;
                         return &quot;SELECT d.nume_dep AS departament, COUNT(u.id) AS numar_angajati &quot; +&#xD;
                                &quot;FROM departament d &quot; +&#xD;
                                &quot;LEFT JOIN useri u ON d.id_dep = u.id_dep &quot; +&#xD;
                                &quot;GROUP BY d.nume_dep, d.id_dep &quot; +&#xD;
                                &quot;ORDER BY COUNT(u.id) DESC &quot; +&#xD;
                                &quot;LIMIT 5&quot;;&#xD;
                     }&#xD;
                 } else {&#xD;
                     // Find employees with highest/lowest salaries&#xD;
                     if (queryText.contains(&quot;putin&quot;) || queryText.contains(&quot;mic&quot;) || queryText.contains(&quot;min&quot;) || queryText.contains(&quot;minim&quot;) || queryText.contains(&quot;minimul&quot;) ||&#xD;
                             queryText.contains(&quot;putini&quot;) || queryText.contains(&quot;putine&quot;)) {&#xD;
                         return &quot;SELECT u.nume, u.prenume, d.nume_dep AS departament, t.denumire AS functie, &quot; +&#xD;
                                &quot;t.salariu &quot; +&#xD;
                                &quot;FROM useri u &quot; +&#xD;
                                &quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                                &quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                                &quot;ORDER BY t.salariu ASC &quot; +&#xD;
                                &quot;LIMIT 1&quot;;&#xD;
                     } else {&#xD;
                         return &quot;SELECT u.nume, u.prenume, d.nume_dep AS departament, t.denumire AS functie, &quot; +&#xD;
                                &quot;t.salariu &quot; +&#xD;
                                &quot;FROM useri u &quot; +&#xD;
                                &quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                                &quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                                &quot;ORDER BY t.salariu DESC &quot; +&#xD;
                                &quot;LIMIT 1&quot;;&#xD;
                     }&#xD;
                 }&#xD;
             default:&#xD;
                 return &quot;SELECT u.id, u.nume, u.prenume, d.nume_dep AS departament, t.denumire AS functie &quot; +&#xD;
                        &quot;FROM useri u &quot; +&#xD;
                        &quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                        &quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                        &quot;ORDER BY d.nume_dep, u.nume, u.prenume&quot;;&#xD;
         }&#xD;
     } else if (containsAny(queryText, DEPARTMENT_KEYWORDS)) {&#xD;
         // Query about departments&#xD;
         switch (queryType) {&#xD;
             case COUNT:&#xD;
                 return &quot;SELECT COUNT(*) AS numar_departamente FROM departament&quot;;&#xD;
             case LIST:&#xD;
                 return &quot;SELECT d.id_dep, d.nume_dep AS departament, COUNT(u.id) AS numar_angajati &quot; +&#xD;
                        &quot;FROM departament d &quot; +&#xD;
                        &quot;LEFT JOIN useri u ON d.id_dep = u.id_dep &quot; +&#xD;
                        &quot;GROUP BY d.id_dep, d.nume_dep &quot; +&#xD;
                        &quot;ORDER BY d.nume_dep&quot;;&#xD;
             case MINMAX:&#xD;
                 if (queryText.contains(&quot;angajat&quot;)) {&#xD;
                     // Find departments with most/least employees&#xD;
                     if (queryText.contains(&quot;putin&quot;) || queryText.contains(&quot;mic&quot;) || &#xD;
                         queryText.contains(&quot;putini&quot;) || queryText.contains(&quot;putine&quot;)) {&#xD;
                         return &quot;SELECT d.nume_dep AS departament, COUNT(u.id) AS numar_angajati &quot; +&#xD;
                                &quot;FROM departament d &quot; +&#xD;
                                &quot;LEFT JOIN useri u ON d.id_dep = u.id_dep &quot; +&#xD;
                                &quot;GROUP BY d.nume_dep, d.id_dep &quot; +&#xD;
                                &quot;ORDER BY COUNT(u.id) ASC &quot; +&#xD;
                                &quot;LIMIT 5&quot;;&#xD;
                     } else {&#xD;
                         return &quot;SELECT d.nume_dep AS departament, COUNT(u.id) AS numar_angajati &quot; +&#xD;
                                &quot;FROM departament d &quot; +&#xD;
                                &quot;LEFT JOIN useri u ON d.id_dep = u.id_dep &quot; +&#xD;
                                &quot;GROUP BY d.nume_dep, d.id_dep &quot; +&#xD;
                                &quot;ORDER BY COUNT(u.id) DESC &quot; +&#xD;
                                &quot;LIMIT 5&quot;;&#xD;
                     }&#xD;
                 } else {&#xD;
                     // Default department list&#xD;
                     return &quot;SELECT d.id_dep, d.nume_dep AS departament, COUNT(u.id) AS numar_angajati &quot; +&#xD;
                            &quot;FROM departament d &quot; +&#xD;
                            &quot;LEFT JOIN useri u ON d.id_dep = u.id_dep &quot; +&#xD;
                            &quot;GROUP BY d.id_dep, d.nume_dep &quot; +&#xD;
                            &quot;ORDER BY COUNT(u.id) DESC&quot;;&#xD;
                 }&#xD;
             default:&#xD;
                 return &quot;SELECT d.id_dep, d.nume_dep AS departament &quot; +&#xD;
                        &quot;FROM departament d &quot; +&#xD;
                        &quot;ORDER BY d.nume_dep&quot;;&#xD;
         }&#xD;
     } else if (containsAny(queryText, SALARY_KEYWORDS)) {&#xD;
         // Query about salaries&#xD;
         switch (queryType) {&#xD;
             case COUNT:&#xD;
                 return &quot;SELECT AVG(t.salariu) AS salariu_mediu FROM tipuri t&quot;;&#xD;
             case LIST:&#xD;
                 return &quot;SELECT t.denumire, t.salariu, COUNT(u.id) AS numar_angajati &quot; +&#xD;
                        &quot;FROM tipuri t &quot; +&#xD;
                        &quot;LEFT JOIN useri u ON t.tip = u.tip &quot; +&#xD;
                        &quot;GROUP BY t.denumire, t.salariu &quot; +&#xD;
                        &quot;ORDER BY t.salariu DESC&quot;;&#xD;
             case MINMAX:&#xD;
                 if (queryText.contains(&quot;putin&quot;) || queryText.contains(&quot;mic&quot;) || queryText.contains(&quot;min&quot;) || queryText.contains(&quot;minim&quot;) || queryText.contains(&quot;minimul&quot;) ||&#xD;
                     queryText.contains(&quot;putini&quot;) || queryText.contains(&quot;putine&quot;)) {&#xD;
                     return &quot;SELECT t.denumire, t.salariu &quot; +&#xD;
                            &quot;FROM tipuri t &quot; +&#xD;
                            &quot;ORDER BY t.salariu ASC &quot; +&#xD;
                            &quot;LIMIT 1&quot;;&#xD;
                 } else {&#xD;
                     return &quot;SELECT t.denumire, t.salariu &quot; +&#xD;
                            &quot;FROM tipuri t &quot; +&#xD;
                            &quot;ORDER BY t.salariu DESC &quot; +&#xD;
                            &quot;LIMIT 1&quot;;&#xD;
                 }&#xD;
             default:&#xD;
                 return &quot;SELECT d.nume_dep AS departament, AVG(t.salariu) AS salariu_mediu &quot; +&#xD;
                        &quot;FROM useri u &quot; +&#xD;
                        &quot;LEFT JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                        &quot;LEFT JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                        &quot;GROUP BY d.nume_dep &quot; +&#xD;
                        &quot;ORDER BY AVG(t.salariu) DESC&quot;;&#xD;
         }&#xD;
     } else {&#xD;
         // General company information&#xD;
         return &quot;SELECT COUNT(u.id) AS numar_angajati, &quot; +&#xD;
                &quot;COUNT(DISTINCT d.id_dep) AS numar_departamente, &quot; +&#xD;
                &quot;(SELECT COUNT(*) FROM proiecte p WHERE p.start &lt;= CURDATE() AND (p.end >= CURDATE() OR p.end IS NULL)) AS proiecte_active, &quot; +&#xD;
                &quot;(SELECT COUNT(*) FROM concedii c WHERE CURDATE() BETWEEN c.start_c AND c.end_c) AS angajati_in_concediu, &quot; +&#xD;
                &quot;(SELECT COUNT(*) FROM sedii) AS numar_sedii &quot; +&#xD;
                &quot;FROM useri u &quot; +&#xD;
                &quot;LEFT JOIN departament d ON u.id_dep = d.id_dep&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_CBYEVdEfCS7cth2SLu0w" name="generateGenericQuery" specification="_V8j8MEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_CBYUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_CBYkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>// Check if any specific entity keywords are present&#xD;
     String queryText = queryInfo.toString();&#xD;
     &#xD;
     if (containsAny(queryText, EMPLOYEE_KEYWORDS)) {&#xD;
         return generateEmployeeQuery(queryInfo);&#xD;
     } else if (containsAny(queryText, DEPARTMENT_KEYWORDS)) {&#xD;
         return generateDepartmentQuery(queryInfo);&#xD;
     } else if (containsAny(queryText, LEAVE_KEYWORDS)) {&#xD;
         return generateLeaveQuery(queryInfo);&#xD;
     } else if (containsAny(queryText, POSITION_KEYWORDS)) {&#xD;
         return generatePositionQuery(queryInfo);&#xD;
     } else if (containsAny(queryText, SALARY_KEYWORDS)) {&#xD;
         return generateSalaryQuery(queryInfo);&#xD;
     } else if (containsAny(queryText, CERTIFICATE_KEYWORDS)) {&#xD;
         return generateCertificateQuery(queryInfo);&#xD;
     } else if (containsAny(queryText, OFFICE_KEYWORDS)) {&#xD;
         return generateOfficeQuery(queryInfo);&#xD;
     } else if (containsAny(queryText, PROJECT_KEYWORDS)) {&#xD;
         return generateProjectQuery(queryInfo);&#xD;
     } else if (containsAny(queryText, TEAM_KEYWORDS)) {&#xD;
         return generateTeamQuery(queryInfo);&#xD;
     } else {&#xD;
         // Default: show general company information&#xD;
         return &quot;SELECT COUNT(u.id) AS numar_angajati, COUNT(DISTINCT d.id_dep) AS numar_departamente FROM useri u LEFT JOIN departament d ON u.id_dep = d.id_dep&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_CBY0VdEfCS7cth2SLu0w" name="containsAny" specification="_VtoIUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_CBZEVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_CBZUVdEfCS7cth2SLu0w" name="keywords" type="_T-lzoEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_CBZkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>for (String keyword : keywords) {&#xD;
         if (text.contains(keyword)) {&#xD;
             return true;&#xD;
         }&#xD;
     }&#xD;
     return false;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vte-YEVdEfCS7cth2SLu0w" name="_initializer1" isStatic="true" method="_V-9v8EVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_Vte-YUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_Vte-YkVdEfCS7cth2SLu0w" key="init"/>
          </eAnnotations>
        </ownedOperation>
        <ownedOperation xmi:id="_VtflcEVdEfCS7cth2SLu0w" name="isPositionQuery" visibility="private" method="_V-9v8UVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_fUY0VdEfCS7cth2SLu0w">
            <body>Enhanced method to check for position-related queries</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtflcUVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtflckVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vtflc0VdEfCS7cth2SLu0w" name="hasSalaryFocus" visibility="private" method="_V-9v9EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_fUZEVdEfCS7cth2SLu0w">
            <body>Helper method to determine if query has salary focus</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtfldEVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtfldUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtfldkVdEfCS7cth2SLu0w" name="isDepartmentVsPositionQuery" visibility="private" method="_V-9v90VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_fUZUVdEfCS7cth2SLu0w">
            <body>Enhanced method to distinguish between department and position queries</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vtfld0VdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtfleEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtgMgEVdEfCS7cth2SLu0w" name="translateToSQL" method="_V-9v-kVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_fUZkVdEfCS7cth2SLu0w">
            <body>Translate a natural language query to SQL&#xD;
     * @param naturalLanguageQuery The query in natural language&#xD;
     * @return QueryInfo object containing SQL query and metadata</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtgMgUVdEfCS7cth2SLu0w" name="naturalLanguageQuery">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V8ecoEVdEfCS7cth2SLu0w" type="_Vtp9gEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VtgMgkVdEfCS7cth2SLu0w" name="normalizeText" visibility="private" method="_V-9v_UVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_fUZ0VdEfCS7cth2SLu0w">
            <body>Normalize text for processing (lowercase, remove diacritics, standardize separators)</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtgMg0VdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtgMhEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtgMhUVdEfCS7cth2SLu0w" name="isFollowUp" visibility="private" method="_V-9wAEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_fUaEVdEfCS7cth2SLu0w">
            <body>Check if the text is a follow-up question</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtgMhkVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtgzkEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtgzkUVdEfCS7cth2SLu0w" name="isStopRequest" visibility="private" method="_V--XAEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_fUaUVdEfCS7cth2SLu0w">
            <body>Check if the text is a request to stop</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtgzkkVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vtgzk0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtgzlEVdEfCS7cth2SLu0w" name="identifyQueryType" visibility="private" method="_V--XA0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VtgzlUVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V8fDsEVdEfCS7cth2SLu0w" type="_VtovYUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VtgzlkVdEfCS7cth2SLu0w" name="extractTopNumber" visibility="private" method="_V--XBkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vtgzl0VdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VthaoEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VthaoUVdEfCS7cth2SLu0w" name="containsTemporalExpression" visibility="private" method="_V--XCUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_fUakVdEfCS7cth2SLu0w">
            <body>Check if text contains temporal expressions</body>
          </ownedComment>
          <ownedParameter xmi:id="_VthaokVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vthao0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VthapEVdEfCS7cth2SLu0w" name="extractTemporalExpression" visibility="private" method="_V--XDEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_fUa0VdEfCS7cth2SLu0w">
            <body>Extract specific temporal expression from text</body>
          </ownedComment>
          <ownedParameter xmi:id="_VthapUVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VthapkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vthap0VdEfCS7cth2SLu0w" name="_initializer2" isStatic="true" method="_V--XD0VdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VthaqEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VthaqUVdEfCS7cth2SLu0w" key="init"/>
          </eAnnotations>
        </ownedOperation>
        <ownedOperation xmi:id="_VtiBsUVdEfCS7cth2SLu0w" name="identifyEntities" visibility="private" method="_V--XEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VtiBskVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtiBs0VdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VtiowEVdEfCS7cth2SLu0w" name="extractPersonName" visibility="private" method="_V--XE0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_fUbEVdEfCS7cth2SLu0w">
            <body>Extract person name from scheduling queries</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtiowUVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtiowkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vtiow0VdEfCS7cth2SLu0w" name="extractMonthName" visibility="private" method="_V---EEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_fUbUVdEfCS7cth2SLu0w">
            <body>Extract month name from text</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtioxEVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtioxUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtioxkVdEfCS7cth2SLu0w" name="extractYear" visibility="private" method="_V---E0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_fUbkVdEfCS7cth2SLu0w">
            <body>Extract year from text</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vtiox0VdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtioyEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtjP0EVdEfCS7cth2SLu0w" name="calculateDaysInMonth" visibility="private" method="_V---IkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7cUVdEfCS7cth2SLu0w">
            <body>Calculate days in month considering leap years</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtjP0UVdEfCS7cth2SLu0w" name="month">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtjP0kVdEfCS7cth2SLu0w" name="year">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtjP00VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtjP1EVdEfCS7cth2SLu0w" name="isLeapYear" visibility="private" method="_V---JkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7ckVdEfCS7cth2SLu0w">
            <body>Check if year is leap year</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtjP1UVdEfCS7cth2SLu0w" name="year">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtjP1kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtjP10VdEfCS7cth2SLu0w" name="getNextWeekend" visibility="private" method="_V-_lIEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7c0VdEfCS7cth2SLu0w">
            <body>Get next weekend date</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtjP2EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vtj24EVdEfCS7cth2SLu0w" name="identifyEntities1" visibility="private" method="_V-_lMkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7eEVdEfCS7cth2SLu0w">
            <body>Enhanced entity identification with better temporal support</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vtj24UVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vtj24kVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vtkd8EVdEfCS7cth2SLu0w" name="extractDepartmentName" visibility="private" method="_V-_lNUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7eUVdEfCS7cth2SLu0w">
            <body>Helper method to extract department name from text</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vtkd8UVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vtkd8kVdEfCS7cth2SLu0w" name="entities" type="_UAkwoUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VtlFAEVdEfCS7cth2SLu0w" name="identifyRequestedAttributes" visibility="private" method="_V_AMMEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7ekVdEfCS7cth2SLu0w">
            <body>Identify attributes specifically requested in the query</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtlFAUVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtlFAkVdEfCS7cth2SLu0w" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VtlFA0VdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtmTIEVdEfCS7cth2SLu0w" name="generateTemporalCondition" visibility="private" method="_V_AzRkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7hUVdEfCS7cth2SLu0w">
            <body>Enhanced temporal condition generator for leave queries</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtmTIUVdEfCS7cth2SLu0w" name="temporal">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtmTIkVdEfCS7cth2SLu0w" name="startColumn">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtmTI0VdEfCS7cth2SLu0w" name="endColumn">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtmTJEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vtm6MEVdEfCS7cth2SLu0w" name="debugTemporalDetection" visibility="private" method="_V_AzTkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7h0VdEfCS7cth2SLu0w">
            <body>ADAUGĂ această metodă pentru debug temporal în translator</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vtm6MUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vtm6MkVdEfCS7cth2SLu0w" name="generateTemporalCondition" visibility="private" method="_V_AzUEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7iEVdEfCS7cth2SLu0w">
            <body>Generate SQL temporal condition based on temporal expression</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vtm6M0VdEfCS7cth2SLu0w" name="temporal">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vtm6NEVdEfCS7cth2SLu0w" name="columnName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vtm6NUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtnhQEVdEfCS7cth2SLu0w" name="debugMinMaxDetection" visibility="private" method="_V_AzWkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7ikVdEfCS7cth2SLu0w">
            <body>Helper method for debugging MIN/MAX detection</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtnhQUVdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtnhQkVdEfCS7cth2SLu0w" name="debugEntityDetection" visibility="private" method="_V_BaVkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7jUVdEfCS7cth2SLu0w">
            <body>Enhanced debugging for entity detection</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtnhQ0VdEfCS7cth2SLu0w" name="query">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VtoIUEVdEfCS7cth2SLu0w" name="containsAny" visibility="private" method="_V_CBY0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_gihEVdEfCS7cth2SLu0w">
            <body>Check if a text contains any of the keywords in a set</body>
          </ownedComment>
          <ownedParameter xmi:id="_VtoIUUVdEfCS7cth2SLu0w" name="text">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VtoIUkVdEfCS7cth2SLu0w" name="keywords" type="_T-lzoEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VtoIU0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8fDsUVdEfCS7cth2SLu0w" name="generateTaskSchedulingQuery" visibility="private" method="_V---FkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_fUb0VdEfCS7cth2SLu0w">
            <body>Generate task scheduling queries</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8fDskVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8fDs0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8fDtEVdEfCS7cth2SLu0w" name="generateCalendarQuery" visibility="private" method="_V---GUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_fUcEVdEfCS7cth2SLu0w">
            <body>Generate calendar queries (next free day)</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8fDtUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8fDtkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8fqwEVdEfCS7cth2SLu0w" name="generateLegalHolidaysQuery" visibility="private" method="_V---HEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_fUcUVdEfCS7cth2SLu0w">
            <body>Generate legal holidays count query</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8fqwUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8fqwkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8fqw0VdEfCS7cth2SLu0w" name="generateMonthDaysQuery" visibility="private" method="_V---H0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7cEVdEfCS7cth2SLu0w">
            <body>Generate month days query</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8fqxEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8fqxUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8fqxkVdEfCS7cth2SLu0w" name="formatTaskSchedulingResponse" visibility="private" method="_V-_lIkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7dEVdEfCS7cth2SLu0w">
            <body>Format task scheduling response</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8fqx0VdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8fqyEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8fqyUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8g44UVdEfCS7cth2SLu0w" name="formatCalendarResponse" visibility="private" method="_V-_lJkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7dUVdEfCS7cth2SLu0w">
            <body>Format calendar response</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8g44kVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8g440VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8g45EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8g45kVdEfCS7cth2SLu0w" name="formatLegalHolidaysResponse" visibility="private" method="_V-_lKkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7dkVdEfCS7cth2SLu0w">
            <body>Format legal holidays count response</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8g450VdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8g46EVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8g46UVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8g460VdEfCS7cth2SLu0w" name="formatMonthDaysResponse" visibility="private" method="_V-_lLkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7d0VdEfCS7cth2SLu0w">
            <body>Format month days response</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8g47EVdEfCS7cth2SLu0w" name="resultList" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8g47UVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8g47kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8hf8UVdEfCS7cth2SLu0w" name="generateSQLQuery" visibility="private" method="_V_AMNEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7e0VdEfCS7cth2SLu0w">
            <body>Generate SQL query based on identified entities and query type</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8hf8kVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8hf80VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8hf9EVdEfCS7cth2SLu0w" name="generatePersonalQuery" visibility="private" method="_V_AMN0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7fEVdEfCS7cth2SLu0w">
            <body>Generate personal queries (about current user)</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8hf9UVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8hf9kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8hf90VdEfCS7cth2SLu0w" name="generateProjectQuery" visibility="private" method="_V_AMOkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7fUVdEfCS7cth2SLu0w">
            <body>Generate project queries with status</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8hf-EVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8hf-UVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8iHAEVdEfCS7cth2SLu0w" name="generateCertificateQuery" visibility="private" method="_V_AMPUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7fkVdEfCS7cth2SLu0w">
            <body>Generate certificate queries with status</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8iHAUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8iHAkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8iHA0VdEfCS7cth2SLu0w" name="generateLocationQuery" visibility="private" method="_V_AMQEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7f0VdEfCS7cth2SLu0w">
            <body>Generate location queries</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8iHBEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8iHBUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8iHBkVdEfCS7cth2SLu0w" name="generateAverageQuery" visibility="private" method="_V_AMQ0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7gEVdEfCS7cth2SLu0w">
            <body>Generate average/statistical queries</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8iHB0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8iHCEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8iHCUVdEfCS7cth2SLu0w" name="generateTaskQuery" visibility="private" method="_V_AMRkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7gUVdEfCS7cth2SLu0w">
            <body>Generate task queries with temporal context</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8iHCkVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8iHC0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8iHDEVdEfCS7cth2SLu0w" name="generateAvailabilityQuery" visibility="private" method="_V_AMSUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7gkVdEfCS7cth2SLu0w">
            <body>Generate availability queries</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8iHDUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8iHDkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8iuEEVdEfCS7cth2SLu0w" name="generateWorkModeQuery" visibility="private" method="_V_AzQEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7g0VdEfCS7cth2SLu0w">
            <body>Generate work mode queries</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8iuEUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8iuEkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8iuE0VdEfCS7cth2SLu0w" name="generateEnhancedLeaveQuery" visibility="private" method="_V_AzQ0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7hEVdEfCS7cth2SLu0w">
            <body>Enhanced leave query with better temporal support</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8iuFEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8iuFUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8iuFkVdEfCS7cth2SLu0w" name="generateLeaveQuery" visibility="private" method="_V_AzS0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7hkVdEfCS7cth2SLu0w">
            <body>Enhanced leave query generation with better temporal support</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8iuF0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8iuGEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8iuGUVdEfCS7cth2SLu0w" name="generateDepartmentQuery" visibility="private" method="_V_AzVEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7iUVdEfCS7cth2SLu0w">
            <body>Generate SQL query for department-related questions</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8iuGkVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8iuG0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8iuHEVdEfCS7cth2SLu0w" name="generateEmployeeQuery" visibility="private" method="_V_AzV0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V8iuHUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8iuHkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8iuH0VdEfCS7cth2SLu0w" name="generateLeaveQuery2" visibility="private" method="_V_BaUEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7i0VdEfCS7cth2SLu0w">
            <body>Generate SQL query for leave-related questions</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8iuIEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8jVIEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8jVIUVdEfCS7cth2SLu0w" name="generatePositionQuery" visibility="private" method="_V_BaU0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7jEVdEfCS7cth2SLu0w">
            <body>Generate SQL query for position/role-related questions</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8jVIkVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8jVI0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8jVJEVdEfCS7cth2SLu0w" name="generateSalaryQuery" visibility="private" method="_V_BaWEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_f7jkVdEfCS7cth2SLu0w">
            <body>Generate SQL query for salary-related questions</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8jVJUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8jVJkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8jVJ0VdEfCS7cth2SLu0w" name="generateOfficeQuery" visibility="private" method="_V_BaW0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_gigEVdEfCS7cth2SLu0w">
            <body>Generate SQL query for office-related questions</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8jVKEVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8jVKUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8jVKkVdEfCS7cth2SLu0w" name="generateTeamQuery" visibility="private" method="_V_BaXkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_gigUVdEfCS7cth2SLu0w">
            <body>Generate SQL query for team-related questions</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8jVK0VdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8jVLEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8jVLUVdEfCS7cth2SLu0w" name="generateFirmQuery" visibility="private" method="_V_BaYUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_gigkVdEfCS7cth2SLu0w">
            <body>Generate SQL query for firm/company-related questions</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8jVLkVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8jVL0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V8j8MEVdEfCS7cth2SLu0w" name="generateGenericQuery" visibility="private" method="_V_CBYEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_gig0VdEfCS7cth2SLu0w">
            <body>Generate a generic SQL query when no specific entity is identified</body>
          </ownedComment>
          <ownedParameter xmi:id="_V8j8MUVdEfCS7cth2SLu0w" name="queryInfo" type="_Vtp9gEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8j8MkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <nestedClassifier xmi:type="uml:Enumeration" xmi:id="_VtovYUVdEfCS7cth2SLu0w" name="QueryType">
          <ownedComment xmi:id="_V_gihUVdEfCS7cth2SLu0w">
            <body>Enumeration for query types</body>
          </ownedComment>
          <ownedLiteral xmi:id="_VtpWcUVdEfCS7cth2SLu0w" name="COUNT"/>
          <ownedLiteral xmi:id="_VtpWckVdEfCS7cth2SLu0w" name="MINMAX"/>
          <ownedLiteral xmi:id="_VtpWc0VdEfCS7cth2SLu0w" name="LIST"/>
        </nestedClassifier>
        <nestedClassifier xmi:type="uml:Class" xmi:id="_Vtp9gEVdEfCS7cth2SLu0w" name="QueryInfo">
          <eAnnotations xmi:id="_Vtp9gUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_Vtp9gkVdEfCS7cth2SLu0w" key="static"/>
          </eAnnotations>
          <ownedComment xmi:id="_V_gihkVdEfCS7cth2SLu0w">
            <body>Class to store query information</body>
          </ownedComment>
          <ownedAttribute xmi:id="_V-OJEEVdEfCS7cth2SLu0w" name="queryType" type="_VtovYUVdEfCS7cth2SLu0w" association="_V_gih0VdEfCS7cth2SLu0w"/>
          <ownedAttribute xmi:id="_V-OJEUVdEfCS7cth2SLu0w" name="entities">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <qualifier xmi:id="_V-OJEkVdEfCS7cth2SLu0w">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </qualifier>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V-OJE0VdEfCS7cth2SLu0w" name="requestedAttributes" isOrdered="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-OJFEVdEfCS7cth2SLu0w" value="*"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V-OJFUVdEfCS7cth2SLu0w" name="sqlQuery">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V-OJFkVdEfCS7cth2SLu0w" name="isFollowUp" visibility="private">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V-OwIUVdEfCS7cth2SLu0w" name="isStopRequest" visibility="private">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_CBZ0VdEfCS7cth2SLu0w" name="QueryInfo" specification="_VtqkkEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V_CBaEVdEfCS7cth2SLu0w" type="_Vtp9gEVdEfCS7cth2SLu0w" direction="return"/>
            <language>java</language>
            <body>this.queryType = QueryType.LIST; // Default type&#xD;
         this.entities = new HashMap&lt;>();&#xD;
         this.requestedAttributes = new ArrayList&lt;>();&#xD;
         this.isFollowUp = false;&#xD;
         this.isStopRequest = false;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_CBaUVdEfCS7cth2SLu0w" name="isFollowUp" specification="_VtqklEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V_CBakVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
            <language>java</language>
            <body>return isFollowUp;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_CBa0VdEfCS7cth2SLu0w" name="setFollowUp" specification="_VtqklkVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V_CBbEVdEfCS7cth2SLu0w" name="isFollowUp">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
            <language>java</language>
            <body>this.isFollowUp = isFollowUp;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_CBbUVdEfCS7cth2SLu0w" name="isStopRequest" specification="_VtrysEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V_CBbkVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
            <language>java</language>
            <body>return isStopRequest;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_CBb0VdEfCS7cth2SLu0w" name="setStopRequest" specification="_VtryskVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V_CBcEVdEfCS7cth2SLu0w" name="isStopRequest">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
            <language>java</language>
            <body>this.isStopRequest = isStopRequest;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_CBcUVdEfCS7cth2SLu0w" name="toString" specification="_VtrytEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V_CBckVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <language>java</language>
            <body>StringBuilder sb = new StringBuilder();&#xD;
         sb.append(&quot;QueryType: &quot;).append(queryType).append(&quot;\n&quot;);&#xD;
         sb.append(&quot;Entities: &quot;).append(entities).append(&quot;\n&quot;);&#xD;
         sb.append(&quot;RequestedAttributes: &quot;).append(requestedAttributes).append(&quot;\n&quot;);&#xD;
         &#xD;
         if (sqlQuery != null) {&#xD;
             sb.append(&quot;SqlQuery: &quot;).append(sqlQuery);&#xD;
         }&#xD;
         &#xD;
         return sb.toString();&#xD;
     </body>
          </ownedBehavior>
          <ownedOperation xmi:id="_VtqkkEVdEfCS7cth2SLu0w" name="QueryInfo" method="_V_CBZ0VdEfCS7cth2SLu0w">
            <eAnnotations xmi:id="_VtqkkUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_VtqkkkVdEfCS7cth2SLu0w" key="create"/>
            </eAnnotations>
            <ownedParameter xmi:id="_Vtqkk0VdEfCS7cth2SLu0w" type="_Vtp9gEVdEfCS7cth2SLu0w" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:id="_VtqklEVdEfCS7cth2SLu0w" name="isFollowUp" method="_V_CBaUVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_VtqklUVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_VtqklkVdEfCS7cth2SLu0w" name="setFollowUp" method="_V_CBa0VdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_Vtqkl0VdEfCS7cth2SLu0w" name="isFollowUp">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_VtrysEVdEfCS7cth2SLu0w" name="isStopRequest" method="_V_CBbUVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_VtrysUVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_VtryskVdEfCS7cth2SLu0w" name="setStopRequest" method="_V_CBb0VdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_Vtrys0VdEfCS7cth2SLu0w" name="isStopRequest">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_VtrytEVdEfCS7cth2SLu0w" name="toString" method="_V_CBcUVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_VtsZwEVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
          </ownedOperation>
        </nestedClassifier>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vt2x0EVdEfCS7cth2SLu0w" name="PeanServlet">
        <generalization xmi:id="_Vt3_8kVdEfCS7cth2SLu0w" general="_T_nHUUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-P-QEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-QlUEVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-QlUkVdEfCS7cth2SLu0w" name="out" visibility="package" type="_T-CaAEVdEfCS7cth2SLu0w" association="_WAG_cEVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_CocEVdEfCS7cth2SLu0w" name="doPost" specification="_Vt3Y4UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_DPgEVdEfCS7cth2SLu0w" name="request" type="_T_nuYUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_DPgUVdEfCS7cth2SLu0w" name="response" type="_T_oVcUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>out = response.getWriter();
     try {
         //getting parameter from jsp
         String jsonData = request.getParameter(&quot;para&quot;);
         
         Gson gson = new Gson();

         //converting it into bean
         Userr data = gson.fromJson(jsonData, Userr.class);

         //calling the getter method
         String name = data.getName();
         String address = data.getAddress();

         Userr user = new Userr();

         //setting values to object
         user.setName(name);
         user.setAddress(address);

         //converting
         String jsonObj = gson.toJson(user);
        
         out.print(jsonObj);
     } catch (JsonSyntaxException e) {
         out.println(e);
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vt3Y4UVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_CocEVdEfCS7cth2SLu0w" raisedException="_T_mgQEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vt3Y4kVdEfCS7cth2SLu0w" name="request" type="_T_nuYUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vt3Y40VdEfCS7cth2SLu0w" name="response" type="_T_oVcUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vt5OEEVdEfCS7cth2SLu0w" name="PenalizariServlet">
        <generalization xmi:id="_Vt51IEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_DPgkVdEfCS7cth2SLu0w" name="doGet" specification="_Vt5OEUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_DPg0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_DPhEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doPost(request, response);&#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_DPhUVdEfCS7cth2SLu0w" name="doPost" specification="_Vt5OFEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_DPhkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_DPh0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>int idAng = Integer.parseInt(request.getParameter(&quot;id_ang&quot;));&#xD;
     int tipPenalizare = Integer.parseInt(request.getParameter(&quot;tip_penalizare&quot;));&#xD;
     Date dataStart = Date.valueOf(request.getParameter(&quot;data_start&quot;));&#xD;
     Date dataFinal = Date.valueOf(request.getParameter(&quot;data_final&quot;));&#xD;
     String motiv = request.getParameter(&quot;motiv&quot;);&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Încărcare driver MySQL&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Creare conexiune directă&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         &#xD;
         // Actualizare penalizări angajat&#xD;
         String sql;&#xD;
         PreparedStatement pstmt;&#xD;
         &#xD;
         // Verifică dacă tipPenalizare este 0 și setează valoarea NULL în coloana penalizari&#xD;
         if (tipPenalizare == 0) {&#xD;
             sql = &quot;UPDATE useri SET penalizari = NULL WHERE id = ?&quot;;&#xD;
             pstmt = conn.prepareStatement(sql);&#xD;
             pstmt.setInt(1, idAng);&#xD;
         } else {&#xD;
             sql = &quot;UPDATE useri SET penalizari = ? WHERE id = ?&quot;;&#xD;
             pstmt = conn.prepareStatement(sql);&#xD;
             pstmt.setInt(1, tipPenalizare);&#xD;
             pstmt.setInt(2, idAng);&#xD;
         }&#xD;
         &#xD;
         int result = pstmt.executeUpdate();&#xD;
         &#xD;
         if (result > 0) {&#xD;
             // Înregistrare istoric penalizare&#xD;
             sql = &quot;INSERT INTO istoric_penalizari (id_ang, tip_penalizare, data_start, data_final, motiv) &quot; +&#xD;
                   &quot;VALUES (?, ?, ?, ?, ?)&quot;;&#xD;
             pstmt = conn.prepareStatement(sql);&#xD;
             pstmt.setInt(1, idAng);&#xD;
             pstmt.setInt(2, tipPenalizare);&#xD;
             pstmt.setDate(3, dataStart);&#xD;
             pstmt.setDate(4, dataFinal);&#xD;
             pstmt.setString(5, motiv);&#xD;
             pstmt.executeUpdate();&#xD;
             &#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
 	        PrintWriter out = response.getWriter();&#xD;
 	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
 	        if (tipPenalizare == 0) {&#xD;
 	            out.println(&quot;alert('Penalizare eliminată cu succes!');&quot;);&#xD;
 	        } else {&#xD;
 	            out.println(&quot;alert('Penalizare acordată cu succes!');&quot;);&#xD;
 	        }&#xD;
 	        out.println(&quot;window.location.href = 'viewang.jsp';&quot;);&#xD;
 	        out.println(&quot;&lt;/script>&quot;);&#xD;
 	        out.close();&#xD;
 	        return; &#xD;
         } else {&#xD;
         	response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
 	        PrintWriter out = response.getWriter();&#xD;
 	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
 	        if (tipPenalizare == 0) {&#xD;
 	            out.println(&quot;alert('Nu s-a putut elimina penalizarea!');&quot;);&#xD;
 	        } else {&#xD;
 	            out.println(&quot;alert('Nu s-a putut adăuga penalizarea!');&quot;);&#xD;
 	        }&#xD;
 	        out.println(&quot;window.location.href = 'viewang.jsp';&quot;);&#xD;
 	        out.println(&quot;&lt;/script>&quot;);&#xD;
 	        out.close();&#xD;
 	        return; &#xD;
         }&#xD;
         &#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	        PrintWriter out = response.getWriter();&#xD;
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
	        out.println(&quot;alert('Nu s-a putut modifica penalizarea!');&quot;);&#xD;
	        out.println(&quot;window.location.href = 'viewang.jsp';&quot;);&#xD;
	        out.println(&quot;&lt;/script>&quot;);&#xD;
	        out.close();&#xD;
	        return; &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	        PrintWriter out = response.getWriter();&#xD;
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
	        out.println(&quot;alert('Nu s-a putut modifica penalizarea!');&quot;);&#xD;
	        out.println(&quot;window.location.href = 'viewang.jsp';&quot;);&#xD;
	        out.println(&quot;&lt;/script>&quot;);&#xD;
	        out.close();&#xD;
	        return; &#xD;
     } finally {&#xD;
     	 &#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vt5OEUVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_DPgkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vt5OEkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vt5OE0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vt5OFEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_DPhUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vt5OFUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vt5OFkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vt51IUVdEfCS7cth2SLu0w" name="ProcesareAdeverintaServlet">
        <generalization xmi:id="_Vt7qUkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-QlU0VdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-QlVEVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_DPiEVdEfCS7cth2SLu0w" name="genereazaAdeverinta" specification="_Vt51IkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_DPiUVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_DPikVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_DPi0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Obținem informațiile necesare pentru generarea adeverinței&#xD;
     String sql = &quot;SELECT a.*, ta.denumire as tip_adeverinta, u.nume, u.prenume, u.cnp, u.data_nasterii, &quot; +&#xD;
                 &quot;u.adresa, u.email, u.telefon, d.nume_dep, tp.denumire as pozitie, u.salariu_brut, u.data_ang &quot; +&#xD;
                 &quot;FROM adeverinte a &quot; +&#xD;
                 &quot;JOIN tip_adev ta ON a.tip = ta.id &quot; +&#xD;
                 &quot;JOIN useri u ON a.id_ang = u.id &quot; +&#xD;
                 &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                 &quot;JOIN tipuri tp ON u.tip = tp.tip &quot; +&#xD;
                 &quot;WHERE a.id = ?&quot;;&#xD;
     &#xD;
     try (PreparedStatement pstmt = conn.prepareStatement(sql)) {&#xD;
         pstmt.setInt(1, idAdeverinta);&#xD;
         try (ResultSet rs = pstmt.executeQuery()) {&#xD;
             if (rs.next()) {&#xD;
                 // Setăm header-ele pentru descărcare&#xD;
                 response.setContentType(&quot;application/pdf&quot;);&#xD;
                 String fileName = String.format(&quot;adeverinta_%d_%s_%s.pdf&quot;, &#xD;
                         idAdeverinta, &#xD;
                         rs.getString(&quot;nume&quot;).toLowerCase(), &#xD;
                         rs.getString(&quot;prenume&quot;).toLowerCase());&#xD;
                 response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=\&quot;&quot; + fileName + &quot;\&quot;&quot;);&#xD;
                 &#xD;
                 try {&#xD;
                     // Creăm documentul PDF direct în output stream&#xD;
                     com.itextpdf.text.Document document = new com.itextpdf.text.Document(com.itextpdf.text.PageSize.A4);&#xD;
                     com.itextpdf.text.pdf.PdfWriter writer = com.itextpdf.text.pdf.PdfWriter.getInstance(document, response.getOutputStream());&#xD;
                     document.open();&#xD;
                     &#xD;
                     // Stiluri pentru text&#xD;
                     com.itextpdf.text.Font titleFont = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.TIMES_ROMAN, 18, com.itextpdf.text.Font.BOLD);&#xD;
                     com.itextpdf.text.Font headerFont = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.TIMES_ROMAN, 12, com.itextpdf.text.Font.BOLD);&#xD;
                     com.itextpdf.text.Font normalFont = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.TIMES_ROMAN, 12, com.itextpdf.text.Font.NORMAL);&#xD;
                     &#xD;
                     // Titlu&#xD;
                     com.itextpdf.text.Paragraph title = new com.itextpdf.text.Paragraph(&quot;ADEVERINȚĂ&quot;, titleFont);&#xD;
                     title.setAlignment(com.itextpdf.text.Element.ALIGN_CENTER);&#xD;
                     document.add(title);&#xD;
                     &#xD;
                     // Număr adeverință și data&#xD;
                     java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat(&quot;dd.MM.yyyy&quot;);&#xD;
                     String dataEmitere = dateFormat.format(new java.util.Date());&#xD;
                     com.itextpdf.text.Paragraph nrAdeverinta = new com.itextpdf.text.Paragraph(&#xD;
                             &quot;Nr. &quot; + idAdeverinta + &quot; / &quot; + dataEmitere, normalFont);&#xD;
                     nrAdeverinta.setAlignment(com.itextpdf.text.Element.ALIGN_RIGHT);&#xD;
                     document.add(nrAdeverinta);&#xD;
                     &#xD;
                     document.add(com.itextpdf.text.Chunk.NEWLINE);&#xD;
                     document.add(com.itextpdf.text.Chunk.NEWLINE);&#xD;
                     &#xD;
                     // Conținutul adeverinței în funcție de tipul ei&#xD;
                     int tipAdeverinta = rs.getInt(&quot;tip&quot;);&#xD;
                     String numePrenume = rs.getString(&quot;nume&quot;) + &quot; &quot; + rs.getString(&quot;prenume&quot;);&#xD;
                     String cnp = rs.getString(&quot;cnp&quot;);&#xD;
                     String functie = rs.getString(&quot;pozitie&quot;);&#xD;
                     String departament = rs.getString(&quot;nume_dep&quot;);&#xD;
                     String motiv = rs.getString(&quot;pentru_servi&quot;);&#xD;
                     &#xD;
                     com.itextpdf.text.Paragraph content = new com.itextpdf.text.Paragraph();&#xD;
                     content.setAlignment(com.itextpdf.text.Element.ALIGN_JUSTIFIED);&#xD;
                     &#xD;
                     switch (tipAdeverinta) {&#xD;
                         case 1: // Adeverință de salariat&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;Prin prezenta, se adeverește faptul că &quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(numePrenume, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;, CNP &quot; + cnp + &quot;, este angajat(ă) al(a) companiei noastre, în funcția de &quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(functie, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot; în cadrul departamentului &quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(departament, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;.\n\nAceastă adeverință se eliberează pentru a-i servi la &quot; + motiv + &quot;.&quot;, normalFont));&#xD;
                             break;&#xD;
                             &#xD;
                         case 2: // Adeverință de venit&#xD;
                             int salariu = rs.getInt(&quot;salariu_brut&quot;);&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;Prin prezenta, se adeverește faptul că &quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(numePrenume, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;, CNP &quot; + cnp + &quot;, angajat(ă) al(a) companiei noastre, în funcția de &quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(functie, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot; în cadrul departamentului &quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(departament, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;, are un salariu brut de &quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(String.format(&quot;%,d&quot;, salariu) + &quot; RON&quot;, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;.\n\nAceastă adeverință se eliberează pentru a-i servi la &quot; + motiv + &quot;.&quot;, normalFont));&#xD;
                             break;&#xD;
                             &#xD;
                         case 3: // Adeverință medicală&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;Prin prezenta, se adeverește faptul că &quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(numePrenume, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;, CNP &quot; + cnp + &quot;, este angajat(ă) al(a) companiei noastre, în funcția de &quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(functie, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot; în cadrul departamentului &quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(departament, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot; și beneficiază de asigurare medicală conform legii.&quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;\n\nAceastă adeverință se eliberează pentru a-i servi la &quot; + motiv + &quot;.&quot;, normalFont));&#xD;
                             break;&#xD;
                             &#xD;
                         case 4: // Adeverință de concediu&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;Prin prezenta, se adeverește faptul că &quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(numePrenume, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;, CNP &quot; + cnp + &quot;, angajat(ă) al(a) companiei noastre, în funcția de &quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(functie, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot; în cadrul departamentului &quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(departament, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;, se află în concediu aprobat, conform solicitării sale.&quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;\n\nAceastă adeverință se eliberează pentru a-i servi la &quot; + motiv + &quot;.&quot;, normalFont));&#xD;
                             break;&#xD;
                             &#xD;
                         case 5: // Adeverință de experiență&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;Prin prezenta, se adeverește faptul că &quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(numePrenume, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;, CNP &quot; + cnp + &quot;, a fost/este angajat(ă) al(a) companiei noastre, în funcția de &quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(functie, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot; în cadrul departamentului &quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(departament, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot; și are o experiență profesională totală în compania noastră de &quot;, normalFont));&#xD;
                             &#xD;
                             // Calculăm experiența - verificăm dacă avem câmpul data_ang în useri&#xD;
                             String dataAngajarii = rs.getString(&quot;data_ang&quot;) != null ? rs.getString(&quot;data_ang&quot;) : &quot;N/A&quot;;&#xD;
                             content.add(new com.itextpdf.text.Chunk(dataAngajarii, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;.\n\nAceastă adeverință se eliberează pentru a-i servi la &quot; + motiv + &quot;.&quot;, normalFont));&#xD;
                             break;&#xD;
                             &#xD;
                         default: // Alte tipuri de adeverințe&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;Prin prezenta, adeverim că &quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(numePrenume, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;, CNP &quot; + cnp + &quot;, este angajat(ă) al(a) companiei noastre, în funcția de &quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(functie, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot; în cadrul departamentului &quot;, normalFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(departament, headerFont));&#xD;
                             content.add(new com.itextpdf.text.Chunk(&quot;.\n\nAceastă adeverință se eliberează pentru a-i servi la &quot; + motiv + &quot;.&quot;, normalFont));&#xD;
                             break;&#xD;
                     }&#xD;
                     &#xD;
                     document.add(content);&#xD;
                     document.add(com.itextpdf.text.Chunk.NEWLINE);&#xD;
                     document.add(com.itextpdf.text.Chunk.NEWLINE);&#xD;
                     &#xD;
                     // Data și semnătură&#xD;
                     com.itextpdf.text.Paragraph dataEmitereParagraph = new com.itextpdf.text.Paragraph(&quot;Data: &quot; + dataEmitere, normalFont);&#xD;
                     dataEmitereParagraph.setAlignment(com.itextpdf.text.Element.ALIGN_LEFT);&#xD;
                     document.add(dataEmitereParagraph);&#xD;
                     &#xD;
                     document.add(com.itextpdf.text.Chunk.NEWLINE);&#xD;
                     document.add(com.itextpdf.text.Chunk.NEWLINE);&#xD;
                     &#xD;
                     com.itextpdf.text.Paragraph semnatura = new com.itextpdf.text.Paragraph(&quot;Director Resurse Umane,&quot;, normalFont);&#xD;
                     semnatura.setAlignment(com.itextpdf.text.Element.ALIGN_RIGHT);&#xD;
                     document.add(semnatura);&#xD;
                     &#xD;
                     document.add(com.itextpdf.text.Chunk.NEWLINE);&#xD;
                     &#xD;
                     com.itextpdf.text.Paragraph numeSemnatura = new com.itextpdf.text.Paragraph(&quot;_____________________&quot;, normalFont);&#xD;
                     numeSemnatura.setAlignment(com.itextpdf.text.Element.ALIGN_RIGHT);&#xD;
                     document.add(numeSemnatura);&#xD;
                     &#xD;
                     // Footer&#xD;
                     com.itextpdf.text.Paragraph footer = new com.itextpdf.text.Paragraph(&#xD;
                             &quot;Acest document este valabil 30 de zile de la data emiterii.&quot;, &#xD;
                             new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.TIMES_ROMAN, 10, com.itextpdf.text.Font.ITALIC));&#xD;
                     footer.setAlignment(com.itextpdf.text.Element.ALIGN_CENTER);&#xD;
                     document.add(footer);&#xD;
                     &#xD;
                     // Informații juridice&#xD;
                     com.itextpdf.text.Paragraph legal = new com.itextpdf.text.Paragraph(&#xD;
                             &quot;Acest document a fost generat automat și nu necesită semnătură olografă conform art. 5 din Legea 455/2001.&quot;, &#xD;
                             new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.TIMES_ROMAN, 8, com.itextpdf.text.Font.ITALIC));&#xD;
                     legal.setAlignment(com.itextpdf.text.Element.ALIGN_CENTER);&#xD;
                     document.add(legal);&#xD;
                     &#xD;
                     document.close();&#xD;
                     &#xD;
                     // Marcăm adeverința ca generată în baza de date&#xD;
                     try (PreparedStatement updateStmt = conn.prepareStatement(&#xD;
                             &quot;UPDATE adeverinte SET pdf_generated = 1 WHERE id = ?&quot;)) {&#xD;
                         updateStmt.setInt(1, idAdeverinta);&#xD;
                         updateStmt.executeUpdate();&#xD;
                     }&#xD;
                 } catch (com.itextpdf.text.DocumentException e) {&#xD;
                     throw new IOException(&quot;Eroare la generarea PDF-ului: &quot; + e.getMessage(), e);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_DPjEVdEfCS7cth2SLu0w" name="doPost" specification="_Vt6cMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_DPjUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_DPjkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         JSONObject json = new JSONObject();&#xD;
         &#xD;
         HttpSession session = request.getSession(false);&#xD;
         if (session == null || session.getAttribute(&quot;currentUser&quot;) == null) {&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Sesiune invalidă. Vă rugăm să vă autentificați din nou.&quot;);&#xD;
             out.print(json.toString());&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);&#xD;
         int userTip = currentUser.getTip();&#xD;
         int userId = currentUser.getId();&#xD;
         int userDepartment = currentUser.getDepartament();&#xD;
         &#xD;
         // Verificare permisiuni&#xD;
         if (userTip != 0 &amp;&amp; userTip != 3) {&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Nu aveți permisiuni pentru această acțiune&quot;);&#xD;
             out.print(json.toString());&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Verificare parametri&#xD;
         String idAdeverintaStr = request.getParameter(&quot;id&quot;);&#xD;
         String statusStr = request.getParameter(&quot;status&quot;);&#xD;
         &#xD;
         if (idAdeverintaStr == null || statusStr == null) {&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Parametri lipsă sau invalizi&quot;);&#xD;
             out.print(json.toString());&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         int idAdeverinta;&#xD;
         int status;&#xD;
         &#xD;
         try {&#xD;
             idAdeverinta = Integer.parseInt(idAdeverintaStr);&#xD;
             status = Integer.parseInt(statusStr);&#xD;
         } catch (NumberFormatException e) {&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Format invalid pentru parametri&quot;);&#xD;
             out.print(json.toString());&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         Connection conn = null;&#xD;
         &#xD;
         try {&#xD;
             // Conectare la baza de date&#xD;
             Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
             conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
             conn.setAutoCommit(false); // Activăm tranzacțiile&#xD;
             &#xD;
             // Verificăm cererea și permisiunile&#xD;
             String checkSql = &quot;SELECT a.id_ang, a.status, u.id_dep, u.tip &quot; +&#xD;
                              &quot;FROM adeverinte a &quot; +&#xD;
                              &quot;JOIN useri u ON a.id_ang = u.id &quot; +&#xD;
                              &quot;WHERE a.id = ?&quot;;&#xD;
                              &#xD;
             boolean allowedToProcess = false;&#xD;
             int idAngajat = 0;&#xD;
             int currentStatus = 0;&#xD;
             int angajatDep = 0;&#xD;
             int angajatTip = 0;&#xD;
             &#xD;
             try (PreparedStatement checkStmt = conn.prepareStatement(checkSql)) {&#xD;
                 checkStmt.setInt(1, idAdeverinta);&#xD;
                 &#xD;
                 try (ResultSet rs = checkStmt.executeQuery()) {&#xD;
                     if (rs.next()) {&#xD;
                         idAngajat = rs.getInt(&quot;id_ang&quot;);&#xD;
                         currentStatus = rs.getInt(&quot;status&quot;);&#xD;
                         angajatDep = rs.getInt(&quot;id_dep&quot;);&#xD;
                         angajatTip = rs.getInt(&quot;tip&quot;);&#xD;
                         &#xD;
                         // Verificare permisiuni&#xD;
                         if (userTip == 3) { // Șef de departament&#xD;
                             // Verificăm dacă adeverința aparține unui angajat din departamentul șefului&#xD;
                             if (angajatDep == userDepartment) {&#xD;
                                 // Verificăm dacă status-ul actual este 0 (neprocesat) &#xD;
                                 // și dacă noul status este 1 (aprobat) sau -1 (respins)&#xD;
                                 if (currentStatus == 0 &amp;&amp; (status == 1 || status == -1)) {&#xD;
                                     allowedToProcess = true;&#xD;
                                 }&#xD;
                             }&#xD;
                         } else if (userTip == 0) { // Director&#xD;
                             // Directorul poate aproba sau respinge orice cerere&#xD;
                             allowedToProcess = true;&#xD;
                         }&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             if (!allowedToProcess) {&#xD;
                 json.put(&quot;success&quot;, false);&#xD;
                 json.put(&quot;message&quot;, &quot;Nu aveți permisiunea de a procesa această cerere sau cererea nu există&quot;);&#xD;
                 out.print(json.toString());&#xD;
                 conn.rollback();&#xD;
                 return;&#xD;
             }&#xD;
             &#xD;
             // Actualizare status adeverință&#xD;
             String sql = &quot;UPDATE adeverinte SET status = ?, modif = CURDATE() WHERE id = ?&quot;;&#xD;
             try (PreparedStatement pstmt = conn.prepareStatement(sql)) {&#xD;
                 pstmt.setInt(1, status);&#xD;
                 pstmt.setInt(2, idAdeverinta);&#xD;
                 int rowsUpdated = pstmt.executeUpdate();&#xD;
                 &#xD;
                 if (rowsUpdated == 0) {&#xD;
                     json.put(&quot;success&quot;, false);&#xD;
                     json.put(&quot;message&quot;, &quot;Adeverința nu a putut fi actualizată&quot;);&#xD;
                     conn.rollback();&#xD;
                     out.print(json.toString());&#xD;
                     return;&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             // Notificare utilizator (opțional)&#xD;
             String notifSql = &quot;INSERT INTO notificari_general (id_destinatar, tip, mesaj) VALUES (?, ?, ?)&quot;;&#xD;
             try (PreparedStatement notifStmt = conn.prepareStatement(notifSql)) {&#xD;
                 String mesaj = &quot;&quot;;&#xD;
                 if (status == 1) {&#xD;
                     mesaj = &quot;Cererea dumneavoastră de adeverință a fost aprobată de șeful de departament și așteaptă aprobarea finală&quot;;&#xD;
                 } else if (status == 2) {&#xD;
                     mesaj = &quot;Cererea dumneavoastră de adeverință a fost aprobată final și poate fi descărcată&quot;;&#xD;
                 } else if (status &lt; 0) {&#xD;
                     mesaj = &quot;Cererea dumneavoastră de adeverință a fost respinsă&quot;;&#xD;
                 }&#xD;
                 &#xD;
                 notifStmt.setInt(1, idAngajat);&#xD;
                 notifStmt.setString(2, &quot;STATUS_ADEVERINTA&quot;);&#xD;
                 notifStmt.setString(3, mesaj);&#xD;
                 &#xD;
                 try {&#xD;
                     notifStmt.executeUpdate();&#xD;
                 } catch (SQLException e) {&#xD;
                     // Ignorăm erorile de notificare - probabil tabela nu există&#xD;
                     System.out.println(&quot;Avertisment: notificarea nu a putut fi trimisă: &quot; + e.getMessage());&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             conn.commit();&#xD;
             json.put(&quot;success&quot;, true);&#xD;
             &#xD;
             if (status > 0) {&#xD;
                 json.put(&quot;message&quot;, &quot;Cererea a fost aprobată cu succes!&quot;);&#xD;
             } else {&#xD;
                 json.put(&quot;message&quot;, &quot;Cererea a fost respinsă cu succes!&quot;);&#xD;
             }&#xD;
             &#xD;
         } catch (Exception e) {&#xD;
             try {&#xD;
                 if (conn != null) {&#xD;
                     conn.rollback();&#xD;
                 }&#xD;
             } catch (SQLException ex) {&#xD;
                 ex.printStackTrace();&#xD;
             }&#xD;
             &#xD;
             e.printStackTrace();&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Eroare la procesare: &quot; + e.getMessage());&#xD;
         } finally {&#xD;
             if (conn != null) {&#xD;
                 try { &#xD;
                     conn.setAutoCommit(true);&#xD;
                     conn.close(); &#xD;
                 } catch (SQLException e) { &#xD;
                     e.printStackTrace(); &#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         out.print(json.toString());&#xD;
         out.flush();&#xD;
     </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_DPj0VdEfCS7cth2SLu0w" name="notificaDirector" specification="_Vt6cM0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_DPkEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_DPkUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// Verificăm și creăm tabela dacă nu există&#xD;
     createNotificationsTableIfNeeded(conn);&#xD;
     &#xD;
     // Găsește directorul&#xD;
     String sql = &quot;SELECT id FROM useri WHERE tip = 0&quot;;&#xD;
     try (PreparedStatement pstmt = conn.prepareStatement(sql)) {&#xD;
         try (ResultSet rs = pstmt.executeQuery()) {&#xD;
             if (rs.next()) {&#xD;
                 int idDirector = rs.getInt(&quot;id&quot;);&#xD;
                 &#xD;
                 // Obține informații despre cerere pentru un mesaj mai descriptiv&#xD;
                 String adeverintaInfo = getAdeverintaInfo(conn, idAdeverinta);&#xD;
                 &#xD;
                 // Trimite notificare&#xD;
                 String notifSql = &quot;INSERT INTO notificari_general (id_destinatar, tip, mesaj) &quot; +&#xD;
                                 &quot;VALUES (?, 'APROBARE_ADEVERINTA', ?)&quot;;&#xD;
                 try (PreparedStatement notifPstmt = conn.prepareStatement(notifSql)) {&#xD;
                     notifPstmt.setInt(1, idDirector);&#xD;
                     notifPstmt.setString(2, &quot;Aveți o adeverință nouă de aprobat: &quot; + adeverintaInfo);&#xD;
                     notifPstmt.executeUpdate();&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_DPkkVdEfCS7cth2SLu0w" name="notificaAngajat" specification="_Vt6cNkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_DPk0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_DPlEVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_DPlUVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_DPlkVdEfCS7cth2SLu0w" name="status">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// Verificăm și creăm tabela dacă nu există&#xD;
     createNotificationsTableIfNeeded(conn);&#xD;
     &#xD;
     // Obține informații despre cerere pentru un mesaj mai descriptiv&#xD;
     String adeverintaInfo = getAdeverintaInfo(conn, idAdeverinta);&#xD;
     String mesaj = &quot;&quot;;&#xD;
     &#xD;
     switch (status) {&#xD;
         case 1:&#xD;
             mesaj = &quot;Cererea dumneavoastră de adeverință a fost aprobată de șeful de departament și așteaptă aprobarea directorului: &quot; + adeverintaInfo;&#xD;
             break;&#xD;
         case 2:&#xD;
             mesaj = &quot;Cererea dumneavoastră de adeverință a fost aprobată și este disponibilă pentru descărcare: &quot; + adeverintaInfo;&#xD;
             break;&#xD;
         case -1:&#xD;
             mesaj = &quot;Cererea dumneavoastră de adeverință a fost respinsă: &quot; + adeverintaInfo;&#xD;
             break;&#xD;
         case -2:&#xD;
             mesaj = &quot;Cererea dumneavoastră de adeverință a fost respinsă de director: &quot; + adeverintaInfo;&#xD;
             break;&#xD;
         default:&#xD;
             mesaj = &quot;Status-ul cererii dumneavoastră de adeverință a fost actualizat: &quot; + adeverintaInfo;&#xD;
     }&#xD;
     &#xD;
     // Trimite notificare&#xD;
     String notifSql = &quot;INSERT INTO notificari_general (id_destinatar, tip, mesaj) &quot; +&#xD;
                      &quot;VALUES (?, 'STATUS_ADEVERINTA', ?)&quot;;&#xD;
     try (PreparedStatement notifPstmt = conn.prepareStatement(notifSql)) {&#xD;
         notifPstmt.setInt(1, idAngajat);&#xD;
         notifPstmt.setString(2, mesaj);&#xD;
         notifPstmt.executeUpdate();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_D2kEVdEfCS7cth2SLu0w" name="getAdeverintaInfo" specification="_Vt7DQ0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_D2kUVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_D2kkVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_D2k0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>// Obține detalii despre adeverință pentru mesaje mai descriptive&#xD;
     String info = &quot;&quot;;&#xD;
     String sql = &quot;SELECT ta.denumire, a.pentru_servi &quot; +&#xD;
                 &quot;FROM adeverinte a &quot; +&#xD;
                 &quot;JOIN tip_adev ta ON a.tip = ta.id &quot; +&#xD;
                 &quot;WHERE a.id = ?&quot;;&#xD;
     &#xD;
     try (PreparedStatement pstmt = conn.prepareStatement(sql)) {&#xD;
         pstmt.setInt(1, idAdeverinta);&#xD;
         try (ResultSet rs = pstmt.executeQuery()) {&#xD;
             if (rs.next()) {&#xD;
                 info = rs.getString(&quot;denumire&quot;) + &quot; pentru &quot; + rs.getString(&quot;pentru_servi&quot;);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     return info;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_D2lEVdEfCS7cth2SLu0w" name="createNotificationsTableIfNeeded" specification="_Vt7qUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_D2lUVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Verifică dacă tabela notificari_general există&#xD;
     try (PreparedStatement checkStmt = conn.prepareStatement(&quot;SHOW TABLES LIKE 'notificari_general'&quot;)) {&#xD;
         ResultSet rs = checkStmt.executeQuery();&#xD;
         if (!rs.next()) {&#xD;
             // Dacă tabela nu există, o creăm&#xD;
             try (PreparedStatement createStmt = conn.prepareStatement(&#xD;
                     &quot;CREATE TABLE notificari_general (&quot; +&#xD;
                     &quot;id INT AUTO_INCREMENT PRIMARY KEY, &quot; +&#xD;
                     &quot;id_destinatar INT NOT NULL, &quot; +&#xD;
                     &quot;tip VARCHAR(50) NOT NULL, &quot; +&#xD;
                     &quot;mesaj VARCHAR(255) NOT NULL, &quot; +&#xD;
                     &quot;data_creare TIMESTAMP DEFAULT CURRENT_TIMESTAMP, &quot; +&#xD;
                     &quot;citit BOOLEAN DEFAULT FALSE, &quot; +&#xD;
                     &quot;FOREIGN KEY (id_destinatar) REFERENCES useri(id))&quot;)) {&#xD;
                 createStmt.executeUpdate();&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vt51IkVdEfCS7cth2SLu0w" name="genereazaAdeverinta" method="_V_DPiEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vt51I0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vt51JEVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vt51JUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vt6cMEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_DPjEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vt6cMUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vt6cMkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vt6cM0VdEfCS7cth2SLu0w" name="notificaDirector" visibility="private" method="_V_DPj0VdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vt6cNEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vt6cNUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vt6cNkVdEfCS7cth2SLu0w" name="notificaAngajat" visibility="private" method="_V_DPkkVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vt6cN0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vt7DQEVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vt7DQUVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vt7DQkVdEfCS7cth2SLu0w" name="status">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vt7DQ0VdEfCS7cth2SLu0w" name="getAdeverintaInfo" visibility="private" method="_V_D2kEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vt7DREVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vt7DRUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vt7DRkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vt7qUEVdEfCS7cth2SLu0w" name="createNotificationsTableIfNeeded" visibility="private" method="_V_D2lEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vt7qUUVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vt8RYEVdEfCS7cth2SLu0w" name="PromovareServlet">
        <generalization xmi:id="_Vt8RZEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_D2lkVdEfCS7cth2SLu0w" name="doPost" specification="_Vt8RYUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_D2l0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_D2mEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String tipPromovare = request.getParameter(&quot;tip_promovare&quot;);&#xD;
     String[] angajatiId = request.getParameterValues(&quot;angajat_id&quot;);&#xD;
     &#xD;
     if (angajatiId == null || angajatiId.length == 0) {&#xD;
         response.sendRedirect(&quot;promovare.jsp?error=noSelection&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Încărcare driver MySQL&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Creare conexiune directă&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         conn.setAutoCommit(false);&#xD;
         &#xD;
         for (String idStr : angajatiId) {&#xD;
             int idAng = Integer.parseInt(idStr);&#xD;
             int functieNoua = Integer.parseInt(request.getParameter(&quot;functie_noua_&quot; + idStr));&#xD;
             &#xD;
             // Actualizare funcție angajat&#xD;
             String sql = &quot;UPDATE useri SET tip = ?, data_modif = CURDATE() WHERE id = ?&quot;;&#xD;
             PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
             pstmt.setInt(1, functieNoua);&#xD;
             pstmt.setInt(2, idAng);&#xD;
             pstmt.executeUpdate();&#xD;
             &#xD;
             // Înregistrare istoric promovare&#xD;
             sql = &quot;INSERT INTO istoric_promovari (id_ang, tip_vechi, tip_nou, tip_promovare, data_promovare) &quot; +&#xD;
                   &quot;SELECT id, tip, ?, ?, CURDATE() FROM useri WHERE id = ?&quot;;&#xD;
             pstmt = conn.prepareStatement(sql);&#xD;
             pstmt.setInt(1, functieNoua);&#xD;
             pstmt.setString(2, tipPromovare);&#xD;
             pstmt.setInt(3, idAng);&#xD;
             pstmt.executeUpdate();&#xD;
             &#xD;
             pstmt.close();&#xD;
         }&#xD;
         &#xD;
         conn.commit();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	        PrintWriter out = response.getWriter();&#xD;
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
	        out.println(&quot;alert('Promovare cu succes!');&quot;);&#xD;
	        out.println(&quot;window.location.href = 'promovare.jsp';&quot;);&#xD;
	        out.println(&quot;&lt;/script>&quot;);&#xD;
	        out.close();&#xD;
	        return; &#xD;
         &#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	        PrintWriter out = response.getWriter();&#xD;
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
	        out.println(&quot;alert('Nu s-a putut promova!');&quot;);&#xD;
	        out.println(&quot;window.location.href = 'promovare.jsp?error=driverError';&quot;);&#xD;
	        out.println(&quot;&lt;/script>&quot;);&#xD;
	        out.close();&#xD;
	        return; &#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             ex.printStackTrace();&#xD;
         }&#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	        PrintWriter out = response.getWriter();&#xD;
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
	        out.println(&quot;alert('Nu s-a putut promova!');&quot;);&#xD;
	        out.println(&quot;window.location.href = 'promovare.jsp?error=true';&quot;);&#xD;
	        out.println(&quot;&lt;/script>&quot;);&#xD;
	        out.close();&#xD;
	        return; &#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { &#xD;
                 conn.setAutoCommit(true);&#xD;
                 conn.close(); &#xD;
             } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vt8RYUVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_D2lkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vt8RYkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vt8RY0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vt84cEVdEfCS7cth2SLu0w" name="RemoveMembruEchipaServlet">
        <generalization xmi:id="_Vt84dEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-RMYEVdEfCS7cth2SLu0w" name="DB_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-RMYUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-RMYkVdEfCS7cth2SLu0w" name="DB_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-RMY0VdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-RMZEVdEfCS7cth2SLu0w" name="DB_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-RMZUVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_D2mUVdEfCS7cth2SLu0w" name="doPost" specification="_Vt84cUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_D2mkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_D2m0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession();&#xD;
&#xD;
     int idMembru = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection to delete the member from membrii_echipe&#xD;
         try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {&#xD;
             // Delete the record from membrii_echipe&#xD;
             String sql = &quot;DELETE FROM membrii_echipe WHERE id = ?&quot;;&#xD;
             &#xD;
             try (PreparedStatement pstmt = conn.prepareStatement(sql)) {&#xD;
                 pstmt.setInt(1, idMembru);&#xD;
                 &#xD;
                 int rowsAffected = pstmt.executeUpdate();&#xD;
                 &#xD;
                 if (rowsAffected > 0) {&#xD;
                     // Returnează un răspuns JSON de succes&#xD;
                     response.setContentType(&quot;application/json&quot;);&#xD;
                     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
                     response.getWriter().write(&quot;{\&quot;success\&quot;: true, \&quot;message\&quot;: \&quot;Membrul a fost eliminat cu succes din echipă.\&quot;}&quot;);&#xD;
                     getServletContext().log(&quot;Membru eliminat cu succes: &quot; + idMembru);&#xD;
                 } else {&#xD;
                     // Returnează un răspuns JSON de eroare&#xD;
                     response.setContentType(&quot;application/json&quot;);&#xD;
                     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
                     response.getWriter().write(&quot;{\&quot;success\&quot;: false, \&quot;message\&quot;: \&quot;Nu s-a putut elimina membrul din echipă.\&quot;}&quot;);&#xD;
                     getServletContext().log(&quot;Eroare la eliminarea membrului: &quot; + idMembru + &quot; - niciun rând afectat&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;JDBC Driver not found&quot;, e);&#xD;
         &#xD;
         // Returnează un răspuns JSON de eroare&#xD;
         response.setContentType(&quot;application/json&quot;);&#xD;
         response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
         response.getWriter().write(&quot;{\&quot;success\&quot;: false, \&quot;message\&quot;: \&quot;Eroare la încărcarea driver-ului JDBC.\&quot;}&quot;);&#xD;
     } catch (SQLException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Database error&quot;, e);&#xD;
         &#xD;
         // Returnează un răspuns JSON de eroare&#xD;
         response.setContentType(&quot;application/json&quot;);&#xD;
         response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
         response.getWriter().write(&quot;{\&quot;success\&quot;: false, \&quot;message\&quot;: \&quot;Eroare la baza de date: &quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
     } catch (Exception e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Unexpected error&quot;, e);&#xD;
         &#xD;
         // Returnează un răspuns JSON de eroare&#xD;
         response.setContentType(&quot;application/json&quot;);&#xD;
         response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
         response.getWriter().write(&quot;{\&quot;success\&quot;: false, \&quot;message\&quot;: \&quot;Eroare neașteptată: &quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vt84cUVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_D2mUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vt84ckVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vt84c0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vt9fgEVdEfCS7cth2SLu0w" name="ReportExportServlet">
        <generalization xmi:id="_Vt_7wEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-RMZkVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-RMZ0VdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-RMaEVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-RMaUVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-RzcEVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-RzcUVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_D2nEVdEfCS7cth2SLu0w" name="doGet" specification="_Vt-GkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_D2nUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_D2nkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;currentUser&quot;) == null) {&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     String exportType = request.getParameter(&quot;export&quot;);&#xD;
     String reportType = request.getParameter(&quot;type&quot;);&#xD;
&#xD;
     // 2) Încărcare driver JDBC și deschidere conexiune&#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         throw new ServletException(&quot;Driver JDBC neidentificat!&quot;, e);&#xD;
     }&#xD;
&#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
         if (&quot;pdf&quot;.equalsIgnoreCase(exportType)) {&#xD;
             exportToPDF(request, response, reportType, conn);&#xD;
         } else if (&quot;excel&quot;.equalsIgnoreCase(exportType)) {&#xD;
             exportToExcel(request, response, reportType, conn);&#xD;
         } else {&#xD;
             response.sendError(HttpServletResponse.SC_BAD_REQUEST, &quot;Tip de export necunoscut&quot;);&#xD;
         }&#xD;
     } catch (SQLException e) {&#xD;
         throw new ServletException(&quot;Eroare la conectarea cu BD: &quot; + e.getMessage(), e);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_D2n0VdEfCS7cth2SLu0w" name="exportToPDF" specification="_Vt-tokVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_D2oEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_D2oUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_D2okVdEfCS7cth2SLu0w" name="reportType">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_D2o0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/pdf&quot;);&#xD;
     response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot; + reportType + &quot;_report.pdf&quot;);&#xD;
&#xD;
     try {&#xD;
         Document document = new Document();&#xD;
         PdfWriter.getInstance(document, response.getOutputStream());&#xD;
         document.open();&#xD;
&#xD;
         // Titlu&#xD;
         com.itextpdf.text.Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18);&#xD;
         Paragraph title = new Paragraph(&quot;Raport &quot; + reportType.toUpperCase(), titleFont);&#xD;
         title.setAlignment(Element.ALIGN_CENTER);&#xD;
         document.add(title);&#xD;
         document.add(Chunk.NEWLINE);&#xD;
&#xD;
         // Data generării&#xD;
         com.itextpdf.text.Font dateFont = FontFactory.getFont(FontFactory.HELVETICA, 12);&#xD;
         document.add(new Paragraph(&quot;Generat la: &quot; + new java.util.Date(), dateFont));&#xD;
         document.add(Chunk.NEWLINE);&#xD;
&#xD;
         // Conținut specific&#xD;
         switch (reportType) {&#xD;
             case &quot;recruitment&quot;:&#xD;
                 addRecruitmentReportContent(document, conn);&#xD;
                 break;&#xD;
             case &quot;leave&quot;:&#xD;
                 addLeaveReportContent(document, conn);&#xD;
                 break;&#xD;
             case &quot;employee&quot;:&#xD;
                 addEmployeeReportContent(document, conn);&#xD;
                 break;&#xD;
             case &quot;department&quot;:&#xD;
                 addDepartmentReportContent(document, conn);&#xD;
                 break;&#xD;
             default:&#xD;
                 document.add(new Paragraph(&quot;Tip de raport necunoscut.&quot;));&#xD;
         }&#xD;
&#xD;
         document.close();&#xD;
     } catch (DocumentException | SQLException e) {&#xD;
         throw new IOException(&quot;Eroare la generarea PDF-ului: &quot; + e.getMessage(), e);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_EdoEVdEfCS7cth2SLu0w" name="exportToExcel" specification="_Vt-tp0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_EdoUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_EdokVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Edo0VdEfCS7cth2SLu0w" name="reportType">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_EdpEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&#xD;
&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;);&#xD;
response.setHeader(&quot;Content-Disposition&quot;,&#xD;
&quot;attachment; filename=&quot; + reportType + &quot;_report.xlsx&quot;);&#xD;
&#xD;
XSSFWorkbook workbook = new XSSFWorkbook();&#xD;
try {&#xD;
XSSFSheet sheet = workbook.createSheet(reportType + &quot; Report&quot;);&#xD;
&#xD;
switch (reportType) {&#xD;
case &quot;recruitment&quot;:&#xD;
 createRecruitmentExcelReport(workbook, sheet, conn);&#xD;
 break;&#xD;
case &quot;leave&quot;:&#xD;
 createLeaveExcelReport(workbook, sheet, conn);&#xD;
 break;&#xD;
case &quot;employee&quot;:&#xD;
 createEmployeeExcelReport(workbook, sheet, conn);&#xD;
 break;&#xD;
case &quot;department&quot;:&#xD;
 createDepartmentExcelReport(workbook, sheet, conn);&#xD;
 break;&#xD;
default:&#xD;
 // sheet empty&#xD;
}&#xD;
&#xD;
workbook.write(response.getOutputStream());&#xD;
} catch (SQLException e) {&#xD;
throw new IOException(&quot;Eroare la generarea Excel-ului: &quot; + e.getMessage(), e);&#xD;
} finally {&#xD;
// Închide manual workbook-ul&#xD;
try {&#xD;
	((Connection) workbook).close();&#xD;
} catch (SQLException e) {&#xD;
	// TODO Auto-generated catch block&#xD;
	e.printStackTrace();&#xD;
}&#xD;
}&#xD;
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_EdpUVdEfCS7cth2SLu0w" name="createRecruitmentExcelReport" specification="_V9VYQEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_EdpkVdEfCS7cth2SLu0w" name="workbook" type="_V8oNo0VdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Edp0VdEfCS7cth2SLu0w" name="sheet" type="_V8oNoUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_EdqEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Configurăm headerul&#xD;
     Row header = sheet.createRow(0);&#xD;
     CellStyle headerStyle = workbook.createCellStyle();&#xD;
     Font headerFont = workbook.createFont();&#xD;
     headerFont.setBoldweight((short)0);&#xD;
     headerStyle.setFont(headerFont);&#xD;
     &#xD;
     header.createCell(0).setCellValue(&quot;Lună&quot;);&#xD;
     header.getCell(0).setCellStyle(headerStyle);&#xD;
     header.createCell(1).setCellValue(&quot;Număr aplicații&quot;);&#xD;
     header.getCell(1).setCellStyle(headerStyle);&#xD;
     header.createCell(2).setCellValue(&quot;Departament&quot;);&#xD;
     header.getCell(2).setCellStyle(headerStyle);&#xD;
     header.createCell(3).setCellValue(&quot;Poziție&quot;);&#xD;
     header.getCell(3).setCellStyle(headerStyle);&#xD;
     &#xD;
     // Configurăm autosize pentru coloane&#xD;
     sheet.setColumnWidth(0, 3000);&#xD;
     sheet.setColumnWidth(1, 4000);&#xD;
     sheet.setColumnWidth(2, 6000);&#xD;
     sheet.setColumnWidth(3, 5000);&#xD;
     &#xD;
     String sql = &quot;SELECT MONTH(a.data_apl) AS luna, COUNT(*) AS cnt, d.nume_dep, t.denumire &quot; +&#xD;
                  &quot;FROM aplicari a &quot; +&#xD;
                  &quot;JOIN joburi j ON a.job_id = j.id &quot; +&#xD;
                  &quot;JOIN departament d ON j.departament = d.id_dep &quot; +&#xD;
                  &quot;JOIN tipuri t ON j.pozitie = t.tip &quot; +&#xD;
                  &quot;GROUP BY MONTH(a.data_apl), d.nume_dep, t.denumire &quot; +&#xD;
                  &quot;ORDER BY luna, d.nume_dep&quot;;&#xD;
     &#xD;
     try (PreparedStatement ps = conn.prepareStatement(sql);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         int rowNum = 1;&#xD;
         while (rs.next()) {&#xD;
             Row row = sheet.createRow(rowNum++);&#xD;
             row.createCell(0).setCellValue(rs.getInt(&quot;luna&quot;));&#xD;
             row.createCell(1).setCellValue(rs.getInt(&quot;cnt&quot;));&#xD;
             row.createCell(2).setCellValue(rs.getString(&quot;nume_dep&quot;));&#xD;
             row.createCell(3).setCellValue(rs.getString(&quot;denumire&quot;));&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_EdqUVdEfCS7cth2SLu0w" name="createLeaveExcelReport" specification="_V9V_UEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_EdqkVdEfCS7cth2SLu0w" name="workbook" type="_V8oNo0VdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Edq0VdEfCS7cth2SLu0w" name="sheet" type="_V8oNoUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_EdrEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Configurăm headerul&#xD;
     Row header = sheet.createRow(0);&#xD;
     CellStyle headerStyle = workbook.createCellStyle();&#xD;
     Font headerFont = workbook.createFont();&#xD;
     headerFont.setBoldweight((short)0);&#xD;
     headerStyle.setFont(headerFont);&#xD;
     &#xD;
     header.createCell(0).setCellValue(&quot;Angajat&quot;);&#xD;
     header.getCell(0).setCellStyle(headerStyle);&#xD;
     header.createCell(1).setCellValue(&quot;Total zile&quot;);&#xD;
     header.getCell(1).setCellStyle(headerStyle);&#xD;
     header.createCell(2).setCellValue(&quot;Număr concedii&quot;);&#xD;
     header.getCell(2).setCellStyle(headerStyle);&#xD;
     header.createCell(3).setCellValue(&quot;Departament&quot;);&#xD;
     header.getCell(3).setCellStyle(headerStyle);&#xD;
     header.createCell(4).setCellValue(&quot;Tip concediu predominant&quot;);&#xD;
     header.getCell(4).setCellStyle(headerStyle);&#xD;
     &#xD;
     // Configurăm autosize pentru coloane&#xD;
     for (int i = 0; i &lt; 5; i++) {&#xD;
         sheet.setColumnWidth(i, 4500);&#xD;
     }&#xD;
     &#xD;
     String sql = &quot;SELECT CONCAT(u.nume,' ',u.prenume) AS ang, &quot; +&#xD;
                  &quot;SUM(DATEDIFF(c.end_c, c.start_c) + 1) AS zile, &quot; +&#xD;
                  &quot;COUNT(*) AS cnt, &quot; +&#xD;
                  &quot;d.nume_dep, &quot; +&#xD;
                  &quot;(SELECT tc.motiv FROM concedii c2 &quot; +&#xD;
                  &quot; JOIN tipcon tc ON c2.tip = tc.tip &quot; +&#xD;
                  &quot; WHERE c2.id_ang = u.id &quot; +&#xD;
                  &quot; GROUP BY c2.tip &quot; +&#xD;
                  &quot; ORDER BY COUNT(*) DESC &quot; +&#xD;
                  &quot; LIMIT 1) AS tip_predominant &quot; +&#xD;
                  &quot;FROM concedii c &quot; +&#xD;
                  &quot;JOIN useri u ON c.id_ang = u.id &quot; +&#xD;
                  &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                  &quot;GROUP BY u.id, d.nume_dep &quot; +&#xD;
                  &quot;ORDER BY zile DESC&quot;;&#xD;
     &#xD;
     try (PreparedStatement ps = conn.prepareStatement(sql);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         int rowNum = 1;&#xD;
         while (rs.next()) {&#xD;
             Row row = sheet.createRow(rowNum++);&#xD;
             row.createCell(0).setCellValue(rs.getString(&quot;ang&quot;));&#xD;
             row.createCell(1).setCellValue(rs.getInt(&quot;zile&quot;));&#xD;
             row.createCell(2).setCellValue(rs.getInt(&quot;cnt&quot;));&#xD;
             row.createCell(3).setCellValue(rs.getString(&quot;nume_dep&quot;));&#xD;
             row.createCell(4).setCellValue(rs.getString(&quot;tip_predominant&quot;));&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_EdrUVdEfCS7cth2SLu0w" name="createEmployeeExcelReport" specification="_V9V_VEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_EdrkVdEfCS7cth2SLu0w" name="workbook" type="_V8oNo0VdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Edr0VdEfCS7cth2SLu0w" name="sheet" type="_V8oNoUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_EdsEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Configurăm headerul&#xD;
     Row header = sheet.createRow(0);&#xD;
     CellStyle headerStyle = workbook.createCellStyle();&#xD;
     Font headerFont = workbook.createFont();&#xD;
     headerFont.setBoldweight((short)0);&#xD;
     headerStyle.setFont(headerFont);&#xD;
     &#xD;
     header.createCell(0).setCellValue(&quot;ID&quot;);&#xD;
     header.getCell(0).setCellStyle(headerStyle);&#xD;
     header.createCell(1).setCellValue(&quot;Nume&quot;);&#xD;
     header.getCell(1).setCellStyle(headerStyle);&#xD;
     header.createCell(2).setCellValue(&quot;Prenume&quot;);&#xD;
     header.getCell(2).setCellStyle(headerStyle);&#xD;
     header.createCell(3).setCellValue(&quot;Email&quot;);&#xD;
     header.getCell(3).setCellStyle(headerStyle);&#xD;
     header.createCell(4).setCellValue(&quot;Telefon&quot;);&#xD;
     header.getCell(4).setCellStyle(headerStyle);&#xD;
     header.createCell(5).setCellValue(&quot;Departament&quot;);&#xD;
     header.getCell(5).setCellStyle(headerStyle);&#xD;
     header.createCell(6).setCellValue(&quot;Poziție&quot;);&#xD;
     header.getCell(6).setCellStyle(headerStyle);&#xD;
     header.createCell(7).setCellValue(&quot;Data angajării&quot;);&#xD;
     header.getCell(7).setCellStyle(headerStyle);&#xD;
     &#xD;
     // Configurăm autosize pentru coloane&#xD;
     for (int i = 0; i &lt; 8; i++) {&#xD;
         sheet.setColumnWidth(i, 3500 + (i * 500));&#xD;
     }&#xD;
     &#xD;
     String sql = &quot;SELECT u.id, u.nume, u.prenume, u.email, u.telefon, d.nume_dep, &quot; +&#xD;
                  &quot;t.denumire, u.data_ang &quot; +&#xD;
                  &quot;FROM useri u &quot; +&#xD;
                  &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                  &quot;JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                  &quot;WHERE u.activ = 1 &quot; +&#xD;
                  &quot;ORDER BY d.nume_dep, u.nume&quot;;&#xD;
     &#xD;
     try (PreparedStatement ps = conn.prepareStatement(sql);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         int rowNum = 1;&#xD;
         &#xD;
         CellStyle dateStyle = workbook.createCellStyle();&#xD;
         CreationHelper createHelper = workbook.getCreationHelper();&#xD;
         dateStyle.setDataFormat(createHelper.createDataFormat().getFormat(&quot;dd.MM.yyyy&quot;));&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             Row row = sheet.createRow(rowNum++);&#xD;
             row.createCell(0).setCellValue(rs.getInt(&quot;id&quot;));&#xD;
             row.createCell(1).setCellValue(rs.getString(&quot;nume&quot;));&#xD;
             row.createCell(2).setCellValue(rs.getString(&quot;prenume&quot;));&#xD;
             row.createCell(3).setCellValue(rs.getString(&quot;email&quot;));&#xD;
             row.createCell(4).setCellValue(rs.getString(&quot;telefon&quot;));&#xD;
             row.createCell(5).setCellValue(rs.getString(&quot;nume_dep&quot;));&#xD;
             row.createCell(6).setCellValue(rs.getString(&quot;denumire&quot;));&#xD;
             &#xD;
             Cell dateCell = row.createCell(7);&#xD;
             if (rs.getDate(&quot;data_ang&quot;) != null) {&#xD;
                 dateCell.setCellValue(rs.getDate(&quot;data_ang&quot;));&#xD;
                 dateCell.setCellStyle(dateStyle);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_EdsUVdEfCS7cth2SLu0w" name="createDepartmentExcelReport" specification="_V9V_WEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_EdskVdEfCS7cth2SLu0w" name="workbook" type="_V8oNo0VdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Eds0VdEfCS7cth2SLu0w" name="sheet" type="_V8oNoUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_EdtEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Configurăm headerul&#xD;
     Row header = sheet.createRow(0);&#xD;
     CellStyle headerStyle = workbook.createCellStyle();&#xD;
     Font headerFont = workbook.createFont();&#xD;
     headerFont.setBoldweight((short) 0);&#xD;
     headerStyle.setFont(headerFont);&#xD;
     &#xD;
     header.createCell(0).setCellValue(&quot;Departament&quot;);&#xD;
     header.getCell(0).setCellStyle(headerStyle);&#xD;
     header.createCell(1).setCellValue(&quot;Număr angajați&quot;);&#xD;
     header.getCell(1).setCellStyle(headerStyle);&#xD;
     header.createCell(2).setCellValue(&quot;Salariu mediu&quot;);&#xD;
     header.getCell(2).setCellStyle(headerStyle);&#xD;
     header.createCell(3).setCellValue(&quot;Vechime medie (zile)&quot;);&#xD;
     header.getCell(3).setCellStyle(headerStyle);&#xD;
     header.createCell(4).setCellValue(&quot;Manager&quot;);&#xD;
     header.getCell(4).setCellStyle(headerStyle);&#xD;
     &#xD;
     // Configurăm autosize pentru coloane&#xD;
     for (int i = 0; i &lt; 5; i++) {&#xD;
         sheet.setColumnWidth(i, 4000 + (i * 300));&#xD;
     }&#xD;
     &#xD;
     String sql = &quot;SELECT d.id_dep, d.nume_dep, COUNT(*) AS cnt, &quot; +&#xD;
                  &quot;AVG(u.salariu_brut) AS salariu_mediu, &quot; +&#xD;
                  &quot;AVG(DATEDIFF(CURDATE(), u.data_ang)) AS vechime_medie, &quot; +&#xD;
                  &quot;(SELECT CONCAT(u2.nume, ' ', u2.prenume) FROM useri u2 &quot; +&#xD;
                  &quot; WHERE u2.id_dep = d.id_dep AND u2.tip IN (0, 3, 4, 10) &quot; + &#xD;
                  &quot; ORDER BY u2.tip LIMIT 1) AS manager &quot; +&#xD;
                  &quot;FROM departament d &quot; +&#xD;
                  &quot;LEFT JOIN useri u ON d.id_dep = u.id_dep &quot; +&#xD;
                  &quot;WHERE u.activ = 1 &quot; +&#xD;
                  &quot;GROUP BY d.id_dep, d.nume_dep &quot; +&#xD;
                  &quot;ORDER BY cnt DESC&quot;;&#xD;
     &#xD;
     try (PreparedStatement ps = conn.prepareStatement(sql);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         int rowNum = 1;&#xD;
         &#xD;
         // Stil pentru formatarea valorilor monetare&#xD;
         CellStyle currencyStyle = workbook.createCellStyle();&#xD;
         DataFormat format = workbook.createDataFormat();&#xD;
         currencyStyle.setDataFormat(format.getFormat(&quot;#,##0.00 RON&quot;));&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             Row row = sheet.createRow(rowNum++);&#xD;
             row.createCell(0).setCellValue(rs.getString(&quot;nume_dep&quot;));&#xD;
             row.createCell(1).setCellValue(rs.getInt(&quot;cnt&quot;));&#xD;
             &#xD;
             Cell salariuCell = row.createCell(2);&#xD;
             salariuCell.setCellValue(rs.getDouble(&quot;salariu_mediu&quot;));&#xD;
             salariuCell.setCellStyle(currencyStyle);&#xD;
             &#xD;
             row.createCell(3).setCellValue(rs.getDouble(&quot;vechime_medie&quot;));&#xD;
             row.createCell(4).setCellValue(rs.getString(&quot;manager&quot;));&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_EdtUVdEfCS7cth2SLu0w" name="addDepartmentReportContent" specification="_V9XNckVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_EdtkVdEfCS7cth2SLu0w" name="doc" type="_V9WmYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Edt0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Exemplu: tabel cu număr angajați pe departament&#xD;
     PdfPTable table = new PdfPTable(2);&#xD;
     table.addCell(&quot;Departament&quot;);&#xD;
     table.addCell(&quot;Număr angajați&quot;);&#xD;
&#xD;
     String sql = &quot;SELECT d.nume_dep, COUNT(*) AS cnt &quot; +&#xD;
                  &quot;FROM useri u JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                  &quot;GROUP BY d.nume_dep&quot;;&#xD;
     try (PreparedStatement ps = conn.prepareStatement(sql);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         while (rs.next()) {&#xD;
             table.addCell(rs.getString(&quot;nume_dep&quot;));&#xD;
             table.addCell(String.valueOf(rs.getInt(&quot;cnt&quot;)));&#xD;
         }&#xD;
     }&#xD;
     doc.add(table);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_EduEVdEfCS7cth2SLu0w" name="addEmployeeReportContent" specification="_V9XNdUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_EduUVdEfCS7cth2SLu0w" name="doc" type="_V9WmYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_EdukVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Exemplu: listă angajați activi&#xD;
     Paragraph p = new Paragraph(&quot;Listă angajați activi:&quot;);&#xD;
     doc.add(p);&#xD;
     PdfPTable table = new PdfPTable(3);&#xD;
     table.addCell(&quot;ID&quot;);&#xD;
     table.addCell(&quot;Nume&quot;);&#xD;
     table.addCell(&quot;Departament&quot;);&#xD;
&#xD;
     String sql = &quot;SELECT u.id, u.nume, d.nume_dep &quot; +&#xD;
                  &quot;FROM useri u JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                  &quot;WHERE u.activ = 1&quot;;&#xD;
     try (PreparedStatement ps = conn.prepareStatement(sql);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         while (rs.next()) {&#xD;
             table.addCell(String.valueOf(rs.getInt(&quot;id&quot;)));&#xD;
             table.addCell(rs.getString(&quot;nume&quot;));&#xD;
             table.addCell(rs.getString(&quot;nume_dep&quot;));&#xD;
         }&#xD;
     }&#xD;
     doc.add(table);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Edu0VdEfCS7cth2SLu0w" name="addLeaveReportContent" specification="_V9X0gkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_EdvEVdEfCS7cth2SLu0w" name="doc" type="_V9WmYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_EdvUVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Exemplu: zile de concediu per angajat&#xD;
     Paragraph p = new Paragraph(&quot;Zile concediu per angajat:&quot;);&#xD;
     doc.add(p);&#xD;
     PdfPTable table = new PdfPTable(3);&#xD;
     table.addCell(&quot;Angajat&quot;);&#xD;
     table.addCell(&quot;Total zile&quot;);&#xD;
     table.addCell(&quot;Număr concedii&quot;);&#xD;
&#xD;
     String sql = &quot;SELECT CONCAT(u.nume,' ',u.prenume) AS ang, &quot; +&#xD;
                  &quot;SUM(DATEDIFF(c.end_c, c.start_c)) AS zile, COUNT(*) AS cnt &quot; +&#xD;
                  &quot;FROM concedii c JOIN useri u ON c.id_ang = u.id &quot; +&#xD;
                  &quot;GROUP BY u.id&quot;;&#xD;
     try (PreparedStatement ps = conn.prepareStatement(sql);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         while (rs.next()) {&#xD;
             table.addCell(rs.getString(&quot;ang&quot;));&#xD;
             table.addCell(String.valueOf(rs.getInt(&quot;zile&quot;)));&#xD;
             table.addCell(String.valueOf(rs.getInt(&quot;cnt&quot;)));&#xD;
         }&#xD;
     }&#xD;
     doc.add(table);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_EdvkVdEfCS7cth2SLu0w" name="addRecruitmentReportContent" specification="_V9X0hUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Edv0VdEfCS7cth2SLu0w" name="doc" type="_V9WmYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_EdwEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Exemplu: aplicații lunare&#xD;
     Paragraph p = new Paragraph(&quot;Număr aplicații pe luni:&quot;);&#xD;
     doc.add(p);&#xD;
     PdfPTable table = new PdfPTable(2);&#xD;
     table.addCell(&quot;Lună&quot;);&#xD;
     table.addCell(&quot;Număr aplicații&quot;);&#xD;
&#xD;
     String sql = &quot;SELECT MONTH(a.data_apl) AS luna, COUNT(*) AS cnt &quot; +&#xD;
                  &quot;FROM aplicari a GROUP BY MONTH(a.data_apl)&quot;;&#xD;
     try (PreparedStatement ps = conn.prepareStatement(sql);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         while (rs.next()) {&#xD;
             table.addCell(String.valueOf(rs.getInt(&quot;luna&quot;)));&#xD;
             table.addCell(String.valueOf(rs.getInt(&quot;cnt&quot;)));&#xD;
         }&#xD;
     }&#xD;
     doc.add(table);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_FEsEVdEfCS7cth2SLu0w" name="createDepartmentExcelReport" specification="_V8pbwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_FEsUVdEfCS7cth2SLu0w" name="wb" type="_VuZkYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_FEskVdEfCS7cth2SLu0w" name="sheet" type="_VuN-MEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_FEs0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Row header = sheet.createRow(0);&#xD;
     header.createCell(0).setCellValue(&quot;Departament&quot;);&#xD;
     header.createCell(1).setCellValue(&quot;Număr angajați&quot;);&#xD;
&#xD;
     String sql = &quot;SELECT d.nume_dep, COUNT(*) AS cnt &quot; +&#xD;
                  &quot;FROM useri u JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                  &quot;GROUP BY d.nume_dep&quot;;&#xD;
     try (PreparedStatement ps = conn.prepareStatement(sql);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         int r = 1;&#xD;
         while (rs.next()) {&#xD;
             Row row = sheet.createRow(r++);&#xD;
             row.createCell(0).setCellValue(rs.getString(&quot;nume_dep&quot;));&#xD;
             row.createCell(1).setCellValue(rs.getInt(&quot;cnt&quot;));&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_FEtEVdEfCS7cth2SLu0w" name="createEmployeeExcelReport" specification="_V8pbxEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_FEtUVdEfCS7cth2SLu0w" name="wb" type="_VuZkYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_FEtkVdEfCS7cth2SLu0w" name="sheet" type="_VuN-MEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_FEt0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Row header = sheet.createRow(0);&#xD;
     header.createCell(0).setCellValue(&quot;ID&quot;);&#xD;
     header.createCell(1).setCellValue(&quot;Nume&quot;);&#xD;
     header.createCell(2).setCellValue(&quot;Departament&quot;);&#xD;
&#xD;
     String sql = &quot;SELECT u.id, u.nume, d.nume_dep &quot; +&#xD;
                  &quot;FROM useri u JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                  &quot;WHERE u.activ = 1&quot;;&#xD;
     try (PreparedStatement ps = conn.prepareStatement(sql);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         int r = 1;&#xD;
         while (rs.next()) {&#xD;
             Row row = sheet.createRow(r++);&#xD;
             row.createCell(0).setCellValue(rs.getInt(&quot;id&quot;));&#xD;
             row.createCell(1).setCellValue(rs.getString(&quot;nume&quot;));&#xD;
             row.createCell(2).setCellValue(rs.getString(&quot;nume_dep&quot;));&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_FEuEVdEfCS7cth2SLu0w" name="createLeaveExcelReport" specification="_V8pbyEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_FEuUVdEfCS7cth2SLu0w" name="wb" type="_VuZkYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_FEukVdEfCS7cth2SLu0w" name="sheet" type="_VuN-MEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_FEu0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Row header = sheet.createRow(0);&#xD;
     header.createCell(0).setCellValue(&quot;Angajat&quot;);&#xD;
     header.createCell(1).setCellValue(&quot;Total zile&quot;);&#xD;
     header.createCell(2).setCellValue(&quot;Număr concedii&quot;);&#xD;
&#xD;
     String sql = &quot;SELECT CONCAT(u.nume,' ',u.prenume) AS ang, &quot; +&#xD;
                  &quot;SUM(DATEDIFF(c.end_c, c.start_c)) AS zile, COUNT(*) AS cnt &quot; +&#xD;
                  &quot;FROM concedii c JOIN useri u ON c.id_ang = u.id &quot; +&#xD;
                  &quot;GROUP BY u.id&quot;;&#xD;
     try (PreparedStatement ps = conn.prepareStatement(sql);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         int r = 1;&#xD;
         while (rs.next()) {&#xD;
             Row row = sheet.createRow(r++);&#xD;
             row.createCell(0).setCellValue(rs.getString(&quot;ang&quot;));&#xD;
             row.createCell(1).setCellValue(rs.getInt(&quot;zile&quot;));&#xD;
             row.createCell(2).setCellValue(rs.getInt(&quot;cnt&quot;));&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_FEvEVdEfCS7cth2SLu0w" name="createRecruitmentExcelReport" specification="_V8pbzEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_FEvUVdEfCS7cth2SLu0w" name="wb" type="_VuZkYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_FEvkVdEfCS7cth2SLu0w" name="sheet" type="_VuN-MEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_FEv0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Row header = sheet.createRow(0);&#xD;
     header.createCell(0).setCellValue(&quot;Lună&quot;);&#xD;
     header.createCell(1).setCellValue(&quot;Număr aplicații&quot;);&#xD;
&#xD;
     String sql = &quot;SELECT MONTH(a.data_apl) AS luna, COUNT(*) AS cnt &quot; +&#xD;
                  &quot;FROM aplicari a GROUP BY MONTH(a.data_apl)&quot;;&#xD;
     try (PreparedStatement ps = conn.prepareStatement(sql);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         int r = 1;&#xD;
         while (rs.next()) {&#xD;
             Row row = sheet.createRow(r++);&#xD;
             row.createCell(0).setCellValue(rs.getInt(&quot;luna&quot;));&#xD;
             row.createCell(1).setCellValue(rs.getInt(&quot;cnt&quot;));&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vt-GkEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_D2nEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vt-GkUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vt-GkkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vt-tokVdEfCS7cth2SLu0w" name="exportToPDF" visibility="private" method="_V_D2n0VdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vt-to0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vt-tpEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vt-tpUVdEfCS7cth2SLu0w" name="reportType">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vt-tpkVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vt-tp0VdEfCS7cth2SLu0w" name="exportToExcel" visibility="private" method="_V_EdoEVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vt_UsEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vt_UsUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vt_UskVdEfCS7cth2SLu0w" name="reportType">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vt_Us0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8pbwEVdEfCS7cth2SLu0w" name="createDepartmentExcelReport" visibility="private" method="_V_FEsEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V8pbwUVdEfCS7cth2SLu0w" name="wb" type="_VuZkYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8pbwkVdEfCS7cth2SLu0w" name="sheet" type="_VuN-MEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8pbw0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8pbxEVdEfCS7cth2SLu0w" name="createEmployeeExcelReport" visibility="private" method="_V_FEtEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V8pbxUVdEfCS7cth2SLu0w" name="wb" type="_VuZkYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8pbxkVdEfCS7cth2SLu0w" name="sheet" type="_VuN-MEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8pbx0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8pbyEVdEfCS7cth2SLu0w" name="createLeaveExcelReport" visibility="private" method="_V_FEuEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V8pbyUVdEfCS7cth2SLu0w" name="wb" type="_VuZkYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8pbykVdEfCS7cth2SLu0w" name="sheet" type="_VuN-MEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8pby0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V8pbzEVdEfCS7cth2SLu0w" name="createRecruitmentExcelReport" visibility="private" method="_V_FEvEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V8qC0EVdEfCS7cth2SLu0w" name="wb" type="_VuZkYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8qC0UVdEfCS7cth2SLu0w" name="sheet" type="_VuN-MEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V8qC0kVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V9VYQEVdEfCS7cth2SLu0w" name="createRecruitmentExcelReport" visibility="private" method="_V_EdpUVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V9VYQUVdEfCS7cth2SLu0w" name="workbook" type="_V8oNo0VdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V9VYQkVdEfCS7cth2SLu0w" name="sheet" type="_V8oNoUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V9VYQ0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V9V_UEVdEfCS7cth2SLu0w" name="createLeaveExcelReport" visibility="private" method="_V_EdqUVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V9V_UUVdEfCS7cth2SLu0w" name="workbook" type="_V8oNo0VdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V9V_UkVdEfCS7cth2SLu0w" name="sheet" type="_V8oNoUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V9V_U0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V9V_VEVdEfCS7cth2SLu0w" name="createEmployeeExcelReport" visibility="private" method="_V_EdrUVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V9V_VUVdEfCS7cth2SLu0w" name="workbook" type="_V8oNo0VdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V9V_VkVdEfCS7cth2SLu0w" name="sheet" type="_V8oNoUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V9V_V0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V9V_WEVdEfCS7cth2SLu0w" name="createDepartmentExcelReport" visibility="private" method="_V_EdsUVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V9V_WUVdEfCS7cth2SLu0w" name="workbook" type="_V8oNo0VdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V9V_WkVdEfCS7cth2SLu0w" name="sheet" type="_V8oNoUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V9V_W0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V9XNckVdEfCS7cth2SLu0w" name="addDepartmentReportContent" visibility="private" method="_V_EdtUVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _V9XNcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V9XNc0VdEfCS7cth2SLu0w" name="doc" type="_V9WmYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V9XNdEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V9XNdUVdEfCS7cth2SLu0w" name="addEmployeeReportContent" visibility="private" method="_V_EduEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _V9XNcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V9X0gEVdEfCS7cth2SLu0w" name="doc" type="_V9WmYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V9X0gUVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V9X0gkVdEfCS7cth2SLu0w" name="addLeaveReportContent" visibility="private" method="_V_Edu0VdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _V9XNcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V9X0g0VdEfCS7cth2SLu0w" name="doc" type="_V9WmYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V9X0hEVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V9X0hUVdEfCS7cth2SLu0w" name="addRecruitmentReportContent" visibility="private" method="_V_EdvkVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _V9XNcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V9X0hkVdEfCS7cth2SLu0w" name="doc" type="_V9WmYEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V9X0h0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VuCYAEVdEfCS7cth2SLu0w" name="ReportsServlet">
        <generalization xmi:id="_VuFbUUVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-RzckVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-Rzc0VdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-SagEVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-SagUVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-SagkVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-Sag0VdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_FEwEVdEfCS7cth2SLu0w" name="doGet" specification="_VuC_EEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_FEwUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_FEwkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;currentUser&quot;) == null) {&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
     MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);&#xD;
&#xD;
     // 2) Încarcă driver JDBC&#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         throw new ServletException(&quot;JDBC Driver neidentificat!&quot;, e);&#xD;
     }&#xD;
&#xD;
     // 3) Deschide conexiunea&#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {&#xD;
         // 4) Verificare rol/ierarhie&#xD;
         int userId = currentUser.getId();&#xD;
         int userDep, ierarhie;&#xD;
         String functie;&#xD;
         try (PreparedStatement psRole = conn.prepareStatement(&#xD;
                 &quot;SELECT u.id_dep, t.ierarhie, t.denumire AS functie &quot; +&#xD;
                 &quot;FROM useri u JOIN tipuri t ON u.tip = t.tip WHERE u.id = ?&quot;)) {&#xD;
             psRole.setInt(1, userId);&#xD;
             try (ResultSet rs = psRole.executeQuery()) {&#xD;
                 if (!rs.next()) {&#xD;
                     response.sendRedirect(&quot;login.jsp&quot;);&#xD;
                     return;&#xD;
                 }&#xD;
                 userDep  = rs.getInt(&quot;id_dep&quot;);&#xD;
                 ierarhie = rs.getInt(&quot;ierarhie&quot;);&#xD;
                 functie  = rs.getString(&quot;functie&quot;);&#xD;
             }&#xD;
         }&#xD;
&#xD;
         boolean isDirector = ierarhie &lt; 3;&#xD;
         // doar HR (dep 1) sau management (ierarhie &lt; 3) pot accesa&#xD;
         if (userDep != 1 &amp;&amp; !isDirector) {&#xD;
             response.sendRedirect(&quot;index.jsp&quot;);&#xD;
             return;&#xD;
         }&#xD;
&#xD;
         // 5) Alege tip raport&#xD;
         String reportType = request.getParameter(&quot;type&quot;);&#xD;
         if (reportType == null) reportType = &quot;dashboard&quot;;&#xD;
&#xD;
         switch (reportType) {&#xD;
             case &quot;dashboard&quot;:&#xD;
                 generateDashboard(request, response, conn);&#xD;
                 break;&#xD;
             case &quot;recruitment&quot;:&#xD;
                 generateRecruitmentReport(request, response, conn);&#xD;
                 break;&#xD;
             case &quot;leave&quot;:&#xD;
                 generateLeaveReport(request, response, conn);&#xD;
                 break;&#xD;
             case &quot;employee&quot;:&#xD;
                 generateEmployeeReport(request, response, conn);&#xD;
                 break;&#xD;
             case &quot;department&quot;:&#xD;
                 generateDepartmentReport(request, response, conn);&#xD;
                 break;&#xD;
             default:&#xD;
                 generateDashboard(request, response, conn);&#xD;
         }&#xD;
     } catch (SQLException e) {&#xD;
         throw new ServletException(&quot;Eroare la baza de date: &quot; + e.getMessage(), e);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_FEw0VdEfCS7cth2SLu0w" name="generateEmployeeReport" specification="_VuDmIkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_FExEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_FExUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_FExkVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>List&lt;Map&lt;String,Object>> employees = new ArrayList&lt;>();&#xD;
     String sql = &quot;SELECT u.id, u.nume, u.prenume, d.nume_dep, t.denumire AS functie, u.data_ang &quot; +&#xD;
                  &quot;FROM useri u &quot; +&#xD;
                  &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                  &quot;JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                  &quot;WHERE u.activ = 1 &quot; +&#xD;
                  &quot;ORDER BY u.nume, u.prenume&quot;;&#xD;
     try (PreparedStatement ps = conn.prepareStatement(sql);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         while (rs.next()) {&#xD;
             Map&lt;String,Object> m = new HashMap&lt;>();&#xD;
             m.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
             m.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
             m.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
             m.put(&quot;departament&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
             m.put(&quot;functie&quot;, rs.getString(&quot;functie&quot;));&#xD;
             m.put(&quot;dataAngajare&quot;, rs.getDate(&quot;data_ang&quot;));&#xD;
             employees.add(m);&#xD;
         }&#xD;
     }&#xD;
     request.setAttribute(&quot;employees&quot;, employees);&#xD;
     request.getRequestDispatcher(&quot;employee-report.jsp&quot;).forward(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_FrwEVdEfCS7cth2SLu0w" name="generateDepartmentReport" specification="_VuDmJkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_FrwUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_FrwkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Frw0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>List&lt;Map&lt;String,Object>> departments = new ArrayList&lt;>();&#xD;
     String sql = &quot;SELECT d.id_dep, d.nume_dep, COUNT(u.id) AS numar_angajati, &quot; +&#xD;
                  &quot;AVG(DATEDIFF(CURDATE(), u.data_ang)) AS vechime_medie &quot; +&#xD;
                  &quot;FROM departament d &quot; +&#xD;
                  &quot;LEFT JOIN useri u ON d.id_dep = u.id_dep AND u.activ = 1 &quot; +&#xD;
                  &quot;GROUP BY d.id_dep, d.nume_dep &quot; +&#xD;
                  &quot;ORDER BY numar_angajati DESC&quot;;&#xD;
     try (PreparedStatement ps = conn.prepareStatement(sql);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         while (rs.next()) {&#xD;
             Map&lt;String,Object> m = new HashMap&lt;>();&#xD;
             m.put(&quot;idDep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
             m.put(&quot;numeDep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
             m.put(&quot;numarAngajati&quot;, rs.getInt(&quot;numar_angajati&quot;));&#xD;
             m.put(&quot;vechimeMedie&quot;, rs.getDouble(&quot;vechime_medie&quot;));&#xD;
             departments.add(m);&#xD;
         }&#xD;
     }&#xD;
     request.setAttribute(&quot;departments&quot;, departments);&#xD;
     request.getRequestDispatcher(&quot;department-report.jsp&quot;).forward(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_FrxEVdEfCS7cth2SLu0w" name="generateDashboard" specification="_VuDmKkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_FrxUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_FrxkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Frx0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Map&lt;String, Object> dashboardData = new HashMap&lt;>();&#xD;
&#xD;
     // Total angajați&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT COUNT(*) AS total FROM useri WHERE id_dep != -1&quot;);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         if (rs.next()) dashboardData.put(&quot;totalEmployees&quot;, rs.getInt(&quot;total&quot;));&#xD;
     }&#xD;
     // Angajați noi (ultimele 30 zile)&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT COUNT(*) AS total FROM useri WHERE data_ang >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)&quot;);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         if (rs.next()) dashboardData.put(&quot;newEmployees&quot;, rs.getInt(&quot;total&quot;));&#xD;
     }&#xD;
     // Joburi active&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT COUNT(*) AS total FROM joburi WHERE activ = 1 AND end >= CURDATE()&quot;);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         if (rs.next()) dashboardData.put(&quot;activeJobs&quot;, rs.getInt(&quot;total&quot;));&#xD;
     }&#xD;
     // Aplicări recente (ultimele 7 zile)&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT COUNT(*) AS total FROM aplicari WHERE data_apl >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)&quot;);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         if (rs.next()) dashboardData.put(&quot;recentApplications&quot;, rs.getInt(&quot;total&quot;));&#xD;
     }&#xD;
     // Concedii active&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT COUNT(*) AS total FROM concedii WHERE status = 2 AND start_c &lt;= CURDATE() AND end_c >= CURDATE()&quot;);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         if (rs.next()) dashboardData.put(&quot;activeLeaves&quot;, rs.getInt(&quot;total&quot;));&#xD;
     }&#xD;
     // Top 5 departamente (după număr angajați)&#xD;
     List&lt;Map&lt;String, Object>> deptStats = new ArrayList&lt;>();&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT d.nume_dep, COUNT(u.id) AS total &quot; +&#xD;
             &quot;FROM departament d LEFT JOIN useri u ON d.id_dep = u.id_dep &quot; +&#xD;
             &quot;WHERE u.id_dep != -1 GROUP BY d.id_dep, d.nume_dep ORDER BY total DESC LIMIT 5&quot;);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         while (rs.next()) {&#xD;
             Map&lt;String, Object> m = new HashMap&lt;>();&#xD;
             m.put(&quot;name&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
             m.put(&quot;count&quot;, rs.getInt(&quot;total&quot;));&#xD;
             deptStats.add(m);&#xD;
         }&#xD;
     }&#xD;
     dashboardData.put(&quot;departmentStats&quot;, deptStats);&#xD;
&#xD;
     // Statistici lunare aplicări (ultimele 6 luni)&#xD;
     List&lt;Map&lt;String, Object>> monthlyApps = new ArrayList&lt;>();&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT DATE_FORMAT(data_apl,'%Y-%m') AS month, COUNT(*) AS total &quot; +&#xD;
             &quot;FROM aplicari WHERE data_apl >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) &quot; +&#xD;
             &quot;GROUP BY month ORDER BY month&quot;);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         while (rs.next()) {&#xD;
             Map&lt;String, Object> m = new HashMap&lt;>();&#xD;
             m.put(&quot;month&quot;, rs.getString(&quot;month&quot;));&#xD;
             m.put(&quot;count&quot;, rs.getInt(&quot;total&quot;));&#xD;
             monthlyApps.add(m);&#xD;
         }&#xD;
     }&#xD;
     dashboardData.put(&quot;monthlyApplications&quot;, monthlyApps);&#xD;
&#xD;
     request.setAttribute(&quot;dashboardData&quot;, dashboardData);&#xD;
     request.getRequestDispatcher(&quot;reports-dashboard.jsp&quot;).forward(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_FryEVdEfCS7cth2SLu0w" name="generateRecruitmentReport" specification="_VuENM0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_FryUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_FrykVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Fry0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Map&lt;String, Object> reportData = new HashMap&lt;>();&#xD;
     String startDate = request.getParameter(&quot;startDate&quot;);&#xD;
     String endDate   = request.getParameter(&quot;endDate&quot;);&#xD;
     if (startDate == null || endDate == null) {&#xD;
         Calendar cal = Calendar.getInstance();&#xD;
         SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#xD;
         endDate   = sdf.format(cal.getTime());&#xD;
         cal.add(Calendar.DAY_OF_MONTH, -30);&#xD;
         startDate = sdf.format(cal.getTime());&#xD;
     }&#xD;
&#xD;
     // Total aplicări în interval&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT COUNT(*) AS total FROM aplicari WHERE data_apl BETWEEN ? AND ?&quot;);&#xD;
     ) {&#xD;
         ps.setString(1, startDate);&#xD;
         ps.setString(2, endDate);&#xD;
         try (ResultSet rs = ps.executeQuery()) {&#xD;
             if (rs.next()) reportData.put(&quot;totalApplications&quot;, rs.getInt(&quot;total&quot;));&#xD;
         }&#xD;
     }&#xD;
     // Aplicări pe job&#xD;
     List&lt;Map&lt;String, Object>> byJob = new ArrayList&lt;>();&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT j.titlu, COUNT(a.id) AS total &quot; +&#xD;
             &quot;FROM joburi j LEFT JOIN aplicari a ON j.id = a.job_id &quot; +&#xD;
             &quot;WHERE a.data_apl BETWEEN ? AND ? GROUP BY j.id, j.titlu ORDER BY total DESC&quot;);&#xD;
     ) {&#xD;
         ps.setString(1, startDate);&#xD;
         ps.setString(2, endDate);&#xD;
         try (ResultSet rs = ps.executeQuery()) {&#xD;
             while (rs.next()) {&#xD;
                 Map&lt;String, Object> m = new HashMap&lt;>();&#xD;
                 m.put(&quot;title&quot;, rs.getString(&quot;titlu&quot;));&#xD;
                 m.put(&quot;count&quot;, rs.getInt(&quot;total&quot;));&#xD;
                 byJob.add(m);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     reportData.put(&quot;applicationsByJob&quot;, byJob);&#xD;
&#xD;
     // Rata conversie&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT COUNT(*) AS total_applications, &quot; +&#xD;
             &quot;SUM(CASE WHEN status='INTERVIEW' THEN 1 ELSE 0 END) AS interviews, &quot; +&#xD;
             &quot;SUM(CASE WHEN status='HIRED' THEN 1 ELSE 0 END) AS hires &quot; +&#xD;
             &quot;FROM aplicari WHERE data_apl BETWEEN ? AND ?&quot;);&#xD;
     ) {&#xD;
         ps.setString(1, startDate);&#xD;
         ps.setString(2, endDate);&#xD;
         try (ResultSet rs = ps.executeQuery()) {&#xD;
             if (rs.next()) {&#xD;
                 int tot = rs.getInt(&quot;total_applications&quot;),&#xD;
                     ivs = rs.getInt(&quot;interviews&quot;),&#xD;
                     hrs = rs.getInt(&quot;hires&quot;);&#xD;
                 reportData.put(&quot;conversionRate&quot;, calculateConversionRate(tot, ivs, hrs));&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
&#xD;
     // Timp mediu procesare&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT AVG(DATEDIFF(COALESCE(modified_date, CURDATE()), data_apl)) AS avg_days &quot; +&#xD;
             &quot;FROM aplicari WHERE data_apl BETWEEN ? AND ? AND status &lt;> 'PENDING'&quot;);&#xD;
     ) {&#xD;
         ps.setString(1, startDate);&#xD;
         ps.setString(2, endDate);&#xD;
         try (ResultSet rs = ps.executeQuery()) {&#xD;
             if (rs.next()) reportData.put(&quot;avgProcessingTime&quot;, rs.getDouble(&quot;avg_days&quot;));&#xD;
         }&#xD;
     }&#xD;
&#xD;
     request.setAttribute(&quot;reportData&quot;, reportData);&#xD;
     request.setAttribute(&quot;startDate&quot;, startDate);&#xD;
     request.setAttribute(&quot;endDate&quot;, endDate);&#xD;
     request.getRequestDispatcher(&quot;recruitment-report.jsp&quot;).forward(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_FrzEVdEfCS7cth2SLu0w" name="generateLeaveReport" specification="_VuENN0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_FrzUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_FrzkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Frz0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>Map&lt;String, Object> reportData = new HashMap&lt;>();&#xD;
     String year = request.getParameter(&quot;year&quot;);&#xD;
     if (year == null) year = String.valueOf(Calendar.getInstance().get(Calendar.YEAR));&#xD;
&#xD;
     // Total zile concediu&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT SUM(durata) AS total_days FROM concedii WHERE YEAR(start_c)=? AND status=2&quot;);&#xD;
     ) {&#xD;
         ps.setString(1, year);&#xD;
         try (ResultSet rs = ps.executeQuery()) {&#xD;
             if (rs.next()) reportData.put(&quot;totalLeaveDays&quot;, rs.getInt(&quot;total_days&quot;));&#xD;
         }&#xD;
     }&#xD;
     // Concedii pe departament&#xD;
     List&lt;Map&lt;String, Object>> byDept = new ArrayList&lt;>();&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT d.nume_dep, SUM(c.durata) AS total_days, COUNT(c.id) AS total_leaves &quot; +&#xD;
             &quot;FROM departament d &quot; +&#xD;
             &quot;LEFT JOIN useri u ON d.id_dep = u.id_dep &quot; +&#xD;
             &quot;LEFT JOIN concedii c ON u.id = c.id_ang AND YEAR(c.start_c)=? AND c.status=2 &quot; +&#xD;
             &quot;GROUP BY d.id_dep, d.nume_dep ORDER BY total_days DESC&quot;);&#xD;
     ) {&#xD;
         ps.setString(1, year);&#xD;
         try (ResultSet rs = ps.executeQuery()) {&#xD;
             while (rs.next()) {&#xD;
                 Map&lt;String, Object> m = new HashMap&lt;>();&#xD;
                 m.put(&quot;name&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
                 m.put(&quot;days&quot;, rs.getInt(&quot;total_days&quot;));&#xD;
                 m.put(&quot;count&quot;, rs.getInt(&quot;total_leaves&quot;));&#xD;
                 byDept.add(m);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     reportData.put(&quot;leavesByDepartment&quot;, byDept);&#xD;
&#xD;
     // Concedii pe tip&#xD;
     List&lt;Map&lt;String, Object>> byType = new ArrayList&lt;>();&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT tc.motiv AS name, COUNT(c.id) AS count, SUM(c.durata) AS days &quot; +&#xD;
             &quot;FROM tipcon tc &quot; +&#xD;
             &quot;LEFT JOIN concedii c ON tc.tip = c.tip AND YEAR(c.start_c)=? AND c.status=2 &quot; +&#xD;
             &quot;GROUP BY tc.tip, tc.motiv ORDER BY count DESC&quot;);&#xD;
     ) {&#xD;
         ps.setString(1, year);&#xD;
         try (ResultSet rs = ps.executeQuery()) {&#xD;
             while (rs.next()) {&#xD;
                 Map&lt;String, Object> m = new HashMap&lt;>();&#xD;
                 m.put(&quot;name&quot;, rs.getString(&quot;name&quot;));&#xD;
                 m.put(&quot;count&quot;, rs.getInt(&quot;count&quot;));&#xD;
                 m.put(&quot;days&quot;, rs.getInt(&quot;days&quot;));&#xD;
                 byType.add(m);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     reportData.put(&quot;leavesByType&quot;, byType);&#xD;
&#xD;
     // Concedii pe lună&#xD;
     List&lt;Map&lt;String, Object>> byMonth = new ArrayList&lt;>();&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT MONTH(start_c) AS month, COUNT(*) AS count, SUM(durata) AS days &quot; +&#xD;
             &quot;FROM concedii WHERE YEAR(start_c)=? AND status=2 GROUP BY month ORDER BY month&quot;);&#xD;
     ) {&#xD;
         ps.setString(1, year);&#xD;
         try (ResultSet rs = ps.executeQuery()) {&#xD;
             while (rs.next()) {&#xD;
                 Map&lt;String, Object> m = new HashMap&lt;>();&#xD;
                 m.put(&quot;month&quot;, getMonthName(rs.getInt(&quot;month&quot;)));&#xD;
                 m.put(&quot;count&quot;, rs.getInt(&quot;count&quot;));&#xD;
                 m.put(&quot;days&quot;, rs.getInt(&quot;days&quot;));&#xD;
                 byMonth.add(m);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     reportData.put(&quot;leavesByMonth&quot;, byMonth);&#xD;
&#xD;
     // Top 10 angajați&#xD;
     List&lt;Map&lt;String, Object>> topEmps = new ArrayList&lt;>();&#xD;
     try (PreparedStatement ps = conn.prepareStatement(&#xD;
             &quot;SELECT u.nume, u.prenume, SUM(c.durata) AS days, COUNT(c.id) AS count &quot; +&#xD;
             &quot;FROM useri u &quot; +&#xD;
             &quot;LEFT JOIN concedii c ON u.id = c.id_ang AND YEAR(c.start_c)=? AND c.status=2 &quot; +&#xD;
             &quot;GROUP BY u.id, u.nume, u.prenume HAVING days>0 ORDER BY days DESC LIMIT 10&quot;);&#xD;
     ) {&#xD;
         ps.setString(1, year);&#xD;
         try (ResultSet rs = ps.executeQuery()) {&#xD;
             while (rs.next()) {&#xD;
                 Map&lt;String, Object> m = new HashMap&lt;>();&#xD;
                 m.put(&quot;name&quot;, rs.getString(&quot;nume&quot;) + &quot; &quot; + rs.getString(&quot;prenume&quot;));&#xD;
                 m.put(&quot;days&quot;, rs.getInt(&quot;days&quot;));&#xD;
                 m.put(&quot;count&quot;, rs.getInt(&quot;count&quot;));&#xD;
                 topEmps.add(m);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
     reportData.put(&quot;topEmployeesByLeave&quot;, topEmps);&#xD;
&#xD;
     request.setAttribute(&quot;reportData&quot;, reportData);&#xD;
     request.setAttribute(&quot;year&quot;, year);&#xD;
     request.getRequestDispatcher(&quot;leave-report.jsp&quot;).forward(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Fr0EVdEfCS7cth2SLu0w" name="calculateConversionRate" specification="_VuE0QEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Fr0UVdEfCS7cth2SLu0w" name="apps">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_Fr0kVdEfCS7cth2SLu0w" name="ivs">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_Fr00VdEfCS7cth2SLu0w" name="hrs">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_Fr1EVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>Map&lt;String, Double> m = new HashMap&lt;>();&#xD;
     m.put(&quot;applicationToInterview&quot;, apps > 0 ? (ivs * 100.0 / apps) : 0.0);&#xD;
     m.put(&quot;interviewToHire&quot;, ivs > 0 ? (hrs * 100.0 / ivs) : 0.0);&#xD;
     m.put(&quot;overallConversion&quot;, apps > 0 ? (hrs * 100.0 / apps) : 0.0);&#xD;
     return m;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Fr1UVdEfCS7cth2SLu0w" name="getMonthName" specification="_VuE0RkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Fr1kVdEfCS7cth2SLu0w" name="month">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_Fr10VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>String[] months = {&#xD;
         &quot;Ianuarie&quot;,&quot;Februarie&quot;,&quot;Martie&quot;,&quot;Aprilie&quot;,&quot;Mai&quot;,&quot;Iunie&quot;,&#xD;
         &quot;Iulie&quot;,&quot;August&quot;,&quot;Septembrie&quot;,&quot;Octombrie&quot;,&quot;Noiembrie&quot;,&quot;Decembrie&quot;&#xD;
     };&#xD;
     return months[month - 1];&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VuC_EEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_FEwEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuC_EUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuC_EkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuDmIkVdEfCS7cth2SLu0w" name="generateEmployeeReport" visibility="private" method="_V_FEw0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuDmI0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuDmJEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuDmJUVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuDmJkVdEfCS7cth2SLu0w" name="generateDepartmentReport" visibility="private" method="_V_FrwEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuDmJ0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuDmKEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuDmKUVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuDmKkVdEfCS7cth2SLu0w" name="generateDashboard" visibility="private" method="_V_FrxEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuENMEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuENMUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuENMkVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuENM0VdEfCS7cth2SLu0w" name="generateRecruitmentReport" visibility="private" method="_V_FryEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuENNEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuENNUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuENNkVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuENN0VdEfCS7cth2SLu0w" name="generateLeaveReport" visibility="private" method="_V_FrzEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w _T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuENOEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuENOUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuENOkVdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuE0QEVdEfCS7cth2SLu0w" name="calculateConversionRate" visibility="private" method="_V_Fr0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuE0QUVdEfCS7cth2SLu0w" name="apps">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuE0QkVdEfCS7cth2SLu0w" name="ivs">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuE0Q0VdEfCS7cth2SLu0w" name="hrs">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuE0REVdEfCS7cth2SLu0w" type="_UAkwoUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuE0RkVdEfCS7cth2SLu0w" name="getMonthName" visibility="private" method="_V_Fr1UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuE0R0VdEfCS7cth2SLu0w" name="month">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuFbUEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VuGCYEVdEfCS7cth2SLu0w" name="ResAdevDirServlet">
        <ownedComment xmi:id="_V_hwoEVdEfCS7cth2SLu0w">
          <body>Servlet pentru respingerea adeverințelor de către director</body>
        </ownedComment>
        <generalization xmi:id="_VuGpdkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-SahEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-SahUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Fr2EVdEfCS7cth2SLu0w" name="ResAdevDirServlet" specification="_VuGCYUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Fr2UVdEfCS7cth2SLu0w" type="_VuGCYEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_GS0EVdEfCS7cth2SLu0w" name="doPost" specification="_VuGpcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_GS0UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_GS0kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Verificare sesiune și utilizator conectat&#xD;
     HttpSession sesiune = request.getSession(false);&#xD;
     if (sesiune == null) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Nu există sesiune activă!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'login.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     MyUser currentUser = (MyUser) sesiune.getAttribute(&quot;currentUser&quot;);&#xD;
     if (currentUser == null) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Utilizator neconectat!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'login.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Verifica dacă utilizatorul are rol de director&#xD;
     int userType = currentUser.getTip();&#xD;
     boolean isDirector = userType == 0 || userType > 15;&#xD;
     if (!isDirector) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Nu aveți permisiunea de a respinge adeverințe ca director!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Extrage parametrii&#xD;
     int idAdeverinta;&#xD;
     String motivRespingerii = request.getParameter(&quot;reason&quot;);&#xD;
     &#xD;
     // Validează motivul respingerii&#xD;
     if (motivRespingerii == null || motivRespingerii.trim().isEmpty()) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Trebuie să specificați un motiv pentru respingere!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         idAdeverinta = Integer.parseInt(request.getParameter(&quot;idadev&quot;));&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('ID adeverință invalid!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     Connection conn = null;&#xD;
     PreparedStatement verificareStmt = null;&#xD;
     PreparedStatement updateStmt = null;&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         conn.setAutoCommit(false); // Incepe tranzacția&#xD;
         &#xD;
         // Verifică existența adeverinței și starea ei&#xD;
         String sqlVerificare = &quot;SELECT a.id_ang, a.status, u.id_dep FROM adeverinte a &quot; +&#xD;
                                &quot;JOIN useri u ON a.id_ang = u.id WHERE a.id = ?&quot;;&#xD;
         verificareStmt = conn.prepareStatement(sqlVerificare);&#xD;
         verificareStmt.setInt(1, idAdeverinta);&#xD;
         &#xD;
         ResultSet rs = verificareStmt.executeQuery();&#xD;
         &#xD;
         if (!rs.next()) {&#xD;
             conn.rollback();&#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Adeverința nu există!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         int status = rs.getInt(&quot;status&quot;);&#xD;
         int idAngajat = rs.getInt(&quot;id_ang&quot;);&#xD;
         int idDepartament = rs.getInt(&quot;id_dep&quot;);&#xD;
         &#xD;
         // Verifică dacă adeverința este în starea corectă pentru respingere de director&#xD;
         boolean statusValid = status == 1;  // Normal: aprobat de șef&#xD;
         &#xD;
         // Directorii pot respinge direct și adeverințele propriilor șefi sau alte cazuri speciale&#xD;
         if (status == 0) {&#xD;
             // Verifică dacă angajatul este șef (tip = 3) sau are alt rol special&#xD;
             String sqlVerificaSef = &quot;SELECT tip FROM useri WHERE id = ?&quot;;&#xD;
             try (PreparedStatement stmtSef = conn.prepareStatement(sqlVerificaSef)) {&#xD;
                 stmtSef.setInt(1, idAngajat);&#xD;
                 ResultSet rsSef = stmtSef.executeQuery();&#xD;
                 if (rsSef.next()) {&#xD;
                     int tipAngajat = rsSef.getInt(&quot;tip&quot;);&#xD;
                     if (tipAngajat == 3 || tipAngajat >= 10) {&#xD;
                         statusValid = true;  // Permitem directorului să respingă direct adeverințele șefilor&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         if (!statusValid) {&#xD;
             conn.rollback();&#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Adeverința nu este în starea care permite respingerea de către director!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
//            // Verifică dacă directorul este din același departament cu angajatul&#xD;
//            int userDepartament = currentUser.getDepartament();&#xD;
//            if (idDepartament != userDepartament) {&#xD;
//                conn.rollback();&#xD;
//                response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
//                PrintWriter out = response.getWriter();&#xD;
//                out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
//                out.println(&quot;alert('Nu puteți respinge adeverințe pentru angajați din alte departamente!');&quot;);&#xD;
//                out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
//                out.println(&quot;&lt;/script>&quot;);&#xD;
//                out.close();&#xD;
//                return;&#xD;
//            }&#xD;
         &#xD;
         // Actualizează starea adeverinței la &quot;Respins de director&quot; (status = -2)&#xD;
         String sqlUpdate = &quot;UPDATE adeverinte SET status = -2, modif = CURDATE(), motiv = ? WHERE id = ?&quot;;&#xD;
         updateStmt = conn.prepareStatement(sqlUpdate);&#xD;
         updateStmt.setString(1, motivRespingerii);&#xD;
         updateStmt.setInt(2, idAdeverinta);&#xD;
         &#xD;
         int result = updateStmt.executeUpdate();&#xD;
         &#xD;
         if (result > 0) {&#xD;
             conn.commit(); // Confirmă tranzacția&#xD;
             &#xD;
             // Trimite notificare prin email&#xD;
             final int finalIdAngajat = idAngajat;&#xD;
             final int finalIdAdeverinta = idAdeverinta;&#xD;
             final String finalMotivRespingerii = motivRespingerii;&#xD;
             &#xD;
             Thread emailThread = new Thread(() -> {&#xD;
                 try {&#xD;
                     MailAsincron.trimitereNotificareAdeverintaRespinsa(finalIdAngajat, finalIdAdeverinta, &quot;director&quot;, finalMotivRespingerii);&#xD;
                 } catch (Exception e) {&#xD;
                     e.printStackTrace();&#xD;
                 }&#xD;
             });&#xD;
             &#xD;
             emailThread.start();&#xD;
             &#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Adeverința a fost respinsă cu succes!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
         } else {&#xD;
             conn.rollback();&#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Nu s-a putut respinge adeverința!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             ex.printStackTrace();&#xD;
         }&#xD;
         &#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Eroare la respingerea adeverinței: &quot; + e.getMessage() + &quot;');&quot;);&#xD;
         out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
     } finally {&#xD;
         try {&#xD;
             if (verificareStmt != null) verificareStmt.close();&#xD;
             if (updateStmt != null) updateStmt.close();&#xD;
             if (conn != null) {&#xD;
                 conn.setAutoCommit(true); // Resetează autocommit&#xD;
                 conn.close();&#xD;
             }&#xD;
         } catch (SQLException e) {&#xD;
             e.printStackTrace();&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_GS00VdEfCS7cth2SLu0w" name="doGet" specification="_VuGpc0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_GS1EVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_GS1UVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doPost(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VuGCYUVdEfCS7cth2SLu0w" name="ResAdevDirServlet" method="_V_Fr2EVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VuGCYkVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VuGCY0VdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VuGCZEVdEfCS7cth2SLu0w" type="_VuGCYEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuGpcEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_GS0EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuGpcUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuGpckVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuGpc0VdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_GS00VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuGpdEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuGpdUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VuHQgEVdEfCS7cth2SLu0w" name="ResAdevSefServlet">
        <ownedComment xmi:id="_V_hwoUVdEfCS7cth2SLu0w">
          <body>Servlet pentru respingerea adeverințelor de către șef</body>
        </ownedComment>
        <generalization xmi:id="_VuH3l0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-SahkVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-Sah0VdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_GS1kVdEfCS7cth2SLu0w" name="ResAdevSefServlet" specification="_VuHQgUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_GS10VdEfCS7cth2SLu0w" type="_VuHQgEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_GS2EVdEfCS7cth2SLu0w" name="doPost" specification="_VuH3kUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_GS2UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_GS2kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Verificare sesiune și utilizator conectat&#xD;
     HttpSession sesiune = request.getSession(false);&#xD;
     if (sesiune == null) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Nu există sesiune activă!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'login.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     MyUser currentUser = (MyUser) sesiune.getAttribute(&quot;currentUser&quot;);&#xD;
     if (currentUser == null) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Utilizator neconectat!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'login.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Verifica dacă utilizatorul are rol de șef&#xD;
     int userType = currentUser.getTip();&#xD;
     boolean isSef = userType == 3 || (userType >= 10 &amp;&amp; userType &lt;= 15);&#xD;
     if (!isSef) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Nu aveți permisiunea de a respinge adeverințe ca șef!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     // Extrage parametrii&#xD;
     int idAdeverinta;&#xD;
     String motivRespingerii = request.getParameter(&quot;reason&quot;);&#xD;
     &#xD;
     // Validează motivul respingerii&#xD;
     if (motivRespingerii == null || motivRespingerii.trim().isEmpty()) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Trebuie să specificați un motiv pentru respingere!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         idAdeverinta = Integer.parseInt(request.getParameter(&quot;idadev&quot;));&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('ID adeverință invalid!');&quot;);&#xD;
         out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     Connection conn = null;&#xD;
     PreparedStatement verificareStmt = null;&#xD;
     PreparedStatement updateStmt = null;&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         conn.setAutoCommit(false); // Incepe tranzacția&#xD;
         &#xD;
         // Verifică existența adeverinței și starea ei&#xD;
         String sqlVerificare = &quot;SELECT a.id_ang, a.status, u.id_dep FROM adeverinte a &quot; +&#xD;
                                &quot;JOIN useri u ON a.id_ang = u.id WHERE a.id = ?&quot;;&#xD;
         verificareStmt = conn.prepareStatement(sqlVerificare);&#xD;
         verificareStmt.setInt(1, idAdeverinta);&#xD;
         &#xD;
         ResultSet rs = verificareStmt.executeQuery();&#xD;
         &#xD;
         if (!rs.next()) {&#xD;
             conn.rollback();&#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Adeverința nu există!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         int status = rs.getInt(&quot;status&quot;);&#xD;
         int idAngajat = rs.getInt(&quot;id_ang&quot;);&#xD;
         int idDepartament = rs.getInt(&quot;id_dep&quot;);&#xD;
         &#xD;
         // Verifică dacă adeverința este în starea corectă pentru respingere de șef (status = 0)&#xD;
         if (status != 0) {&#xD;
             conn.rollback();&#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Adeverința nu este în starea care permite respingerea de către șef!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         &#xD;
         &#xD;
         // Actualizează starea adeverinței la &quot;Respins de șef&quot; (status = -1)&#xD;
         String sqlUpdate = &quot;UPDATE adeverinte SET status = -1, modif = CURDATE(), motiv = ? WHERE id = ?&quot;;&#xD;
         updateStmt = conn.prepareStatement(sqlUpdate);&#xD;
         updateStmt.setString(1, motivRespingerii);&#xD;
         updateStmt.setInt(2, idAdeverinta);&#xD;
         &#xD;
         int result = updateStmt.executeUpdate();&#xD;
         &#xD;
         if (result > 0) {&#xD;
             conn.commit(); // Confirmă tranzacția&#xD;
             &#xD;
             // Trimite notificare prin email&#xD;
             final int finalIdAngajat = idAngajat;&#xD;
             final int finalIdAdeverinta = idAdeverinta;&#xD;
             final String finalMotivRespingerii = motivRespingerii;&#xD;
             &#xD;
             Thread emailThread = new Thread(() -> {&#xD;
                 try {&#xD;
                     MailAsincron.trimitereNotificareAdeverintaRespinsa(finalIdAngajat, finalIdAdeverinta, &quot;șeful departamentului&quot;, finalMotivRespingerii);&#xD;
                 } catch (Exception e) {&#xD;
                     e.printStackTrace();&#xD;
                 }&#xD;
             });&#xD;
             &#xD;
             emailThread.start();&#xD;
             &#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Adeverința a fost respinsă cu succes!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
         } else {&#xD;
             conn.rollback();&#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
             PrintWriter out = response.getWriter();&#xD;
             out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
             out.println(&quot;alert('Nu s-a putut respinge adeverința!');&quot;);&#xD;
             out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
             out.println(&quot;&lt;/script>&quot;);&#xD;
             out.close();&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             ex.printStackTrace();&#xD;
         }&#xD;
         &#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
         PrintWriter out = response.getWriter();&#xD;
         out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
         out.println(&quot;alert('Eroare la respingerea adeverinței: &quot; + e.getMessage() + &quot;');&quot;);&#xD;
         out.println(&quot;window.location.href = 'adeverintenoiuser.jsp';&quot;);&#xD;
         out.println(&quot;&lt;/script>&quot;);&#xD;
         out.close();&#xD;
     } finally {&#xD;
         try {&#xD;
             if (verificareStmt != null) verificareStmt.close();&#xD;
             if (updateStmt != null) updateStmt.close();&#xD;
             if (conn != null) {&#xD;
                 conn.setAutoCommit(true); // Resetează autocommit&#xD;
                 conn.close();&#xD;
             }&#xD;
         } catch (SQLException e) {&#xD;
             e.printStackTrace();&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_GS20VdEfCS7cth2SLu0w" name="doGet" specification="_VuH3lEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_GS3EVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_GS3UVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doPost(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VuHQgUVdEfCS7cth2SLu0w" name="ResAdevSefServlet" method="_V_GS1kVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VuHQgkVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VuHQg0VdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VuH3kEVdEfCS7cth2SLu0w" type="_VuHQgEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuH3kUVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_GS2EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuH3kkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuH3k0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuH3lEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_GS20VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuH3lUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuH3lkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VuIeoEVdEfCS7cth2SLu0w" name="ResDirServlet">
        <ownedComment xmi:id="_V_hwokVdEfCS7cth2SLu0w">
          <body>Servlet ce se ocupa cu respingerea unui concediu de catre Director</body>
        </ownedComment>
        <generalization xmi:id="_VuJswEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-TBkEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-TBkUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-TBkkVdEfCS7cth2SLu0w" name="dep" visibility="private" type="_S4sikEVdEfCS7cth2SLu0w" association="_WAG_c0VdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_GS3kVdEfCS7cth2SLu0w" name="init" specification="_VuIeoUVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>dep = new ResDirDao();
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_GS30VdEfCS7cth2SLu0w" name="doGet" specification="_VuJFsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_GS4EVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_GS4UVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doPost(request, response);
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_GS4kVdEfCS7cth2SLu0w" name="doPost" specification="_VuJFs0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_GS40VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_GS5EVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession sesiune = request.getSession(false); 
      // o verificare in plus, la un debug, asta ca sa ma asigur ca extrag ceva valid si nu am erori dupa
      if (sesiune == null) {
      	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
         PrintWriter out = response.getWriter();
 		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
 		    out.println(&quot;alert('Sesiune nula!');&quot;);
 		    out.println(&quot;window.location.href = 'login.jsp';&quot;);
 		    out.println(&quot;&lt;/script>&quot;);
 		    out.close();
          return;
      }
      
      MyUser utilizatorcurent = (MyUser) sesiune.getAttribute(&quot;currentUser&quot;);
      if (utilizatorcurent == null) {
      	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
         PrintWriter out = response.getWriter();
 		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
 		    out.println(&quot;alert('Nu e conectat niciun utilizator!');&quot;);
 		    out.println(&quot;window.location.href = 'login.jsp';&quot;);
 		    out.println(&quot;&lt;/script>&quot;);
 		    out.close();
          return;
      }

      int idconcediu = Integer.parseInt(request.getParameter(&quot;idcon&quot;));
      String motiv = request.getParameter(&quot;reason&quot;);
      //System.out.println(motiv);
          int id = -1;
  
      try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {
          dep.respingere(idconcediu, motiv); // fac aprobarea in DAO, aprobare = schimbare status
          id = getIdAng(idconcediu, conexiune);
          final int id2 = id; 
         // notificare asincrona
          // trimiterea de mailuri se face in mod asincron
          new Thread(() -> {
         	    try {
         	        MailAsincron.send8(id2, idconcediu);
         	    } catch (Exception e) {
         	        e.printStackTrace();
         	    }
         	}).start();
          // apoi redirectionez la pagina care listeaza concediile
          // acest lucru il fac pentru ca utilizatorul sa poata vedea ce concedii sunt la un moment dat in institutie 
          // + sa vada ca s-a respins cu succes   
          response.setContentType(&quot;text/html;charset=UTF-8&quot;);
          PrintWriter out = response.getWriter();
 		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
 		    out.println(&quot;alert('Aprobare cu succes!');&quot;);
 		    out.println(&quot;window.location.href = 'vizualizareconcedii.jsp';&quot;);
 		    out.println(&quot;&lt;/script>&quot;);
 		    out.close();
      } catch (SQLException e) {
      	// in caz de eroare redirectionez la aceeasi pagina, ca sa poata vedea ca nu s-a respins
          printSQLException(e);
          e.printStackTrace();
          response.setContentType(&quot;text/html;charset=UTF-8&quot;);
          PrintWriter out = response.getWriter();
 		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
 		    out.println(&quot;alert('Eroare la aprobare la baza de date!');&quot;);
 		    out.println(&quot;window.location.href = 'concediinoidir.jsp';&quot;);
 		    out.println(&quot;&lt;/script>&quot;);
 		    out.close();
      } catch (ClassNotFoundException e) {
      	// in caz de eroare redirectionez la aceeasi pagina, ca sa poata vedea ca nu s-a respins
      	e.printStackTrace();
      	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
          PrintWriter out = response.getWriter();
 		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
 		    out.println(&quot;alert('Eroare la aprobare - nu s-a gasit clasa, debug only!');&quot;);
 		    out.println(&quot;window.location.href = 'concediinoidir.jsp';&quot;);
 		    out.println(&quot;&lt;/script>&quot;);
 		    out.close();
 		}
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_GS5UVdEfCS7cth2SLu0w" name="getIdAng" specification="_VuJFtkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_GS5kVdEfCS7cth2SLu0w" name="idconcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_GS50VdEfCS7cth2SLu0w" name="conexiune" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_GS6EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>String sql = &quot;SELECT id_ang FROM concedii WHERE id = ?&quot;;
     try (PreparedStatement stmt = conexiune.prepareStatement(sql)) {
         stmt.setInt(1, idconcediu);
         ResultSet rezultat = stmt.executeQuery();
         if (rezultat.next()) {
             return rezultat.getInt(&quot;id_ang&quot;);
         }
     }
     return -1; 
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_GS6UVdEfCS7cth2SLu0w" name="printSQLException" specification="_VuJFukVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_GS6kVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {
         if (e instanceof SQLException) {
             e.printStackTrace(System.err);
             System.err.println(&quot;Stare: &quot; + ((SQLException) e).getSQLState());
             System.err.println(&quot;Cod eroare: &quot; + ((SQLException) e).getErrorCode());
             System.err.println(&quot;Explicatie: &quot; + e.getMessage());
             Throwable t = ex.getCause();
             while (t != null) {
                 System.out.println(&quot;Cauza: &quot; + t);
                 t = t.getCause();
             }
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VuIeoUVdEfCS7cth2SLu0w" name="init" method="_V_GS3kVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_hwo0VdEfCS7cth2SLu0w">
            <body>Initializare DAO</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:id="_VuJFsEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_GS30VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_hwpEVdEfCS7cth2SLu0w">
            <body>se face get cand apasa pe butonul de respingere</body>
          </ownedComment>
          <ownedParameter xmi:id="_VuJFsUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuJFskVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuJFs0VdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_GS4kVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuJFtEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuJFtUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuJFtkVdEfCS7cth2SLu0w" name="getIdAng" visibility="private" method="_V_GS5UVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_hwpUVdEfCS7cth2SLu0w">
            <body>Functie ce afla id-ul unui angajat dintr-un concediu
     * @param idconcediu
     * @param conexiune
     * @return id angajat sau -1 daca nu a gasit nimic
     * @throws SQLException</body>
          </ownedComment>
          <ownedParameter xmi:id="_VuJFt0VdEfCS7cth2SLu0w" name="idconcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuJFuEVdEfCS7cth2SLu0w" name="conexiune" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuJFuUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VuJFukVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" isStatic="true" method="_V_GS6UVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_hwpkVdEfCS7cth2SLu0w">
            <body>Afiseaza frumos / Pretty print o eroare dintr-o baza de date
	 * @param ex</body>
          </ownedComment>
          <ownedParameter xmi:id="_VuJFu0VdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VuJswUVdEfCS7cth2SLu0w" name="ResSefServlet">
        <ownedComment xmi:id="_V_hwp0VdEfCS7cth2SLu0w">
          <body>Servlet ce se ocupa cu respingerea unui concediu de catre Sef</body>
        </ownedComment>
        <generalization xmi:id="_VuK65kVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-TBlEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-TBlUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-TBlkVdEfCS7cth2SLu0w" name="dep" visibility="private" type="_S4wM8EVdEfCS7cth2SLu0w" association="_WAHmgUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_G54EVdEfCS7cth2SLu0w" name="init" specification="_VuKT0EVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>dep = new ResSefDao();
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_G54UVdEfCS7cth2SLu0w" name="doGet" specification="_VuKT0UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_G54kVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_G540VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doPost(request, response);
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_G55EVdEfCS7cth2SLu0w" name="doPost" specification="_VuKT1EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_G55UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_G55kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession sesiune = request.getSession(false); 
     // o verificare in plus, la un debug, asta ca sa ma asigur ca extrag ceva valid si nu am erori dupa
     if (sesiune == null) {
     	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
        PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Sesiune nula!');&quot;);
		    out.println(&quot;window.location.href = 'login.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
         return;
     }
     
     MyUser utilizatorcurent = (MyUser) sesiune.getAttribute(&quot;currentUser&quot;);
     if (utilizatorcurent == null) {
     	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
        PrintWriter out = response.getWriter();
		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
		    out.println(&quot;alert('Nu e conectat niciun utilizator!');&quot;);
		    out.println(&quot;window.location.href = 'login.jsp';&quot;);
		    out.println(&quot;&lt;/script>&quot;);
		    out.close();
         return;
     }

     int idconcediu = Integer.parseInt(request.getParameter(&quot;idcon&quot;));
     String motiv = request.getParameter(&quot;reason&quot;);
     //System.out.println(motiv);
         int id = -1;
 
     try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {
         dep.respingere(idconcediu, motiv); // fac aprobarea in DAO, aprobare = schimbare status
         id = getIdAng(idconcediu, conexiune);
             
             final int id2 = id; 
            // notificare asincrona
             new Thread(() -> {
                 try {
                     MailAsincron.send8(id2, idconcediu);
                 } catch (Exception e) {
                     e.printStackTrace();
                 }
             }).start();
             
             // apoi redirectionez la pagina care listeaza concediile
             // acest lucru il fac pentru ca utilizatorul sa poata vedea ce concedii sunt la un moment dat in institutie 
             // + sa vada ca s-a respins cu succes   
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);
             PrintWriter out = response.getWriter();
 		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
 		    out.println(&quot;alert('Aprobare cu succes!');&quot;);
 		    out.println(&quot;window.location.href = 'vizualizareconcedii.jsp';&quot;);
 		    out.println(&quot;&lt;/script>&quot;);
 		    out.close();
         } catch (SQLException e) {
         	// in caz de eroare redirectionez la aceeasi pagina, ca sa poata vedea ca nu s-a respins
             printSQLException(e);
             e.printStackTrace();
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);
             PrintWriter out = response.getWriter();
 		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
 		    out.println(&quot;alert('Eroare la aprobare la baza de date!');&quot;);
 		    out.println(&quot;window.location.href = 'concediinoidir.jsp';&quot;);
 		    out.println(&quot;&lt;/script>&quot;);
 		    out.close();
         } catch (ClassNotFoundException e) {
         	// in caz de eroare redirectionez la aceeasi pagina, ca sa poata vedea ca nu s-a respins
         	e.printStackTrace();
         	response.setContentType(&quot;text/html;charset=UTF-8&quot;);
             PrintWriter out = response.getWriter();
 		    out.println(&quot;&lt;script type='text/javascript'>&quot;);
 		    out.println(&quot;alert('Eroare la aprobare - nu s-a gasit clasa, debug only!');&quot;);
 		    out.println(&quot;window.location.href = 'concediinoidir.jsp';&quot;);
 		    out.println(&quot;&lt;/script>&quot;);
 		    out.close();
 		}
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_G550VdEfCS7cth2SLu0w" name="getIdAng" specification="_VuK64EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_G56EVdEfCS7cth2SLu0w" name="idconcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_G56UVdEfCS7cth2SLu0w" name="conexiune" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_G56kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>String sql = &quot;SELECT id_ang FROM concedii WHERE id = ?&quot;;
     try (PreparedStatement stmt = conexiune.prepareStatement(sql)) {
         stmt.setInt(1, idconcediu);
         ResultSet rezultat = stmt.executeQuery();
         if (rezultat.next()) {
             return rezultat.getInt(&quot;id_ang&quot;);
         }
     }
     return -1; 
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_G560VdEfCS7cth2SLu0w" name="printSQLException" specification="_VuK65EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_G57EVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>for (Throwable e: ex) {
         if (e instanceof SQLException) {
             e.printStackTrace(System.err);
             System.err.println(&quot;Stare: &quot; + ((SQLException) e).getSQLState());
             System.err.println(&quot;Cod eroare: &quot; + ((SQLException) e).getErrorCode());
             System.err.println(&quot;Explicatie: &quot; + e.getMessage());
             Throwable t = ex.getCause();
             while (t != null) {
                 System.out.println(&quot;Cauza: &quot; + t);
                 t = t.getCause();
             }
         }
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VuKT0EVdEfCS7cth2SLu0w" name="init" method="_V_G54EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_hwqEVdEfCS7cth2SLu0w">
            <body>initializare DAO</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:id="_VuKT0UVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_G54UVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_hwqUVdEfCS7cth2SLu0w">
            <body>Se face GET la apasarea butonului de respingere</body>
          </ownedComment>
          <ownedParameter xmi:id="_VuKT0kVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuKT00VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuKT1EVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_G55EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuKT1UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuKT1kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuK64EVdEfCS7cth2SLu0w" name="getIdAng" visibility="private" method="_V_G550VdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_hwqkVdEfCS7cth2SLu0w">
            <body>Functie ce afla id-ul unui angajat dintr-un concediu
     * @param idconcediu
     * @param conexiune
     * @return id angajat sau -1 daca nu a gasit nimic
     * @throws SQLException</body>
          </ownedComment>
          <ownedParameter xmi:id="_VuK64UVdEfCS7cth2SLu0w" name="idconcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuK64kVdEfCS7cth2SLu0w" name="conexiune" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuK640VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VuK65EVdEfCS7cth2SLu0w" name="printSQLException" visibility="private" isStatic="true" method="_V_G560VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_hwq0VdEfCS7cth2SLu0w">
            <body>Afiseaza frumos / Pretty print o eroare dintr-o baza de date
	 * @param ex</body>
          </ownedComment>
          <ownedParameter xmi:id="_VuK65UVdEfCS7cth2SLu0w" name="ex" type="_T9mVIEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VuLh8EVdEfCS7cth2SLu0w" name="ScheduleInterviewServlet">
        <generalization xmi:id="_VuNXJkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-TooUVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-TookVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-Too0VdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-TopEVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-TopUVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-TopkVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-Top0VdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-ToqEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_G57UVdEfCS7cth2SLu0w" name="doGet" specification="_VuMJAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_G57kVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_G570VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);&#xD;
     if (session == null || session.getAttribute(&quot;user_id&quot;) == null) {&#xD;
         response.sendRedirect(&quot;login.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     // Verifică dacă user-ul este din HR&#xD;
     int userDep = (Integer) session.getAttribute(&quot;user_dep&quot;);&#xD;
     if (userDep != 1) {&#xD;
         response.sendRedirect(&quot;index.jsp&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     try {&#xD;
         int appId = Integer.parseInt(request.getParameter(&quot;app_id&quot;));&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
&#xD;
         try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
              PreparedStatement ps = conn.prepareStatement(&#xD;
                  &quot;SELECT a.*, u.nume, u.prenume, u.email, j.titlu &quot; +&#xD;
                  &quot;FROM aplicari a &quot; +&#xD;
                  &quot;JOIN useri u ON a.id_ang = u.id &quot; +&#xD;
                  &quot;JOIN joburi j ON a.job_id = j.id &quot; +&#xD;
                  &quot;WHERE a.id = ?&quot;&#xD;
              )) {&#xD;
&#xD;
             ps.setInt(1, appId);&#xD;
             try (ResultSet rs = ps.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     request.setAttribute(&quot;application&quot;, rs);&#xD;
                     request.getRequestDispatcher(&quot;schedule-interview.jsp&quot;)&#xD;
                            .forward(request, response);&#xD;
                 } else {&#xD;
                     response.sendRedirect(&quot;JobsServlet?action=hrview&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     } catch (ClassNotFoundException | SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_G58EVdEfCS7cth2SLu0w" name="doPost" specification="_VuMwEkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_G58UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_G58kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try {&#xD;
         int appId            = Integer.parseInt(request.getParameter(&quot;app_id&quot;));&#xD;
         String interviewDate = request.getParameter(&quot;interview_date&quot;);&#xD;
         String interviewTime = request.getParameter(&quot;interview_time&quot;);&#xD;
         String location      = request.getParameter(&quot;location&quot;);&#xD;
         String notes         = request.getParameter(&quot;notes&quot;);&#xD;
&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
&#xD;
         try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
              PreparedStatement ps = conn.prepareStatement(&#xD;
                  &quot;UPDATE aplicari SET status = 'SCHEDULED', mentiuni = ? WHERE id = ?&quot;&#xD;
              )) {&#xD;
&#xD;
             String mentiuni = String.format(&#xD;
                 &quot;Interviu programat: %s %s la %s. Note: %s&quot;,&#xD;
                 interviewDate, interviewTime, location, notes&#xD;
             );&#xD;
             ps.setString(1, mentiuni);&#xD;
             ps.setInt(2, appId);&#xD;
&#xD;
             int result = ps.executeUpdate();&#xD;
             if (result > 0) {&#xD;
                 sendInterviewNotification(appId, interviewDate, interviewTime, location, notes);&#xD;
             }&#xD;
             response.sendRedirect(&quot;JobsServlet?action=hrview&quot;);&#xD;
         }&#xD;
     } catch (ClassNotFoundException | SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;error.jsp&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_G580VdEfCS7cth2SLu0w" name="sendInterviewNotification" specification="_VuNXIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_G59EVdEfCS7cth2SLu0w" name="appId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_G59UVdEfCS7cth2SLu0w" name="date">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_G59kVdEfCS7cth2SLu0w" name="time">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_G590VdEfCS7cth2SLu0w" name="location">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_G5-EVdEfCS7cth2SLu0w" name="notes">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>String message = String.format(&#xD;
         &quot;Interviu programat pentru aplicația #%d: %s %s la %s. Note: %s&quot;,&#xD;
         appId, date, time, location, notes&#xD;
     );&#xD;
&#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         // driver not found; log and return&#xD;
         e.printStackTrace();&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     String selectSql = &#xD;
         &quot;SELECT u.id, u.email FROM aplicari a JOIN useri u ON a.id_ang = u.id WHERE a.id = ?&quot;;&#xD;
     String insertSql = &#xD;
         &quot;INSERT INTO notificari (id_ang, tip, mesaj, data_notificare) VALUES (?, 'INTERVIEW', ?, NOW())&quot;;&#xD;
&#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
          PreparedStatement psSelect = conn.prepareStatement(selectSql)) {&#xD;
&#xD;
         psSelect.setInt(1, appId);&#xD;
         try (ResultSet rs = psSelect.executeQuery()) {&#xD;
             if (rs.next()) {&#xD;
                 int candId = rs.getInt(&quot;id&quot;);&#xD;
                 // Înregistrează notificarea în baza de date&#xD;
                 try (PreparedStatement psInsert = conn.prepareStatement(insertSql)) {&#xD;
                     psInsert.setInt(1, candId);&#xD;
                     psInsert.setString(2, message);&#xD;
                     psInsert.executeUpdate();&#xD;
                 }&#xD;
                 // Aici ai putea adăuga și trimis email folosind JavaMail, de ex.&#xD;
             }&#xD;
         }&#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VuMJAEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_G57UVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuMJAUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuMJAkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuMwEkVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_G58EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuMwE0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuMwFEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuNXIEVdEfCS7cth2SLu0w" name="sendInterviewNotification" visibility="private" method="_V_G580VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuNXIUVdEfCS7cth2SLu0w" name="appId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuNXIkVdEfCS7cth2SLu0w" name="date">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuNXI0VdEfCS7cth2SLu0w" name="time">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuNXJEVdEfCS7cth2SLu0w" name="location">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuNXJUVdEfCS7cth2SLu0w" name="notes">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_VuN-MEVdEfCS7cth2SLu0w" name="Sheet">
        <ownedComment xmi:id="_V_hwrEVdEfCS7cth2SLu0w">
          <body>Interfața Sheet definește operațiile de bază pentru lucrul cu foi de calcul.&#xD;
Această interfață este inspirată din API-ul Apache POI pentru Excel.</body>
        </ownedComment>
        <ownedAttribute xmi:id="_VuPMVUVdEfCS7cth2SLu0w" name="sheetName" visibility="package" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_VuPzYEVdEfCS7cth2SLu0w" name="lastRowNum" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_VuOlQEVdEfCS7cth2SLu0w" name="createRow">
          <ownedComment xmi:id="_V_hwrUVdEfCS7cth2SLu0w">
            <body>Creează un rând nou la indexul specificat.&#xD;
     * &#xD;
     * @param rowIndex Indexul rândului (începând de la 0)&#xD;
     * @return Obiectul Row creat</body>
          </ownedComment>
          <ownedParameter xmi:id="_VuOlQUVdEfCS7cth2SLu0w" name="rowIndex">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V9ZCoEVdEfCS7cth2SLu0w" type="_V8r4AkVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuOlQkVdEfCS7cth2SLu0w" name="getRow">
          <ownedComment xmi:id="_V_hwrkVdEfCS7cth2SLu0w">
            <body>Obține un rând existent la indexul specificat.&#xD;
     * &#xD;
     * @param rowIndex Indexul rândului (începând de la 0)&#xD;
     * @return Obiectul Row sau null dacă rândul nu există</body>
          </ownedComment>
          <ownedParameter xmi:id="_VuOlQ0VdEfCS7cth2SLu0w" name="rowIndex">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V9ZCoUVdEfCS7cth2SLu0w" type="_V8r4AkVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuPMUEVdEfCS7cth2SLu0w" name="setColumnWidth">
          <ownedComment xmi:id="_V_iXsEVdEfCS7cth2SLu0w">
            <body>Setează lățimea coloanei specificate.&#xD;
     * &#xD;
     * @param columnIndex Indexul coloanei (începând de la 0)&#xD;
     * @param width Lățimea dorită (în unități specifice)</body>
          </ownedComment>
          <ownedParameter xmi:id="_VuPMUUVdEfCS7cth2SLu0w" name="columnIndex">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuPMUkVdEfCS7cth2SLu0w" name="width">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VuPMU0VdEfCS7cth2SLu0w" name="autoSizeColumn">
          <ownedComment xmi:id="_V_iXsUVdEfCS7cth2SLu0w">
            <body>Realizează auto-dimensionarea coloanei specificate.&#xD;
     * &#xD;
     * @param columnIndex Indexul coloanei (începând de la 0)</body>
          </ownedComment>
          <ownedParameter xmi:id="_VuPMVEVdEfCS7cth2SLu0w" name="columnIndex">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VuPzYUVdEfCS7cth2SLu0w" name="protectSheet" visibility="package">
          <ownedComment xmi:id="_V_iXs0VdEfCS7cth2SLu0w">
            <body>Adaugă o zonă de protecție pentru foaia de calcul.&#xD;
     * &#xD;
     * @param password Parola pentru protecție</body>
          </ownedComment>
          <ownedParameter xmi:id="_VuPzYkVdEfCS7cth2SLu0w" name="password">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VuQacEVdEfCS7cth2SLu0w" name="createFreezePane">
          <ownedComment xmi:id="_V_iXtEVdEfCS7cth2SLu0w">
            <body>Deschide zona de îngheț (freeze pane) la coordonatele specificate.&#xD;
     * &#xD;
     * @param colSplit Numărul de coloane fixate&#xD;
     * @param rowSplit Numărul de rânduri fixate</body>
          </ownedComment>
          <ownedParameter xmi:id="_VuQacUVdEfCS7cth2SLu0w" name="colSplit">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuQackVdEfCS7cth2SLu0w" name="rowSplit">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VuQac0VdEfCS7cth2SLu0w" name="groupRow">
          <ownedComment xmi:id="_V_iXtUVdEfCS7cth2SLu0w">
            <body>Grupează rândurile specificate.&#xD;
     * &#xD;
     * @param fromRow Rândul de început pentru grupare&#xD;
     * @param toRow Rândul de final pentru grupare</body>
          </ownedComment>
          <ownedParameter xmi:id="_VuQadEVdEfCS7cth2SLu0w" name="fromRow">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuRBgEVdEfCS7cth2SLu0w" name="toRow">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V9ZpsEVdEfCS7cth2SLu0w" name="setDefaultColumnStyle">
          <ownedComment xmi:id="_V_iXskVdEfCS7cth2SLu0w">
            <body>Setează stilul implicit pentru celule în această foaie.&#xD;
     * &#xD;
     * @param style Stilul ce va fi folosit ca implicit</body>
          </ownedComment>
          <ownedParameter xmi:id="_V9ZpsUVdEfCS7cth2SLu0w" name="columnIndex">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V9ZpskVdEfCS7cth2SLu0w" name="style" type="_V8r4AEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VuRokEVdEfCS7cth2SLu0w" name="SporuriServlet">
        <generalization xmi:id="_VuSPo0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Hg8EVdEfCS7cth2SLu0w" name="doGet" specification="_VuRokUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Hg8UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Hg8kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doPost(request, response);&#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Hg80VdEfCS7cth2SLu0w" name="doPost" specification="_VuSPoEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Hg9EVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Hg9UVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>int idAng = Integer.parseInt(request.getParameter(&quot;id_ang&quot;));&#xD;
     int tipSpor = Integer.parseInt(request.getParameter(&quot;tip_spor&quot;));&#xD;
     Date dataStart = Date.valueOf(request.getParameter(&quot;data_start&quot;));&#xD;
     Date dataFinal = Date.valueOf(request.getParameter(&quot;data_final&quot;));&#xD;
     String motiv = request.getParameter(&quot;motiv&quot;);&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Încărcare driver MySQL&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Creare conexiune directă&#xD;
         conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
         &#xD;
         // Actualizare sporuri angajat&#xD;
         String sql;&#xD;
         PreparedStatement pstmt;&#xD;
         &#xD;
         // Verifică dacă tipSpor este 0 și setează valoarea NULL în coloana sporuri&#xD;
         if (tipSpor == 0) {&#xD;
             sql = &quot;UPDATE useri SET sporuri = NULL WHERE id = ?&quot;;&#xD;
             pstmt = conn.prepareStatement(sql);&#xD;
             pstmt.setInt(1, idAng);&#xD;
         } else {&#xD;
             sql = &quot;UPDATE useri SET sporuri = ? WHERE id = ?&quot;;&#xD;
             pstmt = conn.prepareStatement(sql);&#xD;
             pstmt.setInt(1, tipSpor);&#xD;
             pstmt.setInt(2, idAng);&#xD;
         }&#xD;
         &#xD;
         int result = pstmt.executeUpdate();&#xD;
         &#xD;
         if (result > 0) {&#xD;
             // Înregistrare istoric spor&#xD;
             sql = &quot;INSERT INTO istoric_sporuri (id_ang, tip_spor, data_start, data_final, motiv) &quot; +&#xD;
                   &quot;VALUES (?, ?, ?, ?, ?)&quot;;&#xD;
             pstmt = conn.prepareStatement(sql);&#xD;
             pstmt.setInt(1, idAng);&#xD;
             pstmt.setInt(2, tipSpor);&#xD;
             pstmt.setDate(3, dataStart);&#xD;
             pstmt.setDate(4, dataFinal);&#xD;
             pstmt.setString(5, motiv);&#xD;
             pstmt.executeUpdate();&#xD;
             &#xD;
             response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
 	        PrintWriter out = response.getWriter();&#xD;
 	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
 	        if (tipSpor == 0) {&#xD;
 	            out.println(&quot;alert('Spor eliminat cu succes!');&quot;);&#xD;
 	        } else {&#xD;
 	            out.println(&quot;alert('Acordare spor cu succes!');&quot;);&#xD;
 	        }&#xD;
 	        out.println(&quot;window.location.href = 'viewang.jsp';&quot;);&#xD;
 	        out.println(&quot;&lt;/script>&quot;);&#xD;
 	        out.close();&#xD;
 	        return; &#xD;
         } else {&#xD;
         	response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
 	        PrintWriter out = response.getWriter();&#xD;
 	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
 	        if (tipSpor == 0) {&#xD;
 	            out.println(&quot;alert('Nu s-a putut elimina sporul!');&quot;);&#xD;
 	        } else {&#xD;
 	            out.println(&quot;alert('Nu s-a putut adauga sporul!');&quot;);&#xD;
 	        }&#xD;
 	        out.println(&quot;window.location.href = 'viewang.jsp';&quot;);&#xD;
 	        out.println(&quot;&lt;/script>&quot;);&#xD;
 	        out.close();&#xD;
 	        return; &#xD;
         }&#xD;
         &#xD;
         // pstmt.close();&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	        PrintWriter out = response.getWriter();&#xD;
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
	        out.println(&quot;alert('Nu s-a putut modifica sporul!');&quot;);&#xD;
	        out.println(&quot;window.location.href = 'viewang.jsp';&quot;);&#xD;
	        out.println(&quot;&lt;/script>&quot;);&#xD;
	        out.close();&#xD;
	        return; &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         response.setContentType(&quot;text/html;charset=UTF-8&quot;);&#xD;
	        PrintWriter out = response.getWriter();&#xD;
	        out.println(&quot;&lt;script type='text/javascript'>&quot;);&#xD;
	        out.println(&quot;alert('Nu s-a putut modifica sporul!');&quot;);&#xD;
	        out.println(&quot;window.location.href = 'viewang.jsp';&quot;);&#xD;
	        out.println(&quot;&lt;/script>&quot;);&#xD;
	        out.close();&#xD;
	        return; &#xD;
     } finally {&#xD;
     	 &#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VuRokUVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_Hg8EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuRokkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuRok0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuSPoEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_Hg80VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuSPoUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuSPokVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VuSPpEVdEfCS7cth2SLu0w" name="ToggleDenumireServlet">
        <generalization xmi:id="_VuS2s0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-UPsEVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-UPsUVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-UPskVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-UPs0VdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-UPtEVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-UPtUVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Hg9kVdEfCS7cth2SLu0w" name="doPost" specification="_VuS2sEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Hg90VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Hg-EVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json;charset=UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     JSONObject json = new JSONObject();&#xD;
     &#xD;
//        HttpSession session = request.getSession();&#xD;
//        Integer userTip = (Integer) session.getAttribute(&quot;userTip&quot;);&#xD;
//        Integer userDep = (Integer) session.getAttribute(&quot;userDep&quot;);&#xD;
//        &#xD;
//        // Verificare permisiuni - doar Admin HR sau Director&#xD;
//        if (userTip == null || (userTip != 0 &amp;&amp; (userTip != 3 &amp;&amp; userDep != 1))) {&#xD;
//            json.put(&quot;success&quot;, false);&#xD;
//            json.put(&quot;message&quot;, &quot;Nu aveți permisiuni pentru această operațiune!&quot;);&#xD;
//            out.print(json.toString());&#xD;
//            return;&#xD;
//        }&#xD;
     &#xD;
     int id = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
     boolean currentStatus = Boolean.parseBoolean(request.getParameter(&quot;current_status&quot;));&#xD;
     boolean newStatus = !currentStatus;&#xD;
     &#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
         &#xD;
         String sql = &quot;UPDATE denumiri_pozitii SET activ = ? WHERE id = ?&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql);&#xD;
         pstmt.setBoolean(1, newStatus);&#xD;
         pstmt.setInt(2, id);&#xD;
         &#xD;
         int rowsAffected = pstmt.executeUpdate();&#xD;
         &#xD;
         if (rowsAffected > 0) {&#xD;
             json.put(&quot;success&quot;, true);&#xD;
             json.put(&quot;message&quot;, &quot;Statusul denumirii a fost actualizat cu succes!&quot;);&#xD;
         } else {&#xD;
             json.put(&quot;success&quot;, false);&#xD;
             json.put(&quot;message&quot;, &quot;Nu s-a putut actualiza statusul denumirii!&quot;);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Eroare la actualizarea statusului denumirii: &quot; + e.getMessage());&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         e.printStackTrace();&#xD;
         json.put(&quot;success&quot;, false);&#xD;
         json.put(&quot;message&quot;, &quot;Eroare la încărcarea driverului JDBC!&quot;);&#xD;
     } finally {&#xD;
         if (conn != null) {&#xD;
             try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     out.print(json.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VuS2sEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_Hg9kVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuS2sUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuS2skVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VuTdwEVdEfCS7cth2SLu0w" name="TogglePozitieServlet">
        <generalization xmi:id="_VuUE00VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-UPtkVdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-UPt0VdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-UPuEVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-UPuUVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-UPukVdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-U2wEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Hg-UVdEfCS7cth2SLu0w" name="doPost" specification="_VuUE0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Hg-kVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Hg-0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json;charset=UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     JSONObject json = new JSONObject();&#xD;
     &#xD;
     json.put(&quot;success&quot;, false);&#xD;
     json.put(&quot;message&quot;, &quot;Această funcționalitate nu mai este disponibilă în versiunea curentă a aplicației.&quot;);&#xD;
     &#xD;
     out.print(json.toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VuUE0EVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_Hg-UVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuUE0UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuUE0kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VuUr4EVdEfCS7cth2SLu0w" name="UpdateSediutLocatieServlet">
        <ownedComment xmi:id="_V_iXtkVdEfCS7cth2SLu0w">
          <body>Servlet pentru actualizarea locației unui sediu</body>
        </ownedComment>
        <generalization xmi:id="_VuV6BEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-U2wUVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-U2wkVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-U2w0VdEfCS7cth2SLu0w" name="JDBC_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-U2xEVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-U2xUVdEfCS7cth2SLu0w" name="JDBC_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-U2xkVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-U2x0VdEfCS7cth2SLu0w" name="JDBC_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-U2yEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Hg_EVdEfCS7cth2SLu0w" name="UpdateSediutLocatieServlet" specification="_VuUr4UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Hg_UVdEfCS7cth2SLu0w" type="_VuUr4EVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Hg_kVdEfCS7cth2SLu0w" name="doPost" specification="_VuVS8UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Hg_0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_HhAEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     try {&#xD;
         // Parse JSON request body&#xD;
         StringBuilder buffer = new StringBuilder();&#xD;
         BufferedReader reader = request.getReader();&#xD;
         String line;&#xD;
         while ((line = reader.readLine()) != null) {&#xD;
             buffer.append(line);&#xD;
         }&#xD;
         &#xD;
         JSONObject jsonRequest = new JSONObject(buffer.toString());&#xD;
         &#xD;
         // Extrage parametrii din JSON&#xD;
         int idSediu = jsonRequest.getInt(&quot;idSediu&quot;);&#xD;
         String strada = jsonRequest.getString(&quot;strada&quot;);&#xD;
         String cod = jsonRequest.getString(&quot;cod&quot;);&#xD;
         String judet = jsonRequest.getString(&quot;judet&quot;);&#xD;
         String oras = jsonRequest.getString(&quot;oras&quot;);&#xD;
         String tara = jsonRequest.getString(&quot;tara&quot;);&#xD;
         double latitudine = jsonRequest.getDouble(&quot;latitudine&quot;);&#xD;
         double longitudine = jsonRequest.getDouble(&quot;longitudine&quot;);&#xD;
         &#xD;
         // Validare date&#xD;
         if (strada.isEmpty() || cod.isEmpty() || judet.isEmpty() || &#xD;
             oras.isEmpty() || tara.isEmpty()) {&#xD;
             response.setStatus(400);&#xD;
             out.println(&quot;{\&quot;error\&quot;:\&quot;Toate câmpurile sunt obligatorii\&quot;}&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Actualizare în baza de date&#xD;
         boolean success = updateSediuLocation(idSediu, strada, cod, judet, oras, tara, latitudine, longitudine);&#xD;
         &#xD;
         if (success) {&#xD;
             out.println(&quot;{\&quot;success\&quot;:true,\&quot;message\&quot;:\&quot;Locația sediului a fost actualizată cu succes\&quot;}&quot;);&#xD;
         } else {&#xD;
             response.setStatus(500);&#xD;
             out.println(&quot;{\&quot;error\&quot;:\&quot;Eroare la actualizarea locației sediului\&quot;}&quot;);&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         response.setStatus(500);&#xD;
         out.println(&quot;{\&quot;error\&quot;:\&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_IIAEVdEfCS7cth2SLu0w" name="updateSediuLocation" specification="_VuVS9EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_IIAUVdEfCS7cth2SLu0w" name="idSediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IIAkVdEfCS7cth2SLu0w" name="strada">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IIA0VdEfCS7cth2SLu0w" name="cod">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IIBEVdEfCS7cth2SLu0w" name="judet">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IIBUVdEfCS7cth2SLu0w" name="oras">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IIBkVdEfCS7cth2SLu0w" name="tara">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IIB0VdEfCS7cth2SLu0w" name="latitudine">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IICEVdEfCS7cth2SLu0w" name="longitudine">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IICUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     &#xD;
     String sql = &quot;UPDATE sedii SET strada = ?, cod = ?, judet = ?, oras = ?, &quot; +&#xD;
                  &quot;tara = ?, latitudine = ?, longitudine = ? WHERE id_sediu = ?&quot;;&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);&#xD;
          PreparedStatement stmt = conn.prepareStatement(sql)) {&#xD;
         &#xD;
         stmt.setString(1, strada);&#xD;
         stmt.setString(2, cod);&#xD;
         stmt.setString(3, judet);&#xD;
         stmt.setString(4, oras);&#xD;
         stmt.setString(5, tara);&#xD;
         stmt.setDouble(6, latitudine);&#xD;
         stmt.setDouble(7, longitudine);&#xD;
         stmt.setInt(8, idSediu);&#xD;
         &#xD;
         int rowsAffected = stmt.executeUpdate();&#xD;
         return rowsAffected > 0;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VuUr4UVdEfCS7cth2SLu0w" name="UpdateSediutLocatieServlet" method="_V_Hg_EVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VuUr4kVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VuUr40VdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VuVS8EVdEfCS7cth2SLu0w" type="_VuUr4EVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuVS8UVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_Hg_kVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuVS8kVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuVS80VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuVS9EVdEfCS7cth2SLu0w" name="updateSediuLocation" visibility="private" method="_V_IIAEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w _UCPkkUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuVS9UVdEfCS7cth2SLu0w" name="idSediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuVS9kVdEfCS7cth2SLu0w" name="strada">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuVS90VdEfCS7cth2SLu0w" name="cod">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuVS-EVdEfCS7cth2SLu0w" name="judet">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuVS-UVdEfCS7cth2SLu0w" name="oras">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuV6AEVdEfCS7cth2SLu0w" name="tara">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuV6AUVdEfCS7cth2SLu0w" name="latitudine">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuV6AkVdEfCS7cth2SLu0w" name="longitudine">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuV6A0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VuWhEEVdEfCS7cth2SLu0w" name="UpdateTaskStatusServlet">
        <generalization xmi:id="_VuXvMkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-U2yUVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-U2ykVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_IICkVdEfCS7cth2SLu0w" name="doPost" specification="_VuWhEUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_IIC0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_IIDEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String id = request.getParameter(&quot;id&quot;);&#xD;
     String status = request.getParameter(&quot;status&quot;);&#xD;
     &#xD;
     if (id == null || status == null || id.isEmpty() || status.isEmpty()) {&#xD;
         response.sendRedirect(&quot;administrare_taskuri.jsp?action=list&amp;error=parametri_lipsa&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {&#xD;
             // Actualizăm doar statusul&#xD;
             String sql = &quot;UPDATE tasks SET status = ? WHERE id = ?&quot;;&#xD;
             try (PreparedStatement pstmt = connection.prepareStatement(sql)) {&#xD;
                 pstmt.setString(1, status);&#xD;
                 pstmt.setString(2, id);&#xD;
                 &#xD;
                 int rowsAffected = pstmt.executeUpdate();&#xD;
                 &#xD;
                 if (rowsAffected > 0) {&#xD;
                     // Adăugare notificare pentru supervizor&#xD;
                     String sqlNotification = &quot;INSERT INTO notificari_task (id_task, id_ang, tip_notificare, mesaj) &quot; +&#xD;
                                             &quot;SELECT ?, supervizor, 'STATUS_SCHIMBAT', CONCAT('Statusul task-ului \&quot;', nume, '\&quot; a fost modificat') &quot; +&#xD;
                                             &quot;FROM tasks WHERE id = ?&quot;;&#xD;
                     try (PreparedStatement pstmtNotif = connection.prepareStatement(sqlNotification)) {&#xD;
                         pstmtNotif.setString(1, id);&#xD;
                         pstmtNotif.setString(2, id);&#xD;
                         pstmtNotif.executeUpdate();&#xD;
                     } catch (Exception e) {&#xD;
                         // Ignorăm erorile de notificare&#xD;
                         e.printStackTrace();&#xD;
                     }&#xD;
                     &#xD;
                     response.sendRedirect(&quot;administrare_taskuri.jsp?action=list&amp;success=true&quot;);&#xD;
                 } else {&#xD;
                     response.sendRedirect(&quot;administrare_taskuri.jsp?action=status&amp;id=&quot; + id + &quot;&amp;error=true&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     } catch (ClassNotFoundException | SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendRedirect(&quot;administrare_taskuri.jsp?action=status&amp;id=&quot; + id + &quot;&amp;error=&quot; + e.getMessage());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VuWhEUVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_IICkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuXvMEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuXvMUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VuXvM0VdEfCS7cth2SLu0w" name="UploadImageServlet">
        <generalization xmi:id="_VuY9UEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-Vd0EVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-Vd0UVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_IIDUVdEfCS7cth2SLu0w" name="doPost" specification="_VuYWQUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_IIDkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_IID0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;text/html;charset=UTF-8&quot;);
     HttpSession session = request.getSession(false);
     
     
     if (session != null) {
         MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);
         if (currentUser != null) {
             String username = currentUser.getUsername();
             try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {
                 PreparedStatement preparedStatement = connection.prepareStatement(&quot;SELECT id FROM useri WHERE username = ?&quot;);
                 preparedStatement.setString(1, username);
                 ResultSet rs = preparedStatement.executeQuery();
                 if (rs.next()) {
                     int userId = rs.getInt(&quot;id&quot;);
                     Part filePart = request.getPart(&quot;image&quot;);
                     if (filePart != null &amp;&amp; filePart.getSize() > 0) {
                         try (InputStream inputStream = filePart.getInputStream()) {
                             String sql = &quot;UPDATE useri SET profil = ? WHERE id = ?&quot;;
                             PreparedStatement statement = connection.prepareStatement(sql);
                             statement.setBlob(1, inputStream);
                             statement.setInt(2, userId);
                             int ret = statement.executeUpdate();
                             
                         }
                     } else {
                         ;;
                     }
                 } else {
                     ;;
                 }
             } catch (Exception e) {
                 System.out.println(e.getMessage());
             }
         } else {
             ;;
         }
     }
     
     response.getWriter().println(
     	    &quot;&lt;html>&lt;head>&lt;title>Upload Status&lt;/title>&lt;/head>&quot; +
     	    &quot;&lt;body onload='window.top.location.reload();'>&quot; + // Folosește eventul onload
     	    
     	    &quot;&lt;/body>&lt;/html>&quot;
     	);

 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VuYWQUVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_IIDUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuYWQkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VuYWQ0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VuZkYEVdEfCS7cth2SLu0w" name="Workbook">
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_IIEEVdEfCS7cth2SLu0w" name="createSheet" specification="_VuZkYUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_IIEUVdEfCS7cth2SLu0w" name="string">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_IIEkVdEfCS7cth2SLu0w" type="_VuN-MEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>// TODO Auto-generated method stub&#xD;
		return null;&#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_IIE0VdEfCS7cth2SLu0w" name="write" specification="_V9aQwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_IIFEVdEfCS7cth2SLu0w" name="outputStream" type="_V8ttMUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// TODO Auto-generated method stub&#xD;
		&#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_IIFUVdEfCS7cth2SLu0w" name="close" specification="_VuaLcEVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>// TODO Auto-generated method stub&#xD;
		&#xD;
	</body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VuZkYUVdEfCS7cth2SLu0w" name="createSheet" method="_V_IIEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuZkYkVdEfCS7cth2SLu0w" name="string">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V8ttM0VdEfCS7cth2SLu0w" type="_VuN-MEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuaLcEVdEfCS7cth2SLu0w" name="close" method="_V_IIFUVdEfCS7cth2SLu0w"/>
        <ownedOperation xmi:id="_V9aQwEVdEfCS7cth2SLu0w" name="write" method="_V_IIE0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V9aQwUVdEfCS7cth2SLu0w" name="outputStream" type="_V8ttMUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VuaLcUVdEfCS7cth2SLu0w" name="XSSFWorkbook">
        <generalization xmi:id="_V8uUQEVdEfCS7cth2SLu0w" general="_VuZkYEVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VuaygEVdEfCS7cth2SLu0w" name="decenulvede">
        <generalization xmi:id="_VubZk0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-Vd00VdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-Vd1EVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_IIFkVdEfCS7cth2SLu0w" name="doPost" specification="_VuaygUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_IIF0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_IIGEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);
     PrintWriter out = response.getWriter();
     
     HttpSession session = request.getSession(false);
     if (session == null || session.getAttribute(&quot;currentUser&quot;) == null) {
         response.sendError(HttpServletResponse.SC_UNAUTHORIZED, &quot;User not logged in&quot;);
         return;
     }
     
     MyUser currentUser = (MyUser) session.getAttribute(&quot;currentUser&quot;);
     String username = currentUser.getUsername();
     
     // Obținem parametrul de status din request - punem log pentru depanare
     String statusParam = request.getParameter(&quot;status&quot;);
     System.out.println(&quot;Status param received: &quot; + statusParam);
     
     int status;
     try {
         if (statusParam != null &amp;&amp; !statusParam.isEmpty()) {
             status = Integer.parseInt(statusParam);
         } else {
             status = 3; // Valoare implicită - &quot;Oricare&quot;
         }
     } catch (NumberFormatException e) {
         System.out.println(&quot;Error parsing status parameter: &quot; + e.getMessage());
         status = 3; // În caz de eroare, folosim valoarea implicită
     }
     
     System.out.println(&quot;Using status filter: &quot; + status);
     
     try {
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
         
         try (Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {
             
             int userId = 0;
             int departmentId = 0;
             int ierarhie = 0;
             
             // Obținem informațiile despre utilizator
             String userQuery = &quot;SELECT u.id, u.id_dep, t.ierarhie &quot; +
                                &quot;FROM useri u &quot; +
                                &quot;JOIN tipuri t ON u.tip = t.tip &quot; +
                                &quot;WHERE u.username = ?&quot;;
             
             try (PreparedStatement userStmt = conn.prepareStatement(userQuery)) {
                 userStmt.setString(1, username);
                 try (ResultSet userRs = userStmt.executeQuery()) {
                     if (userRs.next()) {
                         userId = userRs.getInt(&quot;id&quot;);
                         departmentId = userRs.getInt(&quot;id_dep&quot;);
                         ierarhie = userRs.getInt(&quot;ierarhie&quot;);
                         System.out.println(&quot;User info - ID: &quot; + userId + &quot;, Dept: &quot; + departmentId + &quot;, Ierarhie: &quot; + ierarhie);
                     } else {
                         response.sendError(HttpServletResponse.SC_NOT_FOUND, &quot;User not found&quot;);
                         return;
                     }
                 }
             }
             
             // Determinăm rolul utilizatorului
             boolean isDirector = (ierarhie &lt; 3);
             boolean isSef = (ierarhie >= 4 &amp;&amp; ierarhie &lt;= 5);
             System.out.println(&quot;User roles - Director: &quot; + isDirector + &quot;, Sef: &quot; + isSef);
             
             // Construim partea comună a query-ului
             StringBuilder queryBuilder = new StringBuilder();
             queryBuilder.append(&quot;SELECT c.id, c.id_ang, u.nume, u.prenume, d.nume_dep, &quot;)
                        .append(&quot;t.denumire AS functie, c.start_c, c.end_c, c.motiv, c.locatie, &quot;)
                        .append(&quot;s.nume_status, u.culoare, tc.motiv AS tip_concediu, c.status &quot;)
                        .append(&quot;FROM concedii c &quot;)
                        .append(&quot;JOIN useri u ON c.id_ang = u.id &quot;)
                        .append(&quot;JOIN departament d ON u.id_dep = d.id_dep &quot;)
                        .append(&quot;JOIN tipuri t ON u.tip = t.tip &quot;)
                        .append(&quot;JOIN statusuri s ON c.status = s.status &quot;)
                        .append(&quot;JOIN tipcon tc ON c.tip = tc.tip &quot;);
             
             // Adăugăm condițiile WHERE în funcție de rol și status
             boolean addedWhereClause = false;
             PreparedStatement leaveStmt;
             
             // 1. Filtrare după rol (director, șef, utilizator normal)
             if (!isDirector &amp;&amp; !isSef) {
                 // Utilizator normal/începător - vede doar concediile proprii
                 queryBuilder.append(&quot;WHERE c.id_ang = ? &quot;);
                 addedWhereClause = true;
             } else if (isSef) {
                 // Șef - vede concediile din departamentul său
                 queryBuilder.append(&quot;WHERE u.id_dep = ? &quot;);
                 addedWhereClause = true;
             }
             
             // 2. Filtrare după status (dacă este selectat un status specific)
             if (status != 3) {
                 if (addedWhereClause) {
                     queryBuilder.append(&quot;AND c.status = ? &quot;);
                 } else {
                     queryBuilder.append(&quot;WHERE c.status = ? &quot;);
                     addedWhereClause = true;
                 }
             }
             
             // Query-ul final
             String leaveQuery = queryBuilder.toString();
             System.out.println(&quot;Final query: &quot; + leaveQuery);
             
             // Pregătim statement-ul cu parametrii necesari
             leaveStmt = conn.prepareStatement(leaveQuery);
             
             int paramIndex = 1;
             
             // Adăugăm parametrii în funcție de condițiile din WHERE
             if (!isDirector &amp;&amp; !isSef) {
                 leaveStmt.setInt(paramIndex++, userId);
             } else if (isSef) {
                 leaveStmt.setInt(paramIndex++, departmentId);
             }
             
             if (status != 3) {
                 leaveStmt.setInt(paramIndex++, status);
             }
             
             // Executăm query-ul și construim răspunsul JSON
             JSONArray eventsArray = new JSONArray();
             try (ResultSet rs = leaveStmt.executeQuery()) {
                 int count = 0;
                 while (rs.next()) {
                     count++;
                     JSONObject event = new JSONObject();
                     
                     String statusName = rs.getString(&quot;nume_status&quot;);
                     String title = rs.getString(&quot;nume&quot;) + &quot; &quot; + rs.getString(&quot;prenume&quot;) + &quot; - &quot; + rs.getString(&quot;tip_concediu&quot;);
                     String department = rs.getString(&quot;nume_dep&quot;);
                     String color = rs.getString(&quot;culoare&quot;);
                     int eventStatus = rs.getInt(&quot;status&quot;);
                     
                     // Adăugăm detalii suplimentare în titlu în funcție de rol
                     if ((isDirector || isSef) &amp;&amp; rs.getInt(&quot;id_ang&quot;) != userId) {
                         title += &quot; (&quot; + department + &quot;)&quot;;
                     }
                     
                     event.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));
                     event.put(&quot;title&quot;, title);
                     event.put(&quot;start&quot;, rs.getDate(&quot;start_c&quot;).toString());
                     
                     // Asigură-te că end_c nu este null
                     java.sql.Date endDate = rs.getDate(&quot;end_c&quot;);
                     if (endDate != null) {
                         event.put(&quot;end&quot;, endDate.toString());
                     } else {
                         event.put(&quot;end&quot;, rs.getDate(&quot;start_c&quot;).toString());
                     }
                     
                     event.put(&quot;description&quot;, rs.getString(&quot;motiv&quot;));
                     event.put(&quot;location&quot;, rs.getString(&quot;locatie&quot;));
                     event.put(&quot;status&quot;, statusName);
                     event.put(&quot;statusCode&quot;, eventStatus);
                     
                     // Personalizăm culoarea evenimentului în funcție de status
                     switch (eventStatus) {
                         case -2: // Dezaprobat director
                             event.put(&quot;textColor&quot;, &quot;#FFFFFF&quot;);
                             event.put(&quot;backgroundColor&quot;, &quot;#DC3545&quot;);
                             event.put(&quot;borderColor&quot;, &quot;#DC3545&quot;);
                             break;
                         case -1: // Dezaprobat șef
                             event.put(&quot;textColor&quot;, &quot;#FFFFFF&quot;);
                             event.put(&quot;backgroundColor&quot;, &quot;#FD7E14&quot;);
                             event.put(&quot;borderColor&quot;, &quot;#FD7E14&quot;);
                             break;
                         case 0: // Neaprobat
                             event.put(&quot;textColor&quot;, &quot;#212529&quot;);
                             event.put(&quot;backgroundColor&quot;, &quot;#FFC107&quot;);
                             event.put(&quot;borderColor&quot;, &quot;#FFC107&quot;);
                             event.put(&quot;className&quot;, &quot;tentative-event&quot;);
                             break;
                         case 1: // Aprobat șef
                             event.put(&quot;textColor&quot;, &quot;#FFFFFF&quot;);
                             event.put(&quot;backgroundColor&quot;, &quot;#0DCAF0&quot;);
                             event.put(&quot;borderColor&quot;, &quot;#0DCAF0&quot;);
                             break;
                         case 2: // Aprobat director
                             event.put(&quot;textColor&quot;, &quot;#FFFFFF&quot;);
                             event.put(&quot;backgroundColor&quot;, &quot;#198754&quot;);
                             event.put(&quot;borderColor&quot;, &quot;#198754&quot;);
                             break;
                         default:
                             // Culoare implicită (culoarea utilizatorului)
                             event.put(&quot;backgroundColor&quot;, color);
                             event.put(&quot;borderColor&quot;, color);
                             break;
                     }
                     
                     eventsArray.put(event);
                 }
                 System.out.println(&quot;Found &quot; + count + &quot; leave records&quot;);
             }
             
             out.print(eventsArray.toString());
         }
     } catch (Exception e) {
         System.out.println(&quot;Error in servlet: &quot; + e.getMessage());
         e.printStackTrace();
         
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
         JSONObject error = new JSONObject();
         error.put(&quot;error&quot;, e.getMessage());
         out.print(error.toString());
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_IIGUVdEfCS7cth2SLu0w" name="doGet" specification="_VubZkEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_IvEEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_IvEUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doPost(request, response);
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VuaygUVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_IIFkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuaygkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vuayg0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VubZkEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_IIGUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VubZkUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VubZkkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VubZlEVdEfCS7cth2SLu0w" name="moaradevant">
        <generalization xmi:id="_VucAo0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-Vd1UVdEfCS7cth2SLu0w" name="DB_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-Vd1kVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-Vd10VdEfCS7cth2SLu0w" name="DB_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-Vd2EVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-Vd2UVdEfCS7cth2SLu0w" name="DB_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-Vd2kVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_IvEkVdEfCS7cth2SLu0w" name="doPost" specification="_VucAoEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_IvE0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_IvFEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession();&#xD;
     Integer userTip = (Integer) session.getAttribute(&quot;userTip&quot;);&#xD;
&#xD;
     // Verificare permisiuni&#xD;
     if (userTip == null || (userTip != 0 &amp;&amp; userTip != 3 &amp;&amp; userTip != 10)) {&#xD;
         response.sendRedirect(&quot;Access.jsp?error=accessDenied&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     String nume = request.getParameter(&quot;nume&quot;);&#xD;
     int idProiect = Integer.parseInt(request.getParameter(&quot;id_prj&quot;));&#xD;
     int supervizor = Integer.parseInt(request.getParameter(&quot;supervizor&quot;));&#xD;
     String[] membri = request.getParameterValues(&quot;membri&quot;);&#xD;
&#xD;
     // Validări de bază&#xD;
     if (nume == null || nume.trim().isEmpty()) {&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=teams&amp;id=&quot; + idProiect + &quot;&amp;error=invalidTeamName&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     Connection conn = null;&#xD;
     try {&#xD;
         // Load the JDBC driver&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         &#xD;
         // Establish connection using DriverManager&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         // Disable auto-commit for transaction&#xD;
         conn.setAutoCommit(false);&#xD;
&#xD;
         // Adaugă echipa&#xD;
         String sql = &quot;INSERT INTO echipe (nume, supervizor, id_prj) VALUES (?, ?, ?)&quot;;&#xD;
         PreparedStatement pstmt = conn.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);&#xD;
         pstmt.setString(1, nume);&#xD;
         pstmt.setInt(2, supervizor);&#xD;
         pstmt.setInt(3, idProiect);&#xD;
         pstmt.executeUpdate();&#xD;
&#xD;
         // Obține ID-ul echipei nou create&#xD;
         ResultSet rs = pstmt.getGeneratedKeys();&#xD;
         int idEchipa = 0;&#xD;
         if (rs.next()) {&#xD;
             idEchipa = rs.getInt(1);&#xD;
         }&#xD;
         rs.close();&#xD;
         pstmt.close();&#xD;
&#xD;
         // Dacă nu s-a creat ID echipă, facem rollback și returnăm eroare&#xD;
         if (idEchipa == 0) {&#xD;
             conn.rollback();&#xD;
             response.sendRedirect(&quot;administrare_proiecte.jsp?action=teams&amp;id=&quot; + idProiect + &quot;&amp;error=teamCreationFailed&quot;);&#xD;
             return;&#xD;
         }&#xD;
&#xD;
         // Adaugă membrii în echipă - actualizăm câmpul id_echipa din tabela useri&#xD;
         if (membri != null &amp;&amp; idEchipa > 0) {&#xD;
             sql = &quot;UPDATE useri SET id_echipa = ? WHERE id = ?&quot;;&#xD;
             pstmt = conn.prepareStatement(sql);&#xD;
&#xD;
             for (String idMembru : membri) {&#xD;
                 pstmt.setInt(1, idEchipa);&#xD;
                 pstmt.setInt(2, Integer.parseInt(idMembru));&#xD;
                 pstmt.addBatch();&#xD;
             }&#xD;
&#xD;
             pstmt.executeBatch();&#xD;
             pstmt.close();&#xD;
         }&#xD;
&#xD;
         // Commit transaction&#xD;
         conn.commit();&#xD;
         getServletContext().log(&quot;Echipa creată cu succes: &quot; + idEchipa);&#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=teams&amp;id=&quot; + idProiect + &quot;&amp;success=true&quot;);&#xD;
&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;JDBC Driver not found&quot;, e);&#xD;
         &#xD;
         // Rollback transaction if needed&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             getServletContext().log(&quot;Error during rollback&quot;, ex);&#xD;
         }&#xD;
         &#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=teams&amp;id=&quot; + idProiect + &quot;&amp;error=driverNotFound&quot;);&#xD;
     } catch (SQLException e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Database error&quot;, e);&#xD;
         &#xD;
         // Rollback transaction&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             getServletContext().log(&quot;Error during rollback&quot;, ex);&#xD;
         }&#xD;
         &#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=teams&amp;id=&quot; + idProiect + &quot;&amp;error=databaseError&quot;);&#xD;
     } catch (Exception e) {&#xD;
         // Log the error&#xD;
         getServletContext().log(&quot;Unexpected error&quot;, e);&#xD;
         &#xD;
         // Rollback transaction&#xD;
         try {&#xD;
             if (conn != null) {&#xD;
                 conn.rollback();&#xD;
             }&#xD;
         } catch (SQLException ex) {&#xD;
             getServletContext().log(&quot;Error during rollback&quot;, ex);&#xD;
         }&#xD;
         &#xD;
         response.sendRedirect(&quot;administrare_proiecte.jsp?action=teams&amp;id=&quot; + idProiect + &quot;&amp;error=unexpectedError&quot;);&#xD;
     } finally {&#xD;
         // Reset auto-commit and close connection&#xD;
         if (conn != null) {&#xD;
             try {&#xD;
                 conn.setAutoCommit(true);&#xD;
                 conn.close();&#xD;
             } catch (SQLException e) {&#xD;
                 getServletContext().log(&quot;Error closing connection&quot;, e);&#xD;
             }&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VucAoEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_IvEkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VucAoUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VucAokVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_V_gih0VdEfCS7cth2SLu0w" name="" memberEnd="_V-OJEEVdEfCS7cth2SLu0w _V_giiEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_V_giiEVdEfCS7cth2SLu0w" name="" type="_Vtp9gEVdEfCS7cth2SLu0w" association="_V_gih0VdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_V_-ckEVdEfCS7cth2SLu0w" name="" memberEnd="_V_-ckUVdEfCS7cth2SLu0w _V91HgkVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_V_-ckUVdEfCS7cth2SLu0w" name="" type="_VsQPUEVdEfCS7cth2SLu0w" association="_V_-ckEVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_V__DoEVdEfCS7cth2SLu0w" name="" memberEnd="_V__DoUVdEfCS7cth2SLu0w _V92VokVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_V__DoUVdEfCS7cth2SLu0w" name="" type="_VsYyMEVdEfCS7cth2SLu0w" association="_V__DoEVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_V__Do0VdEfCS7cth2SLu0w" name="" memberEnd="_V__DpEVdEfCS7cth2SLu0w _V928sEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_V__DpEVdEfCS7cth2SLu0w" name="" type="_VsYyMEVdEfCS7cth2SLu0w" association="_V__Do0VdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_V__qsUVdEfCS7cth2SLu0w" name="" memberEnd="_V__qskVdEfCS7cth2SLu0w _V95Y8EVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_V__qskVdEfCS7cth2SLu0w" name="" type="_VsxzwEVdEfCS7cth2SLu0w" association="_V__qsUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAARwEVdEfCS7cth2SLu0w" name="" memberEnd="_WAARwUVdEfCS7cth2SLu0w _V95Y8kVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAARwUVdEfCS7cth2SLu0w" name="" type="_VsxzwEVdEfCS7cth2SLu0w" association="_WAARwEVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAARw0VdEfCS7cth2SLu0w" name="" memberEnd="_WAARxEVdEfCS7cth2SLu0w _V95Y9EVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAARxEVdEfCS7cth2SLu0w" name="" type="_VsxzwEVdEfCS7cth2SLu0w" association="_WAARw0VdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAA40UVdEfCS7cth2SLu0w" name="" memberEnd="_WAA40kVdEfCS7cth2SLu0w _V96nEEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAA40kVdEfCS7cth2SLu0w" name="" type="_VsxzwEVdEfCS7cth2SLu0w" association="_WAA40UVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAA41EVdEfCS7cth2SLu0w" name="" memberEnd="_WAA41UVdEfCS7cth2SLu0w _V96nEkVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAA41UVdEfCS7cth2SLu0w" name="" type="_VsxzwEVdEfCS7cth2SLu0w" association="_WAA41EVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WABf4UVdEfCS7cth2SLu0w" name="" memberEnd="_WABf4kVdEfCS7cth2SLu0w _V96nFEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WABf4kVdEfCS7cth2SLu0w" name="" type="_VsxzwEVdEfCS7cth2SLu0w" association="_WABf4UVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WABf5EVdEfCS7cth2SLu0w" name="" memberEnd="_WABf5UVdEfCS7cth2SLu0w _V96nFkVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WABf5UVdEfCS7cth2SLu0w" name="" type="_VsxzwEVdEfCS7cth2SLu0w" association="_WABf5EVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WACG8UVdEfCS7cth2SLu0w" name="" memberEnd="_WACG8kVdEfCS7cth2SLu0w _V971MEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WACG8kVdEfCS7cth2SLu0w" name="" type="_VsxzwEVdEfCS7cth2SLu0w" association="_WACG8UVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WACG9EVdEfCS7cth2SLu0w" name="" memberEnd="_WACG9UVdEfCS7cth2SLu0w _V99qYEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WACG9UVdEfCS7cth2SLu0w" name="" type="_VsxzwEVdEfCS7cth2SLu0w" association="_WACG9EVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WACuAEVdEfCS7cth2SLu0w" name="" memberEnd="_WACuAUVdEfCS7cth2SLu0w _V9_flEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WACuAUVdEfCS7cth2SLu0w" name="" type="_Vs4hcUVdEfCS7cth2SLu0w" association="_WACuAEVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WACuA0VdEfCS7cth2SLu0w" name="" memberEnd="_WACuBEVdEfCS7cth2SLu0w _V-AtsEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WACuBEVdEfCS7cth2SLu0w" name="" type="_Vs4hcUVdEfCS7cth2SLu0w" association="_WACuA0VdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WADVEUVdEfCS7cth2SLu0w" name="" memberEnd="_WADVEkVdEfCS7cth2SLu0w _V-AtskVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WADVEkVdEfCS7cth2SLu0w" name="" type="_Vs4hcUVdEfCS7cth2SLu0w" association="_WADVEUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WADVFEVdEfCS7cth2SLu0w" name="" memberEnd="_WADVFUVdEfCS7cth2SLu0w _V-Ci4kVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WADVFUVdEfCS7cth2SLu0w" name="" type="_VtFVwEVdEfCS7cth2SLu0w" association="_WADVFEVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAD8IUVdEfCS7cth2SLu0w" name="" memberEnd="_WAD8IkVdEfCS7cth2SLu0w _V-DJ8UVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAD8IkVdEfCS7cth2SLu0w" name="" type="_VtFVwEVdEfCS7cth2SLu0w" association="_WAD8IUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAEjMEVdEfCS7cth2SLu0w" name="" memberEnd="_WAEjMUVdEfCS7cth2SLu0w _V-EYEkVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAEjMUVdEfCS7cth2SLu0w" name="" type="_VtOfsEVdEfCS7cth2SLu0w" association="_WAEjMEVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAEjM0VdEfCS7cth2SLu0w" name="" memberEnd="_WAEjNEVdEfCS7cth2SLu0w _V-E_JUVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAEjNEVdEfCS7cth2SLu0w" name="" type="_VtQ78EVdEfCS7cth2SLu0w" association="_WAEjM0VdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAFKQUVdEfCS7cth2SLu0w" name="" memberEnd="_WAFKQkVdEfCS7cth2SLu0w _V-FmMkVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAFKQkVdEfCS7cth2SLu0w" name="" type="_VtWbgEVdEfCS7cth2SLu0w" association="_WAFKQUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAFKREVdEfCS7cth2SLu0w" name="" memberEnd="_WAFKRUVdEfCS7cth2SLu0w _V-FmNkVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAFKRUVdEfCS7cth2SLu0w" name="" type="_VtXpoEVdEfCS7cth2SLu0w" association="_WAFKREVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAFxUUVdEfCS7cth2SLu0w" name="" memberEnd="_WAFxUkVdEfCS7cth2SLu0w _V-GNR0VdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAFxUkVdEfCS7cth2SLu0w" name="" type="_Vtas8EVdEfCS7cth2SLu0w" association="_WAFxUUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAGYYEVdEfCS7cth2SLu0w" name="" memberEnd="_WAGYYUVdEfCS7cth2SLu0w _V-M6-kVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAGYYUVdEfCS7cth2SLu0w" name="" type="_VtdJMEVdEfCS7cth2SLu0w" association="_WAGYYEVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAGYY0VdEfCS7cth2SLu0w" name="" memberEnd="_WAGYZEVdEfCS7cth2SLu0w _V-M6_EVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAGYZEVdEfCS7cth2SLu0w" name="" type="_VtdJMEVdEfCS7cth2SLu0w" association="_WAGYY0VdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAG_cEVdEfCS7cth2SLu0w" name="" memberEnd="_WAG_cUVdEfCS7cth2SLu0w _V-QlUkVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAG_cUVdEfCS7cth2SLu0w" name="" type="_Vt2x0EVdEfCS7cth2SLu0w" association="_WAG_cEVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAG_c0VdEfCS7cth2SLu0w" name="" memberEnd="_WAG_dEVdEfCS7cth2SLu0w _V-TBkkVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAG_dEVdEfCS7cth2SLu0w" name="" type="_VuIeoEVdEfCS7cth2SLu0w" association="_WAG_c0VdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAHmgUVdEfCS7cth2SLu0w" name="" memberEnd="_WAHmgkVdEfCS7cth2SLu0w _V-TBlkVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAHmgkVdEfCS7cth2SLu0w" name="" type="_VuJswUVdEfCS7cth2SLu0w" association="_WAHmgUVdEfCS7cth2SLu0w"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_SpqBAEVdEfCS7cth2SLu0w" name="javax">
      <packagedElement xmi:type="uml:Package" xmi:id="_SprPIEVdEfCS7cth2SLu0w" name="sql">
        <packagedElement xmi:type="uml:Interface" xmi:id="_T-MLAEVdEfCS7cth2SLu0w" name="DataSource"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_SvHIwEVdEfCS7cth2SLu0w" name="servlet">
        <packagedElement xmi:type="uml:Package" xmi:id="_SvHIwUVdEfCS7cth2SLu0w" name="http">
          <packagedElement xmi:type="uml:Class" xmi:id="_T_nHUUVdEfCS7cth2SLu0w" name="HttpServlet"/>
          <packagedElement xmi:type="uml:Interface" xmi:id="_T_nuYUVdEfCS7cth2SLu0w" name="HttpServletRequest"/>
          <packagedElement xmi:type="uml:Interface" xmi:id="_T_oVcUVdEfCS7cth2SLu0w" name="HttpServletResponse"/>
          <packagedElement xmi:type="uml:Interface" xmi:id="_T_o8gUVdEfCS7cth2SLu0w" name="HttpSession"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_V8ylsEVdEfCS7cth2SLu0w" name="HttpSessionEvent"/>
          <packagedElement xmi:type="uml:Interface" xmi:id="_V8zMwUVdEfCS7cth2SLu0w" name="HttpSessionListener"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_T_mgQEVdEfCS7cth2SLu0w" name="ServletException"/>
        <packagedElement xmi:type="uml:Package" xmi:id="_VoFhAEVdEfCS7cth2SLu0w" name="annotation">
          <packagedElement xmi:type="uml:Interface" xmi:id="_V8cnckVdEfCS7cth2SLu0w" name="MultipartConfig"/>
          <packagedElement xmi:type="uml:Interface" xmi:id="_V8m_gUVdEfCS7cth2SLu0w" name="WebServlet"/>
          <packagedElement xmi:type="uml:Interface" xmi:id="_V89k00VdEfCS7cth2SLu0w" name="WebListener"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_V8ttMUVdEfCS7cth2SLu0w" name="ServletOutputStream"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_V8wJcEVdEfCS7cth2SLu0w" name="ServletContextEvent"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_V8wwgEVdEfCS7cth2SLu0w" name="ServletContextListener"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_VpZIkUVdEfCS7cth2SLu0w" name="activation">
        <packagedElement xmi:type="uml:Class" xmi:id="_V81B8UVdEfCS7cth2SLu0w" name="DataHandler"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_V81B80VdEfCS7cth2SLu0w" name="DataSource"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_VpZvoEVdEfCS7cth2SLu0w" name="mail">
        <packagedElement xmi:type="uml:Package" xmi:id="_VpZvoUVdEfCS7cth2SLu0w" name="internet">
          <packagedElement xmi:type="uml:Class" xmi:id="_V823IUVdEfCS7cth2SLu0w" name="AddressException"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_V823I0VdEfCS7cth2SLu0w" name="InternetAddress"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_V83eMUVdEfCS7cth2SLu0w" name="MimeBodyPart"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_V83eM0VdEfCS7cth2SLu0w" name="MimeMessage"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_V84FQUVdEfCS7cth2SLu0w" name="MimeMultipart"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_V84FQ0VdEfCS7cth2SLu0w" name="MimeUtility"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_VuttcEVdEfCS7cth2SLu0w" name="Authenticator"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_V81pAUVdEfCS7cth2SLu0w" name="Message"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_V81pA0VdEfCS7cth2SLu0w" name="PasswordAuthentication"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_V82QEUVdEfCS7cth2SLu0w" name="Session"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_V82QE0VdEfCS7cth2SLu0w" name="Transport"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_Sp5RkEVdEfCS7cth2SLu0w" name="Filters">
      <packagedElement xmi:type="uml:Class" xmi:id="_S5AroEVdEfCS7cth2SLu0w" name="CSRFTokenGeneratorFilter">
        <ownedAttribute xmi:id="_UGDGgEVdEfCS7cth2SLu0w" name="random" visibility="private" type="_T-POUEVdEfCS7cth2SLu0w" association="_UKF5AEVdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGDGgUVdEfCS7cth2SLu0w" value="new SecureRandom()"/>
        </ownedAttribute>
        <interfaceRealization xmi:id="_UCv64EVdEfCS7cth2SLu0w" client="_S5AroEVdEfCS7cth2SLu0w" supplier="_T-S4sEVdEfCS7cth2SLu0w" contract="_T-S4sEVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIMblkVdEfCS7cth2SLu0w" name="doFilter" specification="_UC0zYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIMbl0VdEfCS7cth2SLu0w" name="request" type="_T-Ut4UVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIMbmEVdEfCS7cth2SLu0w" name="response" type="_T-V8AEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIMbmUVdEfCS7cth2SLu0w" name="chain" type="_T-TfwUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpServletRequest httpRequest = (HttpServletRequest) request;&#xD;
     HttpSession session = httpRequest.getSession();&#xD;
&#xD;
     if (session.getAttribute(&quot;csrfToken&quot;) == null) {&#xD;
         session.setAttribute(&quot;csrfToken&quot;, generateToken());&#xD;
         System.out.println(&quot;S-a generat token pentru form&quot;);&#xD;
     }&#xD;
     chain.doFilter(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UINCoEVdEfCS7cth2SLu0w" name="generateToken" specification="_S5Cg0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UINCoUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>return new BigInteger(130, random).toString(32);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S5Cg0EVdEfCS7cth2SLu0w" name="generateToken" visibility="private" method="_UINCoEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S5DH4EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5DH4UVdEfCS7cth2SLu0w" name="destroy"/>
        <ownedOperation xmi:id="_UCxwEEVdEfCS7cth2SLu0w" name="init">
          <ownedParameter xmi:id="_UCxwEUVdEfCS7cth2SLu0w" name="filterConfig" type="_T-UG0UVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UC0zYEVdEfCS7cth2SLu0w" name="doFilter" method="_UIMblkVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w _T95QEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UC0zYUVdEfCS7cth2SLu0w" name="request" type="_T-Ut4UVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UC0zYkVdEfCS7cth2SLu0w" name="response" type="_T-V8AEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UC0zY0VdEfCS7cth2SLu0w" name="chain" type="_T-TfwUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5LDsEVdEfCS7cth2SLu0w" name="CSRFValidationFilter">
        <ownedAttribute xmi:id="_UGDtkEVdEfCS7cth2SLu0w" name="INCLUDED_PATHS" visibility="private" isLeaf="true" isStatic="true" isOrdered="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UGDtkUVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGEUoEVdEfCS7cth2SLu0w" value="Arrays.asList(&#xD;&#xA;        &quot;/AddAddrUsr.jsp&quot;,&#xD;&#xA;        &quot;/AddAddrUsr0.jsp&quot;,&#xD;&#xA;        &quot;/addc.jsp&quot;,&#xD;&#xA;        &quot;/adddep.jsp&quot;,&#xD;&#xA;        &quot;/forgotpass.jsp&quot;,&#xD;&#xA;        &quot;/sefok.jsp&quot;&#xD;&#xA;        // Add more paths as needed&#xD;&#xA;    )"/>
        </ownedAttribute>
        <interfaceRealization xmi:id="_UC2BgEVdEfCS7cth2SLu0w" client="_S5LDsEVdEfCS7cth2SLu0w" supplier="_T-S4sEVdEfCS7cth2SLu0w" contract="_T-S4sEVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UINCokVdEfCS7cth2SLu0w" name="doFilter" specification="_UC5E0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UINCo0VdEfCS7cth2SLu0w" name="request" type="_T-Ut4UVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UINCpEVdEfCS7cth2SLu0w" name="response" type="_T-V8AEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UINCpUVdEfCS7cth2SLu0w" name="chain" type="_T-TfwUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpServletRequest httpRequest = (HttpServletRequest) request;&#xD;
     HttpServletResponse httpResponse = (HttpServletResponse) response;&#xD;
&#xD;
     String path = httpRequest.getServletPath();&#xD;
&#xD;
     // Continue without CSRF validation for paths not included&#xD;
     if (!isIncludedPath(path)) {&#xD;
         chain.doFilter(request, response);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     // Perform CSRF token validation for included paths&#xD;
     validateCsrfToken(httpRequest, httpResponse, path, chain);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UINCpkVdEfCS7cth2SLu0w" name="isIncludedPath" specification="_S5Nf8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UINCp0VdEfCS7cth2SLu0w" name="path">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UINCqEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>return INCLUDED_PATHS.stream().anyMatch(path::startsWith);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UINpsEVdEfCS7cth2SLu0w" name="validateCsrfToken" specification="_UC6S8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UINpsUVdEfCS7cth2SLu0w" name="httpRequest" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UINpskVdEfCS7cth2SLu0w" name="httpResponse" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UINps0VdEfCS7cth2SLu0w" name="path">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UINptEVdEfCS7cth2SLu0w" name="chain" type="_T-TfwUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String method = httpRequest.getMethod();&#xD;
     if (&quot;POST&quot;.equalsIgnoreCase(method) || &#xD;
         &quot;PUT&quot;.equalsIgnoreCase(method) || &#xD;
         &quot;DELETE&quot;.equalsIgnoreCase(method)) {&#xD;
         &#xD;
         HttpSession session = httpRequest.getSession(false);&#xD;
         if (session == null) {&#xD;
             httpResponse.sendError(HttpServletResponse.SC_FORBIDDEN, &quot;Invalid session&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         String sessionToken = (String) session.getAttribute(&quot;csrfToken&quot;);&#xD;
         String requestToken = httpRequest.getParameter(&quot;csrfToken&quot;);&#xD;
         if (requestToken == null) {&#xD;
             requestToken = httpRequest.getHeader(&quot;X-CSRF-Token&quot;);&#xD;
         }&#xD;
&#xD;
         if (sessionToken == null || requestToken == null || !sessionToken.equals(requestToken)) {&#xD;
             System.out.println(&quot;CSRF token invalid: &quot; + requestToken + &quot; vs &quot; + sessionToken);&#xD;
             httpResponse.sendError(HttpServletResponse.SC_FORBIDDEN, &quot;CSRF token does not match&quot;);&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         System.out.println(&quot;CSRF token valid for &quot; + path);&#xD;
     }&#xD;
     &#xD;
     chain.doFilter(httpRequest, httpResponse);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S5Nf8EVdEfCS7cth2SLu0w" name="isIncludedPath" visibility="private" method="_UINCpkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S5Nf8UVdEfCS7cth2SLu0w" name="path">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S5Nf8kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5OuEEVdEfCS7cth2SLu0w" name="destroy"/>
        <ownedOperation xmi:id="_UC3PoEVdEfCS7cth2SLu0w" name="init">
          <ownedParameter xmi:id="_UC3PoUVdEfCS7cth2SLu0w" name="filterConfig" type="_T-UG0UVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UC5E0EVdEfCS7cth2SLu0w" name="doFilter" method="_UINCokVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w _T95QEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UC5E0UVdEfCS7cth2SLu0w" name="request" type="_T-Ut4UVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UC5E0kVdEfCS7cth2SLu0w" name="response" type="_T-V8AEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UC5E00VdEfCS7cth2SLu0w" name="chain" type="_T-TfwUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UC6S8EVdEfCS7cth2SLu0w" name="validateCsrfToken" visibility="private" method="_UINpsEVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w _T95QEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UC6S8UVdEfCS7cth2SLu0w" name="httpRequest" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UC6S8kVdEfCS7cth2SLu0w" name="httpResponse" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UC6S80VdEfCS7cth2SLu0w" name="path">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UC6S9EVdEfCS7cth2SLu0w" name="chain" type="_T-TfwUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5UNoEVdEfCS7cth2SLu0w" name="CsrfTokenInjectionFilter">
        <interfaceRealization xmi:id="_UC66AEVdEfCS7cth2SLu0w" client="_S5UNoEVdEfCS7cth2SLu0w" supplier="_T-S4sEVdEfCS7cth2SLu0w" contract="_T-S4sEVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIOQwEVdEfCS7cth2SLu0w" name="doFilter" specification="_UC8vMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIOQwUVdEfCS7cth2SLu0w" name="request" type="_T-Ut4UVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIOQwkVdEfCS7cth2SLu0w" name="response" type="_T-V8AEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIOQw0VdEfCS7cth2SLu0w" name="chain" type="_T-TfwUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpServletRequest httpRequest = (HttpServletRequest) request;&#xD;
     HttpServletResponse httpResponse = (HttpServletResponse) response;&#xD;
     &#xD;
     // Verificăm dacă response-ul este de tip HTML&#xD;
     String contentType = httpResponse.getContentType();&#xD;
     if (contentType == null || !contentType.contains(&quot;text/html&quot;)) {&#xD;
         // Dacă nu este HTML, nu aplicăm filtrul&#xD;
         chain.doFilter(request, response);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     // Aplicăm wrapper-ul doar pentru conținut HTML&#xD;
     HtmlResponseWrapper responseWrapper = new HtmlResponseWrapper(httpResponse);&#xD;
     &#xD;
     chain.doFilter(request, responseWrapper);&#xD;
     &#xD;
     String html = responseWrapper.getHtml();&#xD;
     if (html != null &amp;&amp; !html.isEmpty()) {&#xD;
         // Injectăm token-ul în formularele HTML&#xD;
         String updatedHtml = injectCsrfToken(html, httpRequest);&#xD;
         &#xD;
         // Setăm lungimea corectă a conținutului&#xD;
         response.setContentLength(updatedHtml.length());&#xD;
         &#xD;
         // Trimitem răspunsul modificat&#xD;
         response.getWriter().write(updatedHtml);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIOQxEVdEfCS7cth2SLu0w" name="injectCsrfToken" specification="_UC99UEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIOQxUVdEfCS7cth2SLu0w" name="html">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIOQxkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIOQx0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>// Obținem token-ul CSRF din sesiune&#xD;
     String csrfToken = (String) request.getSession().getAttribute(&quot;csrfToken&quot;);&#xD;
     if (csrfToken == null) {&#xD;
         return html; // Dacă nu există token, returnăm HTML-ul neschimbat&#xD;
     }&#xD;
&#xD;
     // Regex pentru a găsi tag-urile de formular și a insera token-ul CSRF&#xD;
     Pattern pattern = Pattern.compile(&quot;&lt;form[^>]*method=['\&quot;]POST['\&quot;][^>]*>&quot;, Pattern.CASE_INSENSITIVE);&#xD;
     Matcher matcher = pattern.matcher(html);&#xD;
     StringBuffer sb = new StringBuffer(html.length());&#xD;
&#xD;
     while (matcher.find()) {&#xD;
         System.out.println(&quot;CSRF Token injectat în formular&quot;);&#xD;
         String tokenInput = &quot;&lt;input type='hidden' name='csrfToken' value='&quot; + csrfToken + &quot;'/>&quot;;&#xD;
         matcher.appendReplacement(sb, matcher.group() + tokenInput);&#xD;
     }&#xD;
     matcher.appendTail(sb);&#xD;
&#xD;
     return sb.toString();&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S5WC0EVdEfCS7cth2SLu0w" name="destroy"/>
        <ownedOperation xmi:id="_UC7hEEVdEfCS7cth2SLu0w" name="init">
          <ownedParameter xmi:id="_UC7hEUVdEfCS7cth2SLu0w" name="filterConfig" type="_T-UG0UVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UC8vMEVdEfCS7cth2SLu0w" name="doFilter" method="_UIOQwEVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w _T95QEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UC8vMUVdEfCS7cth2SLu0w" name="request" type="_T-Ut4UVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UC8vMkVdEfCS7cth2SLu0w" name="response" type="_T-V8AEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UC8vM0VdEfCS7cth2SLu0w" name="chain" type="_T-TfwUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UC99UEVdEfCS7cth2SLu0w" name="injectCsrfToken" visibility="private" method="_UIOQxEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UC99UUVdEfCS7cth2SLu0w" name="html">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UC99UkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UC99U0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5fMwEVdEfCS7cth2SLu0w" name="JwtFilter">
        <ownedAttribute xmi:id="_UGGJ0EVdEfCS7cth2SLu0w" name="EXCLUDED_PATHS" visibility="private" isLeaf="true" isStatic="true" isOrdered="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UGGJ0UVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGGJ0kVdEfCS7cth2SLu0w" value="Arrays.asList(&#xD;&#xA;        &quot;/login&quot;, &#xD;&#xA;        &quot;/register&quot;, &#xD;&#xA;        &quot;/public&quot;,&#xD;&#xA;        &quot;/OTP&quot;,&#xD;&#xA;        &quot;/login.jsp&quot;,&#xD;&#xA;        &quot;/otp.jsp&quot;,&#xD;&#xA;        &quot;/responsive-login-form-main&quot;,&#xD;&#xA;        &quot;/assets&quot;&#xD;&#xA;    )"/>
        </ownedAttribute>
        <interfaceRealization xmi:id="_UDAZkEVdEfCS7cth2SLu0w" client="_S5fMwEVdEfCS7cth2SLu0w" supplier="_T-S4sEVdEfCS7cth2SLu0w" contract="_T-S4sEVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIO300VdEfCS7cth2SLu0w" name="doFilter" specification="_UDCOwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIO31EVdEfCS7cth2SLu0w" name="req" type="_T-Ut4UVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIO31UVdEfCS7cth2SLu0w" name="res" type="_T-V8AEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIO31kVdEfCS7cth2SLu0w" name="chain" type="_T-TfwUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpServletRequest request = (HttpServletRequest) req;&#xD;
     HttpServletResponse response = (HttpServletResponse) res;&#xD;
     &#xD;
     String path = request.getServletPath();&#xD;
     &#xD;
     // Permitem resursele statice&#xD;
     if (isStaticResource(path)) {&#xD;
         chain.doFilter(request, response);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     // Verificăm dacă path-ul este exclus&#xD;
     if (isExcludedPath(path)) {&#xD;
         chain.doFilter(request, response);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     String header = request.getHeader(&quot;Authorization&quot;);&#xD;
&#xD;
     if (header == null || !header.startsWith(&quot;Bearer &quot;)) {&#xD;
         response.sendError(HttpServletResponse.SC_UNAUTHORIZED, &quot;Token lipsă sau invalid&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     String token = header.substring(7); // Remove &quot;Bearer &quot;&#xD;
&#xD;
     try {&#xD;
         Claims claims = Jwts.parser()&#xD;
                 .setSigningKey(&quot;secretKeysecretKeysecretKeysecretKey&quot;)&#xD;
                 .parseClaimsJws(token)&#xD;
                 .getBody();&#xD;
                 &#xD;
         request.setAttribute(&quot;claims&quot;, claims);&#xD;
         chain.doFilter(req, res);&#xD;
     } catch (Exception e) {&#xD;
         response.sendError(HttpServletResponse.SC_UNAUTHORIZED, &quot;Token invalid&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIPe4EVdEfCS7cth2SLu0w" name="isStaticResource" specification="_S5hB8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIPe4UVdEfCS7cth2SLu0w" name="path">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIPe4kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>return path.endsWith(&quot;.css&quot;) || &#xD;
            path.endsWith(&quot;.js&quot;) || &#xD;
            path.endsWith(&quot;.png&quot;) || &#xD;
            path.endsWith(&quot;.jpg&quot;)&#xD;
           ;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIPe40VdEfCS7cth2SLu0w" name="isExcludedPath" specification="_S5iQEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIPe5EVdEfCS7cth2SLu0w" name="path">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIPe5UVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>return EXCLUDED_PATHS.stream()&#xD;
         .anyMatch(excludedPath -> path.startsWith(excludedPath));&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S5hB8EVdEfCS7cth2SLu0w" name="isStaticResource" visibility="private" method="_UIPe4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S5hB8UVdEfCS7cth2SLu0w" name="path">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S5hpAEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5iQEEVdEfCS7cth2SLu0w" name="isExcludedPath" visibility="private" method="_UIPe40VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S5i3IEVdEfCS7cth2SLu0w" name="path">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S5jeMEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5kFQEVdEfCS7cth2SLu0w" name="destroy"/>
        <ownedOperation xmi:id="_UDBAoEVdEfCS7cth2SLu0w" name="init" raisedException="_T95QEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDBAoUVdEfCS7cth2SLu0w" name="filterConfig" type="_T-UG0UVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UDCOwEVdEfCS7cth2SLu0w" name="doFilter" method="_UIO300VdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w _T95QEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDCOwUVdEfCS7cth2SLu0w" name="req" type="_T-Ut4UVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDCOwkVdEfCS7cth2SLu0w" name="res" type="_T-V8AEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDCOw0VdEfCS7cth2SLu0w" name="chain" type="_T-TfwUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5oWsEVdEfCS7cth2SLu0w" name="JwtUtil">
        <ownedAttribute xmi:id="_UGGw4EVdEfCS7cth2SLu0w" name="key" visibility="private" isLeaf="true" isStatic="true" type="_T-iwUkVdEfCS7cth2SLu0w" isReadOnly="true" association="_UKF5A0VdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGGw4UVdEfCS7cth2SLu0w" value="Keys.secretKeyFor(SignatureAlgorithm.HS512)"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGGw4kVdEfCS7cth2SLu0w" name="EXPIRATION_TIME" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGGw40VdEfCS7cth2SLu0w" value="864_000_00"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIQF8EVdEfCS7cth2SLu0w" name="generateToken" specification="_S5qL4EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIQF8UVdEfCS7cth2SLu0w" name="username">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIQF8kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>return Jwts.builder()&#xD;
             .setSubject(username)&#xD;
             .setIssuedAt(new Date())&#xD;
             .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))&#xD;
             .signWith(key, SignatureAlgorithm.HS512)&#xD;
             .compact();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIQF80VdEfCS7cth2SLu0w" name="parseToken" specification="_S5qy8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIQF9EVdEfCS7cth2SLu0w" name="token">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIQF9UVdEfCS7cth2SLu0w" type="_T-dQwEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>// Remove 'Bearer ' if present&#xD;
     if (token != null &amp;&amp; token.startsWith(&quot;Bearer &quot;)) {&#xD;
         token = token.substring(7);&#xD;
     }&#xD;
     &#xD;
     return Jwts.parser()&#xD;
             .setSigningKey(key)&#xD;
             .parseClaimsJws(token)&#xD;
             .getBody();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIQF9kVdEfCS7cth2SLu0w" name="validateToken" specification="_S5raAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIQF90VdEfCS7cth2SLu0w" name="token">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIQF-EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>try {&#xD;
         // Remove 'Bearer ' if present&#xD;
         if (token != null &amp;&amp; token.startsWith(&quot;Bearer &quot;)) {&#xD;
             token = token.substring(7);&#xD;
         }&#xD;
         &#xD;
         Jwts.parser()&#xD;
             .setSigningKey(key)&#xD;
             .parseClaimsJws(token);&#xD;
         return true;&#xD;
     } catch (Exception e) {&#xD;
         return false;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S5qL4EVdEfCS7cth2SLu0w" name="generateToken" method="_UIQF8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S5qL4UVdEfCS7cth2SLu0w" name="username">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S5qL4kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5qy8EVdEfCS7cth2SLu0w" name="parseToken" method="_UIQF80VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S5qy8UVdEfCS7cth2SLu0w" name="token">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UDED8EVdEfCS7cth2SLu0w" type="_T-dQwEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_S5raAEVdEfCS7cth2SLu0w" name="validateToken" method="_UIQF9kVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S5sBEEVdEfCS7cth2SLu0w" name="token">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S5sBEUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5tPMEVdEfCS7cth2SLu0w" name="TokenBlacklist">
        <ownedAttribute xmi:id="_UGHX8EVdEfCS7cth2SLu0w" name="blacklistedTokens" isStatic="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UGHX8kVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGHX80VdEfCS7cth2SLu0w" value="Collections.newSetFromMap(new ConcurrentHashMap&lt;>())"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIQtAEVdEfCS7cth2SLu0w" name="blacklistToken" specification="_S5udUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIQtAUVdEfCS7cth2SLu0w" name="token">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>blacklistedTokens.add(token);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIQtAkVdEfCS7cth2SLu0w" name="isTokenBlacklisted" specification="_S5vEYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIQtA0VdEfCS7cth2SLu0w" name="token">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_UIQtBEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>return blacklistedTokens.contains(token);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S5udUEVdEfCS7cth2SLu0w" name="blacklistToken" isStatic="true" method="_UIQtAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S5udUUVdEfCS7cth2SLu0w" name="token">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5vEYEVdEfCS7cth2SLu0w" name="isTokenBlacklisted" isStatic="true" method="_UIQtAkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S5vEYUVdEfCS7cth2SLu0w" name="token">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S5vEYkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5wSgEVdEfCS7cth2SLu0w" name="rateLimitingFilter">
        <ownedAttribute xmi:id="_UGH_AEVdEfCS7cth2SLu0w" name="requestCounts" visibility="private" isLeaf="true" type="_T-masEVdEfCS7cth2SLu0w" isReadOnly="true" association="_UKGgEUVdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGImEUVdEfCS7cth2SLu0w" value="new ConcurrentHashMap&lt;>()"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGJNIUVdEfCS7cth2SLu0w" name="MAX_REQUESTS_PER_SECOND" visibility="private" isLeaf="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGJNIkVdEfCS7cth2SLu0w" value="10"/>
        </ownedAttribute>
        <interfaceRealization xmi:id="_UDErAEVdEfCS7cth2SLu0w" client="_S5wSgEVdEfCS7cth2SLu0w" supplier="_T-S4sEVdEfCS7cth2SLu0w" contract="_T-S4sEVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIQtBUVdEfCS7cth2SLu0w" name="doFilter" specification="_UDGgMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UIQtBkVdEfCS7cth2SLu0w" name="request" type="_T-Ut4UVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIQtB0VdEfCS7cth2SLu0w" name="response" type="_T-V8AEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UIQtCEVdEfCS7cth2SLu0w" name="chain" type="_T-TfwUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpServletRequest httpRequest = (HttpServletRequest) request;&#xD;
     HttpServletResponse httpResponse = (HttpServletResponse) response;&#xD;
&#xD;
     String clientIp = httpRequest.getRemoteAddr();&#xD;
     requestCounts.putIfAbsent(clientIp, new AtomicInteger(0));&#xD;
&#xD;
     if (requestCounts.get(clientIp).incrementAndGet() > MAX_REQUESTS_PER_SECOND) {&#xD;
         httpResponse.setStatus(HttpServletResponse.SC_NOT_ACCEPTABLE);&#xD;
         httpResponse.getWriter().write(&quot;Too many requests&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     chain.doFilter(request, response);&#xD;
&#xD;
     // Reset the count every second&#xD;
     requestCounts.get(clientIp).decrementAndGet();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIRUEEVdEfCS7cth2SLu0w" name="destroy" specification="_S5yHsEVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>requestCounts.clear();&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S5yHsEVdEfCS7cth2SLu0w" name="destroy" method="_UIRUEEVdEfCS7cth2SLu0w"/>
        <ownedOperation xmi:id="_UDErAUVdEfCS7cth2SLu0w" name="init">
          <ownedParameter xmi:id="_UDFSEEVdEfCS7cth2SLu0w" name="filterConfig" type="_T-UG0UVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_UDGgMEVdEfCS7cth2SLu0w" name="doFilter" method="_UIQtBUVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w _T95QEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UDGgMUVdEfCS7cth2SLu0w" name="request" type="_T-Ut4UVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDGgMkVdEfCS7cth2SLu0w" name="response" type="_T-V8AEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDGgM0VdEfCS7cth2SLu0w" name="chain" type="_T-TfwUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S6hukEVdEfCS7cth2SLu0w" name="HtmlResponseWrapper">
        <generalization xmi:id="_UDSGYEVdEfCS7cth2SLu0w" general="_T-zPAUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_UGOFo0VdEfCS7cth2SLu0w" name="stringWriter" visibility="private" isLeaf="true" type="_T-1EMEVdEfCS7cth2SLu0w" isReadOnly="true" association="_UKHHIUVdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGOFpEVdEfCS7cth2SLu0w" value="new StringWriter()"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGOssUVdEfCS7cth2SLu0w" name="outputStream" isLeaf="true" type="_T-z2EUVdEfCS7cth2SLu0w" isReadOnly="true" association="_UKHuMUVdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGPTwEVdEfCS7cth2SLu0w" value="new ByteArrayOutputStream()"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGQh4kVdEfCS7cth2SLu0w" name="servletOutputStream" visibility="private" type="_T-yA4EVdEfCS7cth2SLu0w" association="_UKIVQUVdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGRI8EVdEfCS7cth2SLu0w" value="null"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGRI8kVdEfCS7cth2SLu0w" name="writer" type="_T-CaAEVdEfCS7cth2SLu0w" isReadOnly="true" association="_UKI8UEVdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGRwAUVdEfCS7cth2SLu0w" value="null"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_UGSXE0VdEfCS7cth2SLu0w" name="isUsingWriter" visibility="private">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_UGS-IEVdEfCS7cth2SLu0w" value="false"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UITJQkVdEfCS7cth2SLu0w" name="HtmlResponseWrapper" specification="_UDPDEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UITJQ0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UITJREVdEfCS7cth2SLu0w" type="_S6hukEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super(response);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UITJRUVdEfCS7cth2SLu0w" name="flushBuffer" specification="_S6jjwEVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>if (writer != null) {&#xD;
         writer.flush();&#xD;
     } else if (servletOutputStream != null) {&#xD;
         servletOutputStream.flush();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UITJRkVdEfCS7cth2SLu0w" name="getHtml" specification="_S6lY8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_UITJR0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>if (writer != null) {&#xD;
         return stringWriter.toString();&#xD;
     } else if (servletOutputStream != null) {&#xD;
         return new String(outputStream.toByteArray());&#xD;
     } else {&#xD;
         return &quot;&quot;;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_S6jjwEVdEfCS7cth2SLu0w" name="flushBuffer" method="_UITJRUVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w"/>
        <ownedOperation xmi:id="_S6lY8EVdEfCS7cth2SLu0w" name="getHtml" method="_UITJRkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_S6lY8UVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_UDPDEEVdEfCS7cth2SLu0w" name="HtmlResponseWrapper" method="_UITJQkVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_UDPDEkVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_UDPDE0VdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_UDPDEUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_UDPDFEVdEfCS7cth2SLu0w" type="_S6hukEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <nestedClassifier xmi:type="uml:Class" xmi:id="_S6mnEEVdEfCS7cth2SLu0w" name="CustomServletOutputStream" visibility="private">
          <eAnnotations xmi:id="_S6nOIEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S6nOIUVdEfCS7cth2SLu0w" key="static"/>
          </eAnnotations>
          <generalization xmi:id="_UDRfUkVdEfCS7cth2SLu0w" general="_T-yA4EVdEfCS7cth2SLu0w"/>
          <ownedAttribute xmi:id="_UGTlMEVdEfCS7cth2SLu0w" name="outputStream" visibility="private" isLeaf="true" type="_T-z2EUVdEfCS7cth2SLu0w" isReadOnly="true" association="_UKI8U0VdEfCS7cth2SLu0w"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UITwUEVdEfCS7cth2SLu0w" name="CustomServletOutputStream" specification="_UDPqIEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_UITwUUVdEfCS7cth2SLu0w" name="outputStream" type="_T-z2EUVdEfCS7cth2SLu0w"/>
            <ownedParameter xmi:id="_UITwUkVdEfCS7cth2SLu0w" type="_S6mnEEVdEfCS7cth2SLu0w" direction="return"/>
            <language>java</language>
            <body>this.outputStream = outputStream;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UITwU0VdEfCS7cth2SLu0w" name="write" specification="_S6ocQEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_UITwVEVdEfCS7cth2SLu0w" name="b">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedParameter>
            <language>java</language>
            <body>outputStream.write(b);&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UITwVUVdEfCS7cth2SLu0w" name="write" specification="_S6qRcEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_UITwVkVdEfCS7cth2SLu0w" name="b">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UITwV0VdEfCS7cth2SLu0w" value="*"/>
            </ownedParameter>
            <language>java</language>
            <body>outputStream.write(b);&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIUXYEVdEfCS7cth2SLu0w" name="write" specification="_S6stsEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_UIUXYUVdEfCS7cth2SLu0w" name="b">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UIUXYkVdEfCS7cth2SLu0w" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:id="_UIUXY0VdEfCS7cth2SLu0w" name="off">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedParameter>
            <ownedParameter xmi:id="_UIUXZEVdEfCS7cth2SLu0w" name="len">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedParameter>
            <language>java</language>
            <body>outputStream.write(b, off, len);&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_UIUXZUVdEfCS7cth2SLu0w" name="isReady" specification="_S6vxAEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_UIUXZkVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
            <language>java</language>
            <body>return true;&#xD;
     </body>
          </ownedBehavior>
          <ownedOperation xmi:id="_S6ocQEVdEfCS7cth2SLu0w" name="write" method="_UITwU0VdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_S6ocQUVdEfCS7cth2SLu0w" name="b">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_S6qRcEVdEfCS7cth2SLu0w" name="write" method="_UITwVUVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_S6qRcUVdEfCS7cth2SLu0w" name="b">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S6q4gUVdEfCS7cth2SLu0w" value="*"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_S6stsEVdEfCS7cth2SLu0w" name="write" method="_UIUXYEVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_S6stsUVdEfCS7cth2SLu0w" name="b">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S6tUwUVdEfCS7cth2SLu0w" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:id="_S6stskVdEfCS7cth2SLu0w" name="off">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedParameter>
            <ownedParameter xmi:id="_S6sts0VdEfCS7cth2SLu0w" name="len">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_S6vxAEVdEfCS7cth2SLu0w" name="isReady" method="_UIUXZUVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_S6vxAUVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_UDPqIEVdEfCS7cth2SLu0w" name="CustomServletOutputStream" method="_UITwUEVdEfCS7cth2SLu0w">
            <eAnnotations xmi:id="_UDQRMEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_UDQRMUVdEfCS7cth2SLu0w" key="create"/>
            </eAnnotations>
            <ownedParameter xmi:id="_UDPqIUVdEfCS7cth2SLu0w" name="outputStream" type="_T-z2EUVdEfCS7cth2SLu0w"/>
            <ownedParameter xmi:id="_UDQRMkVdEfCS7cth2SLu0w" type="_S6mnEEVdEfCS7cth2SLu0w" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:id="_UDQRM0VdEfCS7cth2SLu0w" name="setWriteListener">
            <ownedParameter xmi:id="_UDQRNEVdEfCS7cth2SLu0w" name="writeListener" type="_T-yn8UVdEfCS7cth2SLu0w"/>
          </ownedOperation>
        </nestedClassifier>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKF5AEVdEfCS7cth2SLu0w" name="" memberEnd="_UKF5AUVdEfCS7cth2SLu0w _UGDGgEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKF5AUVdEfCS7cth2SLu0w" name="" type="_S5AroEVdEfCS7cth2SLu0w" association="_UKF5AEVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKF5A0VdEfCS7cth2SLu0w" name="" memberEnd="_UKF5BEVdEfCS7cth2SLu0w _UGGw4EVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKF5BEVdEfCS7cth2SLu0w" name="" type="_S5oWsEVdEfCS7cth2SLu0w" association="_UKF5A0VdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKGgEUVdEfCS7cth2SLu0w" name="" memberEnd="_UKGgEkVdEfCS7cth2SLu0w _UGH_AEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKGgEkVdEfCS7cth2SLu0w" name="" type="_S5wSgEVdEfCS7cth2SLu0w" association="_UKGgEUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKHHIUVdEfCS7cth2SLu0w" name="" memberEnd="_UKHHIkVdEfCS7cth2SLu0w _UGOFo0VdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKHHIkVdEfCS7cth2SLu0w" name="" type="_S6hukEVdEfCS7cth2SLu0w" association="_UKHHIUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKHuMUVdEfCS7cth2SLu0w" name="" memberEnd="_UKHuMkVdEfCS7cth2SLu0w _UGOssUVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKHuMkVdEfCS7cth2SLu0w" name="" type="_S6hukEVdEfCS7cth2SLu0w" association="_UKHuMUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKIVQUVdEfCS7cth2SLu0w" name="" memberEnd="_UKIVQkVdEfCS7cth2SLu0w _UGQh4kVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKIVQkVdEfCS7cth2SLu0w" name="" type="_S6hukEVdEfCS7cth2SLu0w" association="_UKIVQUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKI8UEVdEfCS7cth2SLu0w" name="" memberEnd="_UKI8UUVdEfCS7cth2SLu0w _UGRI8kVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKI8UUVdEfCS7cth2SLu0w" name="" type="_S6hukEVdEfCS7cth2SLu0w" association="_UKI8UEVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_UKI8U0VdEfCS7cth2SLu0w" name="" memberEnd="_UKI8VEVdEfCS7cth2SLu0w _UGTlMEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_UKI8VEVdEfCS7cth2SLu0w" name="" type="_S6mnEEVdEfCS7cth2SLu0w" association="_UKI8U0VdEfCS7cth2SLu0w"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_SqhjsEVdEfCS7cth2SLu0w" name="io">
      <packagedElement xmi:type="uml:Package" xmi:id="_SqiKwEVdEfCS7cth2SLu0w" name="jsonwebtoken">
        <packagedElement xmi:type="uml:Package" xmi:id="_SqoRYEVdEfCS7cth2SLu0w" name="security">
          <packagedElement xmi:type="uml:Class" xmi:id="_T-iwUEVdEfCS7cth2SLu0w" name="Keys"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Interface" xmi:id="_T-dQwEVdEfCS7cth2SLu0w" name="Claims"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_T-d30UVdEfCS7cth2SLu0w" name="Jws"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_T-ee4UVdEfCS7cth2SLu0w" name="Jwts"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_T-fF8UVdEfCS7cth2SLu0w" name="SignatureException"/>
        <packagedElement xmi:type="uml:Enumeration" xmi:id="_T-ftAUVdEfCS7cth2SLu0w" name="SignatureAlgorithm"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_SsLwkEVdEfCS7cth2SLu0w" name="mail">
      <packagedElement xmi:type="uml:Class" xmi:id="_T_BRcEVdEfCS7cth2SLu0w" name="MailAsincron">
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_NAgEVdEfCS7cth2SLu0w" name="isValidEmail" specification="_VuwJsEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_NAgUVdEfCS7cth2SLu0w" name="email">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NAgkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>String emailRegex = &quot;^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$&quot;;&#xD;
	    return email != null &amp;&amp; email.matches(emailRegex);&#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_NAg0VdEfCS7cth2SLu0w" name="trimitereNotificareAdeverintaNoua" specification="_VuwJs0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_NAhEVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NAhUVdEfCS7cth2SLu0w" name="idSef">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NAhkVdEfCS7cth2SLu0w" name="tip">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NAh0VdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>// Obține informații despre angajat&#xD;
		    String numeAngajat = &quot;Necunoscut&quot;;&#xD;
		    String emailAngajat = &quot;necunoscut@example.com&quot;;&#xD;
		    String departament = &quot;Necunoscut&quot;;&#xD;
		    String tipAdeverinta = &quot;Necunoscut&quot;;&#xD;
		    &#xD;
		    // Obține numele tipului de adeverință&#xD;
		    try (Connection con = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {&#xD;
		        // Obține informații despre angajat&#xD;
		        String queryAngajat = &quot;SELECT nume, prenume, email, d.nume_dep FROM useri u &quot; +&#xD;
		                             &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
		                             &quot;WHERE u.id = ?&quot;;&#xD;
		        try (PreparedStatement stmt = con.prepareStatement(queryAngajat)) {&#xD;
		            stmt.setInt(1, idAngajat);&#xD;
		            try (ResultSet rs = stmt.executeQuery()) {&#xD;
		                if (rs.next()) {&#xD;
		                    numeAngajat = rs.getString(&quot;nume&quot;) + &quot; &quot; + rs.getString(&quot;prenume&quot;);&#xD;
		                    emailAngajat = rs.getString(&quot;email&quot;);&#xD;
		                    departament = rs.getString(&quot;nume_dep&quot;);&#xD;
		                }&#xD;
		            }&#xD;
		        }&#xD;
		        &#xD;
		        // Obține tipul adeverinței&#xD;
		        String queryTip = &quot;SELECT denumire FROM tip_adev WHERE id = ?&quot;;&#xD;
		        try (PreparedStatement stmt = con.prepareStatement(queryTip)) {&#xD;
		            stmt.setInt(1, tip);&#xD;
		            try (ResultSet rs = stmt.executeQuery()) {&#xD;
		                if (rs.next()) {&#xD;
		                    tipAdeverinta = rs.getString(&quot;denumire&quot;);&#xD;
		                }&#xD;
		            }&#xD;
		        }&#xD;
		        &#xD;
		        // initializare trimitator&#xD;
	        	GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;, &quot;rtmz fzcp onhv minb&quot;);&#xD;
	        &#xD;
		        // Email către angajat&#xD;
		        String subiectAngajat = &quot;\uD83D\uDEA8 Confirmare solicitare adeverință \uD83D\uDEA8&quot;;&#xD;
		        String mesajAngajat = &quot;&lt;h1>Felicitări! &amp;#x1F389; Solicitarea dumneavoastră a fost înregistrată! &amp;#x1F389;&lt;/h1>&quot; +&#xD;
	                              &quot;&lt;h2>Vă mulțumim pentru solicitarea adeverinței. &amp;#x1F642;&lt;/h2>&quot; +&#xD;
	                              &quot;&lt;h3>&amp;#x1F4DD; Detalii despre solicitare:&lt;/h3>&quot; +&#xD;
	                              &quot;&lt;p>&lt;b>Tip adeverință:&lt;/b> &quot; + tipAdeverinta + &quot;&lt;br>&quot; +&#xD;
	                              &quot;&lt;b>Motiv:&lt;/b> &quot; + motiv + &quot;&lt;br>&lt;/p>&quot; +&#xD;
	                              &quot;&lt;p>Veți fi notificat când adeverința va fi aprobată.&lt;/p>&quot; +&#xD;
	                              &quot;&lt;p>Vă dorim toate cele bune! &amp;#x1F607;&lt;/p>&quot; +&#xD;
	                              &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757; Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
		        &#xD;
		        // Verifică validarea adresei email&#xD;
		        if (!isValidEmail(emailAngajat)) {&#xD;
		            throw new IllegalArgumentException(&quot;Adresa de e-mail a angajatului este invalidă: &quot; + emailAngajat);&#xD;
		        }&#xD;
		        &#xD;
		        // Trimitere email către angajat&#xD;
		        try {&#xD;
		            sender.send(subiectAngajat, mesajAngajat, &quot;liviaaamp@gmail.com&quot;, emailAngajat);&#xD;
		        } catch (Exception e) {&#xD;
		            e.printStackTrace();&#xD;
		        }&#xD;
		        &#xD;
		        // Email către șef (dacă există)&#xD;
		        if (idSef > 0) {&#xD;
		            String emailSef = &quot;necunoscut@example.com&quot;;&#xD;
		            String numeSef = &quot;Necunoscut&quot;;&#xD;
		            &#xD;
		            // Obține informații despre șef&#xD;
		            String querySef = &quot;SELECT nume, prenume, email FROM useri WHERE id = ?&quot;;&#xD;
		            try (PreparedStatement stmt = con.prepareStatement(querySef)) {&#xD;
		                stmt.setInt(1, idSef);&#xD;
		                try (ResultSet rs = stmt.executeQuery()) {&#xD;
		                    if (rs.next()) {&#xD;
		                        numeSef = rs.getString(&quot;nume&quot;) + &quot; &quot; + rs.getString(&quot;prenume&quot;);&#xD;
		                        emailSef = rs.getString(&quot;email&quot;);&#xD;
		                    }&#xD;
		                }&#xD;
		            }&#xD;
		            &#xD;
		            String subiectSef = &quot;\uD83D\uDEA8 Solicitare nouă de adeverință care necesită aprobare \uD83D\uDEA8&quot;;&#xD;
		            String mesajSef = &quot;&lt;h1>&amp;#x26A0;&amp;#xFE0F; Aveți o nouă solicitare de adeverință de inspectat &amp;#x26A0;&amp;#xFE0F;&lt;/h1>&quot; +&#xD;
	                              &quot;&lt;h2>O nouă solicitare de adeverință necesită aprobarea dumneavoastră:&lt;/h2>&quot; +&#xD;
	                              &quot;&lt;h3>&amp;#x1F4DD; Detalii despre solicitare:&lt;/h3>&quot; +&#xD;
	                              &quot;&lt;p>&lt;b>Solicitant:&lt;/b> &quot; + numeAngajat + &quot;&lt;br>&quot; +&#xD;
	                              &quot;&lt;b>Departament:&lt;/b> &quot; + departament + &quot;&lt;br>&quot; +&#xD;
	                              &quot;&lt;b>Tip adeverință:&lt;/b> &quot; + tipAdeverinta + &quot;&lt;br>&quot; +&#xD;
	                              &quot;&lt;b>Motiv:&lt;/b> &quot; + motiv + &quot;&lt;br>&lt;/p>&quot; +&#xD;
	                              &quot;&lt;p>Vă rugăm să vă autentificați în sistem pentru a aproba sau respinge această solicitare.&lt;/p>&quot; +&#xD;
	                              &quot;&lt;p>Vă dorim toate cele bune! &amp;#x1F607;&lt;/p>&quot; +&#xD;
	                              &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757; Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
		            &#xD;
		            // Verifică validarea adresei email&#xD;
		            if (!isValidEmail(emailSef)) {&#xD;
		                throw new IllegalArgumentException(&quot;Adresa de e-mail a șefului este invalidă: &quot; + emailSef);&#xD;
		            }&#xD;
		            &#xD;
		            // Trimitere email către șef&#xD;
		            try {&#xD;
		                sender.send(subiectSef, mesajSef, &quot;liviaaamp@gmail.com&quot;, emailSef);&#xD;
		            } catch (Exception e) {&#xD;
		                e.printStackTrace();&#xD;
		            }&#xD;
		        }&#xD;
		    } catch (SQLException e) {&#xD;
		        e.printStackTrace();&#xD;
		        throw new Exception(&quot;Eroare la obținerea informațiilor pentru email: &quot; + e.getMessage());&#xD;
		    }&#xD;
		</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_NAiEVdEfCS7cth2SLu0w" name="trimitereNotificareAdeverintaAprobataSef" specification="_VuwJuEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_NAiUVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NAikVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// Obține informații despre angajat și adeverință&#xD;
		    String numeAngajat = &quot;Necunoscut&quot;;&#xD;
		    String emailAngajat = &quot;necunoscut@example.com&quot;;&#xD;
		    String emailDirector = &quot;necunoscut@example.com&quot;;&#xD;
		    String emailSef = &quot;necunoscut@example.com&quot;;&#xD;
		    String numeDirector = &quot;Necunoscut&quot;;&#xD;
		    String departament = &quot;Necunoscut&quot;;&#xD;
		    String tipAdeverinta = &quot;Necunoscut&quot;;&#xD;
		    String motiv = &quot;Necunoscut&quot;;&#xD;
		    String dataCreare = &quot;Necunoscut&quot;;&#xD;
		    &#xD;
		    try (Connection con = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {&#xD;
		        // Obține informații despre angajat, șef și director&#xD;
		        String queryUtilizatori = &quot;SELECT ang.nume as nume_ang, ang.prenume as prenume_ang, ang.email as email_ang, &quot; +&#xD;
		                              &quot;d.nume_dep as departament, sef.email as email_sef, &quot; +&#xD;
		                              &quot;dir.email as email_dir, dir.nume as nume_dir, dir.prenume as prenume_dir &quot; +&#xD;
		                              &quot;FROM useri ang &quot; +&#xD;
		                              &quot;JOIN departament d ON ang.id_dep = d.id_dep &quot; +&#xD;
		                              &quot;JOIN useri sef ON ang.id_dep = sef.id_dep AND sef.tip = 3 &quot; +&#xD;
		                              &quot;JOIN useri dir ON ang.id_dep = dir.id_dep AND dir.tip = 0 &quot; +&#xD;
		                              &quot;WHERE ang.id = ?&quot;;&#xD;
		        &#xD;
		        try (PreparedStatement stmt = con.prepareStatement(queryUtilizatori)) {&#xD;
		            stmt.setInt(1, idAngajat);&#xD;
		            try (ResultSet rs = stmt.executeQuery()) {&#xD;
		                if (rs.next()) {&#xD;
		                    numeAngajat = rs.getString(&quot;nume_ang&quot;) + &quot; &quot; + rs.getString(&quot;prenume_ang&quot;);&#xD;
		                    emailAngajat = rs.getString(&quot;email_ang&quot;);&#xD;
		                    emailSef = rs.getString(&quot;email_sef&quot;);&#xD;
		                    emailDirector = rs.getString(&quot;email_dir&quot;);&#xD;
		                    numeDirector = rs.getString(&quot;nume_dir&quot;) + &quot; &quot; + rs.getString(&quot;prenume_dir&quot;);&#xD;
		                    departament = rs.getString(&quot;departament&quot;);&#xD;
		                }&#xD;
		            }&#xD;
		        }&#xD;
		        &#xD;
		        // Obține informații despre adeverință&#xD;
		        String queryAdeverinta = &quot;SELECT a.motiv, a.creare, ta.denumire &quot; +&#xD;
		                               &quot;FROM adeverinte a &quot; +&#xD;
		                               &quot;JOIN tip_adev ta ON a.tip = ta.id &quot; +&#xD;
		                               &quot;WHERE a.id = ?&quot;;&#xD;
		                               &#xD;
		        try (PreparedStatement stmt = con.prepareStatement(queryAdeverinta)) {&#xD;
		            stmt.setInt(1, idAdeverinta);&#xD;
		            try (ResultSet rs = stmt.executeQuery()) {&#xD;
		                if (rs.next()) {&#xD;
		                    tipAdeverinta = rs.getString(&quot;denumire&quot;);&#xD;
		                    motiv = rs.getString(&quot;motiv&quot;);&#xD;
		                    dataCreare = rs.getString(&quot;creare&quot;);&#xD;
		                }&#xD;
		            }&#xD;
		        }&#xD;
		        &#xD;
		        // initializare trimitator&#xD;
	        	GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;, &quot;rtmz fzcp onhv minb&quot;);&#xD;
	        &#xD;
		        // Email către angajat&#xD;
		        String subiectAngajat = &quot;\uD83D\uDEA8 Adeverința dumneavoastră a fost aprobată parțial \uD83D\uDEA8&quot;;&#xD;
		        String mesajAngajat = &quot;&lt;h1>Felicitări! &amp;#x1F389; Adeverința dumneavoastră a fost parțial aprobată! &amp;#x1F389;&lt;/h1>&quot; +&#xD;
		                          &quot;&lt;h2>Șeful de departament a aprobat solicitarea dumneavoastră. &amp;#x1F642;&lt;/h2>&quot; + &#xD;
		                          &quot;&lt;h2>Acum mai este necesară aprobarea directorului. &amp;#x1F607;&lt;/h2>&quot; +&#xD;
		                          &quot;&lt;h3>&amp;#x1F4DD; Detalii despre adeverință:&lt;/h3>&quot; +&#xD;
		                          &quot;&lt;p>&lt;b>Tip adeverință:&lt;/b> &quot; + tipAdeverinta + &quot;&lt;br>&quot; +&#xD;
		                          &quot;&lt;b>Data solicitării:&lt;/b> &quot; + dataCreare + &quot;&lt;br>&quot; +&#xD;
		                          &quot;&lt;b>Motiv:&lt;/b> &quot; + motiv + &quot;&lt;br>&lt;/p>&quot; +&#xD;
		                          &quot;&lt;p>Veți fi notificat când adeverința va fi aprobată final de către director.&lt;/p>&quot; +&#xD;
		                          &quot;&lt;p>Vă dorim toate cele bune! &amp;#x1F607;&lt;/p>&quot; +&#xD;
		                          &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757; Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
		        &#xD;
		        // Verifică validarea adresei email&#xD;
		        if (!isValidEmail(emailAngajat)) {&#xD;
		            throw new IllegalArgumentException(&quot;Adresa de e-mail a angajatului este invalidă: &quot; + emailAngajat);&#xD;
		        }&#xD;
		        &#xD;
		        // Trimitere email către angajat&#xD;
		        try {&#xD;
		            sender.send(subiectAngajat, mesajAngajat, &quot;liviaaamp@gmail.com&quot;, emailAngajat);&#xD;
		        } catch (Exception e) {&#xD;
		            e.printStackTrace();&#xD;
		        }&#xD;
		        &#xD;
		        // Email către director&#xD;
		        String subiectDirector = &quot;\uD83D\uDEA8 Solicitare de adeverință care necesită aprobare \uD83D\uDEA8&quot;;&#xD;
		        String mesajDirector = &quot;&lt;h1>&amp;#x26A0;&amp;#xFE0F; Aveți o solicitare de adeverință de inspectat &amp;#x26A0;&amp;#xFE0F;&lt;/h1>&quot; +&#xD;
		                           &quot;&lt;h2>O solicitare de adeverință a fost aprobată de șeful de departament și necesită acum aprobarea dumneavoastră:&lt;/h2>&quot; +&#xD;
		                           &quot;&lt;h3>&amp;#x1F4DD; Detalii despre solicitare:&lt;/h3>&quot; +&#xD;
		                           &quot;&lt;p>&lt;b>Solicitant:&lt;/b> &quot; + numeAngajat + &quot;&lt;br>&quot; +&#xD;
		                           &quot;&lt;b>Departament:&lt;/b> &quot; + departament + &quot;&lt;br>&quot; +&#xD;
		                           &quot;&lt;b>Tip adeverință:&lt;/b> &quot; + tipAdeverinta + &quot;&lt;br>&quot; +&#xD;
		                           &quot;&lt;b>Data solicitării:&lt;/b> &quot; + dataCreare + &quot;&lt;br>&quot; +&#xD;
		                           &quot;&lt;b>Motiv:&lt;/b> &quot; + motiv + &quot;&lt;br>&lt;/p>&quot; +&#xD;
		                           &quot;&lt;p>Vă rugăm să vă autentificați în sistem pentru a aproba sau respinge această solicitare.&lt;/p>&quot; +&#xD;
		                           &quot;&lt;p>Vă dorim toate cele bune! &amp;#x1F607;&lt;/p>&quot; +&#xD;
		                           &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757; Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
		        &#xD;
		        // Verifică validarea adresei email&#xD;
		        if (!isValidEmail(emailDirector)) {&#xD;
		            throw new IllegalArgumentException(&quot;Adresa de e-mail a directorului este invalidă: &quot; + emailDirector);&#xD;
		        }&#xD;
		        &#xD;
		        // Trimitere email către director&#xD;
		        try {&#xD;
		            sender.send(subiectDirector, mesajDirector, &quot;liviaaamp@gmail.com&quot;, emailDirector);&#xD;
		        } catch (Exception e) {&#xD;
		            e.printStackTrace();&#xD;
		        }&#xD;
		        &#xD;
		    } catch (SQLException e) {&#xD;
		        e.printStackTrace();&#xD;
		        throw new Exception(&quot;Eroare la obținerea informațiilor pentru email: &quot; + e.getMessage());&#xD;
		    }&#xD;
		</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_NAi0VdEfCS7cth2SLu0w" name="trimitereNotificareAdeverintaAprobataDirector" specification="_VuwwwkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_NAjEVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NAjUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// Obține informații despre angajat și adeverință&#xD;
		    String numeAngajat = &quot;Necunoscut&quot;;&#xD;
		    String emailAngajat = &quot;necunoscut@example.com&quot;;&#xD;
		    String tipAdeverinta = &quot;Necunoscut&quot;;&#xD;
		    String motiv = &quot;Necunoscut&quot;;&#xD;
		    String dataCreare = &quot;Necunoscut&quot;;&#xD;
		    String dataModificare = &quot;Necunoscut&quot;;&#xD;
		    &#xD;
		    try (Connection con = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {&#xD;
		        // Obține informații despre angajat&#xD;
		        String queryAngajat = &quot;SELECT nume, prenume, email FROM useri WHERE id = ?&quot;;&#xD;
		        try (PreparedStatement stmt = con.prepareStatement(queryAngajat)) {&#xD;
		            stmt.setInt(1, idAngajat);&#xD;
		            try (ResultSet rs = stmt.executeQuery()) {&#xD;
		                if (rs.next()) {&#xD;
		                    numeAngajat = rs.getString(&quot;nume&quot;) + &quot; &quot; + rs.getString(&quot;prenume&quot;);&#xD;
		                    emailAngajat = rs.getString(&quot;email&quot;);&#xD;
		                }&#xD;
		            }&#xD;
		        }&#xD;
		        &#xD;
		        // Obține informații despre adeverință&#xD;
		        String queryAdeverinta = &quot;SELECT a.motiv, a.creare, a.modif, ta.denumire &quot; +&#xD;
		                               &quot;FROM adeverinte a &quot; +&#xD;
		                               &quot;JOIN tip_adev ta ON a.tip = ta.id &quot; +&#xD;
		                               &quot;WHERE a.id = ?&quot;;&#xD;
		                               &#xD;
		        try (PreparedStatement stmt = con.prepareStatement(queryAdeverinta)) {&#xD;
		            stmt.setInt(1, idAdeverinta);&#xD;
		            try (ResultSet rs = stmt.executeQuery()) {&#xD;
		                if (rs.next()) {&#xD;
		                    tipAdeverinta = rs.getString(&quot;denumire&quot;);&#xD;
		                    motiv = rs.getString(&quot;motiv&quot;);&#xD;
		                    dataCreare = rs.getString(&quot;creare&quot;);&#xD;
		                    dataModificare = rs.getString(&quot;modif&quot;);&#xD;
		                }&#xD;
		            }&#xD;
		        }&#xD;
		        &#xD;
		        // initializare trimitator&#xD;
	        	GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;, &quot;rtmz fzcp onhv minb&quot;);&#xD;
	        &#xD;
		        // Email către angajat&#xD;
		        String subiectAngajat = &quot;\uD83D\uDEA8 Adeverința dumneavoastră a fost aprobată! \uD83D\uDEA8&quot;;&#xD;
		        String mesajAngajat = &quot;&lt;h1>Felicitări! &amp;#x1F389; Adeverința dumneavoastră a fost aprobată final! &amp;#x1F389;&lt;/h1>&quot; +&#xD;
		                          &quot;&lt;h2>Atât șeful de departament cât și directorul au aprobat solicitarea dumneavoastră. &amp;#x1F642;&lt;/h2>&quot; +&#xD;
		                          &quot;&lt;h3>&amp;#x1F4DD; Detalii despre adeverință:&lt;/h3>&quot; +&#xD;
		                          &quot;&lt;p>&lt;b>Tip adeverință:&lt;/b> &quot; + tipAdeverinta + &quot;&lt;br>&quot; +&#xD;
		                          &quot;&lt;b>Data solicitării:&lt;/b> &quot; + dataCreare + &quot;&lt;br>&quot; +&#xD;
		                          &quot;&lt;b>Data aprobării:&lt;/b> &quot; + dataModificare + &quot;&lt;br>&quot; +&#xD;
		                          &quot;&lt;b>Motiv:&lt;/b> &quot; + motiv + &quot;&lt;br>&lt;/p>&quot; +&#xD;
		                          &quot;&lt;p>Puteți descărca adeverința din secțiunea &lt;b>Adeverințele Mele&lt;/b> din aplicație.&lt;/p>&quot; +&#xD;
		                          &quot;&lt;p>Vă dorim toate cele bune! &amp;#x1F607;&lt;/p>&quot; +&#xD;
		                          &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757; Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
		        &#xD;
		        // Verifică validarea adresei email&#xD;
		        if (!isValidEmail(emailAngajat)) {&#xD;
		            throw new IllegalArgumentException(&quot;Adresa de e-mail a angajatului este invalidă: &quot; + emailAngajat);&#xD;
		        }&#xD;
		        &#xD;
		        // Trimitere email către angajat&#xD;
		        try {&#xD;
		            sender.send(subiectAngajat, mesajAngajat, &quot;liviaaamp@gmail.com&quot;, emailAngajat);&#xD;
		        } catch (Exception e) {&#xD;
		            e.printStackTrace();&#xD;
		        }&#xD;
		        &#xD;
		    } catch (SQLException e) {&#xD;
		        e.printStackTrace();&#xD;
		        throw new Exception(&quot;Eroare la obținerea informațiilor pentru email: &quot; + e.getMessage());&#xD;
		    }&#xD;
		</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_NAjkVdEfCS7cth2SLu0w" name="trimitereNotificareAdeverintaRespinsa" specification="_VuwwxUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_NAj0VdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NAkEVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NAkUVdEfCS7cth2SLu0w" name="respinsaDe">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NAkkVdEfCS7cth2SLu0w" name="motivRespingere">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>// Obține informații despre angajat și adeverință&#xD;
		    String numeAngajat = &quot;Necunoscut&quot;;&#xD;
		    String emailAngajat = &quot;necunoscut@example.com&quot;;&#xD;
		    String tipAdeverinta = &quot;Necunoscut&quot;;&#xD;
		    String motivSolicitare = &quot;Necunoscut&quot;;&#xD;
		    String dataCreare = &quot;Necunoscut&quot;;&#xD;
		    String dataModificare = &quot;Necunoscut&quot;;&#xD;
		    &#xD;
		    try (Connection con = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {&#xD;
		        // Obține informații despre angajat&#xD;
		        String queryAngajat = &quot;SELECT nume, prenume, email FROM useri WHERE id = ?&quot;;&#xD;
		        try (PreparedStatement stmt = con.prepareStatement(queryAngajat)) {&#xD;
		            stmt.setInt(1, idAngajat);&#xD;
		            try (ResultSet rs = stmt.executeQuery()) {&#xD;
		                if (rs.next()) {&#xD;
		                    numeAngajat = rs.getString(&quot;nume&quot;) + &quot; &quot; + rs.getString(&quot;prenume&quot;);&#xD;
		                    emailAngajat = rs.getString(&quot;email&quot;);&#xD;
		                }&#xD;
		            }&#xD;
		        }&#xD;
		        &#xD;
		        // Obține informații despre adeverință&#xD;
		        String queryAdeverinta = &quot;SELECT a.motiv, a.creare, a.modif, ta.denumire &quot; +&#xD;
		                               &quot;FROM adeverinte a &quot; +&#xD;
		                               &quot;JOIN tip_adev ta ON a.tip = ta.id &quot; +&#xD;
		                               &quot;WHERE a.id = ?&quot;;&#xD;
		                               &#xD;
		        try (PreparedStatement stmt = con.prepareStatement(queryAdeverinta)) {&#xD;
		            stmt.setInt(1, idAdeverinta);&#xD;
		            try (ResultSet rs = stmt.executeQuery()) {&#xD;
		                if (rs.next()) {&#xD;
		                    tipAdeverinta = rs.getString(&quot;denumire&quot;);&#xD;
		                    motivSolicitare = rs.getString(&quot;motiv&quot;);&#xD;
		                    dataCreare = rs.getString(&quot;creare&quot;);&#xD;
		                    dataModificare = rs.getString(&quot;modif&quot;);&#xD;
		                }&#xD;
		            }&#xD;
		        }&#xD;
		        &#xD;
		        // initializare trimitator&#xD;
	        	GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;, &quot;rtmz fzcp onhv minb&quot;);&#xD;
	        &#xD;
		        // Email către angajat&#xD;
		        String subiectAngajat = &quot;\uD83D\uDEA8 Adeverința dumneavoastră a fost respinsă \uD83D\uDEA8&quot;;&#xD;
		        String mesajAngajat = &quot;&lt;h1>Ne pare rău să venim cu asemenea vești, căci... &amp;#x1F614;&lt;/h1>&quot; +&#xD;
		                          &quot;&lt;h2>Solicitarea dumneavoastră de adeverință a fost respinsă de către &quot; + respinsaDe + &quot;. &amp;#x1F614;&lt;/h2>&quot; +&#xD;
		                          &quot;&lt;h3>&amp;#x1F4DD; Detalii despre solicitare:&lt;/h3>&quot; +&#xD;
		                          &quot;&lt;p>&lt;b>Tip adeverință:&lt;/b> &quot; + tipAdeverinta + &quot;&lt;br>&quot; +&#xD;
		                          &quot;&lt;b>Data solicitării:&lt;/b> &quot; + dataCreare + &quot;&lt;br>&quot; +&#xD;
		                          &quot;&lt;b>Data respingerii:&lt;/b> &quot; + dataModificare + &quot;&lt;br>&quot; +&#xD;
		                          &quot;&lt;b>Motivul solicitării:&lt;/b> &quot; + motivSolicitare + &quot;&lt;br>&quot; +&#xD;
		                          &quot;&lt;b>Motivul respingerii:&lt;/b> &quot; + motivRespingere + &quot;&lt;br>&lt;/p>&quot; +&#xD;
		                          &quot;&lt;p>Nu uitați că puteți oricând să solicitați o nouă adeverință! &amp;#x2728;&lt;/p>&quot; +&#xD;
		                          &quot;&lt;p>Vă dorim toate cele bune! &amp;#x1F607;&lt;/p>&quot; +&#xD;
		                          &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757; Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
		        &#xD;
		        // Verifică validarea adresei email&#xD;
		        if (!isValidEmail(emailAngajat)) {&#xD;
		            throw new IllegalArgumentException(&quot;Adresa de e-mail a angajatului este invalidă: &quot; + emailAngajat);&#xD;
		        }&#xD;
		        &#xD;
		        // Trimitere email către angajat&#xD;
		        try {&#xD;
		            sender.send(subiectAngajat, mesajAngajat, &quot;liviaaamp@gmail.com&quot;, emailAngajat);&#xD;
		        } catch (Exception e) {&#xD;
		            e.printStackTrace();&#xD;
		        }&#xD;
		        &#xD;
		    } catch (SQLException e) {&#xD;
		        e.printStackTrace();&#xD;
		        throw new Exception(&quot;Eroare la obținerea informațiilor pentru email: &quot; + e.getMessage());&#xD;
		    }&#xD;
		</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_NAk0VdEfCS7cth2SLu0w" name="send" specification="_Vux-5EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_NAlEVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NAlUVdEfCS7cth2SLu0w" name="tip">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NAlkVdEfCS7cth2SLu0w" name="inceput">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NAl0VdEfCS7cth2SLu0w" name="sfarsit">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NAmEVdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NAmUVdEfCS7cth2SLu0w" name="locatie">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NAmkVdEfCS7cth2SLu0w" name="durata">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile&#xD;
		String director = &quot;&quot;;&#xD;
	    String sef = &quot;&quot;;&#xD;
	    String angajat = &quot;&quot;;&#xD;
	    String nume = &quot;&quot;;&#xD;
	    String prenume = &quot;&quot;;&#xD;
	    String motiv2 = &quot;&quot;;&#xD;
	    int tip2 = -1;&#xD;
	    &#xD;
	    // initializare trimitator&#xD;
	    GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;, &quot;rtmz fzcp onhv minb&quot;);&#xD;
	    &#xD;
	    // creare conexiune la baza de date&#xD;
	    try (Connection conexiune1 = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
		         PreparedStatement stmt1 = conexiune1.prepareStatement(&quot;select ang.nume as nume_ang, ang.prenume as prenume_ang, ang.tip as tip, &quot;&#xD;
		         		+ &quot;ang.email as email_ang, sef.email as email_sef, dir.email as email_dir from useri as ang join useri as sef&quot;&#xD;
		         		+ &quot; on ang.id_dep = sef.id_dep and sef.tip = 3 join useri as dir on ang.id_dep = dir.id_dep and dir.tip = 0 where ang.id = ?;&quot;);&#xD;
	    		PreparedStatement stmt = conexiune1.prepareStatement(&quot;select motiv from tipcon where tip = ?;&quot;)) {&#xD;
		        stmt1.setInt(1, id);&#xD;
		        &#xD;
		        ResultSet rezultat = stmt1.executeQuery();&#xD;
		        if (rezultat.next()) {&#xD;
		        	// extragere destinatari&#xD;
		            sef = rezultat.getString(&quot;email_sef&quot;);&#xD;
		            angajat = rezultat.getString(&quot;email_ang&quot;);&#xD;
		            director = rezultat.getString(&quot;email_dir&quot;);&#xD;
		            nume = rezultat.getString(&quot;nume_ang&quot;);&#xD;
		            prenume = rezultat.getString(&quot;prenume_ang&quot;);&#xD;
		            tip2 = rezultat.getInt(&quot;tip&quot;);&#xD;
		        }&#xD;
		        &#xD;
		        stmt.setInt(1, tip);&#xD;
	  	        &#xD;
	  	        ResultSet rs = stmt.executeQuery();&#xD;
	  	        if (rs.next()) {&#xD;
	  	            motiv2 = rs.getString(&quot;motiv&quot;);     &#xD;
	  	        }&#xD;
	  	        &#xD;
		    } catch (SQLException e) {&#xD;
		        throw new ServletException(&quot;Eroare BD =(&quot;, e);&#xD;
		    }&#xD;
&#xD;
	    if (tip2 != 0) {&#xD;
	       // trimit confirmare inregistrare la angajat &#xD;
	    	&#xD;
	    	// pregatire mesaj propriu-zis&#xD;
	    	String subject1 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;&#xD;
		    &#xD;
		    String message11 = &quot;&lt;h1>Felicitari! &amp;#x1F389; Concediul a fost programat cu succes! &amp;#x1F389;&lt;/h1>&quot;; &#xD;
		    String message12 = &quot;&lt;h2>Totusi, acum mai trebuie sa asteptam confimarea acestuia &amp;#x1F642; Sa fie intr-un ceas bun! &amp;#x1F607;&lt;/h2>&quot;;&#xD;
		    String message13 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre concediul programat:&lt;/h3>&quot;;&#xD;
		    String message14 = &quot;&lt;p>&lt;b>Inceput:&lt;/b> &quot; + inceput + &quot;&lt;br> &lt;b>Final: &lt;/b> &quot; + sfarsit + &quot;&lt;br>&lt;b>Locatie:&lt;/b> &quot; + locatie + &quot;&lt;br>&lt;b> Motiv: &lt;/b>&quot; + motiv + &quot;&lt;br>&lt;b>Tip concediu: &lt;/b>&quot; + motiv2 + &quot;&lt;br>&lt;b>Durata: &lt;/b>&quot; + (durata - 1) + &quot; zile&lt;br>&lt;/p>&quot;;&#xD;
		    String message16 = &quot;&lt;br>&lt;p>Va dorim toate cele bune! &amp;#x1F607;&lt;/p>&quot;;&#xD;
		    &#xD;
		    String message1 = message11 + message12 + message13 + message14 + message16 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
		    if (!isValidEmail(angajat)) {&#xD;
		        throw new IllegalArgumentException(&quot;Adresa de e-mail a angajatului este invalidă: &quot; + angajat);&#xD;
		    }&#xD;
		    if (angajat == null || angajat.isEmpty()) {&#xD;
		        System.err.println(&quot;Adresa de e-mail a angajatului este null sau goală.&quot;);&#xD;
		        return; // Sau aruncați o excepție&#xD;
		    }&#xD;
		    System.out.println(&quot;Email angajat: &quot; + angajat);&#xD;
		    System.out.println(&quot;Email sef: &quot; + sef);&#xD;
		    System.out.println(&quot;Email director: &quot; + director);&#xD;
&#xD;
		    try (Connection conexiune1 = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
		    	     PreparedStatement stmt1 = conexiune1.prepareStatement(&#xD;
		    	         &quot;select ang.nume as nume_ang, ang.prenume as prenume_ang, ang.tip as tip, &quot; +&#xD;
		    	         &quot;ang.email as email_ang, sef.email as email_sef, dir.email as email_dir &quot; +&#xD;
		    	         &quot;from useri as ang join useri as sef &quot; +&#xD;
		    	         &quot;on ang.id_dep = sef.id_dep and sef.tip = 3 &quot; +&#xD;
		    	         &quot;join useri as dir on ang.id_dep = dir.id_dep and dir.tip = 0 where ang.id = ?;&quot;)) {&#xD;
&#xD;
		    	    stmt1.setInt(1, id);&#xD;
&#xD;
		    	    try (ResultSet rezultat = stmt1.executeQuery()) {&#xD;
		    	        if (rezultat.next()) {&#xD;
		    	            sef = rezultat.getString(&quot;email_sef&quot;);&#xD;
		    	            angajat = rezultat.getString(&quot;email_ang&quot;);&#xD;
		    	            director = rezultat.getString(&quot;email_dir&quot;);&#xD;
		    	            nume = rezultat.getString(&quot;nume_ang&quot;);&#xD;
		    	            prenume = rezultat.getString(&quot;prenume_ang&quot;);&#xD;
		    	            tip2 = rezultat.getInt(&quot;tip&quot;);&#xD;
		    	        }&#xD;
		    	    }&#xD;
		    	} catch (SQLException e) {&#xD;
		    	    if (e.getSQLState().equals(&quot;42S22&quot;)) { // Check for SQLSyntaxErrorException (missing column)&#xD;
		    	        System.err.println(&quot;Column departament.id_dep not found. Continuing without this data.&quot;);&#xD;
		    	        sef = &quot;&quot;; // Optional: Set default or empty values&#xD;
		    	        director = &quot;&quot;;&#xD;
		    	    } else {&#xD;
		    	        throw new ServletException(&quot;Database error occurred&quot;, e); // Re-throw other exceptions&#xD;
		    	    }&#xD;
		    	}&#xD;
&#xD;
		    /*&#xD;
		    // trimitere propriu-zisa&#xD;
		    try {&#xD;
		        sender.send(subject1, message1, &quot;liviaaamp@gmail.com&quot;, angajat);&#xD;
		    } catch (Exception e) {&#xD;
		        e.printStackTrace();&#xD;
		    }  &#xD;
		    */&#xD;
	    }&#xD;
	    if (tip2 != 3 || tip2 != 0) {&#xD;
		 // trimit notificare la sef&#xD;
	    	&#xD;
	    	// pregatire mesaj propriu-zis&#xD;
	    	String subject2 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;&#xD;
		    &#xD;
		    String message21 = &quot;&lt;h1>&amp;#x26A0;&amp;#xFE0F;Aveti un nou concediu de inspectat&amp;#x26A0;&amp;#xFE0F;&lt;/h1>&quot;; &#xD;
		    String message22 = &quot;&lt;h2>Angajatul &quot; + nume + &quot; &quot; + prenume + &quot; a adaugat un nou concediu.&lt;/h2>&quot;;&#xD;
		    String message23 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre concediul programat:&lt;/h3>&quot;;&#xD;
		    String message24 = &quot;&lt;p>&lt;b>Inceput:&lt;/b> &quot; + inceput + &quot;&lt;br> &lt;b>Final: &lt;/b> &quot; + sfarsit + &quot;&lt;br>&lt;b>Locatie:&lt;/b> &quot; + locatie + &quot;&lt;br>&lt;b> Motiv: &lt;/b>&quot; + motiv + &quot;&lt;br>&lt;b>Tip concediu: &lt;/b>&quot; + motiv2 + &quot;&lt;br>&lt;b>Durata: &lt;/b>&quot; + (durata - 1) + &quot; zile&lt;br>&lt;/p>&quot;;&#xD;
		    String message16 = &quot;&lt;br>&lt;p>Va dorim toate cele bune! &amp;#x1F607;&lt;/p>&quot;;&#xD;
		    &#xD;
		    String message2 = message21 + message22 + message23 + message24 + message16 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
		 &#xD;
		    // trimitere propriu-zisa&#xD;
		    try {&#xD;
		        sender.send(subject2, message2, &quot;liviaaamp@gmail.com&quot;, sef); &#xD;
		    } catch (Exception e) {&#xD;
		        e.printStackTrace();&#xD;
		    }  &#xD;
	    } &#xD;
	    if (tip2 == 3){&#xD;
	    	// trimit notificare la director&#xD;
	    	// pregatire mesaj propriu-zis&#xD;
		    String subject2 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;&#xD;
		    &#xD;
		    String message21 = &quot;&lt;h1>&amp;#x26A0;&amp;#xFE0F;Aveti un nou concediu de inspectat&amp;#x26A0;&amp;#xFE0F;&lt;/h1>&quot;; &#xD;
		    String message22 = &quot;&lt;h2>Angajatul &quot; + nume + &quot; &quot; + prenume + &quot; a adaugat un nou concediu.&lt;/h2>&quot;;&#xD;
		    String message23 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre concediul programat:&lt;/h3>&quot;;&#xD;
		    String message24 = &quot;&lt;p>&lt;b>Inceput:&lt;/b> &quot; + inceput + &quot;&lt;br> &lt;b>Final: &lt;/b> &quot; + sfarsit + &quot;&lt;br>&lt;b>Locatie:&lt;/b> &quot; + locatie + &quot;&lt;br>&lt;b> Motiv: &lt;/b>&quot; + motiv + &quot;&lt;br>&lt;b>Tip concediu: &lt;/b>&quot; + motiv2 + &quot;&lt;br>&lt;b>Durata: &lt;/b>&quot; + (durata - 1) + &quot; zile&lt;br>&lt;/p>&quot;;&#xD;
		    String message16 = &quot;&lt;br>&lt;p>Va dorim toate cele bune! &amp;#x1F607; &lt;/p>&quot;;&#xD;
		    &#xD;
		    String message2 = message21 + message22 + message23 + message24 + message16 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
		   &#xD;
		 // trimitere propriu-zisa&#xD;
		    try {&#xD;
		        sender.send(subject2, message2, &quot;liviaaamp@gmail.com&quot;, director);&#xD;
		    } catch (Exception e) {&#xD;
		        e.printStackTrace();&#xD;
		    }  &#xD;
	    }&#xD;
	    if (tip2 == 0){&#xD;
	    	// trimit notificare la director ca angajat&#xD;
	    	// pregatire mesaj propriu-zis&#xD;
		    String subject2 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;&#xD;
		    &#xD;
		    String message21 = &quot;&lt;h1>&amp;#x26A0;&amp;#xFE0F;Aveti un nou concediu de inspectat&amp;#x26A0;&amp;#xFE0F;&lt;/h1>&quot;; &#xD;
		    String message22 = &quot;&lt;h2>Felicitari! &amp;#x1F389; Concediul a fost programat cu succes! &amp;#x1F389; &lt;/h2>&lt;h3>Nu uitati sa-l aprobati sau sa-l respingeti!&amp;#x1F609;&lt;/h3>&quot;;&#xD;
		    String message23 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre concediul programat:&lt;/h3>&quot;;&#xD;
		    String message24 = &quot;&lt;p>&lt;b>Inceput:&lt;/b> &quot; + inceput + &quot;&lt;br> &lt;b>Final: &lt;/b> &quot; + sfarsit + &quot;&lt;br>&lt;b>Locatie:&lt;/b> &quot; + locatie + &quot;&lt;br>&lt;b> Motiv: &lt;/b>&quot; + motiv + &quot;&lt;br>&lt;b>Tip concediu: &lt;/b>&quot; + motiv2 + &quot;&lt;br>&lt;b>Durata: &lt;/b>&quot; + (durata - 1) + &quot; zile&lt;br>&lt;/p>&quot;;&#xD;
		    String message16 = &quot;&lt;br>&lt;p>Va dorim toate cele bune! &amp;#x1F607; &lt;/p>&quot;;&#xD;
		    &#xD;
		    String message2 = message21 + message22 + message23 + message24 + message16 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
	&#xD;
		 // trimitere propriu-zisa&#xD;
		    try {&#xD;
		        sender.send(subject2, message2, &quot;liviaaamp@gmail.com&quot;, director);&#xD;
		    } catch (Exception e) {&#xD;
		        e.printStackTrace();&#xD;
		    }  &#xD;
	    }&#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_NnkEVdEfCS7cth2SLu0w" name="send2" specification="_Vuyl8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_NnkUVdEfCS7cth2SLu0w" name="uid">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NnkkVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_Nnk0VdEfCS7cth2SLu0w" name="tip">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NnlEVdEfCS7cth2SLu0w" name="inceput">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NnlUVdEfCS7cth2SLu0w" name="sfarsit">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NnlkVdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_Nnl0VdEfCS7cth2SLu0w" name="locatie">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NnmEVdEfCS7cth2SLu0w" name="durata">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NnmUVdEfCS7cth2SLu0w" name="inceputold">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NnmkVdEfCS7cth2SLu0w" name="sfarsitold">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_Nnm0VdEfCS7cth2SLu0w" name="locatieold">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NnnEVdEfCS7cth2SLu0w" name="motivold">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NnnUVdEfCS7cth2SLu0w" name="motivold2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NnnkVdEfCS7cth2SLu0w" name="durataold2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_Nnn0VdEfCS7cth2SLu0w" name="data">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>// e diferit de cel de la adaugare, nu numai prin prinsma continutului mail-ului, ci si prin faptul ca am dat ca parametrii datele vechiului concediu, asa, ca un feature&#xD;
		// trimit notificare la angajat&#xD;
		&#xD;
		// declarare si initializare variabile&#xD;
     String tod = &quot;&quot;;&#xD;
     String tos = &quot;&quot;;&#xD;
     String toa = &quot;&quot;;&#xD;
     String nume = &quot;&quot;;&#xD;
     String prenume = &quot;&quot;;&#xD;
     String motivv = &quot;&quot;;&#xD;
     int tipp = -1;&#xD;
     &#xD;
     // creare conexiune la baza de date&#xD;
     try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
	         PreparedStatement stmt = connection.prepareStatement(&quot;select ang.nume as nume_ang, ang.prenume as prenume_ang, ang.tip as tip, &quot;&#xD;
	         		+ &quot;ang.email as email_ang, sef.email as email_sef, dir.email as email_dir from useri as ang join useri as sef &quot;&#xD;
	         		+ &quot;on ang.id_dep = sef.id_dep and sef.tip = 3 join useri as dir on ang.id_dep = dir.id_dep and dir.tip = 0 where ang.id = ?;&quot;);&#xD;
     		PreparedStatement stmt2 = connection.prepareStatement(&quot;select motiv from tipcon where tip = ?;&quot;)) {&#xD;
	        stmt.setInt(1, uid);&#xD;
	        ResultSet rs = stmt.executeQuery();&#xD;
	        if (rs.next()) {&#xD;
	        	// extragere destinatari&#xD;
	            tos = rs.getString(&quot;email_sef&quot;);&#xD;
	            toa = rs.getString(&quot;email_ang&quot;);&#xD;
	            tod = rs.getString(&quot;email_dir&quot;);&#xD;
	            nume = rs.getString(&quot;nume_ang&quot;);&#xD;
	            prenume = rs.getString(&quot;prenume_ang&quot;);&#xD;
	            tipp = rs.getInt(&quot;tip&quot;);&#xD;
	        }&#xD;
	   	    &#xD;
	        stmt2.setInt(1, tip);&#xD;
	        &#xD;
	        // aflare alte date&#xD;
	        rs = stmt2.executeQuery();&#xD;
	        if (rs.next()) {&#xD;
	            motivv = rs.getString(&quot;motiv&quot;);&#xD;
	        }&#xD;
	        &#xD;
	    // initializare trimitator&#xD;
	     GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;, &quot;rtmz fzcp onhv minb&quot;);&#xD;
	&#xD;
	     if (tipp != 0) {&#xD;
	        // trimit confirmare modificare la angajat &#xD;
	    	&#xD;
	    	 // pregatire mesaj propriu-zis&#xD;
	 	    String subject1 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;&#xD;
	 	    &#xD;
	 	    String message11 = &quot;&lt;h1>Felicitari! &amp;#x1F389; Concediul dvs. din data de &quot; + data + &quot; a fost modificat cu succes! &amp;#x1F389;&lt;/h1>&quot;; &#xD;
	 	    String message12 = &quot;&lt;h2>Totusi, acum mai trebuie sa asteptam confimarea acestuia &amp;#x1F642; Sa fie intr-un ceas bun! &amp;#x1F607;&lt;/h2>&quot;;&#xD;
	 	    String message13 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre vechiul concediu:&lt;/h3>&quot;;&#xD;
	 	    String message14 = &quot;&lt;p>&lt;b>Inceput:&lt;/b> &quot; + inceputold + &quot;&lt;br> &lt;b>Final: &lt;/b> &quot; + sfarsitold + &quot;&lt;br>&lt;b>Locatie:&lt;/b> &quot; + locatieold + &quot;&lt;br>&lt;b> Motiv: &lt;/b>&quot; + motivold + &quot;&lt;br>&lt;b>Tip concediu: &lt;/b>&quot; + motivold2 + &quot;&lt;br>&lt;b>Durata: &lt;/b>&quot; + durataold2 + &quot; zile&lt;br>&lt;/p>&quot;;&#xD;
	 	    String message15 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre noua modificare:&lt;/h3>&quot;;&#xD;
	 	    String message16 = &quot;&lt;p>&lt;b>Inceput:&lt;/b> &quot; + inceput + &quot;&lt;br> &lt;b>Final: &lt;/b> &quot; + sfarsit + &quot;&lt;br>&lt;b>Locatie:&lt;/b> &quot; + locatie + &quot;&lt;br>&lt;b> Motiv: &lt;/b>&quot; + motiv + &quot;&lt;br>&lt;b>Tip concediu: &lt;/b>&quot; + motivv + &quot;&lt;br>&lt;b>Durata: &lt;/b>&quot; + durata + &quot; zile&lt;br>&lt;/p>&quot;;&#xD;
	 	    String message17 = &quot;&lt;br>&lt;p>Va dorim toate cele bune! &amp;#x1F607;&lt;/p>&quot;;&#xD;
	 	   &#xD;
	 	    String message1 = message11 + message12 + message13 + message14 + message15 + message16 + message17 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
	 	&#xD;
	 	    &#xD;
	 	    &#xD;
	 	    // trimitere propriu-zisa&#xD;
	 	    try {&#xD;
	 	        sender.send(subject1, message1, &quot;liviaaamp@gmail.com&quot;, toa); &#xD;
	 	    } catch (Exception e) {&#xD;
	 	        e.printStackTrace();&#xD;
	 	    }  &#xD;
	     }&#xD;
	     &#xD;
		    if (tipp != 3 || tipp != 0) {&#xD;
	 	 // trimit notificare la sef&#xD;
		    &#xD;
		    	// pregatire mesaj propriu-zis&#xD;
		    	&#xD;
	 	    String subject2 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;&#xD;
	 	    &#xD;
	 	    String message21 = &quot;&lt;h1>&amp;#x26A0;&amp;#xFE0F;Aveti un nou concediu de inspectat&amp;#x26A0;&amp;#xFE0F;&lt;/h1>&quot;; &#xD;
	 	    String message22 = &quot;&lt;h2>Angajatul &quot; + nume + &quot; &quot; + prenume + &quot; a modificat un concediu, mai exact unul din data de &quot; + data + &quot;.&lt;/h2>&quot;;&#xD;
	 	    String message13 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre vechiul concediu:&lt;/h3>&quot;;&#xD;
	 	    String message14 = &quot;&lt;p>&lt;b>Inceput:&lt;/b> &quot; + inceputold + &quot;&lt;br> &lt;b>Final: &lt;/b> &quot; + sfarsitold + &quot;&lt;br>&lt;b>Locatie:&lt;/b> &quot; + locatieold + &quot;&lt;br>&lt;b> Motiv: &lt;/b>&quot; + motivold + &quot;&lt;br>&lt;b>Tip concediu: &lt;/b>&quot; + motivold2 + &quot;&lt;br>&lt;b>Durata: &lt;/b>&quot; + durataold2 + &quot; zile&lt;br>&lt;/p>&quot;;&#xD;
	 	    String message15 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre noua modificare:&lt;/h3>&quot;;&#xD;
	 	    String message16 = &quot;&lt;p>&lt;b>Inceput:&lt;/b> &quot; + inceput + &quot;&lt;br> &lt;b>Final: &lt;/b> &quot; + sfarsit + &quot;&lt;br>&lt;b>Locatie:&lt;/b> &quot; + locatie + &quot;&lt;br>&lt;b> Motiv: &lt;/b>&quot; + motiv + &quot;&lt;br>&lt;b>Tip concediu: &lt;/b>&quot; + motivv + &quot;&lt;br>&lt;b>Durata: &lt;/b>&quot; + durata + &quot; zile&lt;br>&lt;/p>&quot;;&#xD;
	 	    String message17 = &quot;&lt;br>&lt;p>Va dorim toate cele bune! &amp;#x1F607; &lt;/p>&quot;;&#xD;
	 	    &#xD;
	 	    String message1 = message21 + message22 + message13 + message14 + message15 + message16 + message17 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
	 	   &#xD;
	 	// trimitere propriu-zisa&#xD;
	 	    try {&#xD;
	 	        sender.send(subject2, message1, &quot;liviaaamp@gmail.com&quot;, tos);&#xD;
	 	    } catch (Exception e) {&#xD;
	 	        e.printStackTrace();&#xD;
	 	    }  &#xD;
		    } &#xD;
		    &#xD;
		    if (tipp == 3){&#xD;
		    	// trimit notificare la director&#xD;
		    	&#xD;
		    	// pregatire mesaj propriu-zis&#xD;
	 	    String subject2 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;&#xD;
	 	    &#xD;
	 	    String message21 = &quot;&lt;h1>&amp;#x26A0;&amp;#xFE0F;Aveti un nou concediu de inspectat&amp;#x26A0;&amp;#xFE0F;&lt;/h1>&quot;; &#xD;
	 	    String message22 = &quot;&lt;h2>Angajatul &quot; + nume + &quot; &quot; + prenume + &quot; a modificat un concediu, mai exact unul din data de &quot; + data + &quot;.&lt;/h2>&quot;;&#xD;
	 	    String message13 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre vechiul concediu:&lt;/h3>&quot;;&#xD;
	 	    String message14 = &quot;&lt;p>&lt;b>Inceput:&lt;/b> &quot; + inceputold + &quot;&lt;br> &lt;b>Final: &lt;/b> &quot; + sfarsitold + &quot;&lt;br>&lt;b>Locatie:&lt;/b> &quot; + locatieold + &quot;&lt;br>&lt;b> Motiv: &lt;/b>&quot; + motivold + &quot;&lt;br>&lt;b>Tip concediu: &lt;/b>&quot; + motivold2 + &quot;&lt;br>&lt;b>Durata: &lt;/b>&quot; + durataold2 + &quot; zile&lt;br>&lt;/p>&quot;;&#xD;
	 	    String message15 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre noua modificare:&lt;/h3>&quot;;&#xD;
	 	    String message16 = &quot;&lt;p>&lt;b>Inceput:&lt;/b> &quot; + inceput + &quot;&lt;br> &lt;b>Final: &lt;/b> &quot; + sfarsit + &quot;&lt;br>&lt;b>Locatie:&lt;/b> &quot; + locatie + &quot;&lt;br>&lt;b> Motiv: &lt;/b>&quot; + motiv + &quot;&lt;br>&lt;b>Tip concediu: &lt;/b>&quot; + motivv + &quot;&lt;br>&lt;b>Durata: &lt;/b>&quot; + durata + &quot; zile&lt;br>&lt;/p>&quot;;&#xD;
	 	    String message17 = &quot;&lt;br>&lt;p>Va dorim toate cele bune! &amp;#x1F607; &lt;/p>&quot;;&#xD;
	 	    &#xD;
	 	    String message1 = message21 + message22 + message13 + message14 + message15 + message16 + message17 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
	 	    &#xD;
	 	// trimitere propriu-zisa&#xD;
	 	    try {&#xD;
	 	        sender.send(subject2, message1, &quot;liviaaamp@gmail.com&quot;, tod); &#xD;
	 	    } catch (Exception e) {&#xD;
	 	        e.printStackTrace();&#xD;
	 	    }  &#xD;
		    }&#xD;
		    &#xD;
		    if (tipp == 0){&#xD;
		    	// trimit notificare la director ca angajat&#xD;
		    	// pregatire mesaj propriu-zis&#xD;
	 	    String subject2 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;&#xD;
	&#xD;
	 	    String message21 = &quot;&lt;h1>&amp;#x26A0;&amp;#xFE0F;Aveti un nou concediu de inspectat&amp;#x26A0;&amp;#xFE0F;&lt;/h1>&quot;; &#xD;
	 	    String message22 = &quot;&lt;h2>Felicitari! &amp;#x1F389; Concediul din data de &quot; + data + &quot; a fost modificat cu succes! &amp;#x1F389; &lt;/h2>&lt;h3>Nu uitati sa-l aprobati sau sa-l respingeti!&amp;#x1F609;&lt;/h3>&quot;;&#xD;
	 	    String message13 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre vechiul concediu:&lt;/h3>&quot;;&#xD;
	 	    String message14 = &quot;&lt;p>&lt;b>Inceput:&lt;/b> &quot; + inceputold + &quot;&lt;br> &lt;b>Final: &lt;/b> &quot; + sfarsitold + &quot;&lt;br>&lt;b>Locatie:&lt;/b> &quot; + locatieold + &quot;&lt;br>&lt;b> Motiv: &lt;/b>&quot; + motivold + &quot;&lt;br>&lt;b>Tip concediu: &lt;/b>&quot; + motivold2 + &quot;&lt;br>&lt;b>Durata: &lt;/b>&quot; + durataold2 + &quot; zile&lt;br>&lt;/p>&quot;;&#xD;
	 	    String message15 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre noua modificare:&lt;/h3>&quot;;&#xD;
	 	    String message16 = &quot;&lt;p>&lt;b>Inceput:&lt;/b> &quot; + inceput + &quot;&lt;br> &lt;b>Final: &lt;/b> &quot; + sfarsit + &quot;&lt;br>&lt;b>Locatie:&lt;/b> &quot; + locatie + &quot;&lt;br>&lt;b> Motiv: &lt;/b>&quot; + motiv + &quot;&lt;br>&lt;b>Tip concediu: &lt;/b>&quot; + motivv + &quot;&lt;br>&lt;b>Durata: &lt;/b>&quot; + durata + &quot; zile&lt;br>&lt;/p>&quot;;&#xD;
	 	    String message17 = &quot;&lt;br>&lt;p>Va dorim toate cele bune! &amp;#x1F607; &lt;/p>&quot;;&#xD;
	 	   &#xD;
	 	    String message1 = message21 + message22 + message13 + message14 + message15 + message16 + message17 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
	 	    &#xD;
	 	// trimitere propriu-zisa&#xD;
	 	    try {&#xD;
	 	        sender.send(subject2, message1, &quot;liviaaamp@gmail.com&quot;, tod);&#xD;
	 	    } catch (Exception e) {&#xD;
	 	        e.printStackTrace();&#xD;
	 	    }&#xD;
		    }&#xD;
	    } catch (SQLException e) {&#xD;
	        throw new ServletException(&quot;Eroare BD =(&quot;, e);&#xD;
	    } &#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_NnoEVdEfCS7cth2SLu0w" name="send3" specification="_VpiSgEVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>// trimitere notificare la toti utilizatorii ca s-a modificat (numele) unui departament&#xD;
		// declarare si initializare variabile&#xD;
		 GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;, &quot;rtmz fzcp onhv minb&quot;);&#xD;
      String to = &quot;&quot;;&#xD;
&#xD;
      // creare conexiune baza de date&#xD;
     try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
	         PreparedStatement stmt = connection.prepareStatement(&quot;select email from useri;&quot;)) {&#xD;
	        ResultSet rs = stmt.executeQuery();&#xD;
	        if (rs.next()) {&#xD;
	        	while (rs.next()) {&#xD;
	        		// extragere destinatar&#xD;
	        		to = rs.getString(&quot;email&quot;);&#xD;
	        		&#xD;
	        		// pregatire text/continut mail&#xD;
	        		String subject1 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;&#xD;
		    	    String message12 = &quot;&lt;h2>A fost adaugat un nou departament &lt;/h2>&quot;; &#xD;
		    	    String message11 = &quot;&lt;h1>Ultimile noutati &lt;/h1>&quot;; &#xD;
		    	    String message13 = &quot;&lt;h3>Sa vedem cum ne organizam!&lt;/h3>&quot;;&#xD;
		    	    String message16 = &quot;&lt;p>Decizia a fost luata la nivel de conducere. &lt;br> Va dorim toate cele bune! &amp;#x1F607; &lt;/p>&quot;;&#xD;
		    	    String message1 = message11 + message12 + message13 + message16 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
		    	   &#xD;
		    	    // trimitere propriu-zisa&#xD;
	 	    	    try {&#xD;
	 	    	        sender.send(subject1, message1, &quot;liviaaamp@gmail.com&quot;, to);&#xD;
	 	    	    } catch (Exception e) {&#xD;
	 	    	        e.printStackTrace(); &#xD;
	 	    	    }  &#xD;
	        	} &#xD;
	        }&#xD;
     } catch (SQLException e) {&#xD;
     	throw new ServletException(&quot;Eroare BD =(&quot;, e);&#xD;
     } &#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_NnoUVdEfCS7cth2SLu0w" name="send4" specification="_VuymAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_NnokVdEfCS7cth2SLu0w" name="old">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_Nno0VdEfCS7cth2SLu0w" name="departament">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>// trimitere notificare la toti utilizatorii ca s-a modificat (numele) unui departament&#xD;
		// declarare si initializare variabile&#xD;
		 GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;, &quot;rtmz fzcp onhv minb&quot;);&#xD;
      String to = &quot;&quot;;&#xD;
&#xD;
      // creare conexiune baza de date&#xD;
         try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
    	         PreparedStatement stmt = connection.prepareStatement(&quot;select email from useri;&quot;)) {&#xD;
    	        ResultSet rs = stmt.executeQuery();&#xD;
    	        if (rs.next()) {&#xD;
    	        	while (rs.next()) {&#xD;
    	        		// extragere destinatar&#xD;
 	        		to = rs.getString(&quot;email&quot;);&#xD;
 	        		&#xD;
 	        		// pregatire text/continut mail&#xD;
     	    	    String subject1 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;&#xD;
     	    	    String message11 = &quot;&lt;h1>Ultimile noutati &lt;/h1>&quot;; &#xD;
     	    	    String message12 = &quot;&lt;h2>De acum incolo, departamentul &quot; + old + &quot; se va numi &quot; + departament + &quot; &lt;/h2>&quot;; &#xD;
     	    	    String message16 = &quot;&lt;p>Decizia a fost luata la nivel de conducere. &lt;br> Va dorim toate cele bune! &amp;#x1F607; &lt;/p>&quot;;&#xD;
     	    	    String message1 = message11 + message12 + message16 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
     	    	   &#xD;
     	    	    // trimitere propriu-zisa&#xD;
	     	    	    try {&#xD;
	     	    	        sender.send(subject1, message1, &quot;liviaaamp@gmail.com&quot;, to);&#xD;
	     	    	    } catch (Exception e) {&#xD;
	     	    	        e.printStackTrace(); &#xD;
	     	    	    } &#xD;
    	        	} &#xD;
    	        }&#xD;
    	    } catch (SQLException e) {&#xD;
    	        throw new ServletException(&quot;Eroare BD =(&quot;, e);&#xD;
    	    } &#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_NnpEVdEfCS7cth2SLu0w" name="send5" specification="_VuzNAUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_NnpUVdEfCS7cth2SLu0w" name="departament">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile&#xD;
		 GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;, &quot;rtmz fzcp onhv minb&quot;);&#xD;
      String to = &quot;&quot;;&#xD;
      &#xD;
      // creare conexiune baza de date&#xD;
      try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
 	         PreparedStatement stmt = connection.prepareStatement(&quot;select tip, email from useri;&quot;)) {&#xD;
 	       	ResultSet rs = stmt.executeQuery();&#xD;
 	        if (rs.next()) {&#xD;
 	        	while (rs.next()) {&#xD;
 	        		// extragere destinatar&#xD;
 	        		to = rs.getString(&quot;email&quot;);&#xD;
 	        		&#xD;
 	        		// pregatire text/continut mail&#xD;
	    	        	String subject1 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;&#xD;
	     	    	    String message11 = &quot;&lt;h1>Ultimile noutati &lt;/h1>&quot;; &#xD;
	     	    	    String message12 = &quot;&lt;h2>De acum incolo, departamentul &quot; + departament + &quot; a fost comasat. &lt;/h2>&quot;; &#xD;
	     	    	    String message16 = &quot;&lt;p>Decizia a fost luata la nivel de conducere. &lt;br> Va dorim toate cele bune! &amp;#x1F607; &lt;/p>&quot;;&#xD;
	     	    	    String message1 = message11 + message12 + message16 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
	     	    	    &#xD;
	     	    	    // trimitere propriu-zisa&#xD;
	     	    	    try {&#xD;
	     	    	        sender.send(subject1, message1, &quot;liviaaamp@gmail.com&quot;, to);&#xD;
	     	    	    } catch (Exception e) {&#xD;
	     	    	        e.printStackTrace(); &#xD;
	     	    	    }  &#xD;
 	        	} &#xD;
 	        }&#xD;
 	    } catch (SQLException e) {&#xD;
 	        throw new ServletException(&quot;Eroare BD =(&quot;, e);&#xD;
 	    }  &#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_NnpkVdEfCS7cth2SLu0w" name="send6" specification="_VuzNA0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Nnp0VdEfCS7cth2SLu0w" name="uid">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NnqEVdEfCS7cth2SLu0w" name="idconcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// trimit notificare la angajat&#xD;
		// declarare si initializare variabile&#xD;
		&#xD;
		// initializare trimitator&#xD;
	    GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;, &quot;rtmz fzcp onhv minb&quot;);&#xD;
	    &#xD;
	    String angajat = &quot;&quot;;&#xD;
	    // alte date despre concediu&#xD;
	    String inceput = &quot;&quot;;&#xD;
	    String sfarsit = &quot;&quot;;&#xD;
	    String locatie = &quot;&quot;;&#xD;
	    String motiv2 = &quot;&quot;;&#xD;
	    String motiv3 = &quot;&quot;;&#xD;
	    int tip3 = -1;&#xD;
	    int durata = -1;&#xD;
	    String data = &quot;&quot;;&#xD;
	    String mentiuni = &quot;&quot;;&#xD;
	    &#xD;
	    // pregatire conexiune cu baza de date&#xD;
	    try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
		        PreparedStatement stmt = conexiune.prepareStatement(&quot;select ang.nume as nume_ang, ang.prenume as prenume_ang, &quot;&#xD;
		         		+ &quot;ang.tip as tip, ang.email as email_ang, sef.email as email_sef, dir.email as email_dir from useri as ang &quot;&#xD;
		         		+ &quot;join useri as sef on ang.id_dep = sef.id_dep and sef.tip = 3 join useri as dir on ang.id_dep = dir.id_dep and dir.tip = 0 where ang.id = ?;&quot;);&#xD;
		        PreparedStatement stmt2 = conexiune.prepareStatement(&quot;select datediff(end_c, start_c) as durata from concedii where id = ?;&quot;);&#xD;
	    		PreparedStatement stmt3 = conexiune.prepareStatement(&quot;select * from concedii where id = ?;&quot;);&#xD;
	    		PreparedStatement stmt4 = conexiune.prepareStatement(&quot;select motiv from tipcon where tip = ?;&quot;)) {&#xD;
			        stmt.setInt(1, uid);&#xD;
			        ResultSet rs = stmt.executeQuery();&#xD;
			        if (rs.next()) {&#xD;
			        	angajat = rs.getString(&quot;email_ang&quot;);&#xD;
			        }&#xD;
			        &#xD;
			        stmt2.setInt(1, idconcediu);&#xD;
		  	        ResultSet rs2 = stmt2.executeQuery();&#xD;
		  	        if (rs2.next()) {&#xD;
		  	            // extragere durata&#xD;
		  	            durata = rs2.getInt(&quot;durata&quot;) + 1;&#xD;
		  	        }&#xD;
		  	        &#xD;
		  	        stmt3.setInt(1, idconcediu);&#xD;
			        ResultSet rs3 = stmt3.executeQuery();&#xD;
			        if (rs3.next()) {&#xD;
			        	// extragere date despre concediu&#xD;
			            inceput = rs3.getString(&quot;start_c&quot;);&#xD;
			            sfarsit = rs3.getString(&quot;end_c&quot;);&#xD;
			            locatie = rs3.getString(&quot;locatie&quot;);&#xD;
			            motiv2 = rs3.getString(&quot;motiv&quot;);&#xD;
			            tip3 = rs3.getInt(&quot;tip&quot;);&#xD;
			            data = rs3.getString(&quot;added&quot;);&#xD;
			            mentiuni = rs3.getString(&quot;mentiuni&quot;);&#xD;
			        }&#xD;
			        &#xD;
			        stmt4.setInt(1, tip3);&#xD;
		 	        ResultSet rs4 = stmt4.executeQuery();&#xD;
		 	        if (rs4.next()) {&#xD;
		 	        	// extragere tip concediu&#xD;
		 	            motiv3 = rs4.getString(&quot;motiv&quot;);&#xD;
		 	        }&#xD;
		        &#xD;
		    } catch (SQLException e) {&#xD;
		        throw new ServletException(&quot;Eroare BD =(&quot;, e);&#xD;
		    } &#xD;
	    &#xD;
	    	// pregatire mesaj propriu-zis&#xD;
		    String subject1 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;&#xD;
		    &#xD;
		    String message11 = &quot;&lt;h1>Felicitari! &amp;#x1F389; &lt;br> Concediul dvs. din data de &quot; + data + &quot; a fost aprobat! &amp;#x1F389; &lt;/h1>&quot;; &#xD;
		    String message13 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre acest concediu:&lt;/h3>&quot;;&#xD;
		    String message14 = &quot;&lt;p>&lt;b>Inceput:&lt;/b> &quot; + inceput + &quot;&lt;br> &lt;b>Final: &lt;/b> &quot; + sfarsit + &quot;&lt;br>&lt;b>Locatie:&lt;/b> &quot; + &#xD;
		    		locatie + &quot;&lt;br>&lt;b> Motiv: &lt;/b>&quot; + motiv2 + &quot;&lt;br>&lt;b>Tip concediu: &lt;/b>&quot; + motiv3 + &quot;&lt;br>&lt;b>Durata: &lt;/b>&quot; + (durata) + &quot; zile&lt;br>&lt;b>Mentiuni:&lt;/b> &quot; + mentiuni + &quot;&lt;br>&lt;/p>&quot;;&#xD;
		    String message16 = &quot;&lt;p>Va dorim toate cele bune! &amp;#x1F607; &lt;/p>&quot;;&#xD;
		    &#xD;
		    String message1 = message11 + message13 + message14 + message16 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
		   &#xD;
		    // trimitere efectiva&#xD;
		    try {&#xD;
		        sender.send(subject1, message1, &quot;liviaaamp@gmail.com&quot;, angajat);&#xD;
		    } catch (Exception e) {&#xD;
		        e.printStackTrace();&#xD;
		    }  &#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_NnqUVdEfCS7cth2SLu0w" name="send7" specification="_VuzNBkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_NnqkVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_Nnq0VdEfCS7cth2SLu0w" name="idconcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile&#xD;
		String director = &quot;&quot;;&#xD;
     String angajat = &quot;&quot;;&#xD;
     String nume = &quot;&quot;;&#xD;
     String prenume = &quot;&quot;;&#xD;
     String mentiuni = &quot;&quot;;&#xD;
     try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
	         PreparedStatement stmt = connection.prepareStatement(&quot;select ang.nume as nume_ang, ang.prenume as prenume_ang, ang.tip as tip, ang.email as email_ang, sef.email as email_sef, dir.email as email_dir from useri as ang join useri as sef on ang.id_dep = sef.id_dep and sef.tip = 3 join useri as dir on ang.id_dep = dir.id_dep and dir.tip = 0 where ang.id = ?;&quot;&#xD;
	         		+ &quot;&quot;)) {&#xD;
	        stmt.setInt(1, id);&#xD;
	        &#xD;
	        ResultSet rs = stmt.executeQuery();&#xD;
	        if (rs.next()) {&#xD;
	            angajat = rs.getString(&quot;email_ang&quot;);&#xD;
	            director = rs.getString(&quot;email_dir&quot;);&#xD;
	            nume = rs.getString(&quot;nume_ang&quot;);&#xD;
	            prenume = rs.getString(&quot;prenume_ang&quot;);&#xD;
	        }&#xD;
	    } catch (SQLException e) {&#xD;
	        throw new ServletException(&quot;Eroare BD =(&quot;, e);&#xD;
	    } &#xD;
&#xD;
     String inceput = &quot;&quot;;&#xD;
     String sfarsit = &quot;&quot;;&#xD;
     String locatie = &quot;&quot;;&#xD;
     String motiv = &quot;&quot;;&#xD;
     String tip = &quot;&quot;;&#xD;
     int tip3 = -1;&#xD;
     int durata = -1;&#xD;
     String data = &quot;&quot;;&#xD;
     try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
   	         PreparedStatement stmt = connection.prepareStatement(&quot;select datediff(end_c, start_c) as durata from concedii where id = ?;&quot;&#xD;
   	         		+ &quot;&quot;)) {&#xD;
   	        stmt.setInt(1, idconcediu);&#xD;
   	        &#xD;
   	        ResultSet rs = stmt.executeQuery();&#xD;
   	        if (rs.next()) {&#xD;
   	            &#xD;
   	            durata = rs.getInt(&quot;durata&quot;) + 1;&#xD;
   	        }&#xD;
   	    } catch (SQLException e) {&#xD;
   	        throw new ServletException(&quot;Eroare BD =(&quot;, e);&#xD;
   	    }&#xD;
     &#xD;
     try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
	         PreparedStatement stmt = connection.prepareStatement(&quot;select * from concedii where id = ?;&quot;&#xD;
	         		+ &quot;&quot;)) {&#xD;
	        stmt.setInt(1, idconcediu);&#xD;
	        &#xD;
	        ResultSet rs = stmt.executeQuery();&#xD;
	        if (rs.next()) {&#xD;
	            inceput = rs.getString(&quot;start_c&quot;);&#xD;
	            sfarsit = rs.getString(&quot;end_c&quot;);&#xD;
	            locatie = rs.getString(&quot;locatie&quot;);&#xD;
	            motiv = rs.getString(&quot;motiv&quot;);&#xD;
	            tip3 = rs.getInt(&quot;tip&quot;);&#xD;
	            data = rs.getString(&quot;added&quot;);&#xD;
	            mentiuni = rs.getString(&quot;mentiuni&quot;);&#xD;
	        }&#xD;
	    } catch (SQLException e) {&#xD;
	        throw new ServletException(&quot;Eroare BD =(&quot;, e);&#xD;
	    }&#xD;
     &#xD;
     try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
  	         PreparedStatement stmt = connection.prepareStatement(&quot;select motiv from tipcon where tip = ?;&quot;)) {&#xD;
  	        stmt.setInt(1, tip3);&#xD;
  	        &#xD;
  	        ResultSet rs = stmt.executeQuery();&#xD;
  	        if (rs.next()) {&#xD;
  	            &#xD;
  	        }&#xD;
  	    } catch (SQLException e) {&#xD;
  	        throw new ServletException(&quot;Eroare BD=(&quot;, e);&#xD;
  	    }&#xD;
		// initializare trimitator&#xD;
	    GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;, &quot;rtmz fzcp onhv minb&quot;);&#xD;
	    &#xD;
	    // pregatire mail propriu-zis&#xD;
	    // trimit notificare la angajat&#xD;
	    String subject1 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;&#xD;
	    &#xD;
	    String message11 = &quot;&lt;h1>Felicitari! &amp;#x1F389; &lt;br> Concediul dvs. din data de &quot; + data + &quot; a fost citit si este in curs de procesare! &amp;#x1F389; &lt;/h1>&quot;; &#xD;
	    String message12 = &quot;&lt;h2>Totusi, acum mai trebuie sa asteptam confimarea acestuia &amp;#x1F642; Sa fie intr-un ceas bun! &amp;#x1F607; &lt;/h2>&quot;;&#xD;
	    String message13 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre acest concediu:&lt;/h3>&quot;;&#xD;
	    String message14 = &quot;&lt;p>&lt;b>Inceput:&lt;/b> &quot; + inceput + &quot;&lt;br> &lt;b>Final: &lt;/b> &quot; + sfarsit + &quot;&lt;br>&lt;b>Locatie:&lt;/b> &quot; + locatie + &quot;&lt;br>&lt;b> Motiv: &lt;/b>&quot; + motiv + &quot;&lt;br>&lt;b>Tip concediu: &lt;/b>&quot; + tip + &quot;&lt;br>&lt;b>Durata: &lt;/b>&quot; + durata + &quot; zile&lt;br>&lt;b>Mentiuni:&lt;/b>&quot; + mentiuni + &quot;&lt;br>&lt;/p>&quot;;&#xD;
	    String message16 = &quot;&lt;p>Va dorim toate cele bune! &amp;#x1F607; &lt;/p>&quot;;&#xD;
	    &#xD;
	    String message1 = message11 + message12 + message13 + message14 + message16 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
	    // trimitere mail&#xD;
	    try {&#xD;
	        sender.send(subject1, message1, &quot;liviaaamp@gmail.com&quot;, angajat);&#xD;
	    } catch (Exception e) {&#xD;
	        e.printStackTrace();&#xD;
	    }  &#xD;
	    &#xD;
	    // trimitere notificare la director&#xD;
	    String subject2 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;&#xD;
	    &#xD;
	    String message21 = &quot;&lt;h1>&amp;#x26A0;&amp;#xFE0F;Aveti un nou concediu de inspectat&amp;#x26A0;&amp;#xFE0F;&lt;/h1>&quot;; &#xD;
	    String message22 = &quot;&lt;h2>Concediul angajatului &quot; + nume + &quot; &quot; + prenume + &quot; a fost partial aprobat.&lt;/h2>&quot;;&#xD;
	    String message23 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre concediul din data de &quot; + data + &quot;:&lt;/h3>&quot;;&#xD;
	    String message24 = &quot;&lt;p>&lt;b>Inceput:&lt;/b> &quot; + inceput + &quot;&lt;br> &lt;b>Final: &lt;/b> &quot; + sfarsit + &quot;&lt;br>&lt;b>Locatie:&lt;/b> &quot; + locatie + &quot;&lt;br>&lt;b> Motiv: &lt;/b>&quot; + motiv + &quot;&lt;br>&lt;b>Tip concediu: &lt;/b>&quot; + tip + &quot;&lt;br>&lt;b>Durata: &lt;/b>&quot; + (durata) + &quot; zile&lt;br>&lt;/p>&quot;;&#xD;
	    String message26 = &quot;&lt;p>Va dorim toate cele bune! &amp;#x1F607; &lt;/p>&quot;;&#xD;
	    &#xD;
	    String message2 = message21 + message22 + message23 + message24 + message26 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
	   // trimitere&#xD;
	    try {&#xD;
	        sender.send(subject2, message2, &quot;liviaaamp@gmail.com&quot;, director);&#xD;
	    } catch (Exception e) {&#xD;
	        e.printStackTrace();&#xD;
	    }  &#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_NnrEVdEfCS7cth2SLu0w" name="send8" specification="_Vuz0EEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_NnrUVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_NnrkVdEfCS7cth2SLu0w" name="idconcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile&#xD;
		&#xD;
		// initializare trimitator&#xD;
     GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;, &quot;rtmz fzcp onhv minb&quot;);&#xD;
     &#xD;
     // date despre concediu&#xD;
     String angajat = &quot;&quot;;&#xD;
     String inceput = &quot;&quot;;&#xD;
     String sfarsit = &quot;&quot;;&#xD;
     String locatie = &quot;&quot;;&#xD;
     String motiv = &quot;&quot;;&#xD;
     String motiv2 = &quot;&quot;;&#xD;
     int durata = -1;&#xD;
     String data = &quot;&quot;;&#xD;
     String mentiuni = &quot;&quot;;&#xD;
     &#xD;
     // creare conexiune cu baza de date si pregatire interogari&#xD;
     try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
	         PreparedStatement stmt = conexiune.prepareStatement(&quot;select ang.nume as nume_ang, ang.prenume as prenume_ang, ang.tip as tip, &quot;&#xD;
	         		+ &quot;ang.email as email_ang, sef.email as email_sef, dir.email as email_dir from useri as ang &quot;&#xD;
	         		+ &quot;join useri as sef on ang.id_dep = sef.id_dep and sef.tip = 3 join useri as dir on ang.id_dep = dir.id_dep and dir.tip = 0 where ang.id = ?;&quot;);&#xD;
	        		PreparedStatement stmt2 = conexiune.prepareStatement(&quot;select datediff(end_c, start_c) as durata from concedii where id = ?;&quot;);&#xD;
     		PreparedStatement stmt3 = conexiune.prepareStatement(&quot;select * from concedii where id = ?;&quot;)&#xD;
     		) {&#xD;
     	// extragere email angajat&#xD;
	        stmt.setInt(1, id);&#xD;
	        ResultSet rezultat = stmt.executeQuery();&#xD;
	        if (rezultat.next()) {&#xD;
	            angajat = rezultat.getString(&quot;email_ang&quot;);&#xD;
	        }&#xD;
	        &#xD;
	        // extragere durata concediu&#xD;
	        stmt2.setInt(1, idconcediu);&#xD;
	        ResultSet rezultat2 = stmt2.executeQuery();&#xD;
	        if (rezultat2.next()) {&#xD;
	            durata = rezultat2.getInt(&quot;durata&quot;) + 1;&#xD;
	        }&#xD;
	        &#xD;
	        // extragere date despre concediu&#xD;
	        stmt3.setInt(1, idconcediu);&#xD;
	        ResultSet rezultat3 = stmt3.executeQuery();&#xD;
	        if (rezultat3.next()) {&#xD;
	            inceput = rezultat3.getString(&quot;start_c&quot;);&#xD;
	            sfarsit = rezultat3.getString(&quot;end_c&quot;);&#xD;
	            locatie = rezultat3.getString(&quot;locatie&quot;);&#xD;
	            motiv = rezultat3.getString(&quot;motiv&quot;);&#xD;
	            data = rezultat3.getString(&quot;added&quot;);&#xD;
	            mentiuni = rezultat3.getString(&quot;mentiuni&quot;);&#xD;
	        }&#xD;
	    } catch (SQLException e) {&#xD;
	        throw new ServletException(&quot;Eroare BD =(&quot;, e);&#xD;
	    } &#xD;
&#xD;
     	// trimit notificare la angajat&#xD;
     	// pregatire mail&#xD;
 	    String subject1 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;&#xD;
 	    &#xD;
 	    String message11 = &quot;&lt;h1>Ne pare rau sa venim cu asemnea vesti, caci... &amp;#x1F614;&lt;br> Concediul dvs. din data de &quot; + data + &quot; a fost respins. &amp;#x1F614; &lt;/h1>&quot;; &#xD;
 	    String message13 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre acest concediu:&lt;/h3>&quot;;&#xD;
 	    String message14 = &quot;&lt;p>&lt;b>Inceput:&lt;/b> &quot; + inceput + &quot;&lt;br> &lt;b>Final: &lt;/b> &quot; + sfarsit + &quot;&lt;br>&lt;b>Locatie:&lt;/b> &quot; + locatie + &quot;&lt;br>&lt;b> Motiv: &lt;/b>&quot; + motiv + &quot;&lt;br>&lt;b>Tip concediu: &lt;/b>&quot; + motiv2 + &quot;&lt;br>&lt;b>Durata: &lt;/b>&quot; + durata + &quot; zile&lt;br>&lt;b>Mentiuni:&lt;/b>&quot; + mentiuni + &quot;&lt;br>&lt;/p>&quot;;&#xD;
 	    String message15 = &quot;&lt;br>&lt;p>Nu uitati ca puteti oricand sa programati un nou concediu in locul acestuia! &amp;#x2728; &lt;/p>&quot;;&#xD;
 	    String message16 = &quot;&lt;br>&lt;p>Va dorim toate cele bune! &amp;#x1F607; &lt;/p>&quot;;&#xD;
 	    &#xD;
 	    String message1 = message11 + message13 + message14 + message15 + message16 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
 	   &#xD;
 	    // trimitere efectiva&#xD;
 	    try {&#xD;
 	        sender.send(subject1, message1, &quot;liviaaamp@gmail.com&quot;, angajat);&#xD;
 	    } catch (Exception e) {&#xD;
 	        e.printStackTrace();&#xD;
 	    }  &#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Nnr0VdEfCS7cth2SLu0w" name="send9" specification="_Vuz0E0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_NnsEVdEfCS7cth2SLu0w" name="idconcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile&#xD;
		&#xD;
		// initializare trimitator&#xD;
		GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;, &quot;rtmz fzcp onhv minb&quot;);&#xD;
     &#xD;
		// date despre concediu&#xD;
     String inceput = &quot;&quot;;&#xD;
     String sfarsit = &quot;&quot;;&#xD;
     String locatie = &quot;&quot;;&#xD;
     String motiv = &quot;&quot;;&#xD;
     String motiv2 = &quot;&quot;;&#xD;
     int tip = -1;&#xD;
     int durata = -1;&#xD;
     String data = &quot;&quot;;&#xD;
     &#xD;
     // date utilizatori&#xD;
     int uid = -1;&#xD;
     String tod = &quot;&quot;;&#xD;
     String tos = &quot;&quot;;&#xD;
     String toa = &quot;&quot;;&#xD;
     String nume = &quot;&quot;;&#xD;
     String prenume = &quot;&quot;;&#xD;
     int tip2 = -1;&#xD;
     &#xD;
     // creare conexiune&#xD;
     try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
     		// pregatire interogare&#xD;
   	         PreparedStatement interogare = conexiune.prepareStatement(&quot;select datediff(end_c, start_c) as durata from concedii where id = ?;&quot;);&#xD;
     		PreparedStatement interogare2 = conexiune.prepareStatement(&quot;select * from concedii where id = ?;&quot;); &#xD;
     		PreparedStatement interogare3 = conexiune.prepareStatement(&quot;select motiv from tipcon where tip = ?;&quot;);&#xD;
     		PreparedStatement interogare4 = conexiune.prepareStatement(&quot;select id_ang from concedii where id = ?;&quot;);&#xD;
     		 PreparedStatement interogare5 = conexiune.prepareStatement(&quot;select ang.nume as nume_ang, ang.prenume as prenume_ang, ang.tip as tip, &quot;&#xD;
     	         		+ &quot;ang.email as email_ang, sef.email as email_sef, dir.email as email_dir from useri as ang &quot;&#xD;
     	         		+ &quot;join useri as sef on ang.id_dep = sef.id_dep and sef.tip = 3 &quot;&#xD;
     	         		+ &quot;join useri as dir on ang.id_dep = dir.id_dep and dir.tip = 0 where ang.id = ?;&quot;)&#xD;
     				) {&#xD;
     	// aflare durata&#xD;
   	        interogare.setInt(1, idconcediu);&#xD;
   	     // executare interogare&#xD;
   	        ResultSet rezultat = interogare.executeQuery();&#xD;
   	        if (rezultat.next()) {&#xD;
   	        	// cat timp exista linii de intors se extrag date&#xD;
   	            durata = rezultat.getInt(&quot;durata&quot;) + 1;&#xD;
   	        }&#xD;
   	        &#xD;
   	        // aceiasi pasi au loc si aici&#xD;
   	        // aflare inceput, final, locatie, data adaugarii&#xD;
   	      interogare2.setInt(1, idconcediu);&#xD;
  	        ResultSet rezultat2 = interogare2.executeQuery();&#xD;
  	        if (rezultat2.next()) {&#xD;
  	            inceput = rezultat2.getString(&quot;start_c&quot;);&#xD;
  	            sfarsit = rezultat2.getString(&quot;end_c&quot;);&#xD;
  	            locatie = rezultat2.getString(&quot;locatie&quot;);&#xD;
  	            motiv = rezultat2.getString(&quot;motiv&quot;);&#xD;
  	            tip = rezultat2.getInt(&quot;tip&quot;);&#xD;
  	            data = rezultat2.getString(&quot;added&quot;);&#xD;
  	        }&#xD;
  	        &#xD;
  	        // aflare tip de concediu&#xD;
  	       interogare3.setInt(1, tip);&#xD;
 	        ResultSet rezultat3 = interogare3.executeQuery();&#xD;
 	        if (rezultat3.next()) {&#xD;
 	            motiv2 = rezultat3.getString(&quot;motiv&quot;); &#xD;
 	        }&#xD;
 	        &#xD;
 	        // aflare id angajat care a incarcat concediu pentru a-i trimite email&#xD;
 	        interogare4.setInt(1, idconcediu);&#xD;
   	        ResultSet rezultat4 = interogare4.executeQuery();&#xD;
   	        if (rezultat4.next()) {&#xD;
   	            uid = rezultat4.getInt(&quot;id_ang&quot;);&#xD;
   	        }&#xD;
   	        &#xD;
   	        // pregatesc pentru trimiterea e-mail-ului&#xD;
   	      interogare5.setInt(1, uid);&#xD;
  	        ResultSet rezultat5 = interogare5.executeQuery();&#xD;
  	        if (rezultat5.next()) {&#xD;
  	            tos = rezultat5.getString(&quot;email_sef&quot;);&#xD;
  	            toa = rezultat5.getString(&quot;email_ang&quot;);&#xD;
  	            tod = rezultat5.getString(&quot;email_dir&quot;);&#xD;
  	            nume = rezultat5.getString(&quot;nume_ang&quot;);&#xD;
  	            prenume = rezultat5.getString(&quot;prenume_ang&quot;);&#xD;
  	            tip2 = rezultat5.getInt(&quot;tip&quot;);&#xD;
  	        }&#xD;
  	    // abia acum trimit email&#xD;
             // trimit confirmare stergere la angajat &#xD;
          // pregatire text mail&#xD;
      	    String subject1 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;&#xD;
      	    &#xD;
      	    String message11 = &quot;&lt;h1>Ne pare rau sa venim cu asemnea vesti, caci... &amp;#x1F614; &lt;/h1>&quot;; &#xD;
      	    String message12 = &quot;&lt;h2>Tocmai ati sters cu succes un concediu, mai exact cel din data de &quot; + data + &quot;&lt;/h2>&quot;;&#xD;
      	    String message13 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre vechiul concediu:&lt;/h3>&quot;;&#xD;
      	    String message14 = &quot;&lt;p>&lt;b>Inceput:&lt;/b> &quot; + inceput + &quot;&lt;br> &lt;b>Final: &lt;/b> &quot; + sfarsit + &quot;&lt;br>&lt;b>Locatie:&lt;/b> &quot; + locatie + &quot;&lt;br>&lt;b> Motiv: &lt;/b>&quot; + motiv + &quot;&lt;br>&lt;b>Tip concediu: &lt;/b>&quot; + motiv2 + &quot;&lt;br>&lt;b>Durata: &lt;/b>&quot; + durata + &quot; zile&lt;br>&lt;/p>&quot;;&#xD;
      	    String message17 = &quot;&lt;br>&lt;p>Va dorim toate cele bune! &amp;#x1F607; &lt;/p>&quot;;&#xD;
      	    String message16 = &quot;&lt;br>&lt;p>Nu uitati ca puteti oricand sa programati un nou concediu in locul acestuia! &amp;#x2728; &lt;/p>&quot;;&#xD;
      	    &#xD;
      	    String message1 = message11 + message12 + message13 + message14 + message16 + message17 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
      	   &#xD;
      	    // trimitere propriu-zisa&#xD;
      	    try {&#xD;
      	        sender.send(subject1, message1, &quot;liviaaamp@gmail.com&quot;, toa);&#xD;
      	    } catch (Exception e) {&#xD;
      	        e.printStackTrace();&#xD;
      	    }  &#xD;
          &#xD;
          if (tip2 != 3 || tip2 != 0) {&#xD;
          	// anunt seful ca cineva si-a sters un concediu&#xD;
          	// ibidem si pentru celelate cazuri, doar corpul mail-ului difera&#xD;
      	    String subject2 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;&#xD;
      	    String message21 = &quot;&lt;h1>Ultimile noutati &lt;/h1>&quot;; &#xD;
      	    String message22 = &quot;&lt;h2>Angajatul &quot; + nume + &quot; &quot; + prenume + &quot; tocmai a sters cu succes un concediu, mai exact unul din data de &quot; + data  + &quot;&lt;/h2>&quot;;&#xD;
      	    String message23 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre vechiul concediu:&lt;/h3>&quot;;&#xD;
      	    String message24 = &quot;&lt;p>&lt;b>Inceput:&lt;/b> &quot; + inceput + &quot;&lt;br> &lt;b>Final: &lt;/b> &quot; + sfarsit + &quot;&lt;br>&lt;b>Locatie:&lt;/b> &quot; + locatie + &quot;&lt;br>&lt;b> Motiv: &lt;/b>&quot; + motiv + &quot;&lt;br>&lt;b>Tip concediu: &lt;/b>&quot; + motiv2 + &quot;&lt;br>&lt;b>Durata: &lt;/b>&quot; + durata + &quot; zile&lt;br>&lt;/p>&quot;;&#xD;
      	    String message27 = &quot;&lt;br>&lt;p>Va dorim toate cele bune! &amp;#x1F607; &lt;/p>&quot;;&#xD;
      	    String message26 = &quot;&lt;p>Din pacate nu se stiu motivele pentru care a facut aceasta. Poate a intervenit ceva/poate ceva nu a mers bine. &lt;br> In schimb, le putem veni in ajutor cu sustinere, recomandari, sfaturi. &amp;#x1F609;\r\n&quot;&#xD;
      	    		+ &quot; Doar suntem o familie &amp;#x1F917; &lt;/p>&quot;;&#xD;
      	    String message2 = message21 + message22 + message23 + message24 + message26 + message27 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
      	    try {&#xD;
      	        sender.send(subject2, message2, &quot;liviaaamp@gmail.com&quot;, tos);&#xD;
      	    } catch (Exception e) {&#xD;
      	        e.printStackTrace(); &#xD;
      	    }  &#xD;
          }&#xD;
          if (tip2 == 3) {&#xD;
          	// se anunta si directorul despre sef&#xD;
          	String subject2 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;&#xD;
      	    String message21 = &quot;&lt;h1>Ultimile noutati &lt;/h1>&quot;; &#xD;
      	    String message22 = &quot;&lt;h2>Angajatul &quot; + nume + &quot; &quot; + prenume + &quot; tocmai a sters cu succes un concediu, mai exact unul din data de &quot; + data + &quot;&lt;/h2>&quot;;&#xD;
      	    String message23 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre vechiul concediu:&lt;/h3>&quot;;&#xD;
      	    String message24 = &quot;&lt;p>&lt;b>Inceput:&lt;/b> &quot; + inceput + &quot;&lt;br> &lt;b>Final: &lt;/b> &quot; + sfarsit + &quot;&lt;br>&lt;b>Locatie:&lt;/b> &quot; + locatie + &quot;&lt;br>&lt;b> Motiv: &lt;/b>&quot; + motiv + &quot;&lt;br>&lt;b>Tip concediu: &lt;/b>&quot; + motiv2 + &quot;&lt;br>&lt;b>Durata: &lt;/b>&quot; + durata + &quot; zile&lt;br>&lt;/p>&quot;;&#xD;
      	    String message27 = &quot;&lt;p>Va dorim toate cele bune! &amp;#x1F607; &lt;/p>&quot;;&#xD;
      	    String message26 = &quot;&lt;p>Din pacate nu se stiu motivele pentru care a facut aceasta. Poate a intervenit ceva/poate ceva nu a mers bine. &lt;br> In schimb, le putem veni in ajutor cu sustinere, recomandari, sfaturi. &amp;#x1F609;\r\n&quot;&#xD;
      	    		+ &quot; Doar suntem o familie &amp;#x1F917;&lt;/p>&quot;;&#xD;
      	    String message2 = message21 + message22 + message23 + message24 + message26 + message27 + &quot;&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea&amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
      	   &#xD;
      	    try {&#xD;
      	        sender.send(subject2, message2, &quot;liviaaamp@gmail.com&quot;, tod);&#xD;
      	        } catch (Exception e) {&#xD;
      	        e.printStackTrace();&#xD;
      	    }  &#xD;
          }&#xD;
   	    } catch (SQLException e) {&#xD;
   	        throw new ServletException(&quot;Eroare BD =(&quot;, e);&#xD;
   	    }&#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_NnsUVdEfCS7cth2SLu0w" name="send10" specification="_Vuz0FUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_NnskVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_Nns0VdEfCS7cth2SLu0w" name="numeutilizator">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initializare variabile&#xD;
		&#xD;
		String nume = null;&#xD;
     String prenume = null;&#xD;
     String email = null;&#xD;
     int iddep = -1;&#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
              PreparedStatement preparedStatement = connection.prepareStatement(&quot;SELECT email, nume, prenume, id_dep FROM useri WHERE id = ?&quot;)) {&#xD;
             preparedStatement.setInt(1, id);&#xD;
             try (ResultSet rs = preparedStatement.executeQuery()) {&#xD;
                 if (rs.next()) {&#xD;
                     nume = rs.getString(&quot;nume&quot;);&#xD;
                     prenume = rs.getString(&quot;prenume&quot;);&#xD;
                     email = rs.getString(&quot;email&quot;);&#xD;
                     iddep = rs.getInt(&quot;id_dep&quot;);&#xD;
                 }&#xD;
             }&#xD;
         }&#xD;
     } catch (ClassNotFoundException | SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
     &#xD;
  // trimit notificare la angajat&#xD;
     GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;, &quot;rtmz fzcp onhv minb&quot;);&#xD;
     String angajat = &quot;&quot;;&#xD;
    // creare conexiune&#xD;
     try (Connection conexiune = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
     		// pregatire interogare&#xD;
	         PreparedStatement interogare = conexiune.prepareStatement(&quot;select email from useri where id_dep = ? and username != ?;&quot;)) {&#xD;
	        interogare.setInt(1, iddep);&#xD;
	        interogare.setString(2, numeutilizator); &#xD;
	        // executare interogare&#xD;
	        ResultSet rs = interogare.executeQuery();&#xD;
	        if (rs.next()) {&#xD;
	        	while (rs.next()) {&#xD;
	        		angajat = rs.getString(&quot;email&quot;);&#xD;
	        		&#xD;
    	            // pregatire mail efectiv&#xD;
 	    	    String subject1 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;&#xD;
 	    	    String message11 = &quot;&lt;h1>Ultimile noutati &lt;/h1>&quot;; &#xD;
 	    	    String message12 = &quot;&lt;h2>Colegul nostru de departament &quot; + nume + &quot; &quot; + prenume + &quot;, pleaca de la noi =( &lt;/h2>&quot;; &#xD;
 	    	    String message16 = &quot;&lt;p>Sa ne luam ramas bun. &amp;#x1F609;\r\n&quot;&#xD;
 	    	    		+ &quot; &lt;br> Doar suntem o familie! &amp;#x1F917;\r\n&quot;&#xD;
 	    	    		+ &quot; &lt;br> Va dorim toate cele bune! &amp;#x1F607; &lt;/p>&quot;;&#xD;
 	    	    String message1 = message11 + message12 + message16 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
 	    	   // trimitere&#xD;
 	    	    try {&#xD;
 	    	        sender.send(subject1, message1, &quot;liviaaamp@gmail.com&quot;, angajat);&#xD;
 	    	    } catch (Exception e) {&#xD;
 	    	        e.printStackTrace();&#xD;
 	    	    }  &#xD;
	        	}  &#xD;
	        }&#xD;
	    } catch (SQLException e) {&#xD;
	        throw new ServletException(&quot;Eroare BD =(&quot;, e);&#xD;
	    } &#xD;
     &#xD;
     // se mai trimite mail si la angajatul care este sters&#xD;
     String subject1 = &quot;Ramas bun&quot;;&#xD;
     &#xD;
	    String message11 = &quot;&lt;h1>Ne pare rau ca plecati de la noi... =( &lt;/h1>&quot;; &#xD;
	    String message12 = &quot;&lt;h2>Ne-a facut placere sa va avem in echipa! Sper sa ne auzim si cu alte ocazii! =) &lt;/h2>&quot;; &#xD;
	    String message16 = &quot;&lt;p>Va dorim toate cele bune! &amp;#x1F607; &lt;/p>&quot;;&#xD;
	    &#xD;
	    String message1 = message11 + message12 + message16 + &quot;&lt;br>&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea &amp;#x1F642;&lt;/i>&lt;/b>&quot;;&#xD;
	   &#xD;
	    try {&#xD;
	        sender.send(subject1, message1, &quot;liviaaamp@gmail.com&quot;, email);&#xD;
	    } catch (Exception e) {&#xD;
	        e.printStackTrace();&#xD;
	    }  &#xD;
	</body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VpiSgEVdEfCS7cth2SLu0w" name="send3" isStatic="true" method="_V_NnoEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w"/>
        <ownedOperation xmi:id="_VuwJsEVdEfCS7cth2SLu0w" name="isValidEmail" visibility="private" isStatic="true" method="_V_NAgEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuwJsUVdEfCS7cth2SLu0w" name="email">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuwJskVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VuwJs0VdEfCS7cth2SLu0w" name="trimitereNotificareAdeverintaNoua" isStatic="true" method="_V_NAg0VdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuwJtEVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuwJtUVdEfCS7cth2SLu0w" name="idSef">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuwJtkVdEfCS7cth2SLu0w" name="tip">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuwJt0VdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VuwJuEVdEfCS7cth2SLu0w" name="trimitereNotificareAdeverintaAprobataSef" isStatic="true" method="_V_NAiEVdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuwwwEVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuwwwUVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VuwwwkVdEfCS7cth2SLu0w" name="trimitereNotificareAdeverintaAprobataDirector" isStatic="true" method="_V_NAi0VdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vuwww0VdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuwwxEVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VuwwxUVdEfCS7cth2SLu0w" name="trimitereNotificareAdeverintaRespinsa" isStatic="true" method="_V_NAjkVdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vux-4EVdEfCS7cth2SLu0w" name="idAngajat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vux-4UVdEfCS7cth2SLu0w" name="idAdeverinta">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vux-4kVdEfCS7cth2SLu0w" name="respinsaDe">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vux-40VdEfCS7cth2SLu0w" name="motivRespingere">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vux-5EVdEfCS7cth2SLu0w" name="send" isStatic="true" method="_V_NAk0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vux-5UVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vux-5kVdEfCS7cth2SLu0w" name="tip">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vux-50VdEfCS7cth2SLu0w" name="inceput">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vux-6EVdEfCS7cth2SLu0w" name="sfarsit">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vux-6UVdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vux-6kVdEfCS7cth2SLu0w" name="locatie">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vux-60VdEfCS7cth2SLu0w" name="durata">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vuyl8EVdEfCS7cth2SLu0w" name="send2" isStatic="true" method="_V_NnkEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vuyl8UVdEfCS7cth2SLu0w" name="uid">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vuyl8kVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vuyl80VdEfCS7cth2SLu0w" name="tip">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vuyl9EVdEfCS7cth2SLu0w" name="inceput">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vuyl9UVdEfCS7cth2SLu0w" name="sfarsit">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vuyl9kVdEfCS7cth2SLu0w" name="motiv">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vuyl90VdEfCS7cth2SLu0w" name="locatie">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vuyl-EVdEfCS7cth2SLu0w" name="durata">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vuyl-UVdEfCS7cth2SLu0w" name="inceputold">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vuyl-kVdEfCS7cth2SLu0w" name="sfarsitold">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vuyl-0VdEfCS7cth2SLu0w" name="locatieold">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vuyl_EVdEfCS7cth2SLu0w" name="motivold">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vuyl_UVdEfCS7cth2SLu0w" name="motivold2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vuyl_kVdEfCS7cth2SLu0w" name="durataold2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vuyl_0VdEfCS7cth2SLu0w" name="data">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VuymAEVdEfCS7cth2SLu0w" name="send4" isStatic="true" method="_V_NnoUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuymAUVdEfCS7cth2SLu0w" name="old">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuzNAEVdEfCS7cth2SLu0w" name="departament">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VuzNAUVdEfCS7cth2SLu0w" name="send5" isStatic="true" method="_V_NnpEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuzNAkVdEfCS7cth2SLu0w" name="departament">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VuzNA0VdEfCS7cth2SLu0w" name="send6" isStatic="true" method="_V_NnpkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuzNBEVdEfCS7cth2SLu0w" name="uid">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuzNBUVdEfCS7cth2SLu0w" name="idconcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VuzNBkVdEfCS7cth2SLu0w" name="send7" isStatic="true" method="_V_NnqUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuzNB0VdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuzNCEVdEfCS7cth2SLu0w" name="idconcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vuz0EEVdEfCS7cth2SLu0w" name="send8" isStatic="true" method="_V_NnrEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vuz0EUVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vuz0EkVdEfCS7cth2SLu0w" name="idconcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vuz0E0VdEfCS7cth2SLu0w" name="send9" isStatic="true" method="_V_Nnr0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vuz0FEVdEfCS7cth2SLu0w" name="idconcediu">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vuz0FUVdEfCS7cth2SLu0w" name="send10" isStatic="true" method="_V_NnsUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vuz0FkVdEfCS7cth2SLu0w" name="id">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vuz0F0VdEfCS7cth2SLu0w" name="numeutilizator">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VupcAUVdEfCS7cth2SLu0w" name="GMailServer">
        <generalization xmi:id="_VuuUg0VdEfCS7cth2SLu0w" general="_VuttcEVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-cykkVdEfCS7cth2SLu0w" name="mailhost" visibility="private">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-cyk0VdEfCS7cth2SLu0w" value="&quot;smtp.gmail.com&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-cylEVdEfCS7cth2SLu0w" name="user" visibility="private">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-cylUVdEfCS7cth2SLu0w" name="password" visibility="private">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-dZoEVdEfCS7cth2SLu0w" name="session" visibility="private" type="_V82QEUVdEfCS7cth2SLu0w" association="_WAI0oUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_KkSEVdEfCS7cth2SLu0w" name="GMailServer" specification="_VuqDEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_KkSUVdEfCS7cth2SLu0w" name="user">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_KkSkVdEfCS7cth2SLu0w" name="password">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_KkS0VdEfCS7cth2SLu0w" type="_VupcAUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>this.user = user;&#xD;
     this.password = password;  &#xD;
&#xD;
     Properties props = new Properties();&#xD;
     // Setari pentru protocolul SMTP si porturile specifice pentru SSL si TLS&#xD;
     props.setProperty(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;);&#xD;
     props.setProperty(&quot;mail.smtp.host&quot;, mailhost);&#xD;
     props.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);&#xD;
     props.put(&quot;mail.smtp.port&quot;, &quot;465&quot;);&#xD;
     props.put(&quot;mail.smtp.socketFactory.port&quot;, &quot;465&quot;);&#xD;
     props.put(&quot;mail.smtp.socketFactory.class&quot;,&quot;javax.net.ssl.SSLSocketFactory&quot;);&#xD;
     props.put(&quot;mail.smtp.starttls.enable&quot;,&quot;true&quot;);&#xD;
     props.put(&quot;mail.smtp.debug&quot;, &quot;true&quot;);&#xD;
     props.put(&quot;mail.smtp.socketFactory.fallback&quot;, &quot;false&quot;);&#xD;
     props.setProperty(&quot;mail.smtp.quitwait&quot;, &quot;false&quot;);  &#xD;
&#xD;
     session = Session.getDefaultInstance(props, this);&#xD;
     session.setDebug(true);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_LyYEVdEfCS7cth2SLu0w" name="getPasswordAuthentication" specification="_VuqDF0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_LyYUVdEfCS7cth2SLu0w" type="_V81pA0VdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>return new PasswordAuthentication(user, password);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_MZcEVdEfCS7cth2SLu0w" name="isValidEmail" specification="_VuqDGUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_MZcUVdEfCS7cth2SLu0w" name="email">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_MZckVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>String emailRegex = &quot;^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$&quot;;&#xD;
     return email != null &amp;&amp; email.matches(emailRegex);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_MZc0VdEfCS7cth2SLu0w" name="sendattach" specification="_VuqqI0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_MZdEVdEfCS7cth2SLu0w" name="subject">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_MZdUVdEfCS7cth2SLu0w" name="body">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_MZdkVdEfCS7cth2SLu0w" name="sender">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_MZd0VdEfCS7cth2SLu0w" name="recipients">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_MZeEVdEfCS7cth2SLu0w" name="filepath">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>if (!isValidEmail(recipients)) {&#xD;
		    throw new AddressException(&quot;Adresa de e-mail este invalidă: &quot; + recipients);&#xD;
		}&#xD;
 	MimeMessage m = new MimeMessage(session);&#xD;
&#xD;
		  try {&#xD;
	          m.setFrom(&quot;liviaaamp@gmail.com&quot;);&#xD;
	          m.setSubject(MimeUtility.encodeText(subject, &quot;UTF-8&quot;, &quot;B&quot;));&#xD;
	          m.addRecipient(Message.RecipientType.TO, new InternetAddress(recipients));&#xD;
	  		&#xD;
	  		m.setSubject(subject);&#xD;
	  	&#xD;
	  		String path=filepath;&#xD;
	  		&#xD;
	  		MimeMultipart mimeMultipart = new MimeMultipart();&#xD;
	  		&#xD;
	  		MimeBodyPart textMime = new MimeBodyPart();&#xD;
	  		&#xD;
	  		MimeBodyPart fileMime = new MimeBodyPart();&#xD;
	  		&#xD;
	  		try {&#xD;
	  			&#xD;
	  			textMime.setText(body);&#xD;
	  			&#xD;
	  			textMime.setContent(body, &quot;text/html; charset=UTF-8&quot;);&#xD;
	  			&#xD;
	  			File file=new File(path);&#xD;
	  			fileMime.attachFile(file);&#xD;
	  			&#xD;
	  			mimeMultipart.addBodyPart(textMime);&#xD;
	  			&#xD;
	  			mimeMultipart.addBodyPart(fileMime);&#xD;
	  			&#xD;
	  		} catch (Exception e) {&#xD;
	  			&#xD;
	  			e.printStackTrace();&#xD;
	  		}&#xD;
&#xD;
	  		m.setContent(mimeMultipart);&#xD;
	  		&#xD;
	  		Transport.send(m);&#xD;
	  		&#xD;
	  		}catch (Exception e) {&#xD;
	  			e.printStackTrace();&#xD;
	  		}&#xD;
	  		&#xD;
&#xD;
	  		System.out.println(&quot;OK&quot;);&#xD;
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_MZeUVdEfCS7cth2SLu0w" name="send" specification="_VurRMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_MZekVdEfCS7cth2SLu0w" name="subject">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_MZe0VdEfCS7cth2SLu0w" name="body">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_MZfEVdEfCS7cth2SLu0w" name="sender">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_MZfUVdEfCS7cth2SLu0w" name="recipients">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>if (!isValidEmail(recipients)) {&#xD;
		    throw new AddressException(&quot;Adresa de e-mail este invalidă: &quot; + recipients);&#xD;
		}&#xD;
&#xD;
		  try {&#xD;
	          Email email = new Email(user, password);&#xD;
	          email.setFrom(&quot;liviaaamp@gmail.com&quot;, &quot;Firma XYZ&quot;);&#xD;
	          email.setSubject(MimeUtility.encodeText(subject, &quot;UTF-8&quot;, &quot;B&quot;));&#xD;
	          email.setContent(StringEscapeUtils.unescapeJava(body), &quot;text/html; charset=UTF-8&quot;);&#xD;
	          email.addRecipient(recipients);&#xD;
	          email.send();&#xD;
	      } catch (Exception e) {&#xD;
	          e.printStackTrace();    &#xD;
	      }&#xD;
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_MZfkVdEfCS7cth2SLu0w" name="sendMail" specification="_VurROEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_MZf0VdEfCS7cth2SLu0w" name="subject">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_MZgEVdEfCS7cth2SLu0w" name="body">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_MZgUVdEfCS7cth2SLu0w" name="sender">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_MZgkVdEfCS7cth2SLu0w" name="recipients">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>MimeMessage message = new MimeMessage(session);&#xD;
     DataHandler handler = new DataHandler(new ByteArrayDataSource(body.getBytes(), &quot;text/html&quot;));&#xD;
     message.setSender(new InternetAddress(sender));&#xD;
     message.setSubject(subject);&#xD;
     message.setDataHandler(handler);&#xD;
     if (recipients.indexOf(',') > 0)&#xD;
         message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipients));&#xD;
     else&#xD;
         message.setRecipient(Message.RecipientType.TO, new InternetAddress(recipients));&#xD;
     Transport.send(message);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VuqDEEVdEfCS7cth2SLu0w" name="GMailServer" method="_V_KkSEVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VuqDE0VdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VuqDFEVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VuqDEUVdEfCS7cth2SLu0w" name="user">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuqDEkVdEfCS7cth2SLu0w" name="password">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuqDFUVdEfCS7cth2SLu0w" type="_VupcAUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuqDF0VdEfCS7cth2SLu0w" name="getPasswordAuthentication" visibility="protected" method="_V_LyYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V9izoEVdEfCS7cth2SLu0w" type="_V81pA0VdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VuqDGUVdEfCS7cth2SLu0w" name="isValidEmail" visibility="private" isStatic="true" method="_V_MZcEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VuqqIEVdEfCS7cth2SLu0w" name="email">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuqqIUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VuqqI0VdEfCS7cth2SLu0w" name="sendattach" method="_V_MZc0VdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VuqqKUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VuqqKkVdEfCS7cth2SLu0w" key="synchronized"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VuqqJEVdEfCS7cth2SLu0w" name="subject">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuqqJUVdEfCS7cth2SLu0w" name="body">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuqqJkVdEfCS7cth2SLu0w" name="sender">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuqqJ0VdEfCS7cth2SLu0w" name="recipients">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VuqqKEVdEfCS7cth2SLu0w" name="filepath">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VurRMEVdEfCS7cth2SLu0w" name="send" method="_V_MZeUVdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VurRNUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VurRNkVdEfCS7cth2SLu0w" key="synchronized"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VurRMUVdEfCS7cth2SLu0w" name="subject">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VurRMkVdEfCS7cth2SLu0w" name="body">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VurRM0VdEfCS7cth2SLu0w" name="sender">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VurRNEVdEfCS7cth2SLu0w" name="recipients">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VurROEVdEfCS7cth2SLu0w" name="sendMail" method="_V_MZfkVdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VurRPUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VurRPkVdEfCS7cth2SLu0w" key="synchronized"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VurROUVdEfCS7cth2SLu0w" name="subject">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VurROkVdEfCS7cth2SLu0w" name="body">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VurRO0VdEfCS7cth2SLu0w" name="sender">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VurRPEVdEfCS7cth2SLu0w" name="recipients">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <nestedClassifier xmi:type="uml:Class" xmi:id="_Vur4QEVdEfCS7cth2SLu0w" name="ByteArrayDataSource">
          <ownedAttribute xmi:id="_V-dZoUVdEfCS7cth2SLu0w" name="data" visibility="private">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-dZokVdEfCS7cth2SLu0w" value="*"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_V-eAsEVdEfCS7cth2SLu0w" name="type" visibility="private">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedAttribute>
          <interfaceRealization xmi:id="_V9jasEVdEfCS7cth2SLu0w" client="_Vur4QEVdEfCS7cth2SLu0w" supplier="_V81B80VdEfCS7cth2SLu0w" contract="_V81B80VdEfCS7cth2SLu0w"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_MZg0VdEfCS7cth2SLu0w" name="ByteArrayDataSource" specification="_Vur4QkVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V_MZhEVdEfCS7cth2SLu0w" name="data">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V_MZhUVdEfCS7cth2SLu0w" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V_MZhkVdEfCS7cth2SLu0w" name="type">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V_MZh0VdEfCS7cth2SLu0w" type="_Vur4QEVdEfCS7cth2SLu0w" direction="return"/>
            <language>java</language>
            <body>super();&#xD;
         this.data = data;&#xD;
         this.type = type;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_MZiEVdEfCS7cth2SLu0w" name="ByteArrayDataSource" specification="_VusfVkVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V_MZiUVdEfCS7cth2SLu0w" name="data">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V_MZikVdEfCS7cth2SLu0w" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:id="_V_MZi0VdEfCS7cth2SLu0w" type="_Vur4QEVdEfCS7cth2SLu0w" direction="return"/>
            <language>java</language>
            <body>super();&#xD;
         this.data = data;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_MZjEVdEfCS7cth2SLu0w" name="setType" specification="_VusfXEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V_MZjUVdEfCS7cth2SLu0w" name="type">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <language>java</language>
            <body>this.type = type;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_MZjkVdEfCS7cth2SLu0w" name="getContentType" specification="_VutGYUVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V_MZj0VdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <language>java</language>
            <body>if (type == null)&#xD;
             return &quot;application/octet-stream&quot;;&#xD;
         else&#xD;
             return type;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_MZkEVdEfCS7cth2SLu0w" name="getInputStream" specification="_VutGY0VdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V_MZkUVdEfCS7cth2SLu0w" type="_V8dOgUVdEfCS7cth2SLu0w" direction="return"/>
            <language>java</language>
            <body>return new ByteArrayInputStream(data);&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_MZkkVdEfCS7cth2SLu0w" name="getName" specification="_VutGZEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V_MZk0VdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <language>java</language>
            <body>return &quot;ByteArrayDataSource&quot;;&#xD;
     </body>
          </ownedBehavior>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_MZlEVdEfCS7cth2SLu0w" name="getOutputStream" specification="_VutGZkVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V_MZlUVdEfCS7cth2SLu0w" type="_UBRUMEVdEfCS7cth2SLu0w" direction="return"/>
            <language>java</language>
            <body>throw new IOException(&quot;Not Supported&quot;);&#xD;
     </body>
          </ownedBehavior>
          <ownedOperation xmi:id="_Vur4QkVdEfCS7cth2SLu0w" name="ByteArrayDataSource" method="_V_MZg0VdEfCS7cth2SLu0w">
            <eAnnotations xmi:id="_VusfUkVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_VusfU0VdEfCS7cth2SLu0w" key="create"/>
            </eAnnotations>
            <ownedParameter xmi:id="_VusfUEVdEfCS7cth2SLu0w" name="data">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VusfVUVdEfCS7cth2SLu0w" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:id="_VusfUUVdEfCS7cth2SLu0w" name="type">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
            <ownedParameter xmi:id="_VusfVEVdEfCS7cth2SLu0w" type="_Vur4QEVdEfCS7cth2SLu0w" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:id="_VusfVkVdEfCS7cth2SLu0w" name="ByteArrayDataSource" method="_V_MZiEVdEfCS7cth2SLu0w">
            <eAnnotations xmi:id="_VusfWEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_VusfWUVdEfCS7cth2SLu0w" key="create"/>
            </eAnnotations>
            <ownedParameter xmi:id="_VusfV0VdEfCS7cth2SLu0w" name="data">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VusfW0VdEfCS7cth2SLu0w" value="*"/>
            </ownedParameter>
            <ownedParameter xmi:id="_VusfWkVdEfCS7cth2SLu0w" type="_Vur4QEVdEfCS7cth2SLu0w" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:id="_VusfXEVdEfCS7cth2SLu0w" name="setType" method="_V_MZjEVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_VutGYEVdEfCS7cth2SLu0w" name="type">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_VutGYUVdEfCS7cth2SLu0w" name="getContentType" method="_V_MZjkVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_VutGYkVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_VutGY0VdEfCS7cth2SLu0w" name="getInputStream" method="_V_MZkEVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_V9jasUVdEfCS7cth2SLu0w" type="_V8dOgUVdEfCS7cth2SLu0w" direction="return"/>
          </ownedOperation>
          <ownedOperation xmi:id="_VutGZEVdEfCS7cth2SLu0w" name="getName" method="_V_MZkkVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_VutGZUVdEfCS7cth2SLu0w" direction="return">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedParameter>
          </ownedOperation>
          <ownedOperation xmi:id="_VutGZkVdEfCS7cth2SLu0w" name="getOutputStream" method="_V_MZlEVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
            <ownedParameter xmi:id="_VutGZ0VdEfCS7cth2SLu0w" type="_UBRUMEVdEfCS7cth2SLu0w" direction="return"/>
          </ownedOperation>
        </nestedClassifier>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vu0bIEVdEfCS7cth2SLu0w" name="OTP">
        <generalization xmi:id="_Vu2QV0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-enwEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-enwUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-enwkVdEfCS7cth2SLu0w" name="DB_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-enw0VdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-enxEVdEfCS7cth2SLu0w" name="DB_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-enxUVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-enxkVdEfCS7cth2SLu0w" name="DB_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-enx0VdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_OOoEVdEfCS7cth2SLu0w" name="processRequest" specification="_Vu1CMEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_OOoUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_OOokVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession(false);
     if (session == null) {
         response.sendRedirect(&quot;login.jsp&quot;);
         return;
     }

     String username = request.getParameter(&quot;username&quot;);
     String token = (String) session.getAttribute(&quot;token&quot;);
     String page = request.getParameter(&quot;page&quot;);

     if (username == null || username.trim().isEmpty()) {
         response.sendRedirect(&quot;login.jsp?error=missing_username&quot;);
         return;
     }

     try {
         String otp = generateOTP();
         session.setAttribute(&quot;otp&quot;, otp);
         session.setAttribute(&quot;username&quot;, username);
         
         // Păstrăm token-ul în sesiune
         if (token != null) {
             session.setAttribute(&quot;token&quot;, token);
             // Setăm și în header pentru API calls
             System.out.println(&quot;TOKENUL ESTE: &quot; + token); // V
             response.setHeader(&quot;Authorization&quot;, token);
         }

         String email = getUserEmail(username);
         if (email != null) {
             sendEmail(email, otp);
             redirectToOtpPage(response, page);
         } else {
             response.sendRedirect(&quot;login.jsp?error=User not found&quot;);
         }

     } catch (Exception e) {
         System.err.println(&quot;Error in OTP processing: &quot; + e.getMessage());
         e.printStackTrace();
         throw new ServletException(&quot;Error processing OTP&quot;, e);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_OOo0VdEfCS7cth2SLu0w" name="doGet" specification="_Vu1CM0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_OOpEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_OOpUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>processRequest(request, response);
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_OOpkVdEfCS7cth2SLu0w" name="doPost" specification="_Vu1pQkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_OOp0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_OOqEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>processRequest(request, response);
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_OOqUVdEfCS7cth2SLu0w" name="generateOTP" specification="_Vu1pSEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_OOqkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>return String.format(&quot;%06d&quot;, new Random().nextInt(999999));
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_OOq0VdEfCS7cth2SLu0w" name="getUserEmail" specification="_Vu1pSkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_OOrEVdEfCS7cth2SLu0w" name="username">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_OOrUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>String email = null;
     String query = &quot;SELECT email FROM useri WHERE username = ?&quot;;
     
     Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
     try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
          PreparedStatement stmt = connection.prepareStatement(query)) {
         
         stmt.setString(1, username);
         try (ResultSet rs = stmt.executeQuery()) {
             if (rs.next()) {
                 email = rs.getString(&quot;email&quot;);
             }
         }
     }
     return email;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_OOrkVdEfCS7cth2SLu0w" name="redirectToOtpPage" specification="_Vu2QUUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_OOr0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_OOsEVdEfCS7cth2SLu0w" name="page">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>String redirectUrl = &quot;otp.jsp&quot;;
     if (page != null) {
         switch (page) {
             case &quot;2&quot;:
                 redirectUrl += &quot;?page=2&quot;;
                 break;
             case &quot;3&quot;:
                 redirectUrl += &quot;?page=3&quot;;
                 break;
             default:
                 break;
         }
     }
     response.sendRedirect(redirectUrl);
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_OOsUVdEfCS7cth2SLu0w" name="sendEmail" specification="_Vu2QVEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_OOskVdEfCS7cth2SLu0w" name="email">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_OOs0VdEfCS7cth2SLu0w" name="otp">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>String subject = &quot;\uD83D\uDD11 Cod verificare conectare \uD83D\uDD11&quot;;
     String message = &quot;&lt;h1>Codul este: &quot; + otp + &quot;&lt;/h1>&quot; +
                     &quot;&lt;p>Discretia este recomandata! &amp;#x1F642;&lt;/p>&quot;;
     
     GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;, &quot;rtmz fzcp onhv minb&quot;);
     sender.send(subject, message, &quot;liviaaamp@gmail.com&quot;, email);
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vu1CMEVdEfCS7cth2SLu0w" name="processRequest" visibility="private" method="_V_OOoEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vu1CMUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vu1CMkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu1CM0VdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_OOo0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vu1CNEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vu1CNUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu1pQkVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_OOpkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vu1pQ0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vu1pREVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu1pSEVdEfCS7cth2SLu0w" name="generateOTP" visibility="private" method="_V_OOqUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vu1pSUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu1pSkVdEfCS7cth2SLu0w" name="getUserEmail" visibility="private" method="_V_OOq0VdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vu1pS0VdEfCS7cth2SLu0w" name="username">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vu2QUEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu2QUUVdEfCS7cth2SLu0w" name="redirectToOtpPage" visibility="private" method="_V_OOrkVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vu2QUkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vu2QU0VdEfCS7cth2SLu0w" name="page">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu2QVEVdEfCS7cth2SLu0w" name="sendEmail" visibility="private" method="_V_OOsUVdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vu2QVUVdEfCS7cth2SLu0w" name="email">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vu2QVkVdEfCS7cth2SLu0w" name="otp">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vu23YEVdEfCS7cth2SLu0w" name="OTP2">
        <ownedComment xmi:id="_V_kz8UVdEfCS7cth2SLu0w">
          <body>Servlet implementation class OTP</body>
        </ownedComment>
        <generalization xmi:id="_Vu4FgkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-fO0EVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-fO0UVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_OOtEVdEfCS7cth2SLu0w" name="OTP2" specification="_Vu3ecEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_OOtUVdEfCS7cth2SLu0w" type="_Vu23YEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();
     // TODO Auto-generated constructor stub
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_O1sEVdEfCS7cth2SLu0w" name="doGet" specification="_Vu3edEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_O1sUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_O1skVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// TODO Auto-generated method stub
		doPost(request, response);
			</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_O1s0VdEfCS7cth2SLu0w" name="doPost" specification="_Vu3ed0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_O1tEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_O1tUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// TODO Auto-generated method stub
		String cod = request.getParameter(&quot;oldotp&quot;);
		String cod2 = request.getParameter(&quot;newotp&quot;);
		String username = request.getParameter(&quot;username&quot;);
 	String password = request.getParameter(&quot;password&quot;);
		
		 if (cod2.compareTo(cod) == 0) {
			 
			 response.sendRedirect(&quot;login?username=&quot; + username + &quot;&amp;password=&quot; + password);
		 }
		 else response.sendRedirect(&quot;login.jsp?wup=1&quot;);
			</body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vu3ecEVdEfCS7cth2SLu0w" name="OTP2" method="_V_OOtEVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_Vu3ecUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_Vu3eckVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_Vu3ec0VdEfCS7cth2SLu0w" type="_Vu23YEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu3edEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_O1sEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vu3edUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vu3edkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu3ed0VdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_O1s0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vu4FgEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vu4FgUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vu4skEVdEfCS7cth2SLu0w" name="OTP3">
        <generalization xmi:id="_Vu4slEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-fO0kVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-fO00VdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_O1tkVdEfCS7cth2SLu0w" name="doPost" specification="_Vu4skUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_O1t0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_O1uEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HttpSession session = request.getSession();
     String sessionOtp = (String) session.getAttribute(&quot;otp&quot;);
     String userOtp = request.getParameter(&quot;userOtp&quot;);
     String page = request.getParameter(&quot;page&quot;);
     String username = (String) session.getAttribute(&quot;username&quot;);
     if (userOtp.equals(sessionOtp)) {
         session.removeAttribute(&quot;otp&quot;); // Clear the OTP from the session after successful verification
         try {
             // Actualizăm statusul de activ în baza de date
             Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
             try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {
                 String updateQuery = &quot;UPDATE useri SET activ = 1 WHERE username = ?&quot;;
                 try (PreparedStatement preparedStatement = connection.prepareStatement(updateQuery)) {
                     preparedStatement.setString(1, username);
                     preparedStatement.executeUpdate();
                 }
             }

         if (page != null) {
	            if (page.compareTo(&quot;2&quot;) == 0) {
	            	response.sendRedirect(&quot;modifpasd2.jsp&quot;); 
	            	return;
	            } else if (page.compareTo(&quot;3&quot;) == 0) {
	            	response.sendRedirect(&quot;modifusr2.jsp&quot;); 
	            	return;
	            } else {
	            	session.setAttribute(&quot;authenticated&quot;, &quot;true&quot;);
	            	response.sendRedirect(&quot;dashboard.jsp&quot;); // Redirect to dashboard or success page
	            return;
	            }
         }
      else {
         response.sendRedirect(&quot;otp.jsp?error=Invalid OTP&quot;);
     }
 } catch (Exception e) {
     e.printStackTrace();
     response.sendRedirect(&quot;login.jsp?error=database&quot;);
 }

} else {
 response.sendRedirect(&quot;otp.jsp?error=Invalid OTP&quot;);
}
</body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vu4skUVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_O1tkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vu4skkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vu4sk0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAI0oUVdEfCS7cth2SLu0w" name="" memberEnd="_WAI0okVdEfCS7cth2SLu0w _V-dZoEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAI0okVdEfCS7cth2SLu0w" name="" type="_VupcAUVdEfCS7cth2SLu0w" association="_WAI0oUVdEfCS7cth2SLu0w"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_StafoEVdEfCS7cth2SLu0w" name="services">
      <packagedElement xmi:type="uml:Class" xmi:id="_T_GxAEVdEfCS7cth2SLu0w" name="NameValidator">
        <ownedAttribute xmi:id="_V-nxtEVdEfCS7cth2SLu0w" name="NAME_PATTERN" visibility="private" isLeaf="true" isStatic="true" type="_T-aNcUVdEfCS7cth2SLu0w" isReadOnly="true" association="_WAJbtkVdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-nxtUVdEfCS7cth2SLu0w" value="Pattern.compile(&quot;^[A-Za-z\\s-]+$&quot;)"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_WKdkVdEfCS7cth2SLu0w" name="validateName" specification="_VveicEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_WKd0VdEfCS7cth2SLu0w" name="name">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_WKeEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>return NAME_PATTERN.matcher(name).matches();
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VveicEVdEfCS7cth2SLu0w" name="validateName" isStatic="true" method="_V_WKdkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VveicUVdEfCS7cth2SLu0w" name="name">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VveickVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvcGMEVdEfCS7cth2SLu0w" name="CNPValidator">
        <ownedAttribute xmi:id="_V-nKoEVdEfCS7cth2SLu0w" name="CONTROL_VALUES" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V-nKoUVdEfCS7cth2SLu0w" value="*"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-nKo0VdEfCS7cth2SLu0w" value="{2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9}"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Vja0VdEfCS7cth2SLu0w" name="isValidCNP" specification="_VvctQEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_VjbEVdEfCS7cth2SLu0w" name="cnp">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_VjbUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>// 1. Verifică lungimea și formatul numeric&#xD;
     if (!Pattern.matches(&quot;\\d{13}&quot;, cnp)) {&#xD;
     	System.err.println(&quot;nu are 13 cifre!&quot;);&#xD;
         return false; // CNP-ul trebuie să conțină exact 13 cifre&#xD;
     }&#xD;
&#xD;
     // 2. Extrage componentele CNP-ului&#xD;
     int sexAndCentury = Character.getNumericValue(cnp.charAt(0));&#xD;
     int year = Integer.parseInt(cnp.substring(1, 3));&#xD;
     int month = Integer.parseInt(cnp.substring(3, 5));&#xD;
     int day = Integer.parseInt(cnp.substring(5, 7));&#xD;
     int countyCode = Integer.parseInt(cnp.substring(7, 9));&#xD;
     int controlDigit = Character.getNumericValue(cnp.charAt(12));&#xD;
&#xD;
     // 3. Determină secolul corect&#xD;
     int fullYear;&#xD;
     switch (sexAndCentury) {&#xD;
         case 1: case 2: fullYear = 1900 + year; break;&#xD;
         case 3: case 4: fullYear = 1800 + year; break;&#xD;
         case 5: case 6: fullYear = 2000 + year; break;&#xD;
         default: return false; // S trebuie să fie între 1 și 6&#xD;
     }&#xD;
&#xD;
     // 4. Verifică dacă data este validă&#xD;
     if (!isValidDate(fullYear, month, day)) {&#xD;
     	System.err.println(&quot;nu e data valida!&quot;);&#xD;
         return false;&#xD;
     }&#xD;
&#xD;
     // 5. Verifică codul județului (01-52 + 40-47 pentru București)&#xD;
     if (!isValidCountyCode(countyCode)) {&#xD;
     	System.err.println(&quot;nu e judet valid!&quot;);&#xD;
         return false;&#xD;
     }&#xD;
&#xD;
     // 6. Calculează și verifică cifra de control&#xD;
     if (!isValidControlDigit(cnp, controlDigit)) {&#xD;
     	System.err.println(&quot;nu e valid!!!&quot;);&#xD;
         return false;&#xD;
     }&#xD;
&#xD;
     return true; // CNP valid&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_VjbkVdEfCS7cth2SLu0w" name="isValidDate" specification="_VvctQ0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Vjb0VdEfCS7cth2SLu0w" name="year">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_VjcEVdEfCS7cth2SLu0w" name="month">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_VjcUVdEfCS7cth2SLu0w" name="day">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_VjckVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>try {&#xD;
         LocalDate.of(year, month, day); // Verifică dacă data e validă&#xD;
         return true;&#xD;
     } catch (Exception e) {&#xD;
         return false;&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Vjc0VdEfCS7cth2SLu0w" name="isValidCountyCode" specification="_VvctSEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_VjdEVdEfCS7cth2SLu0w" name="code">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_VjdUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>return (code >= 1 &amp;&amp; code &lt;= 52) || (code >= 40 &amp;&amp; code &lt;= 47);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_VjdkVdEfCS7cth2SLu0w" name="isValidControlDigit" specification="_VvdUUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Vjd0VdEfCS7cth2SLu0w" name="cnp">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_VjeEVdEfCS7cth2SLu0w" name="expectedControlDigit">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_VjeUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>int sum = 0;&#xD;
     for (int i = 0; i &lt; 12; i++) {&#xD;
         sum += Character.getNumericValue(cnp.charAt(i)) * CONTROL_VALUES[i];&#xD;
     }&#xD;
     int computedDigit = sum % 11;&#xD;
     if (computedDigit == 10) computedDigit = 1; // Dacă e 10, devine 1&#xD;
     return computedDigit == expectedControlDigit;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvctQEVdEfCS7cth2SLu0w" name="isValidCNP" isStatic="true" method="_V_Vja0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvctQUVdEfCS7cth2SLu0w" name="cnp">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvctQkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VvctQ0VdEfCS7cth2SLu0w" name="isValidDate" visibility="private" isStatic="true" method="_V_VjbkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvctREVdEfCS7cth2SLu0w" name="year">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvctRUVdEfCS7cth2SLu0w" name="month">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvctRkVdEfCS7cth2SLu0w" name="day">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvctR0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VvctSEVdEfCS7cth2SLu0w" name="isValidCountyCode" visibility="private" isStatic="true" method="_V_Vjc0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvctSUVdEfCS7cth2SLu0w" name="code">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvctSkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VvdUUEVdEfCS7cth2SLu0w" name="isValidControlDigit" visibility="private" isStatic="true" method="_V_VjdkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvdUUUVdEfCS7cth2SLu0w" name="cnp">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvdUUkVdEfCS7cth2SLu0w" name="expectedControlDigit">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvdUU0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvdUVEVdEfCS7cth2SLu0w" name="CheckerDataNasterii">
        <ownedComment xmi:id="_V_mpIEVdEfCS7cth2SLu0w">
          <body>Clasa ce face un obicet verificator</body>
        </ownedComment>
        <ownedAttribute xmi:id="_V-nxsEVdEfCS7cth2SLu0w" name="FORMAT" visibility="private" isLeaf="true" isStatic="true" type="_V9AoIEVdEfCS7cth2SLu0w" isReadOnly="true" association="_WAJbsEVdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-nxsUVdEfCS7cth2SLu0w" value="DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;)"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_WKcEVdEfCS7cth2SLu0w" name="valideaza" specification="_VvdUVUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_WKcUVdEfCS7cth2SLu0w" name="zi">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_WKckVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>try {
         // Parsare + declarare si initializare variabile
         LocalDate datanasterii = LocalDate.parse(zi, FORMAT);
         LocalDate datacurenta = LocalDate.now();
         // Verific sa vad daca persoana este majora
         long age = ChronoUnit.YEARS.between(datanasterii, datacurenta);
         if (age >= 18) {
             return true;
         }
     } catch (DateTimeParseException e) {
     	throw new IOException(&quot;Format invalid, trebuie AAAA-LL-ZZ&quot;, e);
     }
     return false;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvdUVUVdEfCS7cth2SLu0w" name="valideaza" isStatic="true" method="_V_WKcEVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvdUVkVdEfCS7cth2SLu0w" name="zi">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vvd7YEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vvd7YUVdEfCS7cth2SLu0w" name="EmailValidator">
        <ownedAttribute xmi:id="_V-nxskVdEfCS7cth2SLu0w" name="EMAIL_PATTERN" visibility="private" isLeaf="true" isStatic="true" type="_T-aNcUVdEfCS7cth2SLu0w" isReadOnly="true" association="_WAJbs0VdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-nxs0VdEfCS7cth2SLu0w" value="Pattern.compile(&quot;^[a-zA-Z0-9_+&amp;*-]+(?:\\.[a-zA-Z0-9_+&amp;*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$&quot;)"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_WKc0VdEfCS7cth2SLu0w" name="validare" specification="_Vvd7YkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_WKdEVdEfCS7cth2SLu0w" name="email">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_WKdUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>return EMAIL_PATTERN.matcher(email).matches();
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vvd7YkVdEfCS7cth2SLu0w" name="validare" isStatic="true" method="_V_WKc0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vvd7Y0VdEfCS7cth2SLu0w" name="email">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vvd7ZEVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vveic0VdEfCS7cth2SLu0w" name="PasswordValidator">
        <ownedAttribute xmi:id="_V-nxtkVdEfCS7cth2SLu0w" name="PASSWORD_PATTERN" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-nxt0VdEfCS7cth2SLu0w" value="&quot;^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!()?*\\[\\]{}:;_\\-\\\\/`~'&lt;>@#$%^&amp;+=]).{8,}$&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-nxuEVdEfCS7cth2SLu0w" name="pattern" visibility="private" isLeaf="true" isStatic="true" type="_T-aNcUVdEfCS7cth2SLu0w" isReadOnly="true" association="_WAKCwUVdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-nxuUVdEfCS7cth2SLu0w" value="Pattern.compile(PASSWORD_PATTERN)"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_WKeUVdEfCS7cth2SLu0w" name="validatePassword" specification="_VveidEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_WKekVdEfCS7cth2SLu0w" name="password">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_WKe0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>if (password == null || !pattern.matcher(password).matches()) {
         return false;
     }
     return hasValidSequences(password);
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_WKfEVdEfCS7cth2SLu0w" name="hasValidSequences" specification="_Vveid0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_WKfUVdEfCS7cth2SLu0w" name="password">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_WKfkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>// Check for consecutive or identical adjacent numbers and letters
     for (int i = 0; i &lt; password.length() - 1; i++) {
         char current = password.charAt(i);
         char next = password.charAt(i + 1);

         // Check for consecutive or identical numbers
         if (Character.isDigit(current) &amp;&amp; Character.isDigit(next)) {
             if (current == next || Math.abs(current - next) == 1) {
                 return false;  // Adjacent digits are equal or consecutive
             }
         }

         // Check for consecutive or identical letters, considering diacritics
         if (Character.isLetter(current) &amp;&amp; Character.isLetter(next)) {
             if (current == next || Math.abs(Character.toLowerCase(current) - Character.toLowerCase(next)) == 1) {
                 return false;  // Adjacent letters are equal or consecutive (case insensitive)
             }
         }
     }
     return true;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VveidEVdEfCS7cth2SLu0w" name="validatePassword" isStatic="true" method="_V_WKeUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VveidUVdEfCS7cth2SLu0w" name="password">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VveidkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vveid0VdEfCS7cth2SLu0w" name="hasValidSequences" visibility="private" isStatic="true" method="_V_WKfEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VveieEVdEfCS7cth2SLu0w" name="password">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VveieUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvfJgEVdEfCS7cth2SLu0w" name="PhoneNumberValidator">
        <ownedAttribute xmi:id="_V-nxukVdEfCS7cth2SLu0w" name="PHONE_PATTERN" visibility="private" isLeaf="true" isStatic="true" type="_T-aNcUVdEfCS7cth2SLu0w" isReadOnly="true" association="_WAKCxEVdEfCS7cth2SLu0w">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-oYwEVdEfCS7cth2SLu0w" value="Pattern.compile(&quot;^\\+?(\\d{1,3})?[- .]?\\d{7,10}$&quot;)"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_WKf0VdEfCS7cth2SLu0w" name="validatePhoneNumber" specification="_VvfJgUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_WKgEVdEfCS7cth2SLu0w" name="phoneNumber">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_WKgUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>return PHONE_PATTERN.matcher(phoneNumber).matches();
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvfJgUVdEfCS7cth2SLu0w" name="validatePhoneNumber" isStatic="true" method="_V_WKf0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvfJgkVdEfCS7cth2SLu0w" name="phoneNumber">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvfJg0VdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAJbsEVdEfCS7cth2SLu0w" name="" memberEnd="_WAJbsUVdEfCS7cth2SLu0w _V-nxsEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAJbsUVdEfCS7cth2SLu0w" name="" type="_VvdUVEVdEfCS7cth2SLu0w" association="_WAJbsEVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAJbs0VdEfCS7cth2SLu0w" name="" memberEnd="_WAJbtEVdEfCS7cth2SLu0w _V-nxskVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAJbtEVdEfCS7cth2SLu0w" name="" type="_Vvd7YUVdEfCS7cth2SLu0w" association="_WAJbs0VdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAJbtkVdEfCS7cth2SLu0w" name="" memberEnd="_WAJbt0VdEfCS7cth2SLu0w _V-nxtEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAJbt0VdEfCS7cth2SLu0w" name="" type="_T_GxAEVdEfCS7cth2SLu0w" association="_WAJbtkVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAKCwUVdEfCS7cth2SLu0w" name="" memberEnd="_WAKCwkVdEfCS7cth2SLu0w _V-nxuEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAKCwkVdEfCS7cth2SLu0w" name="" type="_Vveic0VdEfCS7cth2SLu0w" association="_WAKCwUVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAKCxEVdEfCS7cth2SLu0w" name="" memberEnd="_WAKCxUVdEfCS7cth2SLu0w _V-nxukVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAKCxUVdEfCS7cth2SLu0w" name="" type="_VvfJgEVdEfCS7cth2SLu0w" association="_WAKCxEVdEfCS7cth2SLu0w"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_Sw1nEEVdEfCS7cth2SLu0w" name="com">
      <packagedElement xmi:type="uml:Package" xmi:id="_Sw1nEUVdEfCS7cth2SLu0w" name="itextpdf">
        <packagedElement xmi:type="uml:Package" xmi:id="_Sw2OIEVdEfCS7cth2SLu0w" name="text">
          <packagedElement xmi:type="uml:Package" xmi:id="_Sw2OIUVdEfCS7cth2SLu0w" name="pdf">
            <packagedElement xmi:type="uml:Class" xmi:id="_UAWHIEVdEfCS7cth2SLu0w" name="PdfWriter"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_V9WmYEVdEfCS7cth2SLu0w" name="Document"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_V9XNcEVdEfCS7cth2SLu0w" name="DocumentException"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_SxlN8EVdEfCS7cth2SLu0w" name="fasterxml">
        <packagedElement xmi:type="uml:Package" xmi:id="_SxmcEEVdEfCS7cth2SLu0w" name="jackson">
          <packagedElement xmi:type="uml:Package" xmi:id="_SxmcEUVdEfCS7cth2SLu0w" name="databind">
            <packagedElement xmi:type="uml:Class" xmi:id="_UAl-wEVdEfCS7cth2SLu0w" name="ObjectMapper"/>
          </packagedElement>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_Vm2x8EVdEfCS7cth2SLu0w" name="google">
        <packagedElement xmi:type="uml:Package" xmi:id="_Vm3ZAEVdEfCS7cth2SLu0w" name="gson">
          <packagedElement xmi:type="uml:Class" xmi:id="_V8CXwEVdEfCS7cth2SLu0w" name="Gson"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_V8mYcEVdEfCS7cth2SLu0w" name="JsonSyntaxException"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_VpNiYEVdEfCS7cth2SLu0w" name="mysql">
        <packagedElement xmi:type="uml:Package" xmi:id="_VpNiYUVdEfCS7cth2SLu0w" name="cj">
          <packagedElement xmi:type="uml:Package" xmi:id="_VpNiYkVdEfCS7cth2SLu0w" name="jdbc">
            <packagedElement xmi:type="uml:Class" xmi:id="_V8wwgkVdEfCS7cth2SLu0w" name="AbandonedConnectionCleanupThread"/>
          </packagedElement>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_VpZvpkVdEfCS7cth2SLu0w" name="email">
        <packagedElement xmi:type="uml:Package" xmi:id="_VpZvp0VdEfCS7cth2SLu0w" name="durgesh">
          <packagedElement xmi:type="uml:Class" xmi:id="_V84sUkVdEfCS7cth2SLu0w" name="Email"/>
        </packagedElement>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_VnE0YEVdEfCS7cth2SLu0w" name="EnhancedNLPProcessor">
      <packagedElement xmi:type="uml:Class" xmi:id="_V8IeYEVdEfCS7cth2SLu0w" name="AdvancedTokenization"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_VoGvIEVdEfCS7cth2SLu0w" name="mix">
      <packagedElement xmi:type="uml:Class" xmi:id="_Vu4slUVdEfCS7cth2SLu0w" name="AddLeaveLocation">
        <generalization xmi:id="_Vu5TpkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_O1uUVdEfCS7cth2SLu0w" name="doPost" specification="_Vu5ToEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_O1ukVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_O1u0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>StringBuilder sb = new StringBuilder();&#xD;
     try (BufferedReader reader = request.getReader()) {&#xD;
         String line;&#xD;
         while ((line = reader.readLine()) != null) {&#xD;
             sb.append(line);&#xD;
         }&#xD;
     }&#xD;
     String rawJson = sb.toString();&#xD;
&#xD;
     JSONObject json;&#xD;
     try {&#xD;
         json = new JSONObject(rawJson);&#xD;
        &#xD;
     } catch (Exception e) {&#xD;
         System.err.println(&quot;Eroare la parsarea JSON: &quot; + e.getMessage());&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         response.getWriter().write(&quot;Eroare: Datele JSON sunt invalide.&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     // Extrage parametrii din JSON&#xD;
     int idCon = json.optInt(&quot;id_con&quot;);&#xD;
     String strada = json.optString(&quot;strada&quot;, &quot;&quot;);&#xD;
     double latitudine = json.optDouble(&quot;latitudine&quot;);&#xD;
     double longitudine = json.optDouble(&quot;longitudine&quot;);&#xD;
     String cod = json.optString(&quot;cod&quot;, &quot;&quot;);&#xD;
     String oras = json.optString(&quot;oras&quot;, &quot;&quot;);&#xD;
     String judet = json.optString(&quot;judet&quot;, &quot;&quot;);&#xD;
     String tara = json.optString(&quot;tara&quot;, &quot;&quot;);&#xD;
&#xD;
     if (idCon == 0) {&#xD;
         System.err.println(&quot;Parametrul idDep lipsește sau este invalid: idCon=&quot; + idCon);&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         response.getWriter().write(&quot;Eroare: Parametrul idDep lipsește sau este invalid.&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     try (Connection conn = DriverManager.getConnection(&#xD;
             &quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {&#xD;
         &#xD;
         // Verifică dacă există deja o înregistrare pentru acest id_dep&#xD;
         boolean exists = false;&#xD;
         try (PreparedStatement checkStmt = conn.prepareStatement(&#xD;
                 &quot;SELECT 1 FROM locatii_concedii WHERE id_concediu = ?&quot;)) {&#xD;
             checkStmt.setInt(1, idCon);&#xD;
             try (ResultSet rs = checkStmt.executeQuery()) {&#xD;
                 exists = rs.next();&#xD;
             }&#xD;
         }&#xD;
&#xD;
         PreparedStatement stmt;&#xD;
         if (exists) {&#xD;
             // Update existing record&#xD;
             stmt = conn.prepareStatement(&#xD;
                 &quot;UPDATE locatii_concedii SET strada = ?, longitudine = ?, latitudine = ?, &quot; +&#xD;
                 &quot;cod = ?, oras = ?, judet = ?, tara = ? WHERE id_concediu = ?&quot;);&#xD;
             &#xD;
             stmt.setString(1, strada);&#xD;
             stmt.setDouble(2, longitudine);&#xD;
             stmt.setDouble(3, latitudine);&#xD;
             stmt.setString(4, cod);&#xD;
             stmt.setString(5, oras);&#xD;
             stmt.setString(6, judet);&#xD;
             stmt.setString(7, tara);&#xD;
             stmt.setInt(8, idCon);&#xD;
         } else {&#xD;
             // Insert new record&#xD;
             stmt = conn.prepareStatement(&#xD;
                 &quot;INSERT INTO locatii_concedii (id_concediu, strada, longitudine, latitudine, &quot; +&#xD;
                 &quot;cod, oras, judet, tara) VALUES (?, ?, ?, ?, ?, ?, ?, ?)&quot;);&#xD;
             &#xD;
             stmt.setInt(1, idCon);&#xD;
             stmt.setString(2, strada);&#xD;
             stmt.setDouble(3, longitudine);&#xD;
             stmt.setDouble(4, latitudine);&#xD;
             stmt.setString(5, cod);&#xD;
             stmt.setString(6, oras);&#xD;
             stmt.setString(7, judet);&#xD;
             stmt.setString(8, tara);&#xD;
         }&#xD;
&#xD;
         int rowsAffected = stmt.executeUpdate();&#xD;
         stmt.close();&#xD;
&#xD;
         if (rowsAffected > 0) {&#xD;
             // System.out.println(&quot;Operațiune reușită pentru departamentul cu ID-ul: &quot; + idCon);&#xD;
             response.setStatus(HttpServletResponse.SC_OK);&#xD;
             response.getWriter().write(&quot;Operațiunea a fost efectuată cu succes.&quot;);&#xD;
         } else {&#xD;
             System.err.println(&quot;Nu s-a putut efectua operațiunea pentru departamentul cu ID-ul &quot; + idCon);&#xD;
             response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
             response.getWriter().write(&quot;Nu s-a putut efectua operațiunea.&quot;);&#xD;
         }&#xD;
&#xD;
     } catch (Exception e) {&#xD;
         System.err.println(&quot;Eroare la operațiunea în baza de date: &quot; + e.getMessage());&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         response.getWriter().write(&quot;Eroare la operațiunea în baza de date.&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vu5ToEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_O1uUVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vu5ToUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vu5TokVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vu5Tp0VdEfCS7cth2SLu0w" name="DatabaseConnectionPool">
        <ownedAttribute xmi:id="_V-fO1EVdEfCS7cth2SLu0w" name="URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-fO1UVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&amp;serverTimezone=UTC&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-fO1kVdEfCS7cth2SLu0w" name="USERNAME" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-fO10VdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-fO2EVdEfCS7cth2SLu0w" name="PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-fO2UVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_O1vEVdEfCS7cth2SLu0w" name="getConnection" specification="_Vu56sEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_O1vUVdEfCS7cth2SLu0w" type="_T9fncEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         return DriverManager.getConnection(URL, USERNAME, PASSWORD);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         throw new SQLException(&quot;MySQL JDBC Driver not found&quot;, e);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_O1vkVdEfCS7cth2SLu0w" name="closeConnection" specification="_Vu56skVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_O1v0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>if (conn != null) {&#xD;
         try {&#xD;
             conn.close();&#xD;
         } catch (SQLException e) {&#xD;
             e.printStackTrace();&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vu56sEVdEfCS7cth2SLu0w" name="getConnection" isStatic="true" method="_V_O1vEVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vu56sUVdEfCS7cth2SLu0w" type="_T9fncEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu56skVdEfCS7cth2SLu0w" name="closeConnection" isStatic="true" method="_V_O1vkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vu56s0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vu56tEVdEfCS7cth2SLu0w" name="DatabaseQueries">
        <ownedComment xmi:id="_V_kz8kVdEfCS7cth2SLu0w">
          <body>Utility class to retrieve data from the database for the chat assistant</body>
        </ownedComment>
        <ownedAttribute xmi:id="_V-f14EVdEfCS7cth2SLu0w" name="DB_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-f14UVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-f14kVdEfCS7cth2SLu0w" name="DB_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-f140VdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-f15EVdEfCS7cth2SLu0w" name="DB_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-f15UVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_O1wEVdEfCS7cth2SLu0w" name="closeResources" specification="_Vu6hwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_O1wUVdEfCS7cth2SLu0w" name="rs" type="_T9wtMEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_O1wkVdEfCS7cth2SLu0w" name="stmt" type="_T9lHAUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_O1w0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try {&#xD;
         if (rs != null) rs.close();&#xD;
         if (stmt != null) stmt.close();&#xD;
         if (conn != null) conn.close();&#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_PcwEVdEfCS7cth2SLu0w" name="formatDate" specification="_Vu6hxEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_PcwUVdEfCS7cth2SLu0w" name="date" type="_T-jXYUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_PcwkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>if (date == null) return null;&#xD;
     SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd.MM.yyyy&quot;);&#xD;
     return sdf.format(date);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Pcw0VdEfCS7cth2SLu0w" name="getEmployees" specification="_Vu6hx0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_PcxEVdEfCS7cth2SLu0w" type="_UAfREEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>JSONArray employees = new JSONArray();&#xD;
     Connection conn = null;&#xD;
     PreparedStatement stmt = null;&#xD;
     ResultSet rs = null;&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         String sql = &quot;SELECT u.id, u.nume, u.prenume, d.nume_dep AS departament, &quot; +&#xD;
                      &quot;t.denumire AS functie, u.email, u.telefon &quot; +&#xD;
                      &quot;FROM useri u &quot; +&#xD;
                      &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                      &quot;JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                      &quot;ORDER BY u.nume, u.prenume&quot;;&#xD;
         &#xD;
         stmt = conn.prepareStatement(sql);&#xD;
         rs = stmt.executeQuery();&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             JSONObject employee = new JSONObject();&#xD;
             employee.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
             employee.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
             employee.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
             employee.put(&quot;departament&quot;, rs.getString(&quot;departament&quot;));&#xD;
             employee.put(&quot;functie&quot;, rs.getString(&quot;functie&quot;));&#xD;
             employee.put(&quot;email&quot;, rs.getString(&quot;email&quot;));&#xD;
             employee.put(&quot;telefon&quot;, rs.getString(&quot;telefon&quot;));&#xD;
             &#xD;
             ((List&lt;Object>) employees).add(employee);&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         closeResources(rs, stmt, conn);&#xD;
     }&#xD;
     &#xD;
     return employees;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_PcxUVdEfCS7cth2SLu0w" name="getEmployeesByDepartment" specification="_Vu7I0EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_PcxkVdEfCS7cth2SLu0w" name="department">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_Pcx0VdEfCS7cth2SLu0w" type="_UAfREEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>JSONArray employees = new JSONArray();&#xD;
     Connection conn = null;&#xD;
     PreparedStatement stmt = null;&#xD;
     ResultSet rs = null;&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         String sql = &quot;SELECT u.id, u.nume, u.prenume, d.nume_dep AS departament, &quot; +&#xD;
                      &quot;t.denumire AS functie, u.email, u.telefon &quot; +&#xD;
                      &quot;FROM useri u &quot; +&#xD;
                      &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                      &quot;JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                      &quot;WHERE d.nume_dep LIKE ? &quot; +&#xD;
                      &quot;ORDER BY u.nume, u.prenume&quot;;&#xD;
         &#xD;
         stmt = conn.prepareStatement(sql);&#xD;
         stmt.setString(1, &quot;%&quot; + department + &quot;%&quot;);&#xD;
         rs = stmt.executeQuery();&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             JSONObject employee = new JSONObject();&#xD;
             employee.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
             employee.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
             employee.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
             employee.put(&quot;departament&quot;, rs.getString(&quot;departament&quot;));&#xD;
             employee.put(&quot;functie&quot;, rs.getString(&quot;functie&quot;));&#xD;
             employee.put(&quot;email&quot;, rs.getString(&quot;email&quot;));&#xD;
             employee.put(&quot;telefon&quot;, rs.getString(&quot;telefon&quot;));&#xD;
             &#xD;
             ((List&lt;Object>) employees).add(employee);&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         closeResources(rs, stmt, conn);&#xD;
     }&#xD;
     &#xD;
     return employees;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_PcyEVdEfCS7cth2SLu0w" name="getDepartments" specification="_Vu7I00VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_PcyUVdEfCS7cth2SLu0w" type="_UAfREEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>JSONArray departments = new JSONArray();&#xD;
     Connection conn = null;&#xD;
     PreparedStatement stmt = null;&#xD;
     ResultSet rs = null;&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         String sql = &quot;SELECT d.id_dep, d.nume_dep, COUNT(u.id) AS nr_angajati &quot; +&#xD;
                      &quot;FROM departament d &quot; +&#xD;
                      &quot;LEFT JOIN useri u ON d.id_dep = u.id_dep &quot; +&#xD;
                      &quot;GROUP BY d.id_dep, d.nume_dep &quot; +&#xD;
                      &quot;ORDER BY d.nume_dep&quot;;&#xD;
         &#xD;
         stmt = conn.prepareStatement(sql);&#xD;
         rs = stmt.executeQuery();&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             JSONObject department = new JSONObject();&#xD;
             department.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
             department.put(&quot;nume_dep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
             department.put(&quot;nr_angajati&quot;, rs.getInt(&quot;nr_angajati&quot;));&#xD;
             &#xD;
             ((List&lt;Object>) departments).add(department);&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         closeResources(rs, stmt, conn);&#xD;
     }&#xD;
     &#xD;
     return departments;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_PcykVdEfCS7cth2SLu0w" name="getLeaves" specification="_Vu7I1UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Pcy0VdEfCS7cth2SLu0w" type="_UAfREEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>JSONArray leaves = new JSONArray();&#xD;
     Connection conn = null;&#xD;
     PreparedStatement stmt = null;&#xD;
     ResultSet rs = null;&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         String sql = &quot;SELECT c.id, c.id_ang, u.nume, u.prenume, d.nume_dep AS departament, &quot; +&#xD;
                      &quot;t.denumire AS functie, c.start_c, c.end_c, c.durata, &quot; +&#xD;
                      &quot;c.motiv, c.locatie, s.nume_status AS status, ct.motiv as tip_concediu &quot; +&#xD;
                      &quot;FROM concedii c &quot; +&#xD;
                      &quot;JOIN useri u ON c.id_ang = u.id &quot; +&#xD;
                      &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                      &quot;JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                      &quot;JOIN statusuri s ON c.status = s.status &quot; +&#xD;
                      &quot;JOIN tipcon ct ON c.tip = ct.tip &quot; +&#xD;
                      &quot;ORDER BY c.start_c DESC&quot;;&#xD;
         &#xD;
         stmt = conn.prepareStatement(sql);&#xD;
         rs = stmt.executeQuery();&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             JSONObject leave = new JSONObject();&#xD;
             leave.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
             leave.put(&quot;id_ang&quot;, rs.getInt(&quot;id_ang&quot;));&#xD;
             leave.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
             leave.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
             leave.put(&quot;departament&quot;, rs.getString(&quot;departament&quot;));&#xD;
             leave.put(&quot;functie&quot;, rs.getString(&quot;functie&quot;));&#xD;
             leave.put(&quot;start_c&quot;, formatDate(rs.getDate(&quot;start_c&quot;)));&#xD;
             leave.put(&quot;end_c&quot;, formatDate(rs.getDate(&quot;end_c&quot;)));&#xD;
             leave.put(&quot;durata&quot;, rs.getInt(&quot;durata&quot;));&#xD;
             leave.put(&quot;motiv&quot;, rs.getString(&quot;motiv&quot;));&#xD;
             leave.put(&quot;tip_concediu&quot;, rs.getString(&quot;tip_concediu&quot;));&#xD;
             leave.put(&quot;locatie&quot;, rs.getString(&quot;locatie&quot;));&#xD;
             leave.put(&quot;status&quot;, rs.getString(&quot;status&quot;));&#xD;
             &#xD;
             ((List&lt;Object>) leaves).add(leave);&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         closeResources(rs, stmt, conn);&#xD;
     }&#xD;
     &#xD;
     return leaves;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_PczEVdEfCS7cth2SLu0w" name="getChristmasLeaves" specification="_Vu7I10VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_PczUVdEfCS7cth2SLu0w" type="_UAfREEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>JSONArray leaves = new JSONArray();&#xD;
     Connection conn = null;&#xD;
     PreparedStatement stmt = null;&#xD;
     ResultSet rs = null;&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         String sql = &quot;SELECT c.id, c.id_ang, u.nume, u.prenume, d.nume_dep AS departament, &quot; +&#xD;
                      &quot;t.denumire AS functie, c.start_c, c.end_c, c.durata, &quot; +&#xD;
                      &quot;c.motiv, c.locatie, s.nume_status AS status, ct.motiv as tip_concediu &quot; +&#xD;
                      &quot;FROM concedii c &quot; +&#xD;
                      &quot;JOIN useri u ON c.id_ang = u.id &quot; +&#xD;
                      &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                      &quot;JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                      &quot;JOIN statusuri s ON c.status = s.status &quot; +&#xD;
                      &quot;JOIN tipcon ct ON c.tip = ct.tip &quot; +&#xD;
                      &quot;WHERE ((c.start_c &lt;= '2024-12-25' AND c.end_c >= '2024-12-24') OR &quot; +&#xD;
                      &quot;(c.start_c &lt;= '2023-12-25' AND c.end_c >= '2023-12-24')) &quot; + &#xD;
                      &quot;AND c.status >= 0 &quot; +&#xD;
                      &quot;ORDER BY c.start_c DESC&quot;;&#xD;
         &#xD;
         stmt = conn.prepareStatement(sql);&#xD;
         rs = stmt.executeQuery();&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             JSONObject leave = new JSONObject();&#xD;
             leave.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
             leave.put(&quot;id_ang&quot;, rs.getInt(&quot;id_ang&quot;));&#xD;
             leave.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
             leave.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
             leave.put(&quot;departament&quot;, rs.getString(&quot;departament&quot;));&#xD;
             leave.put(&quot;functie&quot;, rs.getString(&quot;functie&quot;));&#xD;
             leave.put(&quot;start_c&quot;, formatDate(rs.getDate(&quot;start_c&quot;)));&#xD;
             leave.put(&quot;end_c&quot;, formatDate(rs.getDate(&quot;end_c&quot;)));&#xD;
             leave.put(&quot;durata&quot;, rs.getInt(&quot;durata&quot;));&#xD;
             leave.put(&quot;motiv&quot;, rs.getString(&quot;motiv&quot;));&#xD;
             leave.put(&quot;tip_concediu&quot;, rs.getString(&quot;tip_concediu&quot;));&#xD;
             leave.put(&quot;locatie&quot;, rs.getString(&quot;locatie&quot;));&#xD;
             leave.put(&quot;status&quot;, rs.getString(&quot;status&quot;));&#xD;
             &#xD;
             ((List&lt;Object>) leaves).add(leave);&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         closeResources(rs, stmt, conn);&#xD;
     }&#xD;
     &#xD;
     return leaves;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_PczkVdEfCS7cth2SLu0w" name="getCurrentLeaves" specification="_Vu7I2UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Pcz0VdEfCS7cth2SLu0w" type="_UAfREEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>JSONArray leaves = new JSONArray();&#xD;
     Connection conn = null;&#xD;
     PreparedStatement stmt = null;&#xD;
     ResultSet rs = null;&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         String sql = &quot;SELECT c.id, c.id_ang, u.nume, u.prenume, d.nume_dep AS departament, &quot; +&#xD;
                      &quot;t.denumire AS functie, c.start_c, c.end_c, c.durata, &quot; +&#xD;
                      &quot;c.motiv, c.locatie, s.nume_status AS status, ct.motiv as tip_concediu &quot; +&#xD;
                      &quot;FROM concedii c &quot; +&#xD;
                      &quot;JOIN useri u ON c.id_ang = u.id &quot; +&#xD;
                      &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                      &quot;JOIN tipuri t ON u.tip = t.tip &quot; +&#xD;
                      &quot;JOIN statusuri s ON c.status = s.status &quot; +&#xD;
                      &quot;JOIN tipcon ct ON c.tip = ct.tip &quot; +&#xD;
                      &quot;WHERE CURDATE() BETWEEN c.start_c AND c.end_c &quot; +&#xD;
                      &quot;AND c.status >= 0 &quot; +&#xD;
                      &quot;ORDER BY c.start_c DESC&quot;;&#xD;
         &#xD;
         stmt = conn.prepareStatement(sql);&#xD;
         rs = stmt.executeQuery();&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             JSONObject leave = new JSONObject();&#xD;
             leave.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
             leave.put(&quot;id_ang&quot;, rs.getInt(&quot;id_ang&quot;));&#xD;
             leave.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
             leave.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
             leave.put(&quot;departament&quot;, rs.getString(&quot;departament&quot;));&#xD;
             leave.put(&quot;functie&quot;, rs.getString(&quot;functie&quot;));&#xD;
             leave.put(&quot;start_c&quot;, formatDate(rs.getDate(&quot;start_c&quot;)));&#xD;
             leave.put(&quot;end_c&quot;, formatDate(rs.getDate(&quot;end_c&quot;)));&#xD;
             leave.put(&quot;durata&quot;, rs.getInt(&quot;durata&quot;));&#xD;
             leave.put(&quot;motiv&quot;, rs.getString(&quot;motiv&quot;));&#xD;
             leave.put(&quot;tip_concediu&quot;, rs.getString(&quot;tip_concediu&quot;));&#xD;
             leave.put(&quot;locatie&quot;, rs.getString(&quot;locatie&quot;));&#xD;
             leave.put(&quot;status&quot;, rs.getString(&quot;status&quot;));&#xD;
             &#xD;
             ((List&lt;Object>) leaves).add(leave);&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         closeResources(rs, stmt, conn);&#xD;
     }&#xD;
     &#xD;
     return leaves;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Pc0EVdEfCS7cth2SLu0w" name="getDocuments" specification="_Vu7I20VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Pc0UVdEfCS7cth2SLu0w" type="_UAfREEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>JSONArray documents = new JSONArray();&#xD;
     Connection conn = null;&#xD;
     PreparedStatement stmt = null;&#xD;
     ResultSet rs = null;&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         String sql = &quot;SELECT a.id, ta.denumire AS tip_adeverinta, a.motiv, s.nume_status AS status, &quot; +&#xD;
                      &quot;a.creare, a.modif &quot; +&#xD;
                      &quot;FROM adeverinte a &quot; +&#xD;
                      &quot;JOIN tip_adev ta ON a.tip = ta.id &quot; +&#xD;
                      &quot;JOIN statusuri s ON a.status = s.status &quot; +&#xD;
                      &quot;ORDER BY a.creare DESC&quot;;&#xD;
         &#xD;
         stmt = conn.prepareStatement(sql);&#xD;
         rs = stmt.executeQuery();&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             JSONObject document = new JSONObject();&#xD;
             document.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
             document.put(&quot;tip&quot;, rs.getString(&quot;tip_adeverinta&quot;));&#xD;
             document.put(&quot;motiv&quot;, rs.getString(&quot;motiv&quot;));&#xD;
             document.put(&quot;status&quot;, rs.getString(&quot;status&quot;));&#xD;
             document.put(&quot;creare&quot;, formatDate(rs.getDate(&quot;creare&quot;)));&#xD;
             document.put(&quot;modif&quot;, formatDate(rs.getDate(&quot;modif&quot;)));&#xD;
             &#xD;
             ((List&lt;Object>) documents).add(document);&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         closeResources(rs, stmt, conn);&#xD;
     }&#xD;
     &#xD;
     return documents;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Pc0kVdEfCS7cth2SLu0w" name="getProjects" specification="_Vu7v4UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Pc00VdEfCS7cth2SLu0w" type="_UAfREEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>JSONArray projects = new JSONArray();&#xD;
     Connection conn = null;&#xD;
     PreparedStatement stmt = null;&#xD;
     ResultSet rs = null;&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         String sql = &quot;SELECT p.id, p.nume, p.descriere, p.start, p.end, &quot; +&#xD;
                      &quot;COUNT(DISTINCT e.id) AS nr_echipe, &quot; +&#xD;
                      &quot;COUNT(DISTINCT t.id) AS nr_taskuri &quot; +&#xD;
                      &quot;FROM proiecte p &quot; +&#xD;
                      &quot;LEFT JOIN echipe e ON p.id = e.id_prj &quot; +&#xD;
                      &quot;LEFT JOIN tasks t ON p.id = t.id_prj &quot; +&#xD;
                      &quot;GROUP BY p.id, p.nume, p.descriere, p.start, p.end &quot; +&#xD;
                      &quot;ORDER BY p.start DESC&quot;;&#xD;
         &#xD;
         stmt = conn.prepareStatement(sql);&#xD;
         rs = stmt.executeQuery();&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             JSONObject project = new JSONObject();&#xD;
             project.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
             project.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
             project.put(&quot;descriere&quot;, rs.getString(&quot;descriere&quot;));&#xD;
             project.put(&quot;start&quot;, formatDate(rs.getDate(&quot;start&quot;)));&#xD;
             project.put(&quot;end&quot;, formatDate(rs.getDate(&quot;end&quot;)));&#xD;
             project.put(&quot;nr_echipe&quot;, rs.getInt(&quot;nr_echipe&quot;));&#xD;
             project.put(&quot;nr_taskuri&quot;, rs.getInt(&quot;nr_taskuri&quot;));&#xD;
             &#xD;
             ((List&lt;Object>) projects).add(project);&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         closeResources(rs, stmt, conn);&#xD;
     }&#xD;
     &#xD;
     return projects;&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Pc1EVdEfCS7cth2SLu0w" name="executeCustomQuery" specification="_Vu7v40VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Pc1UVdEfCS7cth2SLu0w" name="sql">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_Pc1kVdEfCS7cth2SLu0w" name="params" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Pc10VdEfCS7cth2SLu0w" type="_UAfREEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>JSONArray results = new JSONArray();&#xD;
     Connection conn = null;&#xD;
     PreparedStatement stmt = null;&#xD;
     ResultSet rs = null;&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.jdbc.Driver&quot;);&#xD;
         conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#xD;
         &#xD;
         stmt = conn.prepareStatement(sql);&#xD;
         &#xD;
         // Set parameters if any&#xD;
         if (params != null) {&#xD;
             for (int i = 0; i &lt; params.size(); i++) {&#xD;
                 Object param = params.get(i);&#xD;
                 if (param instanceof String) {&#xD;
                     stmt.setString(i + 1, (String) param);&#xD;
                 } else if (param instanceof Integer) {&#xD;
                     stmt.setInt(i + 1, (Integer) param);&#xD;
                 } else if (param instanceof Date) {&#xD;
                     stmt.setDate(i + 1, new java.sql.Date(((Date) param).getTime()));&#xD;
                 }&#xD;
                 // Add more types as needed&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         rs = stmt.executeQuery();&#xD;
         &#xD;
         // Get metadata to know column names&#xD;
         java.sql.ResultSetMetaData metaData = rs.getMetaData();&#xD;
         int columnCount = metaData.getColumnCount();&#xD;
         &#xD;
         // Process results&#xD;
         while (rs.next()) {&#xD;
             JSONObject result = new JSONObject();&#xD;
             &#xD;
             for (int i = 1; i &lt;= columnCount; i++) {&#xD;
                 String columnName = metaData.getColumnLabel(i);&#xD;
                 Object value = rs.getObject(i);&#xD;
                 &#xD;
                 // Format dates&#xD;
                 if (value instanceof java.sql.Date) {&#xD;
                     value = formatDate((java.sql.Date) value);&#xD;
                 }&#xD;
                 &#xD;
                 result.put(columnName, value);&#xD;
             }&#xD;
             &#xD;
             ((List&lt;Object>) results).add(result);&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
     } finally {&#xD;
         closeResources(rs, stmt, conn);&#xD;
     }&#xD;
     &#xD;
     return results;&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vu6hwEVdEfCS7cth2SLu0w" name="closeResources" visibility="private" isStatic="true" method="_V_O1wEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vu6hwUVdEfCS7cth2SLu0w" name="rs" type="_T9wtMEVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vu6hwkVdEfCS7cth2SLu0w" name="stmt" type="_T9lHAUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vu6hw0VdEfCS7cth2SLu0w" name="conn" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu6hxEVdEfCS7cth2SLu0w" name="formatDate" visibility="private" isStatic="true" method="_V_PcwEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vu6hxUVdEfCS7cth2SLu0w" name="date" type="_T-jXYUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vu6hxkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu6hx0VdEfCS7cth2SLu0w" name="getEmployees" isStatic="true" method="_V_Pcw0VdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_kz80VdEfCS7cth2SLu0w">
            <body>Get all employees from the database</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vu6hyEVdEfCS7cth2SLu0w" type="_UAfREEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu7I0EVdEfCS7cth2SLu0w" name="getEmployeesByDepartment" isStatic="true" method="_V_PcxUVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_lbAEVdEfCS7cth2SLu0w">
            <body>Get employees filtered by department</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vu7I0UVdEfCS7cth2SLu0w" name="department">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vu7I0kVdEfCS7cth2SLu0w" type="_UAfREEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu7I00VdEfCS7cth2SLu0w" name="getDepartments" isStatic="true" method="_V_PcyEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_lbAUVdEfCS7cth2SLu0w">
            <body>Get all departments</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vu7I1EVdEfCS7cth2SLu0w" type="_UAfREEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu7I1UVdEfCS7cth2SLu0w" name="getLeaves" isStatic="true" method="_V_PcykVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_lbAkVdEfCS7cth2SLu0w">
            <body>Get all leaves (concedii)</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vu7I1kVdEfCS7cth2SLu0w" type="_UAfREEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu7I10VdEfCS7cth2SLu0w" name="getChristmasLeaves" isStatic="true" method="_V_PczEVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_lbA0VdEfCS7cth2SLu0w">
            <body>Get leaves (concedii) for Christmas period</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vu7I2EVdEfCS7cth2SLu0w" type="_UAfREEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu7I2UVdEfCS7cth2SLu0w" name="getCurrentLeaves" isStatic="true" method="_V_PczkVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_lbBEVdEfCS7cth2SLu0w">
            <body>Get current leaves (concedii)</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vu7I2kVdEfCS7cth2SLu0w" type="_UAfREEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu7I20VdEfCS7cth2SLu0w" name="getDocuments" isStatic="true" method="_V_Pc0EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_lbBUVdEfCS7cth2SLu0w">
            <body>Get all documents (adeverinte)</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vu7v4EVdEfCS7cth2SLu0w" type="_UAfREEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu7v4UVdEfCS7cth2SLu0w" name="getProjects" isStatic="true" method="_V_Pc0kVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_lbBkVdEfCS7cth2SLu0w">
            <body>Get all projects (proiecte)</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vu7v4kVdEfCS7cth2SLu0w" type="_UAfREEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu7v40VdEfCS7cth2SLu0w" name="executeCustomQuery" isStatic="true" method="_V_Pc1EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_lbB0VdEfCS7cth2SLu0w">
            <body>Generic method to execute a custom SQL query and return results as JSONArray</body>
          </ownedComment>
          <ownedParameter xmi:id="_Vu7v5EVdEfCS7cth2SLu0w" name="sql">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vu7v5UVdEfCS7cth2SLu0w" name="params" type="_T9_9wUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vu7v5kVdEfCS7cth2SLu0w" type="_UAfREEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vu8W8UVdEfCS7cth2SLu0w" name="DeleteSediu">
        <generalization xmi:id="_Vu9lFEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-f15kVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-gc8EVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-gc8UVdEfCS7cth2SLu0w" name="DB_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-gc8kVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-gc80VdEfCS7cth2SLu0w" name="DB_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-gc9EVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-gc9UVdEfCS7cth2SLu0w" name="DB_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-gc9kVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_QD0EVdEfCS7cth2SLu0w" name="doGet" specification="_Vu8-AEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_QD0UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_QD0kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String idSediuStr = request.getParameter(&quot;id_sediu&quot;);&#xD;
     &#xD;
     if (idSediuStr == null || idSediuStr.isEmpty()) {&#xD;
         response.sendRedirect(&quot;ListaSedii.jsp?status=error&amp;message=ID-ul sediului lipsește&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         int idSediu = Integer.parseInt(idSediuStr);&#xD;
         &#xD;
         try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {&#xD;
             // Verificăm mai întâi dacă sediul este utilizat în alte tabele&#xD;
             // Verificăm useri&#xD;
             PreparedStatement checkUsersStmt = conn.prepareStatement(&#xD;
                 &quot;SELECT COUNT(*) FROM useri WHERE id_sediu = ?&quot;&#xD;
             );&#xD;
             checkUsersStmt.setInt(1, idSediu);&#xD;
             ResultSet rsUsers = checkUsersStmt.executeQuery();&#xD;
             rsUsers.next();&#xD;
             int userCount = rsUsers.getInt(1);&#xD;
             rsUsers.close();&#xD;
             checkUsersStmt.close();&#xD;
             &#xD;
             // Verificăm locatii_useri&#xD;
             PreparedStatement checkLocationsStmt = conn.prepareStatement(&#xD;
                 &quot;SELECT COUNT(*) FROM locatii_useri WHERE id_sediu = ?&quot;&#xD;
             );&#xD;
             checkLocationsStmt.setInt(1, idSediu);&#xD;
             ResultSet rsLocations = checkLocationsStmt.executeQuery();&#xD;
             rsLocations.next();&#xD;
             int locationCount = rsLocations.getInt(1);&#xD;
             rsLocations.close();&#xD;
             checkLocationsStmt.close();&#xD;
             &#xD;
             if (userCount > 0 || locationCount > 0) {&#xD;
                 // Sediul este utilizat, nu putem șterge&#xD;
                 response.sendRedirect(&quot;ListaSedii.jsp?status=error&amp;message=Sediul nu poate fi șters deoarece este utilizat de &quot; + &#xD;
                                      userCount + &quot; angajați și &quot; + locationCount + &quot; locații.&quot;);&#xD;
                 return;&#xD;
             }&#xD;
             &#xD;
             // Dacă sediul nu este utilizat, îl putem șterge&#xD;
             PreparedStatement deleteStmt = conn.prepareStatement(&#xD;
                 &quot;DELETE FROM sedii WHERE id_sediu = ?&quot;&#xD;
             );&#xD;
             deleteStmt.setInt(1, idSediu);&#xD;
             &#xD;
             int rowsAffected = deleteStmt.executeUpdate();&#xD;
             deleteStmt.close();&#xD;
             &#xD;
             if (rowsAffected > 0) {&#xD;
                 response.sendRedirect(&quot;ListaSedii.jsp?status=success&amp;message=Sediul a fost șters cu succes&quot;);&#xD;
             } else {&#xD;
                 response.sendRedirect(&quot;ListaSedii.jsp?status=error&amp;message=Sediul cu ID-ul specificat nu a fost găsit&quot;);&#xD;
             }&#xD;
         }&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.sendRedirect(&quot;ListaSedii.jsp?status=error&amp;message=ID-ul sediului nu este valid&quot;);&#xD;
     } catch (Exception e) {&#xD;
         System.err.println(&quot;Eroare la ștergerea sediului: &quot; + e.getMessage());&#xD;
         response.sendRedirect(&quot;ListaSedii.jsp?status=error&amp;message=Eroare la ștergerea sediului: &quot; + e.getMessage());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vu8-AEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_QD0EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vu8-AUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vu9lEEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vu9lFUVdEfCS7cth2SLu0w" name="GetAllSedii">
        <generalization xmi:id="_Vu-zMUVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-gc90VdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-gc-EVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-gc-UVdEfCS7cth2SLu0w" name="DB_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-gc-kVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-gc-0VdEfCS7cth2SLu0w" name="DB_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-gc_EVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-gc_UVdEfCS7cth2SLu0w" name="DB_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-hEAEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_QD00VdEfCS7cth2SLu0w" name="doGet" specification="_Vu-MIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_QD1EVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_QD1UVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>JSONArray jsonArray = new JSONArray();&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {&#xD;
         Statement stmt = conn.createStatement();&#xD;
         String sql = &quot;SELECT * FROM sedii ORDER BY nume_sediu&quot;;&#xD;
         ResultSet rs = stmt.executeQuery(sql);&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             JSONObject sediu = new JSONObject();&#xD;
             sediu.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
             sediu.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;));&#xD;
             sediu.put(&quot;tip_sediu&quot;, rs.getString(&quot;tip_sediu&quot;));&#xD;
             sediu.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
             sediu.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
             sediu.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
             sediu.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
             sediu.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
             sediu.put(&quot;telefon&quot;, rs.getString(&quot;telefon&quot;));&#xD;
             sediu.put(&quot;email&quot;, rs.getString(&quot;email&quot;));&#xD;
             sediu.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
             sediu.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
             &#xD;
             jsonArray.put(sediu);&#xD;
         }&#xD;
         &#xD;
         rs.close();&#xD;
         stmt.close();&#xD;
         &#xD;
         // Setează răspunsul&#xD;
         response.setContentType(&quot;application/json&quot;);&#xD;
         response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
         response.getWriter().write(jsonArray.toString());&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         System.err.println(&quot;Eroare la obținerea tuturor sediilor: &quot; + e.getMessage());&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         response.getWriter().write(&quot;{\&quot;error\&quot;: \&quot;&quot; + e.getMessage() + &quot;\&quot;}&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vu-MIEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_QD00VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vu-MIUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vu-MIkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vu-zMkVdEfCS7cth2SLu0w" name="GetLocationsServlet">
        <ownedComment xmi:id="_V_lbCEVdEfCS7cth2SLu0w">
          <body>Servlet implementation class GetLocationsServlet</body>
        </ownedComment>
        <generalization xmi:id="_Vu_aSUVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-hEAUVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-hEAkVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_QD1kVdEfCS7cth2SLu0w" name="GetLocationsServlet" specification="_Vu-zM0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_QD10VdEfCS7cth2SLu0w" type="_Vu-zMkVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();
     // TODO Auto-generated constructor stub
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_QD2EVdEfCS7cth2SLu0w" name="doGet" specification="_Vu_aQ0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_QD2UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_QD2kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try (Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;, &quot;root&quot;, &quot;student&quot;)) {
	            String sql = &quot;SELECT latitudine, longitudine FROM locatii&quot;;
	            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
	                ResultSet rs = stmt.executeQuery();
	                JSONArray locations = new JSONArray();
	                while (rs.next()) {
	                    JSONObject location = new JSONObject();
	                    location.put(&quot;lat&quot;, rs.getDouble(&quot;latitudine&quot;));
	                    location.put(&quot;long&quot;, rs.getDouble(&quot;longitudine&quot;));
	                    location.put(&quot;descriere&quot;, rs.getString(&quot;descriere&quot;));
	                    locations.put(location);
	                }
	                response.setContentType(&quot;application/json&quot;);
	                response.getWriter().write(locations.toString());
	            }
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	    </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_QD20VdEfCS7cth2SLu0w" name="doPost" specification="_Vu_aRkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_QD3EVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_QD3UVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// TODO Auto-generated method stub
		doGet(request, response);
	</body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vu-zM0VdEfCS7cth2SLu0w" name="GetLocationsServlet" method="_V_QD1kVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_Vu_aQEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_Vu_aQUVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_Vu_aQkVdEfCS7cth2SLu0w" type="_Vu-zMkVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu_aQ0VdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_QD2EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vu_aREVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vu_aRUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vu_aRkVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_QD20VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vu_aR0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vu_aSEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_Vu_aSkVdEfCS7cth2SLu0w" name="GetSediiServlet">
        <ownedComment xmi:id="_V_lbCUVdEfCS7cth2SLu0w">
          <body>Servlet pentru preluarea informațiilor despre sedii din baza de date</body>
        </ownedComment>
        <generalization xmi:id="_VvABVkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-hEA0VdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-hEBEVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_QD3kVdEfCS7cth2SLu0w" name="doGet" specification="_VvABUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_QD30VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_QD4EVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // citim parametrii, dacă e cazul&#xD;
     int userId = -1;&#xD;
     String idParam = request.getParameter(&quot;id&quot;);&#xD;
     if (idParam != null) {&#xD;
         try {&#xD;
             userId = Integer.parseInt(idParam);&#xD;
         } catch (NumberFormatException e) {&#xD;
             // id invalid -> rămâne -1&#xD;
         }&#xD;
     }&#xD;
     &#xD;
     JSONArray sediiArray = new JSONArray();&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
     } catch (ClassNotFoundException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(new JSONObject().put(&quot;error&quot;, &quot;Driver JDBC MySQL nu a fost găsit&quot;).toString());&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     String url = &quot;jdbc:mysql://localhost:3306/test?useSSL=false&amp;serverTimezone=UTC&quot;;&#xD;
     String user = &quot;root&quot;;&#xD;
     String pass = &quot;student&quot;;&#xD;
     &#xD;
     String sql = &quot;SELECT * FROM sedii ORDER BY tip_sediu, nume_sediu&quot;;&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(url, user, pass);&#xD;
          PreparedStatement ps = conn.prepareStatement(sql);&#xD;
          ResultSet rs = ps.executeQuery()) {&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             JSONObject sediu = new JSONObject();&#xD;
             sediu.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
             sediu.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;));&#xD;
             sediu.put(&quot;tip_sediu&quot;, rs.getString(&quot;tip_sediu&quot;));&#xD;
             sediu.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
             sediu.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
             sediu.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
             sediu.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
             sediu.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
             sediu.put(&quot;telefon&quot;, rs.getString(&quot;telefon&quot;));&#xD;
             sediu.put(&quot;email&quot;, rs.getString(&quot;email&quot;));&#xD;
             sediu.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
             sediu.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
             sediiArray.put(sediu);&#xD;
         }&#xD;
         out.print(sediiArray.toString());&#xD;
     } catch (SQLException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         JSONObject error = new JSONObject();&#xD;
         error.put(&quot;error&quot;, &quot;Eroare la Baza de date: &quot; + e.getMessage());&#xD;
         out.print(error.toString());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_QD4UVdEfCS7cth2SLu0w" name="doPost" specification="_VvABU0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_QD4kVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_QD40VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doGet(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvABUEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_QD3kVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvABUUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvABUkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvABU0VdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_QD4UVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvABVEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvABVUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvAoYEVdEfCS7cth2SLu0w" name="GetSediuDetails">
        <generalization xmi:id="_VvBPckVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-hEBUVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-hEBkVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-hEB0VdEfCS7cth2SLu0w" name="DB_URL" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-hECEVdEfCS7cth2SLu0w" value="&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-hECUVdEfCS7cth2SLu0w" name="DB_USER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-hECkVdEfCS7cth2SLu0w" value="&quot;root&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-hEC0VdEfCS7cth2SLu0w" name="DB_PASSWORD" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-hrEEVdEfCS7cth2SLu0w" value="&quot;student&quot;"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Qq4EVdEfCS7cth2SLu0w" name="doGet" specification="_VvAoYUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Qq4UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Qq4kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String idSediuStr = request.getParameter(&quot;id_sediu&quot;);&#xD;
     &#xD;
     if (idSediuStr == null || idSediuStr.isEmpty()) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         response.getWriter().write(&quot;ID-ul sediului lipsește&quot;);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         int idSediu = Integer.parseInt(idSediuStr);&#xD;
         &#xD;
         try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {&#xD;
             PreparedStatement stmt = conn.prepareStatement(&#xD;
                 &quot;SELECT * FROM sedii WHERE id_sediu = ?&quot;&#xD;
             );&#xD;
             stmt.setInt(1, idSediu);&#xD;
             &#xD;
             ResultSet rs = stmt.executeQuery();&#xD;
             &#xD;
             if (rs.next()) {&#xD;
                 JSONObject jsonResponse = new JSONObject();&#xD;
                 jsonResponse.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                 jsonResponse.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;));&#xD;
                 jsonResponse.put(&quot;tip_sediu&quot;, rs.getString(&quot;tip_sediu&quot;));&#xD;
                 jsonResponse.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                 jsonResponse.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                 jsonResponse.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                 jsonResponse.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                 jsonResponse.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                 jsonResponse.put(&quot;telefon&quot;, rs.getString(&quot;telefon&quot;));&#xD;
                 jsonResponse.put(&quot;email&quot;, rs.getString(&quot;email&quot;));&#xD;
                 jsonResponse.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                 jsonResponse.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                 &#xD;
                 response.setContentType(&quot;application/json&quot;);&#xD;
                 response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
                 response.getWriter().write(jsonResponse.toString());&#xD;
             } else {&#xD;
                 response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
                 response.getWriter().write(&quot;Sediul cu ID-ul specificat nu a fost găsit&quot;);&#xD;
             }&#xD;
             &#xD;
             rs.close();&#xD;
             stmt.close();&#xD;
         }&#xD;
     } catch (NumberFormatException e) {&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         response.getWriter().write(&quot;ID-ul sediului nu este valid&quot;);&#xD;
     } catch (Exception e) {&#xD;
         System.err.println(&quot;Eroare la obținerea detaliilor sediului: &quot; + e.getMessage());&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         response.getWriter().write(&quot;Eroare la procesarea cererii: &quot; + e.getMessage());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvAoYUVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_Qq4EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvAoYkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvAoY0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvBPc0VdEfCS7cth2SLu0w" name="GetUserHolidayServlet">
        <ownedComment xmi:id="_V_lbCkVdEfCS7cth2SLu0w">
          <body>Servlet pentru preluarea informațiilor despre concediile unui utilizator din baza de date</body>
        </ownedComment>
        <generalization xmi:id="_VvCdkEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-hrEUVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-hrEkVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Qq40VdEfCS7cth2SLu0w" name="GetUserHolidayServlet" specification="_VvB2gEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Qq5EVdEfCS7cth2SLu0w" type="_VvBPc0VdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Qq5UVdEfCS7cth2SLu0w" name="doGet" specification="_VvB2hEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Qq5kVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Qq50VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     int userId = -1;&#xD;
     try {&#xD;
         userId = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
     } catch (NumberFormatException e) {&#xD;
         // Dacă parametrul id lipsește sau nu este un număr, trimitem eroare&#xD;
         JSONObject error = new JSONObject();&#xD;
         error.put(&quot;error&quot;, &quot;ID utilizator invalid sau lipsă.&quot;);&#xD;
         out.print(error.toString());&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     JSONArray holidaysArray = new JSONArray();&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;).newInstance();&#xD;
         &#xD;
         try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {&#xD;
             &#xD;
             // Query pentru a extrage concediile utilizatorului &#xD;
             // cu datele de locație din tabela locatii_concedii&#xD;
             String query = &quot;SELECT c.*, lc.strada, lc.longitudine, lc.latitudine, lc.cod, lc.oras, &quot; +&#xD;
                            &quot;lc.judet, lc.tara &quot; +&#xD;
                            &quot;FROM concedii c &quot; +&#xD;
                            &quot;LEFT JOIN locatii_concedii lc ON c.id = lc.id_concediu &quot; +&#xD;
                            &quot;WHERE c.id_ang = ? AND lc.longitudine IS NOT NULL AND lc.latitudine IS NOT NULL &quot; +&#xD;
                            &quot;ORDER BY c.start_c DESC&quot;;&#xD;
             &#xD;
             try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {&#xD;
                 preparedStatement.setInt(1, userId);&#xD;
                 &#xD;
                 try (ResultSet rs = preparedStatement.executeQuery()) {&#xD;
                     &#xD;
                     while (rs.next()) {&#xD;
                         JSONObject holiday = new JSONObject();&#xD;
                         &#xD;
                         // Adăugăm informațiile despre concediu&#xD;
                         holiday.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
                         holiday.put(&quot;start_c&quot;, rs.getString(&quot;start_c&quot;));&#xD;
                         holiday.put(&quot;end_c&quot;, rs.getString(&quot;end_c&quot;));&#xD;
                         holiday.put(&quot;motiv&quot;, rs.getString(&quot;motiv&quot;));&#xD;
                         holiday.put(&quot;locatie&quot;, rs.getString(&quot;locatie&quot;));&#xD;
                         holiday.put(&quot;status&quot;, rs.getInt(&quot;status&quot;));&#xD;
                         holiday.put(&quot;tip&quot;, rs.getInt(&quot;tip&quot;));&#xD;
                         holiday.put(&quot;durata&quot;, rs.getInt(&quot;durata&quot;));&#xD;
                         &#xD;
                         // Adăugăm informațiile despre locație&#xD;
                         if (rs.getString(&quot;strada&quot;) != null) {&#xD;
                             holiday.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                             holiday.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                             holiday.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                             holiday.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                             holiday.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                             holiday.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                             holiday.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                         }&#xD;
                         &#xD;
                         // Adăugăm concediul în array-ul JSON - folosim put() în loc de add()&#xD;
                         holidaysArray.put(holiday);&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
         } catch (SQLException e) {&#xD;
             JSONObject error = new JSONObject();&#xD;
             error.put(&quot;error&quot;, &quot;Eroare la baza de date: &quot; + e.getMessage());&#xD;
             out.print(error.toString());&#xD;
             e.printStackTrace();&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Trimitem array-ul JSON către client&#xD;
         out.print(holidaysArray.toString());&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         JSONObject error = new JSONObject();&#xD;
         error.put(&quot;error&quot;, &quot;Eroare generală: &quot; + e.getMessage());&#xD;
         out.print(error.toString());&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Qq6EVdEfCS7cth2SLu0w" name="doPost" specification="_VvB2h0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Qq6UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Qq6kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doGet(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvB2gEVdEfCS7cth2SLu0w" name="GetUserHolidayServlet" method="_V_Qq40VdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VvB2gUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VvB2gkVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VvB2g0VdEfCS7cth2SLu0w" type="_VvBPc0VdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvB2hEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_Qq5UVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvB2hUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvB2hkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvB2h0VdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_Qq6EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvB2iEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvB2iUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvCdkUVdEfCS7cth2SLu0w" name="GetUserWorkplaceServlet">
        <ownedComment xmi:id="_V_lbC0VdEfCS7cth2SLu0w">
          <body>Servlet pentru preluarea informațiilor despre locurile de muncă ale unui utilizator</body>
        </ownedComment>
        <generalization xmi:id="_VvDEpEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-hrE0VdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-hrFEVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Qq60VdEfCS7cth2SLu0w" name="GetUserWorkplaceServlet" specification="_VvCdkkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Qq7EVdEfCS7cth2SLu0w" type="_VvCdkUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Qq7UVdEfCS7cth2SLu0w" name="doGet" specification="_VvCdlkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Qq7kVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Qq70VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     // Preluăm parametrii&#xD;
     int userId = -1;&#xD;
     int departmentId = -1;&#xD;
     int sediuId = -1;&#xD;
     &#xD;
     try {&#xD;
         userId = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
         departmentId = Integer.parseInt(request.getParameter(&quot;id_dep&quot;));&#xD;
         &#xD;
         // Sediul poate fi null&#xD;
         String sediuParam = request.getParameter(&quot;id_sediu&quot;);&#xD;
         if (sediuParam != null &amp;&amp; !sediuParam.isEmpty() &amp;&amp; !sediuParam.equals(&quot;null&quot;)) {&#xD;
             sediuId = Integer.parseInt(sediuParam);&#xD;
         }&#xD;
     } catch (NumberFormatException e) {&#xD;
         // Dacă parametrii lipsesc sau nu sunt numere, trimitem eroare&#xD;
         JSONObject error = new JSONObject();&#xD;
         error.put(&quot;error&quot;, &quot;Parametri invalizi sau lipsă.&quot;);&#xD;
         out.print(error.toString());&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     JSONArray workplacesArray = new JSONArray();&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;).newInstance();&#xD;
         &#xD;
         try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {&#xD;
             &#xD;
             // 1. Mai întâi verificăm sediul asociat utilizatorului (dacă există)&#xD;
             if (sediuId > 0) {&#xD;
                 String sediuQuery = &quot;SELECT s.*, 'sediu' as type FROM sedii s WHERE s.id_sediu = ?&quot;;&#xD;
                 &#xD;
                 try (PreparedStatement sediuStatement = connection.prepareStatement(sediuQuery)) {&#xD;
                     sediuStatement.setInt(1, sediuId);&#xD;
                     &#xD;
                     try (ResultSet rs = sediuStatement.executeQuery()) {&#xD;
                         if (rs.next()) {&#xD;
                             JSONObject workplace = new JSONObject();&#xD;
                             &#xD;
                             // Adăugăm informațiile despre sediu&#xD;
                             workplace.put(&quot;type&quot;, &quot;sediu&quot;);&#xD;
                             workplace.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                             workplace.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;));&#xD;
                             workplace.put(&quot;tip_sediu&quot;, rs.getString(&quot;tip_sediu&quot;));&#xD;
                             workplace.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                             workplace.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                             workplace.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                             workplace.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                             workplace.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                             workplace.put(&quot;telefon&quot;, rs.getString(&quot;telefon&quot;));&#xD;
                             workplace.put(&quot;email&quot;, rs.getString(&quot;email&quot;));&#xD;
                             workplace.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                             workplace.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                             &#xD;
                             // Adăugăm locul de muncă în array-ul JSON&#xD;
                             workplacesArray.put(workplace);&#xD;
                         }&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             // 2. Adăugăm locația departamentului utilizatorului&#xD;
             String depQuery = &quot;SELECT ld.*, d.nume_dep, 'departament' as type &quot; +&#xD;
                              &quot;FROM locatii_departamente ld &quot; +&#xD;
                              &quot;JOIN departament d ON ld.id_dep = d.id_dep &quot; +&#xD;
                              &quot;WHERE ld.id_dep = ? AND ld.longitudine IS NOT NULL AND ld.latitudine IS NOT NULL&quot;;&#xD;
             &#xD;
             try (PreparedStatement depStatement = connection.prepareStatement(depQuery)) {&#xD;
                 depStatement.setInt(1, departmentId);&#xD;
                 &#xD;
                 try (ResultSet rs = depStatement.executeQuery()) {&#xD;
                     if (rs.next()) {&#xD;
                         JSONObject workplace = new JSONObject();&#xD;
                         &#xD;
                         // Adăugăm informațiile despre departament&#xD;
                         workplace.put(&quot;type&quot;, &quot;departament&quot;);&#xD;
                         workplace.put(&quot;id_dep&quot;, rs.getInt(&quot;id_dep&quot;));&#xD;
                         workplace.put(&quot;nume_dep&quot;, rs.getString(&quot;nume_dep&quot;));&#xD;
                         workplace.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                         workplace.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                         workplace.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                         workplace.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                         workplace.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                         workplace.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                         workplace.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                         &#xD;
                         // Adăugăm locul de muncă în array-ul JSON&#xD;
                         workplacesArray.put(workplace);&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             // 3. Verificăm dacă există locații specifice pentru utilizator&#xD;
             String userLocQuery = &quot;SELECT lu.*, 'user' as type &quot; +&#xD;
                                 &quot;FROM locatii_useri lu &quot; +&#xD;
                                 &quot;WHERE lu.id_user = ? AND lu.longitudine IS NOT NULL AND lu.latitudine IS NOT NULL&quot;;&#xD;
             &#xD;
             try (PreparedStatement userLocStatement = connection.prepareStatement(userLocQuery)) {&#xD;
                 userLocStatement.setInt(1, userId);&#xD;
                 &#xD;
                 try (ResultSet rs = userLocStatement.executeQuery()) {&#xD;
                     while (rs.next()) {&#xD;
                         JSONObject workplace = new JSONObject();&#xD;
                         &#xD;
                         // Adăugăm informațiile despre locația utilizatorului&#xD;
                         workplace.put(&quot;type&quot;, &quot;user&quot;);&#xD;
                         workplace.put(&quot;id_locatie&quot;, rs.getInt(&quot;id_locatie&quot;));&#xD;
                         workplace.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                         workplace.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                         workplace.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                         workplace.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                         workplace.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                         workplace.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                         workplace.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                         &#xD;
                         // Verificăm dacă există un sediu asociat&#xD;
                         if (rs.getObject(&quot;id_sediu&quot;) != null) {&#xD;
                             int locSediuId = rs.getInt(&quot;id_sediu&quot;);&#xD;
                             &#xD;
                             // Căutăm informații despre sediu&#xD;
                             String sediuInfoQuery = &quot;SELECT nume_sediu, tip_sediu FROM sedii WHERE id_sediu = ?&quot;;&#xD;
                             try (PreparedStatement sediuInfoStatement = connection.prepareStatement(sediuInfoQuery)) {&#xD;
                                 sediuInfoStatement.setInt(1, locSediuId);&#xD;
                                 &#xD;
                                 try (ResultSet sediuRs = sediuInfoStatement.executeQuery()) {&#xD;
                                     if (sediuRs.next()) {&#xD;
                                         workplace.put(&quot;id_sediu&quot;, locSediuId);&#xD;
                                         workplace.put(&quot;nume_sediu&quot;, sediuRs.getString(&quot;nume_sediu&quot;));&#xD;
                                         workplace.put(&quot;tip_sediu&quot;, sediuRs.getString(&quot;tip_sediu&quot;));&#xD;
                                     }&#xD;
                                 }&#xD;
                             }&#xD;
                         }&#xD;
                         &#xD;
                         // Adăugăm locul de muncă în array-ul JSON&#xD;
                         workplacesArray.put(workplace);&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
             // 4. Dacă nu am găsit nicio locație, adăugăm toate sediile disponibile&#xD;
             if (workplacesArray.length() == 0) {&#xD;
                 String allSediiQuery = &quot;SELECT s.*, 'sediu' as type FROM sedii s &quot; +&#xD;
                                      &quot;WHERE s.longitudine IS NOT NULL AND s.latitudine IS NOT NULL &quot; +&#xD;
                                      &quot;ORDER BY s.tip_sediu, s.nume_sediu&quot;;&#xD;
                 &#xD;
                 try (PreparedStatement allSediiStatement = connection.prepareStatement(allSediiQuery)) {&#xD;
                     try (ResultSet rs = allSediiStatement.executeQuery()) {&#xD;
                         while (rs.next()) {&#xD;
                             JSONObject workplace = new JSONObject();&#xD;
                             &#xD;
                             // Adăugăm informațiile despre sediu&#xD;
                             workplace.put(&quot;type&quot;, &quot;sediu&quot;);&#xD;
                             workplace.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                             workplace.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;));&#xD;
                             workplace.put(&quot;tip_sediu&quot;, rs.getString(&quot;tip_sediu&quot;));&#xD;
                             workplace.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                             workplace.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                             workplace.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                             workplace.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                             workplace.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                             workplace.put(&quot;telefon&quot;, rs.getString(&quot;telefon&quot;));&#xD;
                             workplace.put(&quot;email&quot;, rs.getString(&quot;email&quot;));&#xD;
                             workplace.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                             workplace.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                             &#xD;
                             // Adăugăm locul de muncă în array-ul JSON&#xD;
                             workplacesArray.put(workplace);&#xD;
                         }&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
             &#xD;
         } catch (SQLException e) {&#xD;
             JSONObject error = new JSONObject();&#xD;
             error.put(&quot;error&quot;, &quot;Eroare la baza de date: &quot; + e.getMessage());&#xD;
             out.print(error.toString());&#xD;
             e.printStackTrace();&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
         // Trimitem array-ul JSON către client&#xD;
         out.print(workplacesArray.toString());&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         JSONObject error = new JSONObject();&#xD;
         error.put(&quot;error&quot;, &quot;Eroare generală: &quot; + e.getMessage());&#xD;
         out.print(error.toString());&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Qq8EVdEfCS7cth2SLu0w" name="doPost" specification="_VvDEoUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Qq8UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Qq8kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doGet(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvCdkkVdEfCS7cth2SLu0w" name="GetUserWorkplaceServlet" method="_V_Qq60VdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VvCdk0VdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VvCdlEVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VvCdlUVdEfCS7cth2SLu0w" type="_VvCdkUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvCdlkVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_Qq7UVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvCdl0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvDEoEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvDEoUVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_Qq8EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvDEokVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvDEo0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvDEpUVdEfCS7cth2SLu0w" name="GetVacationDetailsServlet">
        <generalization xmi:id="_VvDrsEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Qq80VdEfCS7cth2SLu0w" name="doGet" specification="_VvDEpkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Qq9EVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_Qq9UVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     &#xD;
     int userType = Integer.parseInt(request.getParameter(&quot;userType&quot;));&#xD;
     int userId = Integer.parseInt(request.getParameter(&quot;userId&quot;));&#xD;
     int userDep = Integer.parseInt(request.getParameter(&quot;userDep&quot;));&#xD;
     String deptId = request.getParameter(&quot;deptId&quot;);&#xD;
     String empId = request.getParameter(&quot;empId&quot;);&#xD;
     String statusId = request.getParameter(&quot;statusId&quot;);&#xD;
     &#xD;
     List&lt;Map&lt;String, Object>> vacations = new ArrayList&lt;>();&#xD;
     &#xD;
     try (Connection conn = DriverManager.getConnection(&#xD;
                 &quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {&#xD;
         &#xD;
         StringBuilder queryBuilder = new StringBuilder(&#xD;
             &quot;SELECT c.id, c.start_c, c.end_c, c.motiv, c.status, &quot; +&#xD;
             &quot;CONCAT('Str.', l.strada, ', loc. ', l.oras, ', jud. ', l.judet, ', ', l.tara) as address, &quot; +&#xD;
             &quot;u.nume, u.prenume, d.nume_dep as departament, u.culoare as color, &quot; +&#xD;
             &quot;s.nume_status as statusText &quot; +&#xD;
             &quot;FROM concedii c &quot; +&#xD;
             &quot;JOIN useri u ON u.id = c.id_ang &quot; +&#xD;
             &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
             &quot;JOIN statusuri s ON c.status = s.status &quot; +&#xD;
             &quot;LEFT JOIN locatii_concedii l ON c.id = l.id_concediu &quot; +&#xD;
             &quot;WHERE 1=1&quot;&#xD;
         );&#xD;
         &#xD;
         List&lt;Object> params = new ArrayList&lt;>();&#xD;
         &#xD;
         // Filter by status if provided&#xD;
         if (statusId != null &amp;&amp; !statusId.isEmpty()) {&#xD;
             queryBuilder.append(&quot; AND c.status = ?&quot;);&#xD;
             params.add(Integer.parseInt(statusId));&#xD;
         }&#xD;
         &#xD;
         // Access control logic&#xD;
         if (empId != null &amp;&amp; !empId.isEmpty()) {&#xD;
             // Specific employee selected&#xD;
             queryBuilder.append(&quot; AND u.id = ?&quot;);&#xD;
             params.add(Integer.parseInt(empId));&#xD;
         } else if (deptId != null &amp;&amp; !deptId.isEmpty()) {&#xD;
             // Specific department selected&#xD;
             queryBuilder.append(&quot; AND u.id_dep = ?&quot;);&#xD;
             params.add(Integer.parseInt(deptId));&#xD;
         } else {&#xD;
             // Default behavior based on user type&#xD;
             if (userType == 3) { // Sef - only their department&#xD;
                 queryBuilder.append(&quot; AND u.id_dep = ?&quot;);&#xD;
                 params.add(userDep);&#xD;
             } else if (userType == 0 || (userType >= 12 &amp;&amp; userType &lt;= 19)) { &#xD;
                 // Director - all departments (no additional filter)&#xD;
             } else { &#xD;
                 // Regular users - only their own vacations&#xD;
                 queryBuilder.append(&quot; AND u.id = ?&quot;);&#xD;
                 params.add(userId);&#xD;
             }&#xD;
         }&#xD;
         &#xD;
         PreparedStatement stmt = conn.prepareStatement(queryBuilder.toString());&#xD;
         for (int i = 0; i &lt; params.size(); i++) {&#xD;
             stmt.setObject(i + 1, params.get(i));&#xD;
         }&#xD;
         &#xD;
         ResultSet rs = stmt.executeQuery();&#xD;
         &#xD;
         while (rs.next()) {&#xD;
             Map&lt;String, Object> vacation = new HashMap&lt;>();&#xD;
             vacation.put(&quot;id&quot;, rs.getInt(&quot;id&quot;));&#xD;
             vacation.put(&quot;start_c&quot;, rs.getDate(&quot;start_c&quot;).toString());&#xD;
             vacation.put(&quot;end_c&quot;, rs.getDate(&quot;end_c&quot;).toString());&#xD;
             vacation.put(&quot;motiv&quot;, rs.getString(&quot;motiv&quot;));&#xD;
             vacation.put(&quot;address&quot;, rs.getString(&quot;address&quot;));&#xD;
             vacation.put(&quot;nume&quot;, rs.getString(&quot;nume&quot;));&#xD;
             vacation.put(&quot;prenume&quot;, rs.getString(&quot;prenume&quot;));&#xD;
             vacation.put(&quot;departament&quot;, rs.getString(&quot;departament&quot;));&#xD;
             vacation.put(&quot;color&quot;, rs.getString(&quot;color&quot;));&#xD;
             vacation.put(&quot;status&quot;, rs.getInt(&quot;status&quot;));&#xD;
             vacation.put(&quot;statusText&quot;, rs.getString(&quot;statusText&quot;));&#xD;
             vacations.add(vacation);&#xD;
         }&#xD;
         &#xD;
     } catch (SQLException e) {&#xD;
         e.printStackTrace();&#xD;
         response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     response.getWriter().write(new JSONArray(vacations).toString());&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvDEpkVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_Qq80VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvDEp0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvDEqEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvDrsUVdEfCS7cth2SLu0w" name="LeaveGetAddress">
        <generalization xmi:id="_VvE50EVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-hrFUVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-hrFkVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_Qq9kVdEfCS7cth2SLu0w" name="LeaveGetAddress" specification="_VvDrskVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_Qq90VdEfCS7cth2SLu0w" type="_VvDrsUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_RR8EVdEfCS7cth2SLu0w" name="doGet" specification="_VvDrtkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_RR8UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_RR8kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
&#xD;
     PrintWriter out = response.getWriter();&#xD;
     Connection connection = null;&#xD;
     PreparedStatement preparedStatement = null;&#xD;
     ResultSet resultSet = null;&#xD;
     String id = request.getParameter(&quot;id&quot;);&#xD;
&#xD;
     try {&#xD;
         // Conectare la baza de date&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
&#xD;
         // Interogare pentru a obține localitățile unice din tabelul locatii_useri&#xD;
         //String query = &quot;SELECT DISTINCT oras FROM locatii_concedii&quot;;&#xD;
         String query = &quot;SELECT DISTINCT l.oras, l.judet FROM locatii_useri l &quot; +&#xD;
         		&quot;join useri u on u.id=l.id_user &quot; +&#xD;
         		&quot;where u.id_dep = &quot; + id + &quot; &quot; + &#xD;
         		&quot;ORDER BY l.oras;&quot;;&#xD;
         preparedStatement = connection.prepareStatement(query);&#xD;
         resultSet = preparedStatement.executeQuery();&#xD;
&#xD;
         ArrayList&lt;String> locations = new ArrayList&lt;>();&#xD;
         while (resultSet.next()) {&#xD;
             //locations.add(resultSet.getString(&quot;oras&quot;));&#xD;
         	String oras = resultSet.getString(&quot;oras&quot;);&#xD;
             String judet = resultSet.getString(&quot;judet&quot;);&#xD;
             locations.add(oras + &quot;, &quot; + judet);&#xD;
         }&#xD;
&#xD;
         // Conversie a listei în JSON și trimitere ca răspuns&#xD;
         JSONArray jsonArray = new JSONArray(locations);&#xD;
         out.print(jsonArray.toString());&#xD;
         out.flush();&#xD;
     } catch (Exception e) {&#xD;
         e.printStackTrace();&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;Eroare la incarcarea localitatilor\&quot;}&quot;);&#xD;
     } finally {&#xD;
         try {&#xD;
             if (resultSet != null) resultSet.close();&#xD;
             if (preparedStatement != null) preparedStatement.close();&#xD;
             if (connection != null) connection.close();&#xD;
         } catch (Exception e) {&#xD;
             e.printStackTrace();&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_RR80VdEfCS7cth2SLu0w" name="doPost" specification="_VvESwkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_RR9EVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_RR9UVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doGet(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvDrskVdEfCS7cth2SLu0w" name="LeaveGetAddress" method="_V_Qq9kVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VvDrs0VdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VvDrtEVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VvDrtUVdEfCS7cth2SLu0w" type="_VvDrsUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvDrtkVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_RR8EVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvDrt0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvDruEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvESwkVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_RR80VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvESw0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvESxEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvE50UVdEfCS7cth2SLu0w" name="RandomColorGenerator">
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_RR9kVdEfCS7cth2SLu0w" name="generate" specification="_VvE50kVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_RR90VdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_RR-EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>// Creeaza un obiect Random cu un seed combinat
     Random random = new Random(System.currentTimeMillis() + userId);
     // Genereaza o culoare sub forma de string hexazecimal
     String color = String.format(&quot;#%06x&quot;, random.nextInt(0xffffff + 1));
     return color;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvE50kVdEfCS7cth2SLu0w" name="generate" isStatic="true" method="_V_RR9kVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvE500VdEfCS7cth2SLu0w" name="userId">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvE51EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvFg4EVdEfCS7cth2SLu0w" name="RandomNumberGenerator">
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_RR-UVdEfCS7cth2SLu0w" name="generate" specification="_VvFg4UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_RR-kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>Random random = new Random();
     int min = 10000000; // Lowest 8-digit number
     int max = 99999999; // Highest 8-digit number
     int randomNumber = random.nextInt(max - min + 1) + min;
     return randomNumber;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvFg4UVdEfCS7cth2SLu0w" name="generate" isStatic="true" method="_V_RR-UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvFg4kVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvFg40VdEfCS7cth2SLu0w" name="SaveLocationServlet">
        <ownedComment xmi:id="_V_lbDEVdEfCS7cth2SLu0w">
          <body>Servlet implementation class SaveLocationServlet</body>
        </ownedComment>
        <generalization xmi:id="_VvGH9kVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-hrF0VdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-hrGEVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_RR-0VdEfCS7cth2SLu0w" name="SaveLocationServlet" specification="_VvFg5EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_RR_EVdEfCS7cth2SLu0w" type="_VvFg40VdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();
     // TODO Auto-generated constructor stub
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_RR_UVdEfCS7cth2SLu0w" name="doGet" specification="_VvGH8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_RR_kVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_RR_0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// TODO Auto-generated method stub
		response.getWriter().append(&quot;Served at: &quot;).append(request.getContextPath());
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_RSAEVdEfCS7cth2SLu0w" name="doPost" specification="_VvGH80VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_RSAUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_RSAkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>// Citește JSON-ul
     JSONObject jsonObject = new JSONObject(request.getReader().lines()
         .collect(Collectors.joining()));
     
     // Salvează în baza de date
     try (Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test&quot;, &quot;root&quot;, &quot;student&quot;)) {
         String sql = &quot;INSERT INTO locatii (latitudine, longitudine, descriere) VALUES (?, ?, ?)&quot;;
         try (PreparedStatement stmt = conn.prepareStatement(sql)) {
             stmt.setDouble(1, jsonObject.getDouble(&quot;lat&quot;));
             stmt.setDouble(2, jsonObject.getDouble(&quot;long&quot;));
             stmt.setString(3, jsonObject.getString(&quot;descriere&quot;));
             stmt.executeUpdate();
         }
     } catch (SQLException e) {
         e.printStackTrace();
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvFg5EVdEfCS7cth2SLu0w" name="SaveLocationServlet" method="_V_RR-0VdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VvFg5UVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VvFg5kVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VvFg50VdEfCS7cth2SLu0w" type="_VvFg40VdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvGH8EVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_RR_UVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvGH8UVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvGH8kVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvGH80VdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_RSAEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvGH9EVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvGH9UVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvGH90VdEfCS7cth2SLu0w" name="ServletUpdateAddress">
        <generalization xmi:id="_VvGvBkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_R5AEVdEfCS7cth2SLu0w" name="doPost" specification="_VvGvAUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_R5AUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_R5AkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>System.out.println(&quot;A primit cererea POST&quot;);&#xD;
&#xD;
     // Citește corpul cererii o singură dată&#xD;
     StringBuilder sb = new StringBuilder();&#xD;
     try (BufferedReader reader = request.getReader()) {&#xD;
         String line;&#xD;
         while ((line = reader.readLine()) != null) {&#xD;
             sb.append(line);&#xD;
         }&#xD;
     }&#xD;
     String rawJson = sb.toString();&#xD;
     System.out.println(&quot;Raw JSON received: &quot; + rawJson);&#xD;
&#xD;
     JSONObject json;&#xD;
     try {&#xD;
         json = new JSONObject(rawJson);&#xD;
         System.out.println(&quot;JSON parsare reușită: &quot; + json);&#xD;
     } catch (Exception e) {&#xD;
         System.err.println(&quot;Eroare la parsarea JSON: &quot; + e.getMessage());&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         response.getWriter().write(&quot;Eroare: Datele JSON sunt invalide.&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     // Extrage parametrii din JSON&#xD;
     String userId = json.optString(&quot;userId&quot;, &quot;&quot;);&#xD;
     String address = json.optString(&quot;address&quot;, &quot;&quot;);&#xD;
&#xD;
     if (userId.isEmpty() || address.isEmpty()) {&#xD;
         System.err.println(&quot;Parametrii lipsesc sau sunt invalizi: userId=&quot; + userId + &quot;, address=&quot; + address);&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         response.getWriter().write(&quot;Eroare: Parametrii lipsesc sau sunt invalizi.&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     // Conectare la baza de date și actualizare adresă&#xD;
     try (Connection conn = DriverManager.getConnection(&#xD;
             &quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
          PreparedStatement stmt = conn.prepareStatement(&quot;UPDATE useri SET adresa = ? WHERE id = ?&quot;)) {&#xD;
&#xD;
         stmt.setString(1, address);&#xD;
         stmt.setString(2, userId);&#xD;
         int rowsUpdated = stmt.executeUpdate();&#xD;
&#xD;
         if (rowsUpdated > 0) {&#xD;
             System.out.println(&quot;Adresa actualizată cu succes pentru utilizatorul cu ID-ul: &quot; + userId);&#xD;
             response.setStatus(HttpServletResponse.SC_OK);&#xD;
             response.getWriter().write(&quot;Adresa a fost actualizată cu succes.&quot;);&#xD;
         } else {&#xD;
             System.err.println(&quot;Utilizatorul cu ID-ul &quot; + userId + &quot; nu a fost găsit.&quot;);&#xD;
             response.setStatus(HttpServletResponse.SC_NOT_FOUND);&#xD;
             response.getWriter().write(&quot;Utilizatorul specificat nu a fost găsit.&quot;);&#xD;
         }&#xD;
     } catch (Exception e) {&#xD;
         System.err.println(&quot;Eroare la actualizarea adresei în baza de date: &quot; + e.getMessage());&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         response.getWriter().write(&quot;Eroare la actualizarea adresei.&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvGvAUVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_R5AEVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvGvAkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvGvA0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvHWE0VdEfCS7cth2SLu0w" name="ServletUpdateAddressDep">
        <generalization xmi:id="_VvIkMEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_R5A0VdEfCS7cth2SLu0w" name="doPost" specification="_VvHWFEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_R5BEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_R5BUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>System.out.println(&quot;A primit cererea POSTbraaaaaa&quot;);&#xD;
&#xD;
     // Citește corpul cererii o singură dată&#xD;
     StringBuilder sb = new StringBuilder();&#xD;
     try (BufferedReader reader = request.getReader()) {&#xD;
         String line;&#xD;
         while ((line = reader.readLine()) != null) {&#xD;
             sb.append(line);&#xD;
         }&#xD;
     }&#xD;
     String rawJson = sb.toString();&#xD;
     System.out.println(&quot;Raw JSON received: &quot; + rawJson);&#xD;
&#xD;
     JSONObject json;&#xD;
     try {&#xD;
         json = new JSONObject(rawJson);&#xD;
         System.out.println(&quot;JSON parsare reușită: &quot; + json);&#xD;
     } catch (Exception e) {&#xD;
         System.err.println(&quot;Eroare la parsarea JSON: &quot; + e.getMessage());&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         response.getWriter().write(&quot;Eroare: Datele JSON sunt invalide.&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     // Extrage parametrii din JSON&#xD;
     int idDep = json.optInt(&quot;idDep&quot;);&#xD;
     String strada = json.optString(&quot;strada&quot;, &quot;&quot;);&#xD;
     double latitudine = json.optDouble(&quot;latitudine&quot;);&#xD;
     double longitudine = json.optDouble(&quot;longitudine&quot;);&#xD;
     String cod = json.optString(&quot;cod&quot;, &quot;&quot;);&#xD;
     String oras = json.optString(&quot;oras&quot;, &quot;&quot;);&#xD;
     String judet = json.optString(&quot;judet&quot;, &quot;&quot;);&#xD;
     String tara = json.optString(&quot;tara&quot;, &quot;&quot;);&#xD;
&#xD;
     if (idDep == 0) {&#xD;
         System.err.println(&quot;Parametrul idDep lipsește sau este invalid: idDep=&quot; + idDep);&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         response.getWriter().write(&quot;Eroare: Parametrul idDep lipsește sau este invalid.&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     try (Connection conn = DriverManager.getConnection(&#xD;
             &quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {&#xD;
         &#xD;
         // Verifică dacă există deja o înregistrare pentru acest id_dep&#xD;
         boolean exists = false;&#xD;
         try (PreparedStatement checkStmt = conn.prepareStatement(&#xD;
                 &quot;SELECT 1 FROM locatii_departamente WHERE id_dep = ?&quot;)) {&#xD;
             checkStmt.setInt(1, idDep);&#xD;
             try (ResultSet rs = checkStmt.executeQuery()) {&#xD;
                 exists = rs.next();&#xD;
             }&#xD;
         }&#xD;
&#xD;
         PreparedStatement stmt;&#xD;
         if (exists) {&#xD;
             // Update existing record&#xD;
             stmt = conn.prepareStatement(&#xD;
                 &quot;UPDATE locatii_departamente SET strada = ?, longitudine = ?, latitudine = ?, &quot; +&#xD;
                 &quot;cod = ?, oras = ?, judet = ?, tara = ? WHERE id_dep = ?&quot;);&#xD;
             &#xD;
             stmt.setString(1, strada);&#xD;
             stmt.setDouble(2, longitudine);&#xD;
             stmt.setDouble(3, latitudine);&#xD;
             stmt.setString(4, cod);&#xD;
             stmt.setString(5, oras);&#xD;
             stmt.setString(6, judet);&#xD;
             stmt.setString(7, tara);&#xD;
             stmt.setInt(8, idDep);&#xD;
         } else {&#xD;
             // Insert new record&#xD;
             stmt = conn.prepareStatement(&#xD;
                 &quot;INSERT INTO locatii_departamente (id_dep, strada, longitudine, latitudine, &quot; +&#xD;
                 &quot;cod, oras, judet, tara) VALUES (?, ?, ?, ?, ?, ?, ?, ?)&quot;);&#xD;
             &#xD;
             stmt.setInt(1, idDep);&#xD;
             stmt.setString(2, strada);&#xD;
             stmt.setDouble(3, longitudine);&#xD;
             stmt.setDouble(4, latitudine);&#xD;
             stmt.setString(5, cod);&#xD;
             stmt.setString(6, oras);&#xD;
             stmt.setString(7, judet);&#xD;
             stmt.setString(8, tara);&#xD;
         }&#xD;
&#xD;
         int rowsAffected = stmt.executeUpdate();&#xD;
         stmt.close();&#xD;
&#xD;
         if (rowsAffected > 0) {&#xD;
             System.out.println(&quot;Operațiune reușită pentru departamentul cu ID-ul: &quot; + idDep);&#xD;
             response.setStatus(HttpServletResponse.SC_OK);&#xD;
             response.getWriter().write(&quot;Operațiunea a fost efectuată cu succes.&quot;);&#xD;
         } else {&#xD;
             System.err.println(&quot;Nu s-a putut efectua operațiunea pentru departamentul cu ID-ul &quot; + idDep);&#xD;
             response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
             response.getWriter().write(&quot;Nu s-a putut efectua operațiunea.&quot;);&#xD;
         }&#xD;
&#xD;
     } catch (Exception e) {&#xD;
         System.err.println(&quot;Eroare la operațiunea în baza de date: &quot; + e.getMessage());&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         response.getWriter().write(&quot;Eroare la operațiunea în baza de date.&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvHWFEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_R5A0VdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvHWFUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvHWFkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvIkMUVdEfCS7cth2SLu0w" name="getUserHomeServlet">
        <ownedComment xmi:id="_V_lbDkVdEfCS7cth2SLu0w">
          <body>Servlet pentru preluarea informațiilor despre adresa de acasă a unui utilizator</body>
        </ownedComment>
        <generalization xmi:id="_VvJLR0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-iSIEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-iSIUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_R5BkVdEfCS7cth2SLu0w" name="getUserHomeServlet" specification="_VvIkMkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_R5B0VdEfCS7cth2SLu0w" type="_VvIkMUVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_R5CEVdEfCS7cth2SLu0w" name="doGet" specification="_VvJLQUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_R5CUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_R5CkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
     PrintWriter out = response.getWriter();&#xD;
     &#xD;
     int userId = -1;&#xD;
     try {&#xD;
         userId = Integer.parseInt(request.getParameter(&quot;id&quot;));&#xD;
     } catch (NumberFormatException e) {&#xD;
         // Dacă parametrul id lipsește sau nu este un număr, trimitem eroare&#xD;
         JSONObject error = new JSONObject();&#xD;
         error.put(&quot;error&quot;, &quot;ID utilizator invalid sau lipsă.&quot;);&#xD;
         out.print(error.toString());&#xD;
         return;&#xD;
     }&#xD;
     &#xD;
     try {&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;).newInstance();&#xD;
         &#xD;
         try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {&#xD;
             &#xD;
             // Query pentru a extrage adresa de acasă a utilizatorului din tabela locatii_useri&#xD;
             String query = &quot;SELECT lu.strada, lu.longitudine, lu.latitudine, lu.cod, lu.oras, &quot; +&#xD;
                            &quot;lu.judet, lu.tara, lu.id_sediu, s.nume_sediu &quot; +&#xD;
                            &quot;FROM locatii_useri lu &quot; +&#xD;
                            &quot;LEFT JOIN sedii s ON lu.id_sediu = s.id_sediu &quot; +&#xD;
                            &quot;WHERE lu.id_user = ? AND lu.longitudine IS NOT NULL AND lu.latitudine IS NOT NULL&quot;;&#xD;
             &#xD;
             try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {&#xD;
                 preparedStatement.setInt(1, userId);&#xD;
                 &#xD;
                 try (ResultSet rs = preparedStatement.executeQuery()) {&#xD;
                     JSONObject homeAddress = new JSONObject();&#xD;
                     &#xD;
                     if (rs.next()) {&#xD;
                         // Adăugăm informațiile despre adresa de acasă&#xD;
                         homeAddress.put(&quot;strada&quot;, rs.getString(&quot;strada&quot;));&#xD;
                         homeAddress.put(&quot;cod&quot;, rs.getString(&quot;cod&quot;));&#xD;
                         homeAddress.put(&quot;oras&quot;, rs.getString(&quot;oras&quot;));&#xD;
                         homeAddress.put(&quot;judet&quot;, rs.getString(&quot;judet&quot;));&#xD;
                         homeAddress.put(&quot;tara&quot;, rs.getString(&quot;tara&quot;));&#xD;
                         homeAddress.put(&quot;longitudine&quot;, rs.getDouble(&quot;longitudine&quot;));&#xD;
                         homeAddress.put(&quot;latitudine&quot;, rs.getDouble(&quot;latitudine&quot;));&#xD;
                         &#xD;
                         // Adăugăm informații despre sediul asociat, dacă există&#xD;
                         if (rs.getObject(&quot;id_sediu&quot;) != null) {&#xD;
                             homeAddress.put(&quot;id_sediu&quot;, rs.getInt(&quot;id_sediu&quot;));&#xD;
                             homeAddress.put(&quot;nume_sediu&quot;, rs.getString(&quot;nume_sediu&quot;));&#xD;
                         }&#xD;
                         &#xD;
                         // Trimitem JSON-ul către client&#xD;
                         out.print(homeAddress.toString());&#xD;
                     } else {&#xD;
                         // În cazul în care nu găsim o adresă pentru utilizator, căutăm în departament&#xD;
                         String queryDep = &quot;SELECT d.id_dep, ld.strada, ld.longitudine, ld.latitudine, ld.cod, &quot; +&#xD;
                                         &quot;ld.oras, ld.judet, ld.tara &quot; +&#xD;
                                         &quot;FROM useri u &quot; +&#xD;
                                         &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +&#xD;
                                         &quot;JOIN locatii_departamente ld ON d.id_dep = ld.id_dep &quot; +&#xD;
                                         &quot;WHERE u.id = ? AND ld.longitudine IS NOT NULL AND ld.latitudine IS NOT NULL&quot;;&#xD;
                         &#xD;
                         try (PreparedStatement depStatement = connection.prepareStatement(queryDep)) {&#xD;
                             depStatement.setInt(1, userId);&#xD;
                             &#xD;
                             try (ResultSet depRs = depStatement.executeQuery()) {&#xD;
                                 if (depRs.next()) {&#xD;
                                     // Adăugăm informațiile despre adresa departamentului ca backup&#xD;
                                     homeAddress.put(&quot;strada&quot;, depRs.getString(&quot;strada&quot;));&#xD;
                                     homeAddress.put(&quot;cod&quot;, depRs.getString(&quot;cod&quot;));&#xD;
                                     homeAddress.put(&quot;oras&quot;, depRs.getString(&quot;oras&quot;));&#xD;
                                     homeAddress.put(&quot;judet&quot;, depRs.getString(&quot;judet&quot;));&#xD;
                                     homeAddress.put(&quot;tara&quot;, depRs.getString(&quot;tara&quot;));&#xD;
                                     homeAddress.put(&quot;longitudine&quot;, depRs.getDouble(&quot;longitudine&quot;));&#xD;
                                     homeAddress.put(&quot;latitudine&quot;, depRs.getDouble(&quot;latitudine&quot;));&#xD;
                                     homeAddress.put(&quot;info&quot;, &quot;Adresă departament (nu s-a găsit adresa personală)&quot;);&#xD;
                                     &#xD;
                                     // Trimitem JSON-ul către client&#xD;
                                     out.print(homeAddress.toString());&#xD;
                                 } else {&#xD;
                                     // În cazul în care nu găsim nicio adresă, trimitem un obiect gol&#xD;
                                     homeAddress.put(&quot;error&quot;, &quot;Nu s-a găsit nicio adresă pentru utilizator.&quot;);&#xD;
                                     out.print(homeAddress.toString());&#xD;
                                 }&#xD;
                             }&#xD;
                         }&#xD;
                     }&#xD;
                 }&#xD;
             }&#xD;
         } catch (SQLException e) {&#xD;
             JSONObject error = new JSONObject();&#xD;
             error.put(&quot;error&quot;, &quot;Eroare la baza de date: &quot; + e.getMessage());&#xD;
             out.print(error.toString());&#xD;
             e.printStackTrace();&#xD;
             return;&#xD;
         }&#xD;
         &#xD;
     } catch (Exception e) {&#xD;
         JSONObject error = new JSONObject();&#xD;
         error.put(&quot;error&quot;, &quot;Eroare generală: &quot; + e.getMessage());&#xD;
         out.print(error.toString());&#xD;
         e.printStackTrace();&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_R5C0VdEfCS7cth2SLu0w" name="doPost" specification="_VvJLREVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_R5DEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_R5DUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doGet(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvIkMkVdEfCS7cth2SLu0w" name="getUserHomeServlet" method="_V_R5BkVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VvIkM0VdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VvIkNEVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedComment xmi:id="_V_mCEEVdEfCS7cth2SLu0w">
            <body>Constructor</body>
          </ownedComment>
          <ownedParameter xmi:id="_VvJLQEVdEfCS7cth2SLu0w" type="_VvIkMUVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvJLQUVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_R5CEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_mCEUVdEfCS7cth2SLu0w">
            <body>Metoda GET - returnează datele despre adresa de acasă a utilizatorului în format JSON</body>
          </ownedComment>
          <ownedParameter xmi:id="_VvJLQkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvJLQ0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvJLREVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_R5C0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedComment xmi:id="_V_mCEkVdEfCS7cth2SLu0w">
            <body>Metoda POST - redirecționează către metoda GET</body>
          </ownedComment>
          <ownedParameter xmi:id="_VvJLRUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvJLRkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvJLSEVdEfCS7cth2SLu0w" name="locactacs">
        <generalization xmi:id="_VvKZZkVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-iSIkVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-iSI0VdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_R5DkVdEfCS7cth2SLu0w" name="locactacs" specification="_VvJyUEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_R5D0VdEfCS7cth2SLu0w" type="_VvJLSEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_R5EEVdEfCS7cth2SLu0w" name="doGet" specification="_VvJyVEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_R5EUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_R5EkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
&#xD;
     PrintWriter out = response.getWriter();&#xD;
     Connection connection = null;&#xD;
     PreparedStatement preparedStatement = null;&#xD;
     ResultSet resultSet = null;&#xD;
&#xD;
     try {&#xD;
         // 1. Încărc driverul și creez conexiunea&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         connection = DriverManager.getConnection(&#xD;
             &quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &#xD;
             &quot;root&quot;, &#xD;
             &quot;student&quot;&#xD;
         );&#xD;
&#xD;
         // 2. Scriu interogarea&#xD;
         String query = &quot;SELECT l.id_locatie as id, l.nume, l.longitudine, l.latitudine &quot; +&#xD;
                        &quot;FROM locatii_atractii l;&quot;;&#xD;
&#xD;
         preparedStatement = connection.prepareStatement(query);&#xD;
         resultSet = preparedStatement.executeQuery();&#xD;
&#xD;
         // 3. Construiesc un JSONArray cu informații despre departamente&#xD;
         JSONArray locatii = new JSONArray();&#xD;
&#xD;
         while (resultSet.next()) {&#xD;
             // Creez un obiect JSON pentru fiecare rând&#xD;
             JSONObject locatie = new JSONObject();&#xD;
             locatie.put(&quot;id&quot;, resultSet.getString(&quot;id&quot;));&#xD;
             locatie.put(&quot;nume&quot;, resultSet.getString(&quot;nume&quot;));&#xD;
             locatie.put(&quot;longitude&quot;, resultSet.getDouble(&quot;longitudine&quot;));&#xD;
             locatie.put(&quot;latitude&quot;, resultSet.getDouble(&quot;latitudine&quot;));&#xD;
&#xD;
             // Adaug obiectul în JSONArray&#xD;
             locatii.put(locatie);&#xD;
         }&#xD;
&#xD;
         // 4. Trimit răspunsul JSON&#xD;
         out.print(locatii.toString());&#xD;
         out.flush();&#xD;
&#xD;
     } catch (Exception e) {&#xD;
         // În caz de eroare, loghez și returnez un mesaj&#xD;
         e.printStackTrace();&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;Eroare la încărcarea atractiilor turistice\&quot;}&quot;);&#xD;
     } finally {&#xD;
         // 5. Închid resursele&#xD;
         try {&#xD;
             if (resultSet != null) {&#xD;
                 resultSet.close();&#xD;
             }&#xD;
             if (preparedStatement != null) {&#xD;
                 preparedStatement.close();&#xD;
             }&#xD;
             if (connection != null) {&#xD;
                 connection.close();&#xD;
             }&#xD;
         } catch (Exception e) {&#xD;
             e.printStackTrace();&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_R5E0VdEfCS7cth2SLu0w" name="doPost" specification="_VvKZYEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_R5FEVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_R5FUVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doGet(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvJyUEVdEfCS7cth2SLu0w" name="locactacs" method="_V_R5DkVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VvJyUUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VvJyUkVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VvJyU0VdEfCS7cth2SLu0w" type="_VvJLSEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvJyVEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_R5EEVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvJyVUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvJyVkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvKZYEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_R5E0VdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvKZYUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvKZYkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvLAcEVdEfCS7cth2SLu0w" name="locactacss">
        <generalization xmi:id="_VvMOk0VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-iSJEVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-iSJUVdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_SgEEVdEfCS7cth2SLu0w" name="locactacss" specification="_VvLAcUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_SgEUVdEfCS7cth2SLu0w" type="_VvLAcEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_SgEkVdEfCS7cth2SLu0w" name="doGet" specification="_VvLAdUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_SgE0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_SgFEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
&#xD;
     PrintWriter out = response.getWriter();&#xD;
     Connection connection = null;&#xD;
     PreparedStatement preparedStatement = null;&#xD;
     ResultSet resultSet = null;&#xD;
     String id = request.getParameter(&quot;id&quot;);&#xD;
&#xD;
     try {&#xD;
         // 1. Încărc driverul și creez conexiunea&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         connection = DriverManager.getConnection(&#xD;
             &quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &#xD;
             &quot;root&quot;, &#xD;
             &quot;student&quot;&#xD;
         );&#xD;
&#xD;
         // 2. Scriu interogarea&#xD;
         &#xD;
         String query = &quot;SELECT u.id, concat(u.nume, ' ', u.prenume) as nume, l.longitudine, l.latitudine &quot; +&#xD;
                        &quot;FROM useri u &quot; +&#xD;
                        &quot;JOIN locatii_useri l ON u.id = l.id_user&quot;&#xD;
                        + &quot; where u.id = &quot; + id;&#xD;
         &#xD;
         System.out.println(query);&#xD;
         &#xD;
         preparedStatement = connection.prepareStatement(query);&#xD;
         resultSet = preparedStatement.executeQuery();&#xD;
&#xD;
         // 3. Construiesc un JSONArray cu informații despre departamente&#xD;
         JSONArray departments = new JSONArray();&#xD;
&#xD;
         while (resultSet.next()) {&#xD;
             // Creez un obiect JSON pentru fiecare rând&#xD;
             JSONObject department = new JSONObject();&#xD;
             department.put(&quot;id&quot;, resultSet.getInt(&quot;id&quot;));&#xD;
             department.put(&quot;nume&quot;, resultSet.getString(&quot;nume&quot;));&#xD;
             department.put(&quot;longitude&quot;, resultSet.getDouble(&quot;longitudine&quot;));&#xD;
             department.put(&quot;latitude&quot;, resultSet.getDouble(&quot;latitudine&quot;));&#xD;
&#xD;
             // Adaug obiectul în JSONArray&#xD;
             departments.put(department);&#xD;
         }&#xD;
&#xD;
         // 4. Trimit răspunsul JSON&#xD;
         out.print(departments.toString());&#xD;
         out.flush();&#xD;
&#xD;
     } catch (Exception e) {&#xD;
         // În caz de eroare, loghez și returnez un mesaj&#xD;
         e.printStackTrace();&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;Eroare la încărcarea departamentelor\&quot;}&quot;);&#xD;
     } finally {&#xD;
         // 5. Închid resursele&#xD;
         try {&#xD;
             if (resultSet != null) {&#xD;
                 resultSet.close();&#xD;
             }&#xD;
             if (preparedStatement != null) {&#xD;
                 preparedStatement.close();&#xD;
             }&#xD;
             if (connection != null) {&#xD;
                 connection.close();&#xD;
             }&#xD;
         } catch (Exception e) {&#xD;
             e.printStackTrace();&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_SgFUVdEfCS7cth2SLu0w" name="doPost" specification="_VvLnhEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_SgFkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_SgF0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doGet(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvLAcUVdEfCS7cth2SLu0w" name="locactacss" method="_V_SgEEVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VvLAckVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VvLAc0VdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VvLAdEVdEfCS7cth2SLu0w" type="_VvLAcEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvLAdUVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_SgEkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvLAdkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvLngEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvLnhEVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_SgFUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvLnhUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvLnhkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvMOlEVdEfCS7cth2SLu0w" name="locactdep">
        <generalization xmi:id="_VvNcuEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedAttribute xmi:id="_V-iSJkVdEfCS7cth2SLu0w" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_V-iSJ0VdEfCS7cth2SLu0w" value="1L"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_SgGEVdEfCS7cth2SLu0w" name="locactdep" specification="_VvM1oEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_SgGUVdEfCS7cth2SLu0w" type="_VvMOlEVdEfCS7cth2SLu0w" direction="return"/>
          <language>java</language>
          <body>super();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_SgGkVdEfCS7cth2SLu0w" name="doGet" specification="_VvM1pEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_SgG0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_SgHEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>response.setContentType(&quot;application/json&quot;);&#xD;
     response.setCharacterEncoding(&quot;UTF-8&quot;);&#xD;
&#xD;
     PrintWriter out = response.getWriter();&#xD;
     Connection connection = null;&#xD;
     PreparedStatement preparedStatement = null;&#xD;
     ResultSet resultSet = null;&#xD;
&#xD;
     try {&#xD;
         // 1. Încărc driverul și creez conexiunea&#xD;
         Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
         connection = DriverManager.getConnection(&#xD;
             &quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &#xD;
             &quot;root&quot;, &#xD;
             &quot;student&quot;&#xD;
         );&#xD;
&#xD;
         // 2. Scriu interogarea&#xD;
         String query = &quot;SELECT d.id_dep, d.nume_dep, l.longitudine, l.latitudine &quot; +&#xD;
                        &quot;FROM departament d &quot; +&#xD;
                        &quot;JOIN locatii_departamente l ON d.id_dep = l.id_dep &quot; +&#xD;
                        &quot;ORDER BY d.nume_dep&quot;;&#xD;
&#xD;
         preparedStatement = connection.prepareStatement(query);&#xD;
         resultSet = preparedStatement.executeQuery();&#xD;
&#xD;
         // 3. Construiesc un JSONArray cu informații despre departamente&#xD;
         JSONArray departments = new JSONArray();&#xD;
&#xD;
         while (resultSet.next()) {&#xD;
             // Creez un obiect JSON pentru fiecare rând&#xD;
             JSONObject department = new JSONObject();&#xD;
             department.put(&quot;id_dep&quot;, resultSet.getInt(&quot;id_dep&quot;));&#xD;
             department.put(&quot;nume_dep&quot;, resultSet.getString(&quot;nume_dep&quot;));&#xD;
             department.put(&quot;longitude&quot;, resultSet.getDouble(&quot;longitudine&quot;));&#xD;
             department.put(&quot;latitude&quot;, resultSet.getDouble(&quot;latitudine&quot;));&#xD;
&#xD;
             // Adaug obiectul în JSONArray&#xD;
             departments.put(department);&#xD;
         }&#xD;
&#xD;
         // 4. Trimit răspunsul JSON&#xD;
         out.print(departments.toString());&#xD;
         out.flush();&#xD;
&#xD;
     } catch (Exception e) {&#xD;
         // În caz de eroare, loghez și returnez un mesaj&#xD;
         e.printStackTrace();&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         out.print(&quot;{\&quot;error\&quot;: \&quot;Eroare la încărcarea departamentelor\&quot;}&quot;);&#xD;
     } finally {&#xD;
         // 5. Închid resursele&#xD;
         try {&#xD;
             if (resultSet != null) {&#xD;
                 resultSet.close();&#xD;
             }&#xD;
             if (preparedStatement != null) {&#xD;
                 preparedStatement.close();&#xD;
             }&#xD;
             if (connection != null) {&#xD;
                 connection.close();&#xD;
             }&#xD;
         } catch (Exception e) {&#xD;
             e.printStackTrace();&#xD;
         }&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_SgHUVdEfCS7cth2SLu0w" name="doPost" specification="_VvNcskVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_SgHkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_SgH0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>doGet(request, response);&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvM1oEVdEfCS7cth2SLu0w" name="locactdep" method="_V_SgGEVdEfCS7cth2SLu0w">
          <eAnnotations xmi:id="_VvM1oUVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_VvM1okVdEfCS7cth2SLu0w" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_VvM1o0VdEfCS7cth2SLu0w" type="_VvMOlEVdEfCS7cth2SLu0w" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvM1pEVdEfCS7cth2SLu0w" name="doGet" visibility="protected" method="_V_SgGkVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvM1pUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvM1pkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvNcskVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_SgHUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvNcs0VdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvNctEVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvODwEVdEfCS7cth2SLu0w" name="locatiee">
        <generalization xmi:id="_VvOq00VdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_SgIEVdEfCS7cth2SLu0w" name="doPost" specification="_VvODwUVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_SgIUVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_SgIkVdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>StringBuilder sb = new StringBuilder();&#xD;
     try (BufferedReader reader = request.getReader()) {&#xD;
         String line;&#xD;
         while ((line = reader.readLine()) != null) {&#xD;
             sb.append(line);&#xD;
         }&#xD;
     }&#xD;
     String rawJson = sb.toString();&#xD;
     System.out.println(&quot;Raw JSON received: &quot; + rawJson);&#xD;
&#xD;
     JSONObject json;&#xD;
     try {&#xD;
         json = new JSONObject(rawJson);&#xD;
         System.out.println(&quot;JSON parsare reușită: &quot; + json);&#xD;
     } catch (Exception e) {&#xD;
         System.err.println(&quot;Eroare la parsarea JSON: &quot; + e.getMessage());&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         response.getWriter().write(&quot;Eroare: Datele JSON sunt invalide.&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     // 2. Extrage parametrii așa cum îi trimite JS&#xD;
     String userIdStr = json.optString(&quot;userId&quot;, &quot;&quot;);&#xD;
     String strada    = json.optString(&quot;strada&quot;, &quot;&quot;);&#xD;
     String oras      = json.optString(&quot;oras&quot;, &quot;&quot;);&#xD;
     String judet     = json.optString(&quot;judet&quot;, &quot;&quot;);&#xD;
     String cod       = json.optString(&quot;cod&quot;, &quot;&quot;);&#xD;
     String tara      = json.optString(&quot;tara&quot;, &quot;&quot;);&#xD;
     double latitudine  = json.optDouble(&quot;latitudine&quot;);&#xD;
     double longitudine = json.optDouble(&quot;longitudine&quot;);&#xD;
&#xD;
     // 3. Validare userId&#xD;
     int idDep;&#xD;
     try {&#xD;
         idDep = Integer.parseInt(userIdStr);&#xD;
     } catch (NumberFormatException e) {&#xD;
         System.err.println(&quot;Eroare la conversia userId: &quot; + e.getMessage());&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         response.getWriter().write(&quot;Eroare: userId invalid.&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     if (idDep == 0) {&#xD;
         System.err.println(&quot;Parametrul idDep lipsește sau este invalid: idDep=&quot; + idDep);&#xD;
         response.setStatus(HttpServletResponse.SC_BAD_REQUEST);&#xD;
         response.getWriter().write(&quot;Eroare: Parametrul idDep lipsește sau este invalid.&quot;);&#xD;
         return;&#xD;
     }&#xD;
&#xD;
     // 4. Conexiune la DB&#xD;
     try (Connection conn = DriverManager.getConnection(&#xD;
             &quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {&#xD;
         &#xD;
         // Verifică dacă există deja înregistrare&#xD;
         boolean exists;&#xD;
         try (PreparedStatement checkStmt = conn.prepareStatement(&#xD;
                 &quot;SELECT 1 FROM locatii_useri WHERE id_user = ?&quot;)) {&#xD;
             checkStmt.setInt(1, idDep);&#xD;
             try (ResultSet rs = checkStmt.executeQuery()) {&#xD;
                 exists = rs.next();&#xD;
             }&#xD;
         }&#xD;
&#xD;
         // 5. Construiește query-ul (insert/update)&#xD;
         PreparedStatement stmt;&#xD;
         if (exists) {&#xD;
             stmt = conn.prepareStatement(&#xD;
                 &quot;UPDATE locatii_useri SET strada=?, longitudine=?, latitudine=?, cod=?, oras=?, judet=?, tara=? &quot; +&#xD;
                 &quot;WHERE id_user=?&quot;&#xD;
             );&#xD;
             stmt.setString(1, strada);&#xD;
             stmt.setDouble(2, longitudine);&#xD;
             stmt.setDouble(3, latitudine);&#xD;
             stmt.setString(4, cod);&#xD;
             stmt.setString(5, oras);&#xD;
             stmt.setString(6, judet);&#xD;
             stmt.setString(7, tara);&#xD;
             stmt.setInt(8, idDep);&#xD;
         } else {&#xD;
             stmt = conn.prepareStatement(&#xD;
                 &quot;INSERT INTO locatii_useri (id_user, strada, longitudine, latitudine, cod, oras, judet, tara) &quot; +&#xD;
                 &quot;VALUES (?, ?, ?, ?, ?, ?, ?, ?)&quot;&#xD;
             );&#xD;
             stmt.setInt(1, idDep);&#xD;
             stmt.setString(2, strada);&#xD;
             stmt.setDouble(3, longitudine);&#xD;
             stmt.setDouble(4, latitudine);&#xD;
             stmt.setString(5, cod);&#xD;
             stmt.setString(6, oras);&#xD;
             stmt.setString(7, judet);&#xD;
             stmt.setString(8, tara);&#xD;
         }&#xD;
&#xD;
         // 6. Execute&#xD;
         int rowsAffected = stmt.executeUpdate();&#xD;
         stmt.close();&#xD;
&#xD;
         if (rowsAffected > 0) {&#xD;
             System.out.println(&quot;Operațiune reușită pt user ID: &quot; + idDep);&#xD;
             response.setStatus(HttpServletResponse.SC_OK);&#xD;
             response.getWriter().write(&quot;Operațiunea a fost efectuată cu succes.&quot;);&#xD;
         } else {&#xD;
             System.err.println(&quot;Nu s-a putut efectua operațiunea pt user ID: &quot; + idDep);&#xD;
             response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
             response.getWriter().write(&quot;Nu s-a putut efectua operațiunea.&quot;);&#xD;
         }&#xD;
&#xD;
     } catch (Exception e) {&#xD;
         System.err.println(&quot;Eroare la operațiunea în baza de date: &quot; + e.getMessage());&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         response.getWriter().write(&quot;Eroare la operațiunea în baza de date.&quot;);&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvODwUVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_SgIEVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvODwkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_VvODw0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_VpZIkEVdEfCS7cth2SLu0w" name="csv">
      <packagedElement xmi:type="uml:Class" xmi:id="_Vuo08EVdEfCS7cth2SLu0w" name="generateCSV1">
        <generalization xmi:id="_VupcAEVdEfCS7cth2SLu0w" general="_T96eMUVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_KkRUVdEfCS7cth2SLu0w" name="doPost" specification="_Vuo08UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_KkRkVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_V_KkR0VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>System.out.println(&quot;generateCSV1 Servlet invoked&quot;);&#xD;
     response.setContentType(&quot;text/csv&quot;);&#xD;
     response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=table_data.csv&quot;);&#xD;
&#xD;
     try (PrintWriter out = response.getWriter()) {&#xD;
         // Read JSON data from request body&#xD;
         StringBuilder jsonInput = new StringBuilder();&#xD;
         String line;&#xD;
         try (BufferedReader reader = request.getReader()) {&#xD;
             while ((line = reader.readLine()) != null) {&#xD;
                 jsonInput.append(line);&#xD;
             }&#xD;
         }&#xD;
         System.out.println(&quot;Received JSON: &quot; + jsonInput);&#xD;
&#xD;
         // Parse JSON and generate CSV&#xD;
         JSONArray jsonArray = new JSONArray(jsonInput.toString());&#xD;
         if (!jsonArray.isEmpty()) {&#xD;
             JSONObject firstObject = jsonArray.getJSONObject(0);&#xD;
             out.println(String.join(&quot;,&quot;, firstObject.keySet()));&#xD;
         }&#xD;
         for (int i = 0; i &lt; jsonArray.length(); i++) {&#xD;
             JSONObject jsonObject = jsonArray.getJSONObject(i);&#xD;
             out.println(jsonObject.keySet().stream()&#xD;
                     .map(key -> jsonObject.optString(key, &quot;&quot;))&#xD;
                     .reduce((a, b) -> a + &quot;,&quot; + b).orElse(&quot;&quot;));&#xD;
         }&#xD;
         System.out.println(&quot;CSV generated successfully&quot;);&#xD;
         out.flush();&#xD;
     } catch (Exception e) {&#xD;
         System.err.println(&quot;Error generating CSV: &quot; + e.getMessage());&#xD;
         response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);&#xD;
         response.getWriter().write(&quot;Error generating CSV: &quot; + e.getMessage());&#xD;
     }&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_Vuo08UVdEfCS7cth2SLu0w" name="doPost" visibility="protected" method="_V_KkRUVdEfCS7cth2SLu0w" raisedException="_T95QEEVdEfCS7cth2SLu0w _T94B8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vuo08kVdEfCS7cth2SLu0w" name="request" type="_T97FQUVdEfCS7cth2SLu0w"/>
          <ownedParameter xmi:id="_Vuo080VdEfCS7cth2SLu0w" name="response" type="_T97sUUVdEfCS7cth2SLu0w"/>
        </ownedOperation>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_VqGTMEVdEfCS7cth2SLu0w" name="scheduler">
      <packagedElement xmi:type="uml:Class" xmi:id="_VvUxcEVdEfCS7cth2SLu0w" name="Constants">
        <ownedComment xmi:id="_V_mCFEVdEfCS7cth2SLu0w">
          <body>Aceasta clasa modeleaza un obicet cu variabile ce le folosesc la scheduler-ul de mailuri</body>
        </ownedComment>
        <ownedAttribute xmi:id="_V-l8gkVdEfCS7cth2SLu0w" name="delay" isStatic="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-mjkEVdEfCS7cth2SLu0w" name="timetoquery" isStatic="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-mjkkVdEfCS7cth2SLu0w" name="setFrom" isStatic="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-mjlEVdEfCS7cth2SLu0w" name="setPassword" isStatic="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_V-mjlkVdEfCS7cth2SLu0w" name="emailTO" isStatic="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvVYgEVdEfCS7cth2SLu0w" name="ContractTerminationScheduler">
        <ownedAttribute xmi:id="_V-mjmEVdEfCS7cth2SLu0w" name="scheduler" visibility="private" type="_V89k0UVdEfCS7cth2SLu0w" association="_WAI0pEVdEfCS7cth2SLu0w"/>
        <interfaceRealization xmi:id="_V9meAEVdEfCS7cth2SLu0w" client="_VvVYgEVdEfCS7cth2SLu0w" supplier="_V8wwgEVdEfCS7cth2SLu0w" contract="_V8wwgEVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_UVQEVdEfCS7cth2SLu0w" name="contextInitialized" specification="_V9nFEEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_UVQUVdEfCS7cth2SLu0w" name="event" type="_V8wJcEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>scheduler = Executors.newSingleThreadScheduledExecutor();&#xD;
     &#xD;
     // Rulează task-ul zilnic la ora 00:01&#xD;
     scheduler.scheduleAtFixedRate(&#xD;
         new TerminationCheck(), &#xD;
         calculateInitialDelay(), &#xD;
         24 * 60 * 60, // 24 ore&#xD;
         TimeUnit.SECONDS&#xD;
     );&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_UVQkVdEfCS7cth2SLu0w" name="contextDestroyed" specification="_V9nFFEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_UVQ0VdEfCS7cth2SLu0w" name="event" type="_V8wJcEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>scheduler.shutdownNow();&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_UVREVdEfCS7cth2SLu0w" name="calculateInitialDelay" specification="_VvV_kEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_UVRUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          </ownedParameter>
          <language>java</language>
          <body>// Calculează timpul până la ora 00:01 a zilei următoare&#xD;
     // ...&#xD;
     return 10; // Pornește după 10 secunde pentru test&#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvV_kEVdEfCS7cth2SLu0w" name="calculateInitialDelay" visibility="private" method="_V_UVREVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvV_kUVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_V9nFEEVdEfCS7cth2SLu0w" name="contextInitialized" method="_V_UVQEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V9nFEUVdEfCS7cth2SLu0w" name="event" type="_V8wJcEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_V9nFFEVdEfCS7cth2SLu0w" name="contextDestroyed" method="_V_UVQkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V9nsIEVdEfCS7cth2SLu0w" name="event" type="_V8wJcEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <nestedClassifier xmi:type="uml:Class" xmi:id="_VvWmoEVdEfCS7cth2SLu0w" name="TerminationCheck" visibility="private">
          <interfaceRealization xmi:id="_V9oTMUVdEfCS7cth2SLu0w" client="_VvWmoEVdEfCS7cth2SLu0w" supplier="_V9nsI0VdEfCS7cth2SLu0w" contract="_V9nsI0VdEfCS7cth2SLu0w"/>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_UVRkVdEfCS7cth2SLu0w" name="run" specification="_VvWmokVdEfCS7cth2SLu0w">
            <language>java</language>
            <body>Connection conn = null;&#xD;
         try {&#xD;
             // Încărcare driver MySQL&#xD;
             Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#xD;
             &#xD;
             // Creare conexiune directă&#xD;
             conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);&#xD;
             &#xD;
             // 1. Dezactivează utilizatorii a căror dată de încetare a contractului a trecut&#xD;
             String updateSql = &quot;UPDATE useri u &quot; +&#xD;
                               &quot;JOIN istoric_incetari i ON u.id = i.id_ang &quot; +&#xD;
                               &quot;SET u.activ = 0 &quot; +&#xD;
                               &quot;WHERE i.data_incetare &lt;= CURDATE() AND u.activ = 1&quot;;&#xD;
             PreparedStatement updatePstmt = conn.prepareStatement(updateSql);&#xD;
             int updatedRows = updatePstmt.executeUpdate();&#xD;
             updatePstmt.close();&#xD;
             &#xD;
             // Logare pentru monitorizare&#xD;
             System.out.println(&quot;Verificare contracte încetate. Utilizatori dezactivați: &quot; + updatedRows);&#xD;
             &#xD;
             // 2. Dacă doriți să ștergeți și utilizatorii din baza de date după o anumită perioadă&#xD;
             String deleteSql = &quot;DELETE FROM useri &quot; +&#xD;
                              &quot;WHERE id IN (SELECT id_ang FROM istoric_incetari &quot; +&#xD;
                              &quot;WHERE data_incetare &lt; DATE_SUB(CURDATE(), INTERVAL 30 DAY))&quot;;&#xD;
             PreparedStatement deletePstmt = conn.prepareStatement(deleteSql);&#xD;
             int deletedRows = deletePstmt.executeUpdate();&#xD;
             deletePstmt.close();&#xD;
             &#xD;
             System.out.println(&quot;Utilizatori șterși din baza de date: &quot; + deletedRows);&#xD;
             &#xD;
         } catch (ClassNotFoundException e) {&#xD;
             System.err.println(&quot;Driver MySQL negăsit: &quot; + e.getMessage());&#xD;
             e.printStackTrace();&#xD;
         } catch (SQLException e) {&#xD;
             System.err.println(&quot;Eroare SQL: &quot; + e.getMessage());&#xD;
             e.printStackTrace();&#xD;
         } finally {&#xD;
             if (conn != null) {&#xD;
                 try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }&#xD;
             }&#xD;
         }&#xD;
     </body>
          </ownedBehavior>
          <ownedOperation xmi:id="_VvWmokVdEfCS7cth2SLu0w" name="run" method="_V_UVRkVdEfCS7cth2SLu0w"/>
        </nestedClassifier>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvX0wEVdEfCS7cth2SLu0w" name="DBScheduler">
        <ownedComment xmi:id="_V_mCFUVdEfCS7cth2SLu0w">
          <body>Clasa scheduler mail-uri</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_UVR0VdEfCS7cth2SLu0w" name="pornire" specification="_VvX0wUVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>System.out.println(&quot;Pornire...&quot;);&#xD;
			// ReadPropertiesFile.readConfig();&#xD;
			Timer timer = new Timer();&#xD;
			timer.scheduleAtFixedRate(new Testing(), getTimePrecision(&quot;2s&quot;), getTimePrecision(&quot;1d&quot;));&#xD;
		</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_UVSEVdEfCS7cth2SLu0w" name="getTimePrecision" specification="_VvX0wkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_UVSUVdEfCS7cth2SLu0w" name="value">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_UVSkVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          </ownedParameter>
          <language>java</language>
          <body>// declarare si initialiaare variabișe&#xD;
			long  l = 0;&#xD;
			String val=&quot;&quot;;&#xD;
			try&#xD;
			{&#xD;
				if(value.endsWith(&quot;d&quot;) || value.endsWith(&quot;D&quot;))&#xD;
				{&#xD;
					val  = value.substring(0,value.length()-1); // se ia pana la ultima litera, care este unitatea&#xD;
					l = Long.parseLong(val) * 24 * 60 * 60 * 1000; // se afla milisecundele&#xD;
				}&#xD;
				else if(value.endsWith(&quot;h&quot;) || value.endsWith(&quot;H&quot;))&#xD;
				{&#xD;
&#xD;
				 val  = value.substring(0,value.length()-1);&#xD;
				 l = Long.parseLong(val) * 60 * 60 * 1000;&#xD;
				}&#xD;
				else if(value.endsWith(&quot;m&quot;) || value.endsWith(&quot;M&quot;))&#xD;
				{&#xD;
					 val  = value.substring(0,value.length()-1);&#xD;
					 l = Long.parseLong(val) * 60 * 1000;&#xD;
				}&#xD;
				else if(value.endsWith(&quot;s&quot;) || value.endsWith(&quot;S&quot;))&#xD;
				{&#xD;
					val  = value.substring(0,value.length()-1);&#xD;
					l = Long.parseLong(val) * 1000;&#xD;
				}&#xD;
				else&#xD;
				{&#xD;
					l = Long.parseLong(value);&#xD;
				}&#xD;
			}&#xD;
			catch(Exception e)&#xD;
			{&#xD;
				// aici nu mai stiu ce am vrut sa fac ;_;&#xD;
	            throw new Exception(e);&#xD;
			}&#xD;
			return l;&#xD;
		</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_UVS0VdEfCS7cth2SLu0w" name="main" specification="_VvYb0UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_UVTEVdEfCS7cth2SLu0w" name="a">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_V_UVTUVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>DBScheduler dbs = new DBScheduler();&#xD;
			dbs.pornire();&#xD;
		</body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvX0wUVdEfCS7cth2SLu0w" name="pornire" method="_V_UVR0VdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w"/>
        <ownedOperation xmi:id="_VvX0wkVdEfCS7cth2SLu0w" name="getTimePrecision" method="_V_UVSEVdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvX0w0VdEfCS7cth2SLu0w" name="value">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvYb0EVdEfCS7cth2SLu0w" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VvYb0UVdEfCS7cth2SLu0w" name="main" isStatic="true" method="_V_UVS0VdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvYb0kVdEfCS7cth2SLu0w" name="a">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VvYb1EVdEfCS7cth2SLu0w" value="*"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvZC4EVdEfCS7cth2SLu0w" name="ReadPropertiesFile">
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_U8UEVdEfCS7cth2SLu0w" name="readConfig" specification="_VvZC4UVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>try
		{

		    Properties pro = new Properties();
		    String path = System.getProperty(&quot;user.dir&quot;)+&quot;/Props.properties&quot;;
		    pro.load(new FileInputStream(path));	   

		    Constants.delay = pro.getProperty(&quot;delay&quot;);
		    Constants.timetoquery = pro.getProperty(&quot;timetoquery&quot;);
		    Constants.setFrom = pro.getProperty(&quot;setFrom&quot;);
		    Constants.setPassword = pro.getProperty(&quot;setPassword&quot;);
		    Constants.emailTO = pro.getProperty(&quot;emailTO&quot;);	  		   

		}
		catch(Exception e)
		{
         throw new Exception(e);
		}

	</body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvZC4UVdEfCS7cth2SLu0w" name="readConfig" isStatic="true" method="_V_U8UEVdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_VvZC4kVdEfCS7cth2SLu0w" name="Testing">
        <generalization xmi:id="_V9o6QEVdEfCS7cth2SLu0w" general="_V8_aAkVdEfCS7cth2SLu0w"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_U8UUVdEfCS7cth2SLu0w" name="run" specification="_VvZp8EVdEfCS7cth2SLu0w">
          <language>java</language>
          <body>try {
	            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);
	            try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;)) {
	                sendReminders(connection);
	                
	                sendReminders2(connection);
	                
	                sendReminders3(connection);
	                
	                sendReminders4(connection);
	                
	                sendReminders5(connection);
	                
	                // Verifică dacă este ziua 15 a lunii pentru acordarea salariilor
	                LocalDate today = LocalDate.now();
	                if (today.getDayOfMonth() == 15) {
	                    acordaSalarii(connection);
	                }
	                
	            } catch (IOException e) {
	                System.err.println(&quot;Error during database operation: &quot; + e.getMessage());
	            } catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	        } catch (ClassNotFoundException e) {
	            System.err.println(&quot;MySQL JDBC driver not found: &quot; + e.getMessage());
	        }
				// System.out.println(&quot;ok&quot;);

	        </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_U8UkVdEfCS7cth2SLu0w" name="acordaSalarii" specification="_VvZp8UVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_U8U0VdEfCS7cth2SLu0w" name="connection" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>try {
	        // Selectează toți angajații activi
	        String sql = &quot;SELECT u.id, u.email, t.salariu as salariu_baza, &quot; +
	                    &quot;s.procent as procent_spor, p.procent as procent_penalizare, &quot; +
	                    &quot;u.nume, u.prenume, d.nume_dep, t.denumire as functie &quot; +
	                    &quot;FROM useri u &quot; +
	                    &quot;JOIN tipuri t ON u.tip = t.tip &quot; +
	                    &quot;JOIN departament d ON u.id_dep = d.id_dep &quot; +
	                    &quot;LEFT JOIN tipuri_sporuri s ON u.sporuri = s.id &quot; +
	                    &quot;LEFT JOIN tipuri_penalizari p ON u.penalizari = p.id &quot; +
	                    &quot;WHERE u.activ = 1&quot;;
	        
	        PreparedStatement pstmt = connection.prepareStatement(sql);
	        ResultSet rs = pstmt.executeQuery();
	        
	        while (rs.next()) {
	            int idAng = rs.getInt(&quot;id&quot;);
	            String email = rs.getString(&quot;email&quot;);
	            String nume = rs.getString(&quot;nume&quot;);
	            String prenume = rs.getString(&quot;prenume&quot;);
	            String departament = rs.getString(&quot;nume_dep&quot;);
	            String functie = rs.getString(&quot;functie&quot;);
	            double salariuBaza = rs.getDouble(&quot;salariu_baza&quot;);
	            double procentSpor = rs.getDouble(&quot;procent_spor&quot;);
	            double procentPenalizare = rs.getDouble(&quot;procent_penalizare&quot;);
	            
	            // Calculează salariul
	            double spor = salariuBaza * procentSpor / 100;
	            double penalizare = salariuBaza * procentPenalizare / 100;
	            double salariuBrut = salariuBaza + spor - penalizare;
	            
	            // Generează fluturaș și trimite email
	            generareSiTrimitereFluturash(idAng, email, nume, prenume, departament, functie, salariuBrut, salariuBaza, spor, penalizare);
	        }
	        
	        rs.close();
	        pstmt.close();
	        
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_U8VEVdEfCS7cth2SLu0w" name="generareSiTrimitereFluturash" specification="_VvZp80VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_U8VUVdEfCS7cth2SLu0w" name="idAng">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_U8VkVdEfCS7cth2SLu0w" name="email">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_U8V0VdEfCS7cth2SLu0w" name="nume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_U8WEVdEfCS7cth2SLu0w" name="prenume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_U8WUVdEfCS7cth2SLu0w" name="departament">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_U8WkVdEfCS7cth2SLu0w" name="functie">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_U8W0VdEfCS7cth2SLu0w" name="salariuBrut">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_U8XEVdEfCS7cth2SLu0w" name="salariuBaza">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_U8XUVdEfCS7cth2SLu0w" name="spor">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_U8XkVdEfCS7cth2SLu0w" name="penalizare">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <language>java</language>
          <body>String subject = &quot;\uD83D\uDCB0 Fluturașul de salariu - &quot; + LocalDate.now().getMonth() + &quot; &quot; + LocalDate.now().getYear();
	    
	    String message = 
	        &quot;&lt;h1>Fluturaș de salariu&lt;/h1>&quot; +
	        &quot;&lt;p>Angajat: &quot; + nume + &quot; &quot; + prenume + &quot;&lt;/p>&quot; +
	        &quot;&lt;p>Departament: &quot; + departament + &quot;&lt;/p>&quot; +
	        &quot;&lt;p>Funcție: &quot; + functie + &quot;&lt;/p>&quot; +
	        &quot;&lt;br>&quot; +
	        &quot;&lt;table border='1' style='border-collapse: collapse;'>&quot; +
	        &quot;&lt;tr>&lt;td>&lt;b>Salariu de bază:&lt;/b>&lt;/td>&lt;td>&quot; + salariuBaza + &quot; RON&lt;/td>&lt;/tr>&quot; +
	        &quot;&lt;tr>&lt;td>&lt;b>Sporuri:&lt;/b>&lt;/td>&lt;td>&quot; + spor + &quot; RON&lt;/td>&lt;/tr>&quot; +
	        &quot;&lt;tr>&lt;td>&lt;b>Penalizări:&lt;/b>&lt;/td>&lt;td>&quot; + penalizare + &quot; RON&lt;/td>&lt;/tr>&quot; +
	        &quot;&lt;tr>&lt;td>&lt;b>Salariu brut total:&lt;/b>&lt;/td>&lt;td>&lt;b>&quot; + salariuBrut + &quot; RON&lt;/b>&lt;/td>&lt;/tr>&quot; +
	        &quot;&lt;/table>&quot; +
	        &quot;&lt;br>&quot; +
	        &quot;&lt;p>Acest email a fost generat automat în data de &quot; + LocalDate.now() + &quot;&lt;/p>&quot; +
	        &quot;&lt;p>&lt;i>Departamentul Resurse Umane&lt;/i>&lt;/p>&quot;;
	    
	    GMailServer sender = new GMailServer(Constants.setFrom, Constants.setPassword);
	    
	    try {
	        sender.send(subject, message, Constants.setFrom, email);
	        System.out.println(&quot;Generat și trimis fluturaș pentru angajatul &quot; + idAng + &quot; (&quot; + email + &quot;)&quot;);
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_U8X0VdEfCS7cth2SLu0w" name="sendReminders" specification="_VvaRAEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_U8YEVdEfCS7cth2SLu0w" name="connection" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String query = &quot;select useri.id, useri.email, concedii.start_c, concedii.end_c, locatie, concedii.motiv, tipcon.motiv AS tip_motiv, tipcon.motiv as tip_motiv, DATEDIFF(concedii.start_c, CURRENT_DATE()) AS days_until_start &quot;
	            + &quot;FROM useri &quot;
	            + &quot;JOIN concedii ON useri.id = concedii.id_ang &quot;
	            + &quot;JOIN tipcon ON concedii.tip = tipcon.tip &quot;
	            + &quot;WHERE DATEDIFF(concedii.start_c, CURRENT_DATE()) BETWEEN 0 AND 1 AND concedii.status = 2;&quot;;
	    // mai are o zi pana la concediu

	    try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
	        ResultSet rs = preparedStatement.executeQuery();
	        while (rs.next()) {
	            sendEmail(rs);
	        }
	    } catch (SQLException e) {
	        throw new IOException(&quot;Eroare BD: &quot; + e.getMessage(), e);
	    }
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_U8YUVdEfCS7cth2SLu0w" name="sendReminders2" specification="_VvaRAkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_U8YkVdEfCS7cth2SLu0w" name="connection" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String query = &quot;SELECT id, nume, prenume, id_dep \r\n&quot;
	    		+ &quot;FROM useri \r\n&quot;
	    		+ &quot;WHERE DAY(data_nasterii) = DAY(CURRENT_DATE() + INTERVAL 1 DAY) \r\n&quot;
	    		+ &quot;  AND MONTH(data_nasterii) = MONTH(CURRENT_DATE() + INTERVAL 1 DAY);\r\n&quot;
	    		+ &quot;&quot;;
	    // email zi de nastere
	    String nume = &quot;&quot;;
	    String prenume = &quot;&quot;;
	    int id = -1;
	    int dep = -1;
	    try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
	        ResultSet rs = preparedStatement.executeQuery();
	        while (rs.next()) {
	            nume = rs.getString(&quot;nume&quot;);
	            prenume = rs.getString(&quot;prenume&quot;);
	            dep = rs.getInt(&quot;id_dep&quot;);
	            id = rs.getInt(&quot;id&quot;);
	            String query2 = &quot;SELECT email from useri where id_dep = &quot; + dep + &quot; and id &lt;> &quot; + id + &quot;;&quot;;
	            try (PreparedStatement preparedStatement2 = connection.prepareStatement(query2)) {
	    	        ResultSet rs2 = preparedStatement2.executeQuery();
	    	        while (rs2.next()) {
	    	            sendEmail2(nume, prenume, rs2);
	    	        }
	    	    } catch (SQLException e) {
	    	        throw new IOException(&quot;Eroare BD: &quot; + e.getMessage(), e);
	    	    }
	           
	        }
	    } catch (SQLException e) {
	        throw new IOException(&quot;Eroare BD: &quot; + e.getMessage(), e);
	    }
	    
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_U8Y0VdEfCS7cth2SLu0w" name="sendEmail2" specification="_VvaRBEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_U8ZEVdEfCS7cth2SLu0w" name="nume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_U8ZUVdEfCS7cth2SLu0w" name="prenume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_U8ZkVdEfCS7cth2SLu0w" name="rs" type="_T9wtMEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String to = rs.getString(&quot;email&quot;);
	   
	    String subject2 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;
	    String message21 = &quot;&lt;h1>Maine este ziua de nastere a lui &quot; + nume + &quot; &quot; + prenume + &quot;!&amp;#x1F389;&lt;/h1>&quot;; 
	    String message22 = &quot;Sa-i uram \&quot;La multi ani!\&quot; impreuna! &lt;br>&quot;;
	    String message23 = &quot;&lt;h2>Va dorim toate cele bune!&amp;#x1F60E;&lt;/h2>&quot;;
	    String message222 = message21 + message22 + message23 + &quot;&lt;b>&lt;i>Conducerea firmei XYZ.&lt;/i>&lt;/b>&amp;#x1F917;&quot;;
	   
	    GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;,&quot;rtmz fzcp onhv minb&quot;);

	    try {
	        sender.send(subject2, message222, &quot;liviaaamp@gmail.com&quot;, to);
	        
	    } catch (Exception e) {
	        e.printStackTrace();
	       
	    }  
	    
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_U8Z0VdEfCS7cth2SLu0w" name="sendReminders4" specification="_Vva4EEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_U8aEVdEfCS7cth2SLu0w" name="connection" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String query = &quot;SELECT email, id, nume, prenume, id_dep \r\n&quot;
	    		+ &quot;FROM useri \r\n&quot;
	    		+ &quot;WHERE DAY(data_nasterii) = DAY(CURRENT_DATE()) \r\n&quot;
	    		+ &quot;  AND MONTH(data_nasterii) = MONTH(CURRENT_DATE());\r\n&quot;
	    		+ &quot;;&quot;;
	    // email zi de nastere
	    String to = &quot;&quot;;
	    try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
	        ResultSet rs = preparedStatement.executeQuery();
	        while (rs.next()) {
	            to = rs.getString(&quot;email&quot;);
	            String subject2 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;
	    	    String message21 = &quot;&lt;h1>La multi ani!&amp;#x1F389;&lt;/h1>&quot;; 
	    	    String message22 = &quot;Compania va doreste multa sanatate, fericire si realizari pe toate planurile alaturi de cei dragi! &amp;#x1F389; &lt;br> Ne bucuram sa lucram impreuna cu dumneavoastra, sa va avem alaturi! Multumim pentru efortul depus! &lt;br>&quot;;
	    	    String message23 = &quot;&lt;h2>Va dorim toate cele bune!&amp;#x1F60E;&lt;/h2>&quot;;
	    	    String message222 = message21 + message22 + message23 + &quot;&lt;b>&lt;i>Conducerea firmei XYZ.&lt;/i>&lt;/b>&amp;#x1F917;&quot;;
	    	   
	    	    GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;,&quot;rtmz fzcp onhv minb&quot;);

	    	    try {
	    	        sender.send(subject2, message222, &quot;liviaaamp@gmail.com&quot;, to);
	    	    } catch (Exception e) {
	    	        e.printStackTrace();
	    	    }  
	        }
	    } catch (SQLException e) {
	        throw new IOException(&quot;Eroare BD: &quot; + e.getMessage(), e);
	    }
	    
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_VjYEVdEfCS7cth2SLu0w" name="sendReminders3" specification="_Vva4EkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_VjYUVdEfCS7cth2SLu0w" name="connection" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>String query = &quot;SELECT nume \r\n&quot;
	    		+ &quot;FROM sarbatori \r\n&quot;
	    		+ &quot;WHERE DAY(zi - INTERVAL 1 DAY) = DAY(CURRENT_DATE()) \r\n&quot;
	    		+ &quot;  AND MONTH(zi) = MONTH(CURRENT_DATE())\r\n&quot;
	    		+ &quot;\r\n&quot;
	    		+ &quot;UNION\r\n&quot;
	    		+ &quot;\r\n&quot;
	    		+ &quot;SELECT nume \r\n&quot;
	    		+ &quot;FROM libere \r\n&quot;
	    		+ &quot;WHERE DAY(zi - INTERVAL 1 DAY) = DAY(CURRENT_DATE()) \r\n&quot;
	    		+ &quot;  AND MONTH(zi) = MONTH(CURRENT_DATE());&quot;;

	    String zi = &quot;&quot;;

	    try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
	        ResultSet rs = preparedStatement.executeQuery();
	        if (rs.next()) {
	            zi = rs.getString(&quot;nume&quot;);

	            String query2 = &quot;SELECT email FROM useri&quot;;
	            try (PreparedStatement preparedStatement2 = connection.prepareStatement(query2);
	                 ResultSet rs2 = preparedStatement2.executeQuery()) {

	                while (rs2.next()) {
	                    String email = rs2.getString(&quot;email&quot;);
	                    sendEmail3(zi, email);
	                }
	            } catch (SQLException e) {
	                throw new IOException(&quot;Database error: &quot; + e.getMessage(), e);
	            }
	        }
	    } catch (SQLException e) {
	        throw new IOException(&quot;Database error: &quot; + e.getMessage(), e);
	    }
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_VjYkVdEfCS7cth2SLu0w" name="sendEmail3" specification="_Vva4FEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_VjY0VdEfCS7cth2SLu0w" name="nume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_V_VjZEVdEfCS7cth2SLu0w" name="email">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>String subject = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;
	    String message = &quot;&lt;h1>Maine este &quot; + nume + &quot;!&amp;#x1F389;&lt;/h1>&quot; 
	                   + &quot;Sa ne bucuram de aceasta zi impreuna! &lt;br>&quot; 
	                   + &quot;&lt;h2>Va dorim toate cele bune!&amp;#x1F60E;&lt;/h2>&quot;
	                   + &quot;&lt;b>&lt;i>Conducerea firmei XYZ.&lt;/i>&lt;/b>&amp;#x1F917;&quot;;

	    GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;, &quot;rtmz fzcp onhv minb&quot;);

	    try {
	        sender.send(subject, message, &quot;liviaaamp@gmail.com&quot;, email);
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_VjZUVdEfCS7cth2SLu0w" name="sendEmail" specification="_Vva4F0VdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_VjZkVdEfCS7cth2SLu0w" name="rs" type="_T9wtMEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>System.currentTimeMillis();
		 
	    int id = rs.getInt(&quot;id&quot;);
	    String to = rs.getString(&quot;email&quot;);
	    // if (lastSentMap.containsKey(to) &amp;&amp; (currentTimeMillis - lastSentMap.get(to)) &lt; 3600000) {
     //     System.out.println(to + &quot; a primit deja un email in ultima ora.&quot;);
     //    return;
     //}
	    Date startDate = rs.getDate(&quot;start_c&quot;);
	    Date endDate = rs.getDate(&quot;end_c&quot;);
	    rs.getInt(&quot;days_until_start&quot;);
	    String locatie = rs.getString(&quot;locatie&quot;);
	    String motiv = rs.getString(&quot;motiv&quot;);
	    String tipMotiv = rs.getString(&quot;tip_motiv&quot;);

	    SimpleDateFormat sdf = new SimpleDateFormat(&quot;EEEE dd MMMM yyyy&quot;, new Locale(&quot;ro&quot;, &quot;RO&quot;));
	    String formattedStart = sdf.format(startDate);
	    String formattedEnd = sdf.format(endDate);
	    
	    // -----------------------------------------------------------------------------------------------------------------------------------------------------------------
	    
	    String subject = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;
	    String message1 = &quot;&lt;h1>Mai aveti o zi pana la concediu!&amp;#x1F389;&lt;/h1>&quot;; 
	    String message2 = &quot;Concediul e in perioada &quot; + formattedStart + &quot; - &quot; + formattedEnd + &quot; in &quot; + locatie + &quot; pe motivul &quot; + motiv + &quot; - &quot; + tipMotiv + &quot;. &lt;br>&quot;;
	    String message3 = &quot;&lt;h2>Va dorim concediu placut!&amp;#x1F60E;&lt;/h2>&quot;;
	    String message = message1 + message2 + message3 + &quot;&lt;b>&lt;i>Conducerea firmei XYZ.&lt;/i>&lt;/b>&amp;#x1F917;&quot;;
	   
	    GMailServer sender = new GMailServer(Constants.setFrom, Constants.setPassword);

	    try {
	        sender.send(subject, message, Constants.setFrom, to);
	        // lastSentMap.put(to, currentTimeMillis);
	        // System.out.println(&quot;S-a trimis mail la &quot; + to);
	        //System.out.println(&quot;ok&quot;);
	    } catch (Exception e) {
	        e.printStackTrace();
	       // System.out.println(&quot;NOTok&quot;);
	    }  
	    
	    
	    String tod = &quot;&quot;;
     String tos = &quot;&quot;;
     String nume = &quot;&quot;;
     String prenume = &quot;&quot;;
     int tipp = -1;
     try (Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;, &quot;root&quot;, &quot;student&quot;);
	         PreparedStatement stmt = connection.prepareStatement(&quot;select ang.nume as nume_ang, ang.prenume as prenume_ang, ang.tip as tip, ang.email as email_ang, sef.email as email_sef, dir.email as email_dir from useri as ang join useri as sef on ang.id_dep = sef.id_dep and sef.tip = 3 join useri as dir on ang.id_dep = dir.id_dep and dir.tip = 0 where ang.id = ?;&quot;
	         		+ &quot;&quot;)) {
	        stmt.setInt(1, id);
	        
	        ResultSet rs2 = stmt.executeQuery();
	        if (rs2.next()) {
	            tos = rs2.getString(&quot;email_sef&quot;);
	            rs2.getString(&quot;email_ang&quot;);
	            tod = rs2.getString(&quot;email_dir&quot;);
	            nume = rs2.getString(&quot;nume_ang&quot;);
	            prenume = rs2.getString(&quot;prenume_ang&quot;);
	            tipp = rs2.getInt(&quot;tip&quot;);
	        }
	    } catch (SQLException e) {
	        throw new ServletException(&quot;Eroare BD =(&quot;, e);
	    } 
     if (tipp != 0 || tipp != 3) {
        // trimit confirmare inregistrare la angajat 
 	    String subject1 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;
 	    String message11 = &quot;&lt;h1>Ultimile noutati &lt;/h1>&quot;; 
 	    String message12 = &quot;&lt;h2>Angajatul &quot; + nume + &quot; &quot; + prenume + &quot; pleaca maine in concediu&quot;
 	    		+ &quot;&lt;/h2>&quot;;
 	    String message13 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre concediu:&lt;/h3>&quot;;
 	    String message14 = &quot;&lt;p>Concediul e in perioada &quot; + formattedStart + &quot; - &quot; + formattedEnd + &quot; in &quot; + locatie + &quot; pe motivul &quot; + motiv + &quot; - &quot; + tipMotiv + &quot;. &lt;/p>&lt;br>&quot;;
 	    
 	    String message16 = &quot;&lt;p>Sa-i uram sejur placut/sa-i fim alaturi! Doar suntem ca o familie!  &amp;#x2728;\r\n&quot;
 	    		+ &quot; &lt;/p>&quot;;
 	    String message4 = message11 + message12 + message13 + message14 + message16 + &quot;&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea&amp;#x1F642;\r\n&quot;
 	    		+ &quot;&lt;/i>&lt;/b>&quot;;
 	   
 	    try {
 	        sender.send(subject1, message4, &quot;liviaaamp@gmail.com&quot;, tos);
 	       
 	    } catch (Exception e) {
 	        e.printStackTrace();
 	    }  
     }
     if (tipp == 3) {
         // trimit confirmare inregistrare la angajat 
  	    String subject1 = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;
  	    String message11 = &quot;&lt;h1>Ultimile noutati &lt;/h1>&quot;; 
  	    String message12 = &quot;&lt;h2>Angajatul &quot; + nume + &quot; &quot; + prenume + &quot; pleaca maine in concediu&quot;
  	    		+ &quot;&lt;/h2>&quot;;
  	    String message13 = &quot;&lt;h3>&amp;#x1F4DD;Detalii despre concediu:&lt;/h3>&quot;;
  	    String message14 = &quot;&lt;p>Concediul e in perioada &quot; + formattedStart + &quot; - &quot; + formattedEnd + &quot; in &quot; + locatie + &quot; pe motivul &quot; + motiv + &quot; - &quot; + tipMotiv + &quot;. &lt;/p>&lt;br>&quot;;
  	    
  	    String message16 = &quot;&lt;p>Sa-i uram sejur placut/sa-i fim alaturi! Doar suntem ca o familie!  &amp;#x2728;\r\n&quot;
  	    		+ &quot; &lt;/p>&quot;;
  	    String message4 = message11 + message12 + message13 + message14 + message16 + &quot;&lt;b>&lt;i>&amp;#x2757;Mesaj trimis automat.&lt;br> Semnat, &lt;br> Conducerea&amp;#x1F642;\r\n&quot;
  	    		+ &quot;&lt;/i>&lt;/b>&quot;;
  	   
  	    try {
  	        sender.send(subject1, message4, &quot;liviaaamp@gmail.com&quot;, tod);
  	       
  	    } catch (Exception e) {
  	        e.printStackTrace();
  	    }  
      }
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_VjZ0VdEfCS7cth2SLu0w" name="sendReminders5" specification="_VvbfIEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_VjaEVdEfCS7cth2SLu0w" name="connection" type="_T9fncEVdEfCS7cth2SLu0w"/>
          <language>java</language>
          <body>HashMap&lt;LocalDate, ArrayList&lt;String>> onomastici = new HashMap&lt;>();
     onomastici.put(LocalDate.of(2024, 1, 7), new ArrayList&lt;>()); // Initialize with an empty ArrayList
     onomastici.put(LocalDate.of(2024, 8, 15), new ArrayList&lt;>()); // Initialize with an empty ArrayList
     onomastici.put(LocalDate.of(2024, 12, 25), new ArrayList&lt;>()); // Initialize with an empty ArrayList
     onomastici.put(LocalDate.of(2024, 4, 23), new ArrayList&lt;>()); // Initialize with an empty ArrayList
     onomastici.put(LocalDate.of(2024, 11, 7), new ArrayList&lt;>()); // Initialize with an empty ArrayList
     onomastici.put(LocalDate.of(2024, 5, 21), new ArrayList&lt;>()); // Initialize with an empty ArrayList
     onomastici.put(LocalDate.of(2024, 11, 30), new ArrayList&lt;>()); // Initialize with an empty ArrayList
     onomastici.put(LocalDate.of(2024, 12, 27), new ArrayList&lt;>()); // Initialize with an empty ArrayList
     onomastici.put(LocalDate.of(2024, 6, 29), new ArrayList&lt;>()); // Initialize with an empty ArrayList
     // onomastici.put(LocalDate.of(2024, 8, 21), new ArrayList&lt;>()); // Initialize with an empty ArrayList
     onomastici.put(LocalDate.of(2024, 7, 7), new ArrayList&lt;>()); // Initialize with an empty ArrayList
     
     onomastici.get(LocalDate.of(2024, 1, 7)).add(&quot;Ion&quot;);
     onomastici.get(LocalDate.of(2024, 1, 7)).add(&quot;Ionut&quot;);
     onomastici.get(LocalDate.of(2024, 1, 7)).add(&quot;Ioana&quot;);
     onomastici.get(LocalDate.of(2024, 1, 7)).add(&quot;Oana&quot;);
     onomastici.get(LocalDate.of(2024, 1, 7)).add(&quot;Ionelia&quot;);
     onomastici.get(LocalDate.of(2024, 1, 7)).add(&quot;Ionel&quot;);
     onomastici.get(LocalDate.of(2024, 1, 7)).add(&quot;Ioneliu&quot;);
     onomastici.get(LocalDate.of(2024, 1, 7)).add(&quot;Ionela&quot;);
     
     onomastici.get(LocalDate.of(2024, 8, 15)).add(&quot;Maria&quot;);
     onomastici.get(LocalDate.of(2024, 8, 15)).add(&quot;Mariana&quot;);
     onomastici.get(LocalDate.of(2024, 8, 15)).add(&quot;Maia&quot;);
     onomastici.get(LocalDate.of(2024, 8, 15)).add(&quot;Maya&quot;);
     onomastici.get(LocalDate.of(2024, 8, 15)).add(&quot;Marinela&quot;);
     onomastici.get(LocalDate.of(2024, 8, 15)).add(&quot;Marilena&quot;);
     onomastici.get(LocalDate.of(2024, 8, 15)).add(&quot;Mario&quot;);
     onomastici.get(LocalDate.of(2024, 8, 15)).add(&quot;Marian&quot;);
     onomastici.get(LocalDate.of(2024, 8, 15)).add(&quot;Marin&quot;);
     onomastici.get(LocalDate.of(2024, 8, 15)).add(&quot;Marinel&quot;);
     onomastici.get(LocalDate.of(2024, 8, 15)).add(&quot;Marina&quot;);
     
     onomastici.get(LocalDate.of(2024, 12, 25)).add(&quot;Cristian&quot;);
     onomastici.get(LocalDate.of(2024, 12, 25)).add(&quot;Cristiana&quot;);
     onomastici.get(LocalDate.of(2024, 12, 25)).add(&quot;Cristina&quot;);
     onomastici.get(LocalDate.of(2024, 12, 25)).add(&quot;Christian&quot;);
     onomastici.get(LocalDate.of(2024, 12, 25)).add(&quot;Christina&quot;);
     
     onomastici.get(LocalDate.of(2024, 7, 7)).add(&quot;Teodor&quot;);
     onomastici.get(LocalDate.of(2024, 7, 7)).add(&quot;Theodor&quot;);
     onomastici.get(LocalDate.of(2024, 7, 7)).add(&quot;Teodora&quot;);
     
     onomastici.get(LocalDate.of(2024, 4, 23)).add(&quot;Gheorghe&quot;);
     onomastici.get(LocalDate.of(2024, 4, 23)).add(&quot;George&quot;);
     onomastici.get(LocalDate.of(2024, 4, 23)).add(&quot;Georgiana&quot;);
     onomastici.get(LocalDate.of(2024, 4, 23)).add(&quot;Georgeta&quot;);
     onomastici.get(LocalDate.of(2024, 4, 23)).add(&quot;Georgia&quot;);
     onomastici.get(LocalDate.of(2024, 4, 23)).add(&quot;Geanina&quot;);
     onomastici.get(LocalDate.of(2024, 4, 23)).add(&quot;Gianina&quot;);
     
     onomastici.get( LocalDate.of(2024, 11, 7)).add(&quot;Mihai&quot;);
     onomastici.get( LocalDate.of(2024, 11, 7)).add(&quot;Mihail&quot;);
     onomastici.get( LocalDate.of(2024, 11, 7)).add(&quot;Mihaela&quot;);
     onomastici.get( LocalDate.of(2024, 11, 7)).add(&quot;Gabriel&quot;);
     onomastici.get( LocalDate.of(2024, 11, 7)).add(&quot;Gabriela&quot;);
     onomastici.get( LocalDate.of(2024, 11, 7)).add(&quot;Mihnea&quot;);
     
     onomastici.get(LocalDate.of(2024, 5, 21)).add(&quot;Constantin&quot;);
     onomastici.get(LocalDate.of(2024, 5, 21)).add(&quot;Costin&quot;);
     onomastici.get(LocalDate.of(2024, 5, 21)).add(&quot;Elena&quot;);
     
     onomastici.get(LocalDate.of(2024, 11, 30)).add(&quot;Andrei&quot;);
     onomastici.get(LocalDate.of(2024, 11, 30)).add(&quot;Andreia&quot;);
     onomastici.get(LocalDate.of(2024, 11, 30)).add(&quot;Andreea&quot;);
     onomastici.get(LocalDate.of(2024, 11, 30)).add(&quot;Andreas&quot;);
     onomastici.get(LocalDate.of(2024, 11, 30)).add(&quot;Andra&quot;);
     onomastici.get(LocalDate.of(2024, 11, 30)).add(&quot;Andrada&quot;);
     
     onomastici.get(LocalDate.of(2024, 12, 27)).add(&quot;Stefan&quot;);
     onomastici.get(LocalDate.of(2024, 12, 27)).add(&quot;Stefana&quot;);
     onomastici.get(LocalDate.of(2024, 12, 27)).add(&quot;Stefania&quot;);
     onomastici.get(LocalDate.of(2024, 12, 27)).add(&quot;Stefanuta&quot;);
     onomastici.get(LocalDate.of(2024, 12, 27)).add(&quot;Stefanita&quot;);
     
     onomastici.get(LocalDate.of(2024, 6, 29)).add(&quot;Paul&quot;);
     onomastici.get(LocalDate.of(2024, 6, 29)).add(&quot;Paula&quot;);
     onomastici.get(LocalDate.of(2024, 6, 29)).add(&quot;Pavel&quot;);
     onomastici.get(LocalDate.of(2024, 6, 29)).add(&quot;Petru&quot;);
     onomastici.get(LocalDate.of(2024, 6, 29)).add(&quot;Petrica&quot;);
     onomastici.get(LocalDate.of(2024, 6, 29)).add(&quot;Petruta&quot;);
     onomastici.get(LocalDate.of(2024, 6, 29)).add(&quot;Petrut&quot;);
     
     //onomastici.get(LocalDate.of(2024, 8, 21)).add(&quot;Monica&quot;);
	    for (LocalDate i : onomastici.keySet()) {
	    	for (String j : onomastici.get(i)) {
		    String query = &quot;select email from useri where day(current_date())=&quot; + i.getDayOfMonth() + &quot; and month(current_date())= &quot; + i.getMonthValue() + &quot; and prenume like \&quot;&quot; + &quot;%&quot; + j + &quot;%\&quot;&quot;;
		    // select email from useri where day(current_date())=21 and month(current_date())=8 and prenume like &quot;%Monica%&quot;;
		   
		    String email = &quot;&quot;;
	
			    try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
			        ResultSet rs = preparedStatement.executeQuery();
			        if (rs.next()) {
			            email = rs.getString(&quot;email&quot;);
			            sendEmail5(email);
			        }
			    } catch (SQLException e) {
			        throw new IOException(&quot;Database error: &quot; + e.getMessage(), e);
			    }
		    }
	    }
	</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V_VjaUVdEfCS7cth2SLu0w" name="sendEmail5" specification="_VvbfIkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_V_VjakVdEfCS7cth2SLu0w" name="email">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>String subject = &quot;\uD83D\uDEA8 Aveti o notificare \uD83D\uDEA8&quot;;
	    String message = &quot;&lt;h1>La multi ani cu ocazia zilei numelui!&amp;#x1F389;&lt;/h1>&quot; 
	                   + &quot;Multa sanatate, succes, fericire si realizari pe toate planurile alaturi de cei dragi! &lt;br>&quot; 
	                   + &quot;&lt;b>&lt;i>Conducerea firmei XYZ.&lt;/i>&lt;/b>&amp;#x1F917;&quot;;

	    GMailServer sender = new GMailServer(&quot;liviaaamp@gmail.com&quot;, &quot;rtmz fzcp onhv minb&quot;);

	    try {
	        sender.send(subject, message, &quot;liviaaamp@gmail.com&quot;, email);
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	</body>
        </ownedBehavior>
        <ownedOperation xmi:id="_VvZp8EVdEfCS7cth2SLu0w" name="run" method="_V_U8UUVdEfCS7cth2SLu0w"/>
        <ownedOperation xmi:id="_VvZp8UVdEfCS7cth2SLu0w" name="acordaSalarii" visibility="private" method="_V_U8UkVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvZp8kVdEfCS7cth2SLu0w" name="connection" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvZp80VdEfCS7cth2SLu0w" name="generareSiTrimitereFluturash" visibility="private" method="_V_U8VEVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvZp9EVdEfCS7cth2SLu0w" name="idAng">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvZp9UVdEfCS7cth2SLu0w" name="email">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvZp9kVdEfCS7cth2SLu0w" name="nume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvZp90VdEfCS7cth2SLu0w" name="prenume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvZp-EVdEfCS7cth2SLu0w" name="departament">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvZp-UVdEfCS7cth2SLu0w" name="functie">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvZp-kVdEfCS7cth2SLu0w" name="salariuBrut">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvZp-0VdEfCS7cth2SLu0w" name="salariuBaza">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvZp_EVdEfCS7cth2SLu0w" name="spor">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvZp_UVdEfCS7cth2SLu0w" name="penalizare">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_VvaRAEVdEfCS7cth2SLu0w" name="sendReminders" visibility="private" method="_V_U8X0VdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvaRAUVdEfCS7cth2SLu0w" name="connection" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvaRAkVdEfCS7cth2SLu0w" name="sendReminders2" visibility="private" method="_V_U8YUVdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvaRA0VdEfCS7cth2SLu0w" name="connection" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvaRBEVdEfCS7cth2SLu0w" name="sendEmail2" visibility="private" method="_V_U8Y0VdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvaRBUVdEfCS7cth2SLu0w" name="nume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvaRBkVdEfCS7cth2SLu0w" name="prenume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_VvaRB0VdEfCS7cth2SLu0w" name="rs" type="_T9wtMEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vva4EEVdEfCS7cth2SLu0w" name="sendReminders4" visibility="private" method="_V_U8Z0VdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vva4EUVdEfCS7cth2SLu0w" name="connection" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vva4EkVdEfCS7cth2SLu0w" name="sendReminders3" visibility="private" method="_V_VjYEVdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vva4E0VdEfCS7cth2SLu0w" name="connection" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_Vva4FEVdEfCS7cth2SLu0w" name="sendEmail3" visibility="private" method="_V_VjYkVdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vva4FUVdEfCS7cth2SLu0w" name="nume">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_Vva4FkVdEfCS7cth2SLu0w" name="email">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_Vva4F0VdEfCS7cth2SLu0w" name="sendEmail" visibility="private" method="_V_VjZUVdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_Vva4GEVdEfCS7cth2SLu0w" name="rs" type="_T9wtMEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvbfIEVdEfCS7cth2SLu0w" name="sendReminders5" visibility="private" method="_V_VjZ0VdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvbfIUVdEfCS7cth2SLu0w" name="connection" type="_T9fncEVdEfCS7cth2SLu0w"/>
        </ownedOperation>
        <ownedOperation xmi:id="_VvbfIkVdEfCS7cth2SLu0w" name="sendEmail5" visibility="private" method="_V_VjaUVdEfCS7cth2SLu0w" raisedException="_V9SU8EVdEfCS7cth2SLu0w">
          <ownedParameter xmi:id="_VvbfI0VdEfCS7cth2SLu0w" name="email">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_WAI0pEVdEfCS7cth2SLu0w" name="" memberEnd="_WAI0pUVdEfCS7cth2SLu0w _V-mjmEVdEfCS7cth2SLu0w">
        <ownedEnd xmi:id="_WAI0pUVdEfCS7cth2SLu0w" name="" type="_VvVYgEVdEfCS7cth2SLu0w" association="_WAI0pEVdEfCS7cth2SLu0w"/>
      </packagedElement>
    </packagedElement>
    <profileApplication xmi:id="_HQLnUEVdEfCS7cth2SLu0w">
      <eAnnotations xmi:id="_HQOqoEVdEfCS7cth2SLu0w" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile"/>
    </profileApplication>
  </uml:Model>
  <UMLLabProfile:TargetLanguage xmi:id="_HQRt8EVdEfCS7cth2SLu0w" base_Package="_HLdfYEVdEfCS7cth2SLu0w">
    <languageName>java</languageName>
  </UMLLabProfile:TargetLanguage>
  <UMLLabProfile:LegacyStyledElement xmi:id="_S5Du8EVdEfCS7cth2SLu0w" base_Element="_S5DH4UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_S5GyQEVdEfCS7cth2SLu0w" base_Element="_S5DH4UVdEfCS7cth2SLu0w">
    <annotations xmi:id="_S5HZUEVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_S5PVIEVdEfCS7cth2SLu0w" base_Element="_S5OuEEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_S5P8MEVdEfCS7cth2SLu0w" base_Element="_S5OuEEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_S5P8MUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_S5Wp4EVdEfCS7cth2SLu0w" base_Element="_S5WC0EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_S5XQ8EVdEfCS7cth2SLu0w" base_Element="_S5WC0EVdEfCS7cth2SLu0w">
    <annotations xmi:id="_S5XQ8UVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_S5ksUEVdEfCS7cth2SLu0w" base_Element="_S5kFQEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_S5lTYEVdEfCS7cth2SLu0w" base_Element="_S5kFQEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_S5lTYUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_S5yuwEVdEfCS7cth2SLu0w" base_Element="_S5yHsEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_S5zV0EVdEfCS7cth2SLu0w" base_Element="_S5yHsEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_S5zV0UVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_S6kK0EVdEfCS7cth2SLu0w" base_Element="_S6jjwEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_S6kx4EVdEfCS7cth2SLu0w" base_Element="_S6jjwEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_S6kx4UVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_S6pDUEVdEfCS7cth2SLu0w" base_Element="_S6ocQEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_S6pqYEVdEfCS7cth2SLu0w" base_Element="_S6ocQEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_S6pqYUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_S6q4gEVdEfCS7cth2SLu0w" base_Element="_S6qRcEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_S6rfkEVdEfCS7cth2SLu0w" base_Element="_S6qRcUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_S6sGoEVdEfCS7cth2SLu0w" base_Element="_S6qRcEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_S6sGoUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_S6tUwEVdEfCS7cth2SLu0w" base_Element="_S6stsEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_S6ui4EVdEfCS7cth2SLu0w" base_Element="_S6stsUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_S6vJ8EVdEfCS7cth2SLu0w" base_Element="_S6stsEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_S6vJ8UVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_S6wYEEVdEfCS7cth2SLu0w" base_Element="_S6vxAEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_S6w_IEVdEfCS7cth2SLu0w" base_Element="_S6vxAEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_S6w_IUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_S9NPIUVdEfCS7cth2SLu0w" base_Element="_S9MoEEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_S9Q5gEVdEfCS7cth2SLu0w" base_Element="_S9QScEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_S-_-4EVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_S--wwEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_S_Jv4EVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_S_IhwEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_S_REoEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_S_QdkEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_S_ZAcEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_S_XyU0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_S_oRAEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_S_np8EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_S_vlwEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_S_uXoEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_S_5WwEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_S_4IoEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_TABSkEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_TAAEcEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_TADHwEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_TACgsEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_TAKcgEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_TAJOYUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_TASYUEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_TARKMEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_TAbiQEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_TAaUIEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_TAi3AEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_TAho4EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_TAqy0EVdEfCS7cth2SLu0w" base_Element="_TAqLwEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_TAz8wEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_TAzVsEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_TA3nIEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_TA1x8EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_TA5cUEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_TA4OMEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_TA6qcEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_TA6DYEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_TBCmQEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_TBB_MEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_TBIs4EVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_TBIF0EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_TBOMcEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_TBNlYUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_TBTsAEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_TBTE8UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_TBZyoEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_TBZLkEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T9jR0EVdEfCS7cth2SLu0w" base_Element="_T9fncEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T9lHAEVdEfCS7cth2SLu0w" base_Element="_T9kf8EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T9luEEVdEfCS7cth2SLu0w" base_Element="_T9lHAUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T9m8MEVdEfCS7cth2SLu0w" base_Element="_T9mVIEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T9xUQEVdEfCS7cth2SLu0w" base_Element="_T9wtMEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T91lsEVdEfCS7cth2SLu0w" base_Element="_T90-oEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T94pAEVdEfCS7cth2SLu0w" base_Element="_T94B8EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T953IEVdEfCS7cth2SLu0w" base_Element="_T95QEEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T96eMEVdEfCS7cth2SLu0w" base_Element="_T953IUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T97FQEVdEfCS7cth2SLu0w" base_Element="_T96eMUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T97sUEVdEfCS7cth2SLu0w" base_Element="_T97FQUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T98TYEVdEfCS7cth2SLu0w" base_Element="_T97sUUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T9-IkEVdEfCS7cth2SLu0w" base_Element="_T99hgEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T9-voEVdEfCS7cth2SLu0w" base_Element="_T9-IkUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T9_WsEVdEfCS7cth2SLu0w" base_Element="_T9-voUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T9_9wEVdEfCS7cth2SLu0w" base_Element="_T9_WsUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-Ak0EVdEfCS7cth2SLu0w" base_Element="_T9_9wUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-DBEEVdEfCS7cth2SLu0w" base_Element="_T-CaAEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-EPMEVdEfCS7cth2SLu0w" base_Element="_T-DoIEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-JHsEVdEfCS7cth2SLu0w" base_Element="_T-IgoEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-MyEEVdEfCS7cth2SLu0w" base_Element="_T-MLAEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-P1YEVdEfCS7cth2SLu0w" base_Element="_T-POUEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-RDgEVdEfCS7cth2SLu0w" base_Element="_T-QccEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-TfwEVdEfCS7cth2SLu0w" base_Element="_T-S4sEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-UG0EVdEfCS7cth2SLu0w" base_Element="_T-TfwUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-Ut4EVdEfCS7cth2SLu0w" base_Element="_T-UG0UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-VU8EVdEfCS7cth2SLu0w" base_Element="_T-Ut4UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-V8AUVdEfCS7cth2SLu0w" base_Element="_T-V8AEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-WjEEVdEfCS7cth2SLu0w" base_Element="_T-V8AkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-aNcEVdEfCS7cth2SLu0w" base_Element="_T-Y_UEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-aNckVdEfCS7cth2SLu0w" base_Element="_T-aNcUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-d30EVdEfCS7cth2SLu0w" base_Element="_T-dQwEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-ee4EVdEfCS7cth2SLu0w" base_Element="_T-d30UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-fF8EVdEfCS7cth2SLu0w" base_Element="_T-ee4UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-ftAEVdEfCS7cth2SLu0w" base_Element="_T-fF8UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-gUEEVdEfCS7cth2SLu0w" base_Element="_T-ftAUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-iwUUVdEfCS7cth2SLu0w" base_Element="_T-iwUEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-jXYEVdEfCS7cth2SLu0w" base_Element="_T-iwUkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-j-cEVdEfCS7cth2SLu0w" base_Element="_T-jXYUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-lMkEVdEfCS7cth2SLu0w" base_Element="_T-klgEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-lzoUVdEfCS7cth2SLu0w" base_Element="_T-lzoEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-nBwEVdEfCS7cth2SLu0w" base_Element="_T-masEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-no0EVdEfCS7cth2SLu0w" base_Element="_T-nBwUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-o28EVdEfCS7cth2SLu0w" base_Element="_T-no0UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-peAEVdEfCS7cth2SLu0w" base_Element="_T-o28UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-wywEVdEfCS7cth2SLu0w" base_Element="_T-wLsEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-yn8EVdEfCS7cth2SLu0w" base_Element="_T-yA4EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-zPAEVdEfCS7cth2SLu0w" base_Element="_T-yn8UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-z2EEVdEfCS7cth2SLu0w" base_Element="_T-zPAUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-0dIEVdEfCS7cth2SLu0w" base_Element="_T-z2EUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-1rQEVdEfCS7cth2SLu0w" base_Element="_T-1EMEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T-7K0EVdEfCS7cth2SLu0w" base_Element="_T-58sEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T_jc8EVdEfCS7cth2SLu0w" base_Element="_T_hnwEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T_jc8kVdEfCS7cth2SLu0w" base_Element="_T_jc8UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T_nHUEVdEfCS7cth2SLu0w" base_Element="_T_mgQEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T_nuYEVdEfCS7cth2SLu0w" base_Element="_T_nHUUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T_oVcEVdEfCS7cth2SLu0w" base_Element="_T_nuYUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T_o8gEVdEfCS7cth2SLu0w" base_Element="_T_oVcUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T_pjkEVdEfCS7cth2SLu0w" base_Element="_T_o8gUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_T_yGcEVdEfCS7cth2SLu0w" base_Element="_T_xfYEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UAHdoEVdEfCS7cth2SLu0w" base_Element="_UAGPgEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UAIEsEVdEfCS7cth2SLu0w" base_Element="_UAHdoUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UAXVQEVdEfCS7cth2SLu0w" base_Element="_UAWHIEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UAgfMEVdEfCS7cth2SLu0w" base_Element="_UAfREEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UAkwoEVdEfCS7cth2SLu0w" base_Element="_UAkJkEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UAlXsEVdEfCS7cth2SLu0w" base_Element="_UAkwoUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UAnM4EVdEfCS7cth2SLu0w" base_Element="_UAl-wEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UBG8IEVdEfCS7cth2SLu0w" base_Element="_UBFuAEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UBSiUEVdEfCS7cth2SLu0w" base_Element="_UBRUMEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UBf9sEVdEfCS7cth2SLu0w" base_Element="_UBfWoEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UBhL0EVdEfCS7cth2SLu0w" base_Element="_UBgkwEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UCQLoEVdEfCS7cth2SLu0w" base_Element="_UCPkkUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UCy-MEVdEfCS7cth2SLu0w" base_Element="_UCxwEEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UCzlQEVdEfCS7cth2SLu0w" base_Element="_UCxwEEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UCzlQUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UC0zZEVdEfCS7cth2SLu0w" base_Element="_UC0zYEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UC1acEVdEfCS7cth2SLu0w" base_Element="_UC0zYEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UC1acUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UC32sEVdEfCS7cth2SLu0w" base_Element="_UC3PoEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UC32sUVdEfCS7cth2SLu0w" base_Element="_UC3PoEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UC32skVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UC5E1EVdEfCS7cth2SLu0w" base_Element="_UC5E0EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UC5r4EVdEfCS7cth2SLu0w" base_Element="_UC5E0EVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UC5r4UVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UC8IIEVdEfCS7cth2SLu0w" base_Element="_UC7hEEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UC8IIUVdEfCS7cth2SLu0w" base_Element="_UC7hEEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UC8IIkVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UC9WQEVdEfCS7cth2SLu0w" base_Element="_UC8vMEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UC9WQUVdEfCS7cth2SLu0w" base_Element="_UC8vMEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UC9WQkVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UDBAokVdEfCS7cth2SLu0w" base_Element="_UDBAoEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UDBnsEVdEfCS7cth2SLu0w" base_Element="_UDBAoEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UDBnsUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UDCOxEVdEfCS7cth2SLu0w" base_Element="_UDCOwEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UDC10EVdEfCS7cth2SLu0w" base_Element="_UDCOwEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UDC10UVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UDFSEUVdEfCS7cth2SLu0w" base_Element="_UDErAUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UDF5IEVdEfCS7cth2SLu0w" base_Element="_UDErAUVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UDF5IUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UDGgNEVdEfCS7cth2SLu0w" base_Element="_UDGgMEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UDHHQEVdEfCS7cth2SLu0w" base_Element="_UDGgMEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UDHHQUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UDQ4QEVdEfCS7cth2SLu0w" base_Element="_UDQRM0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UDRfUEVdEfCS7cth2SLu0w" base_Element="_UDQRM0VdEfCS7cth2SLu0w">
    <annotations xmi:id="_UDRfUUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UDdskEVdEfCS7cth2SLu0w" base_Element="_UDdFgEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UDdskUVdEfCS7cth2SLu0w" base_Element="_UDdFgEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UDdskkVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UDwngEVdEfCS7cth2SLu0w" base_Element="_UDwAcEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UDwngUVdEfCS7cth2SLu0w" base_Element="_UDwAcEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UDwngkVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UENTc0VdEfCS7cth2SLu0w" base_Element="_UENTcEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UEN6gEVdEfCS7cth2SLu0w" base_Element="_UENTcEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UEN6gUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UEOhk0VdEfCS7cth2SLu0w" base_Element="_UEOhkEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UEPIoEVdEfCS7cth2SLu0w" base_Element="_UEOhkEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UEPIoUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UEwtEEVdEfCS7cth2SLu0w" base_Element="_UEwGAEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UEwtEUVdEfCS7cth2SLu0w" base_Element="_UEwGAEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UEwtEkVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UE-IckVdEfCS7cth2SLu0w" base_Element="_UE9hYEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UE-vgEVdEfCS7cth2SLu0w" base_Element="_UE9hYEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UE-vgUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_UFJuoEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_UFJHkEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_UFOAEkVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_UFNZAEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UFRDYkVdEfCS7cth2SLu0w" base_Element="_UFQcUEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UFRqcEVdEfCS7cth2SLu0w" base_Element="_UFQcUEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UFRqcUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UFhiEEVdEfCS7cth2SLu0w" base_Element="_UFfF0EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UFiJIEVdEfCS7cth2SLu0w" base_Element="_UFfF0EVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UFiwMEVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UFlMc0VdEfCS7cth2SLu0w" base_Element="_UFlMcEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UFlMdEVdEfCS7cth2SLu0w" base_Element="_UFlMcEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UFlMdUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UFqsA0VdEfCS7cth2SLu0w" base_Element="_UFqsAEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UFqsBEVdEfCS7cth2SLu0w" base_Element="_UFqsAEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UFqsBUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UFr6IEVdEfCS7cth2SLu0w" base_Element="_UFrTEEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UFr6IUVdEfCS7cth2SLu0w" base_Element="_UFrTEEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UFr6IkVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UFvkg0VdEfCS7cth2SLu0w" base_Element="_UFvkgEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UFwLkEVdEfCS7cth2SLu0w" base_Element="_UFvkgEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UFwLkUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UFyAwEVdEfCS7cth2SLu0w" base_Element="_UFxZsEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_UFyAwUVdEfCS7cth2SLu0w" base_Element="_UFxZsEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UFyAwkVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGCfcEVdEfCS7cth2SLu0w" base_Element="_UGB4YEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGDGgkVdEfCS7cth2SLu0w" base_Element="_UGDGgEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGHX8UVdEfCS7cth2SLu0w" base_Element="_UGHX8EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_UGImEEVdEfCS7cth2SLu0w" genericsValue="String, AtomicInteger" base_Element="_UGH_AEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGJNIEVdEfCS7cth2SLu0w" base_Element="_UGH_AEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGJ0MEVdEfCS7cth2SLu0w" base_Element="_UGJNIUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGOssEVdEfCS7cth2SLu0w" base_Element="_UGOFo0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGOsskVdEfCS7cth2SLu0w" base_Element="_UGOssUVdEfCS7cth2SLu0w">
    <associatedElement xmi:type="uml:Operation" xmi:id="_UGPTwUVdEfCS7cth2SLu0w" name="getOutputStream" method="_UISiM0VdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
      <ownedParameter xmi:id="_UGP60EVdEfCS7cth2SLu0w" type="_T-yA4EVdEfCS7cth2SLu0w" direction="return"/>
    </associatedElement>
  </UMLLabProfile:LegacyStyledElement>
  <UMLLabProfile:Annotations xmi:id="_UGQh4EVdEfCS7cth2SLu0w" base_Element="_UGPTwUVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UGQh4UVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGRI8UVdEfCS7cth2SLu0w" base_Element="_UGQh4kVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGRwAEVdEfCS7cth2SLu0w" base_Element="_UGRI8kVdEfCS7cth2SLu0w">
    <associatedElement xmi:type="uml:Operation" xmi:id="_UGRwAkVdEfCS7cth2SLu0w" name="getWriter" method="_UITJQEVdEfCS7cth2SLu0w" raisedException="_T94B8EVdEfCS7cth2SLu0w">
      <ownedParameter xmi:id="_UGSXEEVdEfCS7cth2SLu0w" type="_T-CaAEVdEfCS7cth2SLu0w" direction="return"/>
    </associatedElement>
  </UMLLabProfile:LegacyStyledElement>
  <UMLLabProfile:Annotations xmi:id="_UGSXEUVdEfCS7cth2SLu0w" base_Element="_UGRwAkVdEfCS7cth2SLu0w">
    <annotations xmi:id="_UGSXEkVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGS-IUVdEfCS7cth2SLu0w" base_Element="_UGSXE0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGTlMUVdEfCS7cth2SLu0w" base_Element="_UGTlMEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGWBcEVdEfCS7cth2SLu0w" base_Element="_UGVaYUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGWBckVdEfCS7cth2SLu0w" base_Element="_UGWBcUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGWogUVdEfCS7cth2SLu0w" base_Element="_UGWogEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGXPkEVdEfCS7cth2SLu0w" base_Element="_UGWogkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGXPkkVdEfCS7cth2SLu0w" base_Element="_UGXPkUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGaS4EVdEfCS7cth2SLu0w" base_Element="_UGZr0EVdEfCS7cth2SLu0w">
    <associatedElement xmi:type="uml:Operation" xmi:id="_UGaS4UVdEfCS7cth2SLu0w" name="getConnection" visibility="private" method="_UIWzo0VdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
      <ownedParameter xmi:id="_UGaS4kVdEfCS7cth2SLu0w" type="_T9fncEVdEfCS7cth2SLu0w" direction="return"/>
    </associatedElement>
  </UMLLabProfile:LegacyStyledElement>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGbhAUVdEfCS7cth2SLu0w" base_Element="_UGbhAEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGcIEUVdEfCS7cth2SLu0w" base_Element="_UGcIEEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGcvIEVdEfCS7cth2SLu0w" base_Element="_UGcIEkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGfLYEVdEfCS7cth2SLu0w" base_Element="_UGekUkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGhnpEVdEfCS7cth2SLu0w" base_Element="_UGhno0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGkq8kVdEfCS7cth2SLu0w" base_Element="_UGkq8UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGmgIUVdEfCS7cth2SLu0w" base_Element="_UGmgIEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGsmwUVdEfCS7cth2SLu0w" base_Element="_UGsmwEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGt04EVdEfCS7cth2SLu0w" base_Element="_UGtN0kVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UGub8UVdEfCS7cth2SLu0w" base_Element="_UGub8EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_UGvqEEVdEfCS7cth2SLu0w" genericsValue="String" base_Element="_UGvDAUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UG0ikEVdEfCS7cth2SLu0w" base_Element="_UGz7gkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UG2XwEVdEfCS7cth2SLu0w" base_Element="_UG1wskVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UG2XwkVdEfCS7cth2SLu0w" base_Element="_UG2XwUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UG2-0UVdEfCS7cth2SLu0w" base_Element="_UG2-0EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UG3l4EVdEfCS7cth2SLu0w" base_Element="_UG2-0kVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UG3l4kVdEfCS7cth2SLu0w" base_Element="_UG3l4UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UG5bEUVdEfCS7cth2SLu0w" base_Element="_UG5bEEVdEfCS7cth2SLu0w">
    <associatedElement xmi:type="uml:Operation" xmi:id="_UG6CIEVdEfCS7cth2SLu0w" name="getConnection" visibility="private" method="_UIv1MUVdEfCS7cth2SLu0w" raisedException="_T9mVIEVdEfCS7cth2SLu0w">
      <ownedParameter xmi:id="_UG6pMEVdEfCS7cth2SLu0w" type="_T9fncEVdEfCS7cth2SLu0w" direction="return"/>
    </associatedElement>
  </UMLLabProfile:LegacyStyledElement>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UG7QQEVdEfCS7cth2SLu0w" base_Element="_UG6pMUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UG7QQkVdEfCS7cth2SLu0w" base_Element="_UG7QQUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UG73UEVdEfCS7cth2SLu0w" base_Element="_UG7QQ0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_UHROgEVdEfCS7cth2SLu0w" genericsValue="String, String[]" base_Element="_UHQndEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UHc0skVdEfCS7cth2SLu0w" base_Element="_UHc0sUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_UHeC0EVdEfCS7cth2SLu0w" base_Element="_UHdbwkVdEfCS7cth2SLu0w"/>
  <uml:OpaqueBehavior xmi:id="_UISiM0VdEfCS7cth2SLu0w" name="getOutputStream" specification="_UGPTwUVdEfCS7cth2SLu0w">
    <ownedParameter xmi:id="_UISiNEVdEfCS7cth2SLu0w" type="_T-yA4EVdEfCS7cth2SLu0w" direction="return"/>
    <language>java</language>
    <body>if (isUsingWriter) {&#xD;
         throw new IllegalStateException(&quot;getWriter() already called&quot;);&#xD;
     }&#xD;
     &#xD;
     if (servletOutputStream == null) {&#xD;
         servletOutputStream = new CustomServletOutputStream(outputStream);&#xD;
     }&#xD;
     &#xD;
     return servletOutputStream;&#xD;
 </body>
  </uml:OpaqueBehavior>
  <uml:OpaqueBehavior xmi:id="_UITJQEVdEfCS7cth2SLu0w" name="getWriter" specification="_UGRwAkVdEfCS7cth2SLu0w">
    <ownedParameter xmi:id="_UITJQUVdEfCS7cth2SLu0w" type="_T-CaAEVdEfCS7cth2SLu0w" direction="return"/>
    <language>java</language>
    <body>if (servletOutputStream != null) {&#xD;
         throw new IllegalStateException(&quot;getOutputStream() already called&quot;);&#xD;
     }&#xD;
     &#xD;
     if (writer == null) {&#xD;
         writer = new PrintWriter(stringWriter);&#xD;
         isUsingWriter = true;&#xD;
     }&#xD;
     &#xD;
     return writer;&#xD;
 </body>
  </uml:OpaqueBehavior>
  <uml:OpaqueBehavior xmi:id="_UIWzo0VdEfCS7cth2SLu0w" name="getConnection" specification="_UGaS4UVdEfCS7cth2SLu0w">
    <ownedParameter xmi:id="_UIWzpEVdEfCS7cth2SLu0w" type="_T9fncEVdEfCS7cth2SLu0w" direction="return"/>
    <language>java</language>
    <body>return DriverManager.getConnection(URL, USER, PASSWORD);&#xD;
 </body>
  </uml:OpaqueBehavior>
  <uml:OpaqueBehavior xmi:id="_UIv1MUVdEfCS7cth2SLu0w" name="getConnection" specification="_UG6CIEVdEfCS7cth2SLu0w">
    <ownedParameter xmi:id="_UIv1MkVdEfCS7cth2SLu0w" type="_T9fncEVdEfCS7cth2SLu0w" direction="return"/>
    <language>java</language>
    <body>return DriverManager.getConnection(URL, USER, PASSWORD);&#xD;
 </body>
  </uml:OpaqueBehavior>
  <UMLLabProfile:Reference xmi:id="_UKFR8EVdEfCS7cth2SLu0w" base_Element="_UKED0EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKF5AkVdEfCS7cth2SLu0w" base_Element="_UKF5AEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKGgEEVdEfCS7cth2SLu0w" base_Element="_UKF5A0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKHHIEVdEfCS7cth2SLu0w" base_Element="_UKGgEUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKHuMEVdEfCS7cth2SLu0w" base_Element="_UKHHIUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKIVQEVdEfCS7cth2SLu0w" base_Element="_UKHuMUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKIVQ0VdEfCS7cth2SLu0w" base_Element="_UKIVQUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKI8UkVdEfCS7cth2SLu0w" base_Element="_UKI8UEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKJjYEVdEfCS7cth2SLu0w" base_Element="_UKI8U0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKKKcEVdEfCS7cth2SLu0w" base_Element="_UKJjYUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKKxgEVdEfCS7cth2SLu0w" base_Element="_UKKKcUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKLYkEVdEfCS7cth2SLu0w" base_Element="_UKKxgUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKL_oEVdEfCS7cth2SLu0w" base_Element="_UKLYkUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKMmsEVdEfCS7cth2SLu0w" base_Element="_UKL_oUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKNNwEVdEfCS7cth2SLu0w" base_Element="_UKMmsUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKN00EVdEfCS7cth2SLu0w" base_Element="_UKNNwUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKOb4EVdEfCS7cth2SLu0w" base_Element="_UKN00UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKPC8EVdEfCS7cth2SLu0w" base_Element="_UKOb4UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKPqAEVdEfCS7cth2SLu0w" base_Element="_UKPC8UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKQ4IEVdEfCS7cth2SLu0w" base_Element="_UKPqAUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKQ4I0VdEfCS7cth2SLu0w" base_Element="_UKQ4IUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKRfMEVdEfCS7cth2SLu0w" base_Element="_UKQ4JEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKSGQEVdEfCS7cth2SLu0w" base_Element="_UKRfMUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKStUEVdEfCS7cth2SLu0w" base_Element="_UKSGQUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKTUYEVdEfCS7cth2SLu0w" base_Element="_UKStUUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKT7cEVdEfCS7cth2SLu0w" base_Element="_UKTUYUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKUigEVdEfCS7cth2SLu0w" base_Element="_UKT7cUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKVJkEVdEfCS7cth2SLu0w" base_Element="_UKUigUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKWXsEVdEfCS7cth2SLu0w" base_Element="_UKVwoEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKW-wEVdEfCS7cth2SLu0w" base_Element="_UKWXsUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKW-w0VdEfCS7cth2SLu0w" base_Element="_UKW-wUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKXl0EVdEfCS7cth2SLu0w" base_Element="_UKW-xEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKYM4EVdEfCS7cth2SLu0w" base_Element="_UKXl0UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKYz8EVdEfCS7cth2SLu0w" base_Element="_UKYM4UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKaCEEVdEfCS7cth2SLu0w" base_Element="_UKZbAEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKaCE0VdEfCS7cth2SLu0w" base_Element="_UKaCEUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKapIkVdEfCS7cth2SLu0w" base_Element="_UKapIEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKb3QEVdEfCS7cth2SLu0w" base_Element="_UKbQMEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKceUEVdEfCS7cth2SLu0w" base_Element="_UKb3QUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_UKdscEVdEfCS7cth2SLu0w" base_Element="_UKceUUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VpFmkUVdEfCS7cth2SLu0w" base_Element="_VpFmkEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VpGNoEVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VrezQEVdEfCS7cth2SLu0w" base_Element="_VpEYcEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VrfaUEVdEfCS7cth2SLu0w" base_Element="_VpFmkEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_VsRdcEVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_VsQ2ZUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_VsTSpkVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_VsTSpUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VsaAUUVdEfCS7cth2SLu0w" base_Element="_VsaAUEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VsanYEVdEfCS7cth2SLu0w" base_Element="_VsaAUEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VsanYUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_VsbOcUVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_VsanakVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_VsgG8EVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_Vsff4EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_VsjxUEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_VsjKQ0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_Vsm0pEVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_Vsm0o0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_VsoCwEVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_Vsnbs0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_Vsya00VdEfCS7cth2SLu0w" base_Element="_Vsya0EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VszB4EVdEfCS7cth2SLu0w" base_Element="_Vsya1EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VszB5EVdEfCS7cth2SLu0w" base_Element="_VszB4UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_Vs0QA0VdEfCS7cth2SLu0w" genericsValue="String" base_Element="_Vszo80VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_Vs03EEVdEfCS7cth2SLu0w" genericsValue="String" base_Element="_Vszo9EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_Vs1eIEVdEfCS7cth2SLu0w" genericsValue="String" base_Element="_Vszo9UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_Vs4hcEVdEfCS7cth2SLu0w" genericsValue="String, Double" base_Element="_Vs36YkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_Vs-oEEVdEfCS7cth2SLu0w" genericsValue="String" base_Element="_Vs-BAUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_Vs_PIEVdEfCS7cth2SLu0w" genericsValue="String, List&lt;String>" base_Element="_Vs-oFEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_Vs_PJEVdEfCS7cth2SLu0w" genericsValue="String, Double" base_Element="_Vs_PIUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_VtBrYEVdEfCS7cth2SLu0w" genericsValue="String, Double" base_Element="_VtBEUkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VtHK8EVdEfCS7cth2SLu0w" base_Element="_VtGj4EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VtHK8UVdEfCS7cth2SLu0w" base_Element="_VtGj4EVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VtHK8kVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VtHyAEVdEfCS7cth2SLu0w" base_Element="_VtHK80VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VtHyAUVdEfCS7cth2SLu0w" base_Element="_VtHK80VdEfCS7cth2SLu0w">
    <annotations xmi:id="_VtHyAkVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VtJAIEVdEfCS7cth2SLu0w" base_Element="_VtIZEUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VtJnMEVdEfCS7cth2SLu0w" base_Element="_VtJAIUVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VtJnMUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Annotations xmi:id="_VtJnNUVdEfCS7cth2SLu0w" base_Element="_VtJnMkVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VtJnNkVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:StyledElement xmi:id="_VtKOQ0VdEfCS7cth2SLu0w" base_Element="_VtKOQEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtK1UEVdEfCS7cth2SLu0w" base_Element="_VtKOREVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtK1U0VdEfCS7cth2SLu0w" base_Element="_VtK1UUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VtK1VUVdEfCS7cth2SLu0w" base_Element="_VtIZEUVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VtK1VkVdEfCS7cth2SLu0w" name="WebServlet">
      <annotationParameters xmi:id="_VtLcYEVdEfCS7cth2SLu0w" skipName="true" skipArray="true">
        <valueSpecifications xmi:type="uml:LiteralString" xmi:id="_V_eGT0VdEfCS7cth2SLu0w" value="&quot;/logout&quot;"/>
      </annotationParameters>
    </annotations>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VtMqgUVdEfCS7cth2SLu0w" base_Element="_VtMqgEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VtMqgkVdEfCS7cth2SLu0w" base_Element="_VtMqgEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VtMqg0VdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VtNRkkVdEfCS7cth2SLu0w" base_Element="_VtMqhEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VtNRk0VdEfCS7cth2SLu0w" base_Element="_VtMqhEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VtNRlEVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VtN4oEVdEfCS7cth2SLu0w" base_Element="_VtNRlUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VtN4oUVdEfCS7cth2SLu0w" base_Element="_VtNRlUVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VtN4okVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VtQ78UVdEfCS7cth2SLu0w" base_Element="_VtQ78EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtRjBEVdEfCS7cth2SLu0w" base_Element="_VtRjAEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtRjBkVdEfCS7cth2SLu0w" base_Element="_VtRjBUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtRjCkVdEfCS7cth2SLu0w" base_Element="_VtRjB0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtSKE0VdEfCS7cth2SLu0w" base_Element="_VtSKEEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtSKF0VdEfCS7cth2SLu0w" base_Element="_VtSKFEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtSxIUVdEfCS7cth2SLu0w" base_Element="_VtSKGEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtSxJUVdEfCS7cth2SLu0w" base_Element="_VtSxIkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtTYMEVdEfCS7cth2SLu0w" base_Element="_VtSxJkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtTYNUVdEfCS7cth2SLu0w" base_Element="_VtTYMUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtT_QUVdEfCS7cth2SLu0w" base_Element="_VtTYNkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtT_RUVdEfCS7cth2SLu0w" base_Element="_VtT_QkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtUmUkVdEfCS7cth2SLu0w" base_Element="_VtT_RkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtUmV0VdEfCS7cth2SLu0w" base_Element="_VtUmU0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtVNYEVdEfCS7cth2SLu0w" base_Element="_VtUmWEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtVNY0VdEfCS7cth2SLu0w" base_Element="_VtVNYUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VtVNZUVdEfCS7cth2SLu0w" base_Element="_VtQ78EVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VtVNZkVdEfCS7cth2SLu0w" name="WebServlet">
      <annotationParameters xmi:id="_VtVNZ0VdEfCS7cth2SLu0w" name="asyncSupported" skipArray="true">
        <valueSpecifications xmi:type="uml:LiteralString" xmi:id="_V_etVUVdEfCS7cth2SLu0w" value="true"/>
      </annotationParameters>
    </annotations>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VtZe0EVdEfCS7cth2SLu0w" base_Element="_VtY3wEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtZe1EVdEfCS7cth2SLu0w" base_Element="_VtZe0UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VtaF4EVdEfCS7cth2SLu0w" base_Element="_VtY3wEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VtaF4UVdEfCS7cth2SLu0w" name="MultipartConfig">
      <annotationParameters xmi:id="_VtaF4kVdEfCS7cth2SLu0w" name="maxFileSize" skipArray="true">
        <valueSpecifications xmi:type="uml:LiteralString" xmi:id="_V_fUYEVdEfCS7cth2SLu0w" value="16177216"/>
      </annotationParameters>
    </annotations>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_Vtas8UVdEfCS7cth2SLu0w" base_Element="_Vtas8EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtbUAEVdEfCS7cth2SLu0w" base_Element="_Vtas8kVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VtbUBUVdEfCS7cth2SLu0w" base_Element="_VtbUAUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_Vtb7EUVdEfCS7cth2SLu0w" base_Element="_VtbUBkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_Vtb7F0VdEfCS7cth2SLu0w" base_Element="_Vtb7EkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_Vtb7G0VdEfCS7cth2SLu0w" base_Element="_Vtb7GEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VtciIEVdEfCS7cth2SLu0w" base_Element="_Vtas8EVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VtciIUVdEfCS7cth2SLu0w" name="WebServlet">
      <annotationParameters xmi:id="_VtciIkVdEfCS7cth2SLu0w" skipName="true" skipArray="true">
        <valueSpecifications xmi:type="uml:LiteralString" xmi:id="_V_fUYUVdEfCS7cth2SLu0w" value="&quot;/register&quot;"/>
      </annotationParameters>
    </annotations>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_Vte-Y0VdEfCS7cth2SLu0w" base_Element="_Vte-YEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VtiBsEVdEfCS7cth2SLu0w" base_Element="_Vthap0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_VtiBtEVdEfCS7cth2SLu0w" genericsValue="String, String" base_Element="_VtiBsUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_Vtj240VdEfCS7cth2SLu0w" genericsValue="String, String" base_Element="_Vtj24EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_Vtkd80VdEfCS7cth2SLu0w" genericsValue="String, String" base_Element="_Vtkd8kVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_VtovYEVdEfCS7cth2SLu0w" genericsValue="String" base_Element="_VtoIUkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VtpWcEVdEfCS7cth2SLu0w" base_Element="_VtovYUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VtsZwUVdEfCS7cth2SLu0w" base_Element="_VtrytEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VtsZwkVdEfCS7cth2SLu0w" base_Element="_VtrytEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VtsZw0VdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_Vt3Y4EVdEfCS7cth2SLu0w" base_Element="_Vt2x0EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_Vt3_8EVdEfCS7cth2SLu0w" base_Element="_Vt3Y4UVdEfCS7cth2SLu0w">
    <annotations xmi:id="_Vt3_8UVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Annotations xmi:id="_Vt4nAEVdEfCS7cth2SLu0w" base_Element="_Vt2x0EVdEfCS7cth2SLu0w">
    <annotations xmi:id="_Vt4nAUVdEfCS7cth2SLu0w" name="WebServlet">
      <annotationParameters xmi:id="_Vt4nAkVdEfCS7cth2SLu0w" name="name" skipArray="true">
        <valueSpecifications xmi:type="uml:LiteralString" xmi:id="_V_hJkEVdEfCS7cth2SLu0w" value="&quot;PeanServlet&quot;"/>
      </annotationParameters>
      <annotationParameters xmi:id="_Vt4nA0VdEfCS7cth2SLu0w" name="urlPatterns">
        <valueSpecifications xmi:type="uml:LiteralString" xmi:id="_V_hJkUVdEfCS7cth2SLu0w" value="&quot;/PeanServlet&quot;"/>
      </annotationParameters>
    </annotations>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_Vt-Gk0VdEfCS7cth2SLu0w" base_Element="_Vt-GkEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_Vt-toEVdEfCS7cth2SLu0w" base_Element="_Vt-GkEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_Vt-toUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VuC_E0VdEfCS7cth2SLu0w" base_Element="_VuC_EEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VuDmIEVdEfCS7cth2SLu0w" base_Element="_VuC_EEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VuDmIUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_VuE0RUVdEfCS7cth2SLu0w" genericsValue="String, Double" base_Element="_VuE0QEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VuMJA0VdEfCS7cth2SLu0w" base_Element="_VuMJAEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VuMwEEVdEfCS7cth2SLu0w" base_Element="_VuMJAEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VuMwEUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VuMwFUVdEfCS7cth2SLu0w" base_Element="_VuMwEkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VuMwFkVdEfCS7cth2SLu0w" base_Element="_VuMwEkVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VuMwF0VdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VuYWQEVdEfCS7cth2SLu0w" base_Element="_VuXvM0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VuYWREVdEfCS7cth2SLu0w" base_Element="_VuYWQUVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VuYWRUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Annotations xmi:id="_VuY9UUVdEfCS7cth2SLu0w" base_Element="_VuXvM0VdEfCS7cth2SLu0w">
    <annotations xmi:id="_VuY9UkVdEfCS7cth2SLu0w" name="MultipartConfig">
      <annotationParameters xmi:id="_VuY9U0VdEfCS7cth2SLu0w" name="fileSizeThreshold" skipArray="true">
        <valueSpecifications xmi:type="uml:LiteralString" xmi:id="_V_iXt0VdEfCS7cth2SLu0w" value="1024 * 1024 * 1"/>
      </annotationParameters>
      <annotationParameters xmi:id="_VuY9VEVdEfCS7cth2SLu0w" name="maxFileSize" skipArray="true">
        <valueSpecifications xmi:type="uml:LiteralString" xmi:id="_V_iXuEVdEfCS7cth2SLu0w" value="1024 * 1024 * 10"/>
      </annotationParameters>
      <annotationParameters xmi:id="_VuY9VUVdEfCS7cth2SLu0w" name="maxRequestSize" skipArray="true">
        <valueSpecifications xmi:type="uml:LiteralString" xmi:id="_V_iXuUVdEfCS7cth2SLu0w" value="1024 * 1024 * 15"/>
      </annotationParameters>
    </annotations>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_Vug5IEVdEfCS7cth2SLu0w" base_Element="_VugSF0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_Vug5IUVdEfCS7cth2SLu0w" base_Element="_VugSF0VdEfCS7cth2SLu0w">
    <annotations xmi:id="_Vug5IkVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VuoN4kVdEfCS7cth2SLu0w" base_Element="_Vunm0UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VuoN5kVdEfCS7cth2SLu0w" base_Element="_VuoN5EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VuoN50VdEfCS7cth2SLu0w" base_Element="_VuoN5EVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VuoN6EVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_Vuo09EVdEfCS7cth2SLu0w" base_Element="_Vuo08UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_Vuo09UVdEfCS7cth2SLu0w" base_Element="_Vuo08UVdEfCS7cth2SLu0w">
    <annotations xmi:id="_Vuo09kVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VupcAkVdEfCS7cth2SLu0w" base_Element="_VupcAUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VuqDFkVdEfCS7cth2SLu0w" base_Element="_VuqDEEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VuqDGEVdEfCS7cth2SLu0w" base_Element="_VuqDF0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VuqqIkVdEfCS7cth2SLu0w" base_Element="_VuqDGUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VuqqK0VdEfCS7cth2SLu0w" base_Element="_VuqqI0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VurRN0VdEfCS7cth2SLu0w" base_Element="_VurRMEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VurRP0VdEfCS7cth2SLu0w" base_Element="_VurROEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_Vur4QUVdEfCS7cth2SLu0w" base_Element="_Vur4QEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_VuttcUVdEfCS7cth2SLu0w" base_Element="_VuttcEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VuuUgEVdEfCS7cth2SLu0w" base_Element="_VupcAUVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VuuUgUVdEfCS7cth2SLu0w" name="SuppressWarnings">
      <annotationParameters xmi:id="_VuuUgkVdEfCS7cth2SLu0w" skipName="true" skipArray="true">
        <valueSpecifications xmi:type="uml:LiteralString" xmi:id="_V_kz8EVdEfCS7cth2SLu0w" value="&quot;deprecation&quot;"/>
      </annotationParameters>
    </annotations>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_Vu1CNkVdEfCS7cth2SLu0w" base_Element="_Vu1CM0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_Vu1pQEVdEfCS7cth2SLu0w" base_Element="_Vu1CM0VdEfCS7cth2SLu0w">
    <annotations xmi:id="_Vu1pQUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_Vu1pRUVdEfCS7cth2SLu0w" base_Element="_Vu1pQkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_Vu1pRkVdEfCS7cth2SLu0w" base_Element="_Vu1pQkVdEfCS7cth2SLu0w">
    <annotations xmi:id="_Vu1pR0VdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_Vu5To0VdEfCS7cth2SLu0w" base_Element="_Vu5ToEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_Vu5TpEVdEfCS7cth2SLu0w" base_Element="_Vu5ToEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_Vu5TpUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_Vu8W8EVdEfCS7cth2SLu0w" genericsValue="Object" base_Element="_Vu7v5UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_Vu9lEUVdEfCS7cth2SLu0w" base_Element="_Vu8-AEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_Vu9lEkVdEfCS7cth2SLu0w" base_Element="_Vu8-AEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_Vu9lE0VdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_Vu-MI0VdEfCS7cth2SLu0w" base_Element="_Vu-MIEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_Vu-MJEVdEfCS7cth2SLu0w" base_Element="_Vu-MIEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_Vu-zMEVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvAoZEVdEfCS7cth2SLu0w" base_Element="_VvAoYUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VvBPcEVdEfCS7cth2SLu0w" base_Element="_VvAoYUVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VvBPcUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvDruUVdEfCS7cth2SLu0w" base_Element="_VvDrtkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VvESwEVdEfCS7cth2SLu0w" base_Element="_VvDrtkVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VvESwUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvESxUVdEfCS7cth2SLu0w" base_Element="_VvESwkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VvESxkVdEfCS7cth2SLu0w" base_Element="_VvESwkVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VvESx0VdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvGvAEVdEfCS7cth2SLu0w" base_Element="_VvGH90VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VvGvBEVdEfCS7cth2SLu0w" base_Element="_VvGvAUVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VvGvBUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Annotations xmi:id="_VvHWEEVdEfCS7cth2SLu0w" base_Element="_VvGH90VdEfCS7cth2SLu0w">
    <annotations xmi:id="_VvHWEUVdEfCS7cth2SLu0w" name="WebServlet">
      <annotationParameters xmi:id="_VvHWEkVdEfCS7cth2SLu0w" skipName="true" skipArray="true">
        <valueSpecifications xmi:type="uml:LiteralString" xmi:id="_V_lbDUVdEfCS7cth2SLu0w" value="&quot;/ServletUpdateAddress&quot;"/>
      </annotationParameters>
    </annotations>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvH9IEVdEfCS7cth2SLu0w" base_Element="_VvHWFEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VvH9IUVdEfCS7cth2SLu0w" base_Element="_VvHWFEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VvH9IkVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvJyV0VdEfCS7cth2SLu0w" base_Element="_VvJyVEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VvJyWEVdEfCS7cth2SLu0w" base_Element="_VvJyVEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VvJyWUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvKZY0VdEfCS7cth2SLu0w" base_Element="_VvKZYEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VvKZZEVdEfCS7cth2SLu0w" base_Element="_VvKZYEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VvKZZUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvLngUVdEfCS7cth2SLu0w" base_Element="_VvLAdUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VvLngkVdEfCS7cth2SLu0w" base_Element="_VvLAdUVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VvLng0VdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvMOkEVdEfCS7cth2SLu0w" base_Element="_VvLnhEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VvMOkUVdEfCS7cth2SLu0w" base_Element="_VvLnhEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VvMOkkVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvM1p0VdEfCS7cth2SLu0w" base_Element="_VvM1pEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VvNcsEVdEfCS7cth2SLu0w" base_Element="_VvM1pEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VvNcsUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvNctUVdEfCS7cth2SLu0w" base_Element="_VvNcskVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VvNctkVdEfCS7cth2SLu0w" base_Element="_VvNcskVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VvNct0VdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvOq0EVdEfCS7cth2SLu0w" base_Element="_VvODwUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VvOq0UVdEfCS7cth2SLu0w" base_Element="_VvODwUVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VvOq0kVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvPR5EVdEfCS7cth2SLu0w" base_Element="_VvPR4EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_VvP48UVdEfCS7cth2SLu0w" base_Element="_VvPR4UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_VvQgAkVdEfCS7cth2SLu0w" base_Element="_VvP49UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvQgBkVdEfCS7cth2SLu0w" base_Element="_VvQgA0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_VvQgCEVdEfCS7cth2SLu0w" base_Element="_VvQgBEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvRHFEVdEfCS7cth2SLu0w" base_Element="_VvRHEEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_VvRHFkVdEfCS7cth2SLu0w" base_Element="_VvRHEUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_VvRHGEVdEfCS7cth2SLu0w" base_Element="_VvRHEkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvRuIkVdEfCS7cth2SLu0w" base_Element="_VvRuIEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_VvRuJEVdEfCS7cth2SLu0w" base_Element="_VvRuIUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvRuKEVdEfCS7cth2SLu0w" base_Element="_VvRuJUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_VvSVMEVdEfCS7cth2SLu0w" dimensions="1" base_Element="_VvRuJkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_VvSVMkVdEfCS7cth2SLu0w" dimensions="1" base_Element="_VvRuJ0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_VvSVOkVdEfCS7cth2SLu0w" base_Element="_VvSVM0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvS8QEVdEfCS7cth2SLu0w" base_Element="_VvSVM0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_VvS8QkVdEfCS7cth2SLu0w" base_Element="_VvSVNEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_VvS8REVdEfCS7cth2SLu0w" base_Element="_VvSVNUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_VvS8RkVdEfCS7cth2SLu0w" base_Element="_VvSVN0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvVYgUVdEfCS7cth2SLu0w" base_Element="_VvVYgEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VvV_kkVdEfCS7cth2SLu0w" base_Element="_VvV_kEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_VvWmoUVdEfCS7cth2SLu0w" base_Element="_VvWmoEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvWmo0VdEfCS7cth2SLu0w" base_Element="_VvWmokVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_VvWmpEVdEfCS7cth2SLu0w" base_Element="_VvWmokVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VvWmpUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Annotations xmi:id="_VvXNsEVdEfCS7cth2SLu0w" base_Element="_VvVYgEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_VvXNsUVdEfCS7cth2SLu0w" name="WebListener"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_VvYb00VdEfCS7cth2SLu0w" base_Element="_VvYb0UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_VvYb1UVdEfCS7cth2SLu0w" base_Element="_VvYb0kVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8Dl4EVdEfCS7cth2SLu0w" base_Element="_V8CXwEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8GCIUVdEfCS7cth2SLu0w" base_Element="_V8GCIEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8GpMUVdEfCS7cth2SLu0w" base_Element="_V8GpMEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8HQQEVdEfCS7cth2SLu0w" base_Element="_V8GpMkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8HQQkVdEfCS7cth2SLu0w" base_Element="_V8HQQUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8H3UEVdEfCS7cth2SLu0w" base_Element="_V8HQQ0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8H3UkVdEfCS7cth2SLu0w" base_Element="_V8H3UUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8IeYUVdEfCS7cth2SLu0w" base_Element="_V8IeYEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8K6oEVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8KTlEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8K6pkVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8K6okVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8LhtUVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8LhsUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8MIxEVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8MIwEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8Mv1kVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8Mv00VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8NW5kVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8NW40VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8OlBUVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8OlAUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8PMFEVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8PMEUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8PzJEVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8PzIUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8QaMEVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8PzJkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8RBQEVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8QaMkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8RBRUVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8RBQkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8RoUEVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8RBR0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8RoVUVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8RoUkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8SPZEVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8SPYUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8S2cUVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8SPZkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8TdgEVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8S2c0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8UEkEVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8TdgkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8UElUVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8UEkkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8Uro0VdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8UroEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8VSsEVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8UrpUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8V5wEVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8VSskVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8bZUEVdEfCS7cth2SLu0w" base_Element="_V8ayQEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8bZUkVdEfCS7cth2SLu0w" base_Element="_V8bZUUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8cncUVdEfCS7cth2SLu0w" base_Element="_V8cncEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8dOgEVdEfCS7cth2SLu0w" base_Element="_V8cnckVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8dOgkVdEfCS7cth2SLu0w" base_Element="_V8dOgUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8g44EVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8fqx0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8g45UVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8g44kVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8g46kVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8g450VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V8hf8EVdEfCS7cth2SLu0w" genericsValue="Map&lt;String, Object>" base_Element="_V8g47EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8m_gEVdEfCS7cth2SLu0w" base_Element="_V8mYcEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8m_gkVdEfCS7cth2SLu0w" base_Element="_V8m_gUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8oNoEVdEfCS7cth2SLu0w" base_Element="_V8nmkEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8oNokVdEfCS7cth2SLu0w" base_Element="_V8oNoUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8o0sEVdEfCS7cth2SLu0w" base_Element="_V8oNo0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8rQ8UVdEfCS7cth2SLu0w" base_Element="_V8rQ8EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8r4AUVdEfCS7cth2SLu0w" base_Element="_V8r4AEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8r4A0VdEfCS7cth2SLu0w" base_Element="_V8r4AkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8ttMEVdEfCS7cth2SLu0w" base_Element="_V8tGIEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8ttMkVdEfCS7cth2SLu0w" base_Element="_V8ttMUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8uUQkVdEfCS7cth2SLu0w" base_Element="_V8uUQUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8wJcUVdEfCS7cth2SLu0w" base_Element="_V8wJcEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8wwgUVdEfCS7cth2SLu0w" base_Element="_V8wwgEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8xXkEVdEfCS7cth2SLu0w" base_Element="_V8wwgkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8zMwEVdEfCS7cth2SLu0w" base_Element="_V8ylsEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8zMwkVdEfCS7cth2SLu0w" base_Element="_V8zMwUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V80a4UVdEfCS7cth2SLu0w" base_Element="_V80a4EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V81B8EVdEfCS7cth2SLu0w" base_Element="_V80a4kVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V81B8kVdEfCS7cth2SLu0w" base_Element="_V81B8UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V81pAEVdEfCS7cth2SLu0w" base_Element="_V81B80VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V81pAkVdEfCS7cth2SLu0w" base_Element="_V81pAUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V82QEEVdEfCS7cth2SLu0w" base_Element="_V81pA0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V82QEkVdEfCS7cth2SLu0w" base_Element="_V82QEUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V823IEVdEfCS7cth2SLu0w" base_Element="_V82QE0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V823IkVdEfCS7cth2SLu0w" base_Element="_V823IUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V83eMEVdEfCS7cth2SLu0w" base_Element="_V823I0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V83eMkVdEfCS7cth2SLu0w" base_Element="_V83eMUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V84FQEVdEfCS7cth2SLu0w" base_Element="_V83eM0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V84FQkVdEfCS7cth2SLu0w" base_Element="_V84FQUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V84FREVdEfCS7cth2SLu0w" base_Element="_V84FQ0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V84sUUVdEfCS7cth2SLu0w" base_Element="_V84sUEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V84sU0VdEfCS7cth2SLu0w" base_Element="_V84sUkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V856cUVdEfCS7cth2SLu0w" base_Element="_V856cEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V87voEVdEfCS7cth2SLu0w" base_Element="_V87IkEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V89k0EVdEfCS7cth2SLu0w" base_Element="_V88WsEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V89k0kVdEfCS7cth2SLu0w" base_Element="_V89k0UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8-L4EVdEfCS7cth2SLu0w" base_Element="_V89k00VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8-y8UVdEfCS7cth2SLu0w" base_Element="_V8-y8EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V8_aAUVdEfCS7cth2SLu0w" base_Element="_V8_aAEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V9ABEEVdEfCS7cth2SLu0w" base_Element="_V8_aAkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V9AoIUVdEfCS7cth2SLu0w" base_Element="_V9AoIEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V9BPMUVdEfCS7cth2SLu0w" base_Element="_V9BPMEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V9B2QEVdEfCS7cth2SLu0w" base_Element="_V9BPMkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V9OqkUVdEfCS7cth2SLu0w" base_Element="_V9OqkEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V9SU8UVdEfCS7cth2SLu0w" base_Element="_V9SU8EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_V9S8AUVdEfCS7cth2SLu0w" base_Element="_V9SU8kVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V9WmYUVdEfCS7cth2SLu0w" base_Element="_V9WmYEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V9XNcUVdEfCS7cth2SLu0w" base_Element="_V9XNcEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V9d7I0VdEfCS7cth2SLu0w" base_Element="_V9d7IUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_V9eiMEVdEfCS7cth2SLu0w" base_Element="_V9d7IUVdEfCS7cth2SLu0w">
    <annotations xmi:id="_V9eiMUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V9eiNEVdEfCS7cth2SLu0w" base_Element="_V9eiMkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_V9eiNUVdEfCS7cth2SLu0w" base_Element="_V9eiMkVdEfCS7cth2SLu0w">
    <annotations xmi:id="_V9eiNkVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Reference xmi:id="_V9fJQEVdEfCS7cth2SLu0w" base_Element="_V9eiN0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V9fJQkVdEfCS7cth2SLu0w" genericsValue="Object" base_Element="_V9fJQUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V9fwU0VdEfCS7cth2SLu0w" base_Element="_V9fwUEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_V9fwVEVdEfCS7cth2SLu0w" base_Element="_V9fwUEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_V9fwVUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V9hlg0VdEfCS7cth2SLu0w" base_Element="_V9hlgUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_V9iMkEVdEfCS7cth2SLu0w" base_Element="_V9hlgUVdEfCS7cth2SLu0w">
    <annotations xmi:id="_V9iMkUVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V9iMlEVdEfCS7cth2SLu0w" base_Element="_V9iMkkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_V9iMlUVdEfCS7cth2SLu0w" base_Element="_V9iMkkVdEfCS7cth2SLu0w">
    <annotations xmi:id="_V9iMlkVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Reference xmi:id="_V9l28UVdEfCS7cth2SLu0w" base_Element="_V9l28EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Annotations xmi:id="_V9nFEkVdEfCS7cth2SLu0w" base_Element="_V9nFEEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_V9nFE0VdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Annotations xmi:id="_V9nsIUVdEfCS7cth2SLu0w" base_Element="_V9nFFEVdEfCS7cth2SLu0w">
    <annotations xmi:id="_V9nsIkVdEfCS7cth2SLu0w" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Reference xmi:id="_V9oTMEVdEfCS7cth2SLu0w" base_Element="_V9nsI0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_V90gckVdEfCS7cth2SLu0w" base_Element="_V90gcEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_V90gdkVdEfCS7cth2SLu0w" base_Element="_V90gdEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_V90gekVdEfCS7cth2SLu0w" base_Element="_V90geEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V91HhEVdEfCS7cth2SLu0w" genericsValue="String, Object" base_Element="_V91HgkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V92Vo0VdEfCS7cth2SLu0w" base_Element="_V92VokVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V92VpkVdEfCS7cth2SLu0w" base_Element="_V92VpEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V92VqUVdEfCS7cth2SLu0w" base_Element="_V92Vp0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V928skVdEfCS7cth2SLu0w" base_Element="_V928sEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V93jw0VdEfCS7cth2SLu0w" base_Element="_V93jwUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V94K0kVdEfCS7cth2SLu0w" base_Element="_V94K0EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V94K1UVdEfCS7cth2SLu0w" base_Element="_V94K00VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V97OIEVdEfCS7cth2SLu0w" genericsValue="String" base_Element="_V96nFkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V98cQEVdEfCS7cth2SLu0w" genericsValue="String" base_Element="_V971MEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V99qZUVdEfCS7cth2SLu0w" base_Element="_V99qY0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V9-RcUVdEfCS7cth2SLu0w" base_Element="_V99qZkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V9-RdEVdEfCS7cth2SLu0w" base_Element="_V9-RckVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V9-4gEVdEfCS7cth2SLu0w" base_Element="_V9-RdUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Generics xmi:id="_V-AGoEVdEfCS7cth2SLu0w" genericsValue="String" base_Element="_V9_flEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-BUw0VdEfCS7cth2SLu0w" base_Element="_V-BUwkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-DJ8EVdEfCS7cth2SLu0w" base_Element="_V-Ci4kVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-DJ8kVdEfCS7cth2SLu0w" base_Element="_V-DJ8UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_V-DJ9UVdEfCS7cth2SLu0w" base_Element="_V-DJ80VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-EYE0VdEfCS7cth2SLu0w" base_Element="_V-EYEkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_V-E_JEVdEfCS7cth2SLu0w" base_Element="_V-E_IkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-FmM0VdEfCS7cth2SLu0w" base_Element="_V-FmMkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-GNQEVdEfCS7cth2SLu0w" base_Element="_V-FmNkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_V-GNQ0VdEfCS7cth2SLu0w" base_Element="_V-GNQUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_V-GNRkVdEfCS7cth2SLu0w" base_Element="_V-GNREVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_V-G0UEVdEfCS7cth2SLu0w" base_Element="_V-GNSEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_V-G0U0VdEfCS7cth2SLu0w" base_Element="_V-G0UUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_V-G0VkVdEfCS7cth2SLu0w" base_Element="_V-G0VEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-OwIEVdEfCS7cth2SLu0w" base_Element="_V-OJFkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-OwIkVdEfCS7cth2SLu0w" base_Element="_V-OwIUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_V-QlUUVdEfCS7cth2SLu0w" base_Element="_V-P-QEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-TBk0VdEfCS7cth2SLu0w" base_Element="_V-TBkkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-TooEVdEfCS7cth2SLu0w" base_Element="_V-TBlkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:StyledElement xmi:id="_V-Vd0kVdEfCS7cth2SLu0w" base_Element="_V-Vd0EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_V-X6FkVdEfCS7cth2SLu0w" base_Element="_V-X6FEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-ZvQUVdEfCS7cth2SLu0w" base_Element="_V-ZvQEVdEfCS7cth2SLu0w">
    <associatedElement xmi:type="uml:Operation" xmi:id="_V-aWUEVdEfCS7cth2SLu0w" name="getZi" method="_V_JWLkVdEfCS7cth2SLu0w">
      <ownedParameter xmi:id="_V-aWU0VdEfCS7cth2SLu0w" direction="return">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
      </ownedParameter>
    </associatedElement>
    <associatedElement xmi:type="uml:Operation" xmi:id="_V-aWUUVdEfCS7cth2SLu0w" name="setZi" method="_V_JWMEVdEfCS7cth2SLu0w">
      <ownedParameter xmi:id="_V-aWUkVdEfCS7cth2SLu0w" name="zi">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
      </ownedParameter>
    </associatedElement>
  </UMLLabProfile:LegacyStyledElement>
  <UMLLabProfile:MultiDeclaration xmi:id="_V-ZvQkVdEfCS7cth2SLu0w" base_Property="_V-ZvQEVdEfCS7cth2SLu0w" siblings="_V_jl1UVdEfCS7cth2SLu0w _V_kM4UVdEfCS7cth2SLu0w" root="true"/>
  <UMLLabProfile:Array xmi:id="_V-dZo0VdEfCS7cth2SLu0w" base_Element="_V-dZoUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-dZpEVdEfCS7cth2SLu0w" base_Element="_V-dZoUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-eAsUVdEfCS7cth2SLu0w" base_Element="_V-eAsEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_V-jgSEVdEfCS7cth2SLu0w" base_Element="_V-jgRkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-kHUUVdEfCS7cth2SLu0w" base_Element="_V-jgRkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_V-kHVEVdEfCS7cth2SLu0w" base_Element="_V-kHUkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-kHVkVdEfCS7cth2SLu0w" base_Element="_V-kHUkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_V-kuYEVdEfCS7cth2SLu0w" base_Element="_V-kHV0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-kuYkVdEfCS7cth2SLu0w" base_Element="_V-kHV0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_V-kuZUVdEfCS7cth2SLu0w" base_Element="_V-kuY0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-kuZ0VdEfCS7cth2SLu0w" base_Element="_V-kuY0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_V-lVcUVdEfCS7cth2SLu0w" base_Element="_V-kuaEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-lVc0VdEfCS7cth2SLu0w" base_Element="_V-kuaEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_V-lVdkVdEfCS7cth2SLu0w" base_Element="_V-lVdEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-lVd0VdEfCS7cth2SLu0w" base_Element="_V-lVdEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_V-l8gEVdEfCS7cth2SLu0w" base_Element="_V-lVeEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-l8gUVdEfCS7cth2SLu0w" base_Element="_V-lVeEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-l8g0VdEfCS7cth2SLu0w" base_Element="_V-l8gkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-mjkUVdEfCS7cth2SLu0w" base_Element="_V-mjkEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-mjk0VdEfCS7cth2SLu0w" base_Element="_V-mjkkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-mjlUVdEfCS7cth2SLu0w" base_Element="_V-mjlEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V-mjl0VdEfCS7cth2SLu0w" base_Element="_V-mjlkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Array xmi:id="_V-nKokVdEfCS7cth2SLu0w" base_Element="_V-nKoEVdEfCS7cth2SLu0w"/>
  <uml:OpaqueBehavior xmi:id="_V_JWLkVdEfCS7cth2SLu0w" name="getZi" specification="_V-aWUEVdEfCS7cth2SLu0w">
    <ownedParameter xmi:id="_V_JWL0VdEfCS7cth2SLu0w" direction="return">
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
    </ownedParameter>
    <language>java</language>
    <body>return zi;
 </body>
  </uml:OpaqueBehavior>
  <uml:OpaqueBehavior xmi:id="_V_JWMEVdEfCS7cth2SLu0w" name="setZi" specification="_V-aWUUVdEfCS7cth2SLu0w">
    <ownedParameter xmi:id="_V_JWMUVdEfCS7cth2SLu0w" name="zi">
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
    </ownedParameter>
    <language>java</language>
    <body>this.zi = zi;
 </body>
  </uml:OpaqueBehavior>
  <UMLLabProfile:MultiDeclaration xmi:id="_V_jl1kVdEfCS7cth2SLu0w" base_Property="_V_jl1UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V_kM4EVdEfCS7cth2SLu0w" base_Element="_V_jl1UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:MultiDeclaration xmi:id="_V_kM4kVdEfCS7cth2SLu0w" base_Property="_V_kM4UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_V_kM40VdEfCS7cth2SLu0w" base_Element="_V_kM4UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V_-ckkVdEfCS7cth2SLu0w" base_Element="_V_-ckEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V__DokVdEfCS7cth2SLu0w" base_Element="_V__DoEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V__qsEVdEfCS7cth2SLu0w" base_Element="_V__Do0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_V__qs0VdEfCS7cth2SLu0w" base_Element="_V__qsUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAARwkVdEfCS7cth2SLu0w" base_Element="_WAARwEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAA40EVdEfCS7cth2SLu0w" base_Element="_WAARw0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAA400VdEfCS7cth2SLu0w" base_Element="_WAA40UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WABf4EVdEfCS7cth2SLu0w" base_Element="_WAA41EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WABf40VdEfCS7cth2SLu0w" base_Element="_WABf4UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WACG8EVdEfCS7cth2SLu0w" base_Element="_WABf5EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WACG80VdEfCS7cth2SLu0w" base_Element="_WACG8UVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WACG9kVdEfCS7cth2SLu0w" base_Element="_WACG9EVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WACuAkVdEfCS7cth2SLu0w" base_Element="_WACuAEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WADVEEVdEfCS7cth2SLu0w" base_Element="_WACuA0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WADVE0VdEfCS7cth2SLu0w" base_Element="_WADVEUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAD8IEVdEfCS7cth2SLu0w" base_Element="_WADVFEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAD8I0VdEfCS7cth2SLu0w" base_Element="_WAD8IUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAEjMkVdEfCS7cth2SLu0w" base_Element="_WAEjMEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAFKQEVdEfCS7cth2SLu0w" base_Element="_WAEjM0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAFKQ0VdEfCS7cth2SLu0w" base_Element="_WAFKQUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAFxUEVdEfCS7cth2SLu0w" base_Element="_WAFKREVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAFxU0VdEfCS7cth2SLu0w" base_Element="_WAFxUUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAGYYkVdEfCS7cth2SLu0w" base_Element="_WAGYYEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAGYZUVdEfCS7cth2SLu0w" base_Element="_WAGYY0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAG_ckVdEfCS7cth2SLu0w" base_Element="_WAG_cEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAHmgEVdEfCS7cth2SLu0w" base_Element="_WAG_c0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAI0oEVdEfCS7cth2SLu0w" base_Element="_WAHmgUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAI0o0VdEfCS7cth2SLu0w" base_Element="_WAI0oUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAI0pkVdEfCS7cth2SLu0w" base_Element="_WAI0pEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAJbskVdEfCS7cth2SLu0w" base_Element="_WAJbsEVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAJbtUVdEfCS7cth2SLu0w" base_Element="_WAJbs0VdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAKCwEVdEfCS7cth2SLu0w" base_Element="_WAJbtkVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAKCw0VdEfCS7cth2SLu0w" base_Element="_WAKCwUVdEfCS7cth2SLu0w"/>
  <UMLLabProfile:Reference xmi:id="_WAKp0EVdEfCS7cth2SLu0w" base_Element="_WAKCxEVdEfCS7cth2SLu0w"/>
</xmi:XMI>
