
-- SHOW DATABASES;
-- CREATE DATABASE test;
-- Dezactivează constrângerile FOREIGN KEY
SET FOREIGN_KEY_CHECKS = 0;

use test;

-- 1. Eliminarea tuturor constrângerilor FOREIGN KEY în mod dinamic
SET @sql = '';

-- Generez comenzi de eliminare pentru fiecare constrângere FOREIGN KEY
SELECT GROUP_CONCAT(CONCAT('ALTER TABLE ', TABLE_NAME, ' DROP FOREIGN KEY ', CONSTRAINT_NAME, ';'))
INTO @sql
FROM information_schema.KEY_COLUMN_USAGE
WHERE REFERENCED_TABLE_NAME IS NOT NULL
AND TABLE_SCHEMA = DATABASE();

-- 2. Ștergerea tuturor tabelelor existente

-- 1. Ștergerea tuturor tabelelor existente
DROP TABLE IF EXISTS 
	angajati, 
	colors, 
	departament, 
	tipuri, 
	useri, 
	experienta, 
	proiecte, 
	echipe, 
	tasks, 
	statusuri2, 
	studii, 
	cicluri, 
	limbi_ang, 
	limbi, 
	nivel, 
	aplicari, 
	joburi, 
	tip_job, 
	tip_adev, 
	adeverinte, 
	proiecte2, 
	cv, 
	tipcon, 
	concedii, 
	data, 
	date_logs, 
	libere, 
	locatii_joburi, 
	locatii_concedii, 
	locatii_atractii, 
	locatii_departamente, 
	locatii_useri, 
	restrictii, 
	sarbatori, 
	statusuri, 
	teme, 
	testt, 
	tichete, 
	users,
	tipuri_sporuri,
	tipuri_penalizari,
	istoric_penalizari,
	istoric_sporuri,
	istoric_incetari,
	istoric_promovari,
	istoric_concedii_suplimentare,
	istoric_fluture,
    sedii, 
    cerei_demisie, 
    notificari_general;

SET FOREIGN_KEY_CHECKS = 0;

use test;

-- 1. Creare tabele de bază (fără foreign keys)
-- -----------------------------------------------------
-- Tabel departament
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS departament (
  id_dep INT NOT NULL AUTO_INCREMENT,
  nume_dep VARCHAR(25) NOT NULL,
  PRIMARY KEY (id_dep)
) AUTO_INCREMENT = 5;

-- -----------------------------------------------------
-- Tabel tipuri
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS tipuri (
  tip INT NOT NULL,
  denumire VARCHAR(25) NOT NULL,
  salariu INT NOT NULL,
  PRIMARY KEY (tip)
);

-- -----------------------------------------------------
-- Tabel tipuri_sporuri
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS tipuri_sporuri (
    id INT PRIMARY KEY,
    denumire VARCHAR(100) NOT NULL,
    procent INT NOT NULL
);

-- -----------------------------------------------------
-- Tabel tipuri_penalizari
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS tipuri_penalizari (
    id INT PRIMARY KEY,
    denumire VARCHAR(100) NOT NULL,
    procent INT NOT NULL
);

-- -----------------------------------------------------
-- Tabel statusuri
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS statusuri (
  status INT NOT NULL,
  nume_status VARCHAR(56) NOT NULL,
  PRIMARY KEY (status)
);

-- -----------------------------------------------------
-- Tabel statusuri2
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS statusuri2 (
    id INT PRIMARY KEY,
    procent INTEGER
);

-- -----------------------------------------------------
-- Tabel cicluri
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS cicluri (
    id INT PRIMARY KEY,
    semnificatie VARCHAR(12)
);

-- -----------------------------------------------------
-- Tabel limbi
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS limbi (
    id INT PRIMARY KEY,
    limba VARCHAR(50)
);

-- -----------------------------------------------------
-- Tabel nivel
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS nivel (
    id INT PRIMARY KEY,
    semnificatie VARCHAR(12)
);

-- -----------------------------------------------------
-- Tabel tip_job
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS tip_job (
    id INT PRIMARY KEY,
    semnificatie VARCHAR(12)
);

-- -----------------------------------------------------
-- Tabel tip_adev
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS tip_adev (
    id INT PRIMARY KEY,
    denumire VARCHAR(50)
);

-- -----------------------------------------------------
-- Tabel tipcon
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS tipcon (
  tip INT NOT NULL AUTO_INCREMENT,
  motiv VARCHAR(255) NULL DEFAULT NULL,
  nr_zile INT NULL DEFAULT '0',
  PRIMARY KEY (tip)
) AUTO_INCREMENT = 6;

-- 2. Creare tabel useri
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS useri (
  id INT NOT NULL AUTO_INCREMENT,
  nume VARCHAR(45) NOT NULL,
  prenume VARCHAR(45) NOT NULL,
  data_nasterii DATE NOT NULL,
  adresa VARCHAR(256) NULL DEFAULT NULL,
  email VARCHAR(56) NOT NULL,
  telefon VARCHAR(25) NOT NULL,
  username VARCHAR(25) NOT NULL,
  password VARCHAR(255) NOT NULL,
  id_dep INT NOT NULL,
  tip INT NOT NULL,
  zilecons INT NULL DEFAULT '0',
  zileramase INT NULL DEFAULT '40',
  conluate INT NULL DEFAULT '0',
  conramase INT NULL DEFAULT '3',
  cnp VARCHAR(14) NULL DEFAULT NULL,
  culoare VARCHAR(25) NOT NULL DEFAULT '#333',
  activ INT NULL DEFAULT '1',
  profil MEDIUMBLOB NULL DEFAULT NULL,
  sporuri INT NULL DEFAULT NULL,
  penalizari INT NULL DEFAULT NULL,
  data_ang DATE NULL DEFAULT NULL,
  data_modif DATE NULL DEFAULT NULL,
  id_echipa INT NULL DEFAULT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (id_dep) REFERENCES departament(id_dep),
  FOREIGN KEY (tip) REFERENCES tipuri(tip),
  FOREIGN KEY (sporuri) REFERENCES tipuri_sporuri(id),
  FOREIGN KEY (penalizari) REFERENCES tipuri_penalizari(id),
  FOREIGN KEY (id_echipa) REFERENCES echipe(id)
) AUTO_INCREMENT = 11;

-- Creare indexuri pentru useri
CREATE UNIQUE INDEX username ON useri (username ASC);
CREATE UNIQUE INDEX cnp ON useri (cnp ASC);
CREATE UNIQUE INDEX email ON useri (email ASC);
CREATE UNIQUE INDEX telefon ON useri (telefon ASC);

-- 3. Tabele care depind de useri

-- -----------------------------------------------------
-- Tabel proiecte
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS proiecte (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nume VARCHAR(50),
    descriere VARCHAR(1000),
    start DATE,
    end DATE,
    supervizor int,
	FOREIGN KEY (supervizor) REFERENCES useri(id)
);

-- -----------------------------------------------------
-- Tabel istoric_penalizari
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS istoric_penalizari (
    id INT PRIMARY KEY AUTO_INCREMENT,
    id_ang INT NOT NULL,
    tip_penalizare INT NOT NULL,
    data_start DATE NOT NULL,
    data_final DATE NOT NULL,
    motiv VARCHAR(500),
    data_creare TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_ang) REFERENCES useri(id),
    FOREIGN KEY (tip_penalizare) REFERENCES tipuri_penalizari(id)
);

-- -----------------------------------------------------
-- Tabel istoric_sporuri
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS istoric_sporuri (
    id INT PRIMARY KEY AUTO_INCREMENT,
    id_ang INT NOT NULL,
    tip_spor INT NOT NULL,
    data_start DATE NOT NULL,
    data_final DATE NOT NULL,
    motiv VARCHAR(500),
    data_creare TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_ang) REFERENCES useri(id),
    FOREIGN KEY (tip_spor) REFERENCES tipuri_sporuri(id)
);

-- -----------------------------------------------------
-- Tabel istoric_incetari
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS istoric_incetari (
    id INT PRIMARY KEY AUTO_INCREMENT,
    id_ang INT NOT NULL,
    data_incetare DATE NOT NULL,
    motiv VARCHAR(100) NOT NULL,
    observatii TEXT,
    data_creare TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_ang) REFERENCES useri(id)
);

-- -----------------------------------------------------
-- Tabel istoric_promovari
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS istoric_promovari (
    id INT PRIMARY KEY AUTO_INCREMENT,
    id_ang INT NOT NULL,
    tip_vechi INT NOT NULL,
    tip_nou INT NOT NULL,
    tip_promovare VARCHAR(50) NOT NULL,
    data_promovare DATE NOT NULL,
    FOREIGN KEY (id_ang) REFERENCES useri(id),
    FOREIGN KEY (tip_vechi) REFERENCES tipuri(tip),
    FOREIGN KEY (tip_nou) REFERENCES tipuri(tip)
);

-- -----------------------------------------------------
-- Tabel istoric_concedii_suplimentare
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS istoric_concedii_suplimentare (
    id INT PRIMARY KEY AUTO_INCREMENT,
    id_ang INT NOT NULL,
    zile_acordate INT NOT NULL,
    motiv VARCHAR(255),
    data_acordare DATE NOT NULL,
    FOREIGN KEY (id_ang) REFERENCES useri(id)
);

-- -----------------------------------------------------
-- Tabel istoric_fluture
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS istoric_fluture (
    id INT PRIMARY KEY AUTO_INCREMENT,
    id_ang INT NOT NULL,
    luna INT NOT NULL,
    an INT NOT NULL,
    salariu_brut DECIMAL(10,2) NOT NULL,
    salariu_net DECIMAL(10,2) NOT NULL,
    data_generare DATE NOT NULL,
    FOREIGN KEY (id_ang) REFERENCES useri(id)
);

-- -----------------------------------------------------
-- Tabel experienta
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS experienta (
    id INT PRIMARY KEY,
    den_job VARCHAR(50),
    instit VARCHAR(50),
    tip INT,
    id_dep INT,
    domeniu VARCHAR(50),
    subdomeniu VARCHAR(50),
    start DATE,
    end DATE,
    descriere VARCHAR(1000),
    id_ang INT,
    FOREIGN KEY (tip) REFERENCES tipuri(tip),
    FOREIGN KEY (id_dep) REFERENCES departament(id_dep),
    FOREIGN KEY (id_ang) REFERENCES useri(id)
);

-- -----------------------------------------------------
-- Tabel echipe
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS echipe (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nume VARCHAR(50),
    supervizor INT,
    id_prj INT,
    FOREIGN KEY (supervizor) REFERENCES useri(id),
    FOREIGN KEY (id_prj) REFERENCES proiecte(id)
);

-- -----------------------------------------------------
-- Tabel tasks
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS tasks (
    id INT PRIMARY KEY,
    nume VARCHAR(50),
    supervizor INT,
    id_ang INT,
    start DATE,
    end DATE,
    status INT DEFAULT 0,
    id_prj INT,
    FOREIGN KEY (supervizor) REFERENCES useri(id),
    FOREIGN KEY (id_prj) REFERENCES proiecte(id),
    FOREIGN KEY (id_ang) REFERENCES useri(id),
    FOREIGN KEY (status) REFERENCES statusuri2(id)
);

-- -----------------------------------------------------
-- Tabel studii
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS studii (
    id INT PRIMARY KEY,
    facultate VARCHAR(50),
    universitate VARCHAR(50),
    ciclu INT,
    start DATE,
    end DATE,
    id_ang INT,
    FOREIGN KEY (ciclu) REFERENCES cicluri(id),
    FOREIGN KEY (id_ang) REFERENCES useri(id)
);

-- -----------------------------------------------------
-- Tabel limbi_ang
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS limbi_ang (
    id INT PRIMARY KEY,
    id_limba INT,
    nivel INT,
    id_ang INT,
    FOREIGN KEY (id_limba) REFERENCES limbi(id),
    FOREIGN KEY (nivel) REFERENCES nivel(id),
    FOREIGN KEY (id_ang) REFERENCES useri(id)
);

-- -----------------------------------------------------
-- Tabel locatii_joburi
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS locatii_joburi (
  id_locatie INT NOT NULL AUTO_INCREMENT,
  id_job INT NOT NULL,
  strada VARCHAR(255) NOT NULL,
  longitudine DOUBLE NULL DEFAULT NULL,
  latitudine DOUBLE NULL DEFAULT NULL,
  cod VARCHAR(12) NOT NULL,
  oras VARCHAR(255) NOT NULL,
  judet VARCHAR(255) NOT NULL,
  tara VARCHAR(255) NOT NULL,
  PRIMARY KEY (id_locatie)
);

-- -----------------------------------------------------
-- Tabel joburi
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS joburi (
    id INT PRIMARY KEY auto_increment,
    titlu VARCHAR(50),
    req VARCHAR(1000),
    resp VARCHAR(1000),
    dom VARCHAR(50),
    subdom VARCHAR(50),
    pozitie INT,
    departament INT,
    start DATE,
    end DATE,
    id_locatie INTEGER, 
    activ BOOLEAN,
    keywords VARCHAR(100),
    id_team INTEGER,
    id_prj INTEGER,
    ore INTEGER,
    tip BOOLEAN,
    FOREIGN KEY (id_team) REFERENCES echipe(id), 
    FOREIGN KEY (id_prj) REFERENCES proiecte(id),
    FOREIGN KEY (pozitie) REFERENCES tipuri(tip),
    FOREIGN KEY (departament) REFERENCES departament(id_dep),
    FOREIGN KEY (id_locatie) REFERENCES locatii_joburi(id_locatie)
);

-- -----------------------------------------------------
-- Tabel aplicari
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS aplicari (
    id INT PRIMARY KEY,
    job_id INT,
    data_apl DATE,
    id_ang INT,
    FOREIGN KEY (job_id) REFERENCES joburi(id),
    FOREIGN KEY (id_ang) REFERENCES useri(id)
);

-- -----------------------------------------------------
-- Tabel adeverinte
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS adeverinte (
    id INT PRIMARY KEY,
    tip INT,
    motiv VARCHAR(255),
    status INT,
    creare DATE,
    modif DATE,
    id_ang INT NOT NULL,
    pentru_servi VARCHAR(255),
    FOREIGN KEY (tip) REFERENCES tip_adev(id),
    FOREIGN KEY (id_ang) REFERENCES useri(id),
    FOREIGN KEY (status) REFERENCES statusuri(status)
);

-- -----------------------------------------------------
-- Tabel proiecte2
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS proiecte2 (
    id INT PRIMARY KEY,
    nume VARCHAR(50),
    descriere VARCHAR(255),
    start DATE,
    end DATE
);

-- -----------------------------------------------------
-- Tabel cv
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS cv (
    id INT PRIMARY KEY,
    id_ang INT,
    calitati VARCHAR(255),
    interese VARCHAR(255),
    FOREIGN KEY (id_ang) REFERENCES useri(id)
);

-- -----------------------------------------------------
-- Tabel concedii
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS concedii (
  id INT NOT NULL AUTO_INCREMENT,
  id_ang INT NOT NULL,
  start_c DATE NOT NULL,
  end_c DATE NOT NULL,
  motiv VARCHAR(256) NOT NULL,
  locatie VARCHAR(256) NOT NULL,
  status INT NULL DEFAULT '0',
  tip INT NOT NULL,
  durata INT NOT NULL DEFAULT '0',
  added DATE NULL DEFAULT NULL,
  modified DATE NULL DEFAULT NULL,
  acc_res DATE NULL DEFAULT NULL,
  mentiuni VARCHAR(256) default NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (id_ang) REFERENCES useri(id),
  FOREIGN KEY (status) REFERENCES statusuri(status),
  FOREIGN KEY (tip) REFERENCES tipcon(tip)
);

-- -----------------------------------------------------
-- Tabel teme
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS teme (
  id_usr INT NOT NULL,
  accent VARCHAR(25) NULL DEFAULT '#10439F',
  clr VARCHAR(25) NULL DEFAULT '#d8d9e1',
  sidebar VARCHAR(25) NULL DEFAULT '#ECEDFA',
  card VARCHAR(25) NULL DEFAULT '#ECEDFA',
  text VARCHAR(25) NULL DEFAULT '#333',
  hover VARCHAR(25) NULL DEFAULT '#ECEDFA',
  PRIMARY KEY (id_usr),
  FOREIGN KEY (id_usr) REFERENCES useri(id)
);

-- 4. Celelalte tabele
-- -----------------------------------------------------
-- Tabel locatii_concedii
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS locatii_concedii (
  id_locatie INT NOT NULL AUTO_INCREMENT,
  id_concediu INT NOT NULL,
  strada VARCHAR(255) NOT NULL,
  longitudine DOUBLE NULL DEFAULT NULL,
  latitudine DOUBLE NULL DEFAULT NULL,
  cod VARCHAR(12) NOT NULL,
  oras VARCHAR(255) NOT NULL,
  judet VARCHAR(255) NOT NULL,
  tara VARCHAR(255) NOT NULL,
  PRIMARY KEY (id_locatie),
  FOREIGN KEY (id_concediu) REFERENCES concedii(id)
);

-- -----------------------------------------------------
-- Tabel locatii_atractii
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS locatii_atractii (
  id_locatie INT NOT NULL AUTO_INCREMENT,
  nume varchar(255) not null,
  strada VARCHAR(255) NOT NULL,
  longitudine DOUBLE NULL DEFAULT NULL,
  latitudine DOUBLE NULL DEFAULT NULL,
  cod VARCHAR(12) NOT NULL,
  oras VARCHAR(255) NOT NULL,
  judet VARCHAR(255) NOT NULL,
  tara VARCHAR(255) NOT NULL,
  PRIMARY KEY (id_locatie)
);

-- -----------------------------------------------------
-- Tabel locatii_departamente
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS locatii_departamente (
  id_dep INT NOT NULL,
  strada VARCHAR(255) NOT NULL,
  longitudine DOUBLE NULL DEFAULT NULL,
  latitudine DOUBLE NULL DEFAULT NULL,
  cod VARCHAR(12) NOT NULL,
  oras VARCHAR(255) NOT NULL,
  judet VARCHAR(255) NOT NULL,
  tara VARCHAR(255) NOT NULL,
  PRIMARY KEY (id_dep),
  FOREIGN KEY (id_dep) REFERENCES departament(id_dep)
);

-- -----------------------------------------------------
-- Tabel locatii_useri
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS locatii_useri (
  id_locatie INT NOT NULL AUTO_INCREMENT,
  id_user INT NOT NULL,
  strada VARCHAR(255) NOT NULL,
  longitudine DOUBLE NULL DEFAULT NULL,
  latitudine DOUBLE NULL DEFAULT NULL,
  cod VARCHAR(12) NOT NULL,
  oras VARCHAR(255) NOT NULL,
  judet VARCHAR(255) NOT NULL,
  tara VARCHAR(255) NOT NULL,
  id_sediu INT DEFAULT NULL,
  PRIMARY KEY (id_locatie),
  FOREIGN KEY (id_user) REFERENCES useri(id),
FOREIGN KEY (id_sediu) REFERENCES sedii(id_sediu)
);

-- -----------------------------------------------------
-- Tabel restrictii
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS restrictii (
  tip INT NOT NULL,
  decl_dep INT NULL DEFAULT NULL,
  modif_d INT NULL DEFAULT NULL,
  del_d INT NULL DEFAULT NULL,
  decl_usr INT NULL DEFAULT NULL,
  modif_u INT NULL DEFAULT NULL,
  del_u INT NULL DEFAULT NULL,
  auth INT NULL DEFAULT NULL,
  viz_d INT NULL DEFAULT NULL,
  introd_c INT NULL DEFAULT NULL,
  modif_c INT NULL DEFAULT NULL,
  del_c INT NULL DEFAULT NULL,
  viz_c_t_an INT NULL DEFAULT NULL,
  viz_c_t_per INT NULL DEFAULT NULL,
  viz_c_d_an INT NULL DEFAULT NULL,
  viz_c_d_per INT NULL DEFAULT NULL,
  viz_c_a_an INT NULL DEFAULT NULL,
  viz_c_a_per INT NULL DEFAULT NULL,
  viz_a_t INT NULL DEFAULT NULL,
  viz_a_d INT NULL DEFAULT NULL,
  raport INT NULL DEFAULT NULL,
  asoc_tip INT NULL DEFAULT NULL,
  asoc_dep INT NULL DEFAULT NULL,
  PRIMARY KEY (tip)
);

-- -----------------------------------------------------
-- Tabel sarbatori
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS sarbatori (
  zi DATE NULL DEFAULT NULL,
  nume VARCHAR(255) NULL DEFAULT NULL
);

-- -----------------------------------------------------
-- Tabel libere
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS libere (
  zi DATE NULL DEFAULT NULL,
  nume VARCHAR(255) NULL DEFAULT NULL
);

-- -----------------------------------------------------
-- Tabel angajati
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS angajati (
  id INT NOT NULL,
  age INT NOT NULL,
  first VARCHAR(255) NULL DEFAULT NULL,
  last VARCHAR(255) NULL DEFAULT NULL
);

-- -----------------------------------------------------
-- Tabel colors
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS colors (
  culoare VARCHAR(25) NOT NULL,
  cod VARCHAR(25) NOT NULL,
  PRIMARY KEY (culoare)
);

-- -----------------------------------------------------
-- Tabel data
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS data (
  id INT NOT NULL AUTO_INCREMENT,
  image LONGBLOB NOT NULL,
  PRIMARY KEY (id)
);

-- -----------------------------------------------------
-- Tabel date_logs
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS date_logs (
  date_checked DATE NULL DEFAULT NULL
);

CREATE TABLE sedii (
    id_sediu INT PRIMARY KEY AUTO_INCREMENT,
    nume_sediu VARCHAR(255) NOT NULL,
    tip_sediu ENUM('principal', 'secundar', 'punct_lucru') NOT NULL,
    strada VARCHAR(255) NOT NULL,
    cod VARCHAR(12) NOT NULL,
    oras VARCHAR(255) NOT NULL,
    judet VARCHAR(255) NOT NULL,
    tara VARCHAR(255) NOT NULL,
    telefon VARCHAR(20),
    email VARCHAR(100),
    latitudine DOUBLE,
    longitudine DOUBLE,
    data_creare TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    data_modificare TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- -----------------------------------------------------
-- Tabel testt
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS testt (
  id INT NOT NULL,
  first_name VARCHAR(25) NULL DEFAULT NULL,
  last_name VARCHAR(25) NULL DEFAULT NULL,
  username VARCHAR(25) NULL DEFAULT NULL,
  password VARCHAR(25) NULL DEFAULT NULL,
  address VARCHAR(45) NULL DEFAULT NULL,
  contact VARCHAR(25) NULL DEFAULT NULL,
  PRIMARY KEY (id)
);

-- -----------------------------------------------------
-- Tabel tichete
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS tichete (
  id MEDIUMINT UNSIGNED NOT NULL AUTO_INCREMENT,
  subiect VARCHAR(255) NULL DEFAULT NULL,
  continut VARCHAR(512) NULL DEFAULT NULL,
  PRIMARY KEY (id)
) AUTO_INCREMENT = 2;

-- -----------------------------------------------------
-- Tabel users
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS users (
  id INT NOT NULL AUTO_INCREMENT,
  first_name VARCHAR(45) NULL DEFAULT NULL,
  last_name VARCHAR(45) NULL DEFAULT NULL,
  photo MEDIUMBLOB NULL DEFAULT NULL,
  PRIMARY KEY (id)
);

-- Tabel pentru cereri de demisie
CREATE TABLE IF NOT EXISTS cereri_demisie (
    id INT PRIMARY KEY AUTO_INCREMENT,
    id_ang INT NOT NULL,
    motiv TEXT NOT NULL,
    data_cerere DATE NOT NULL,
    data_ultima_zi DATE NOT NULL,
    status ENUM('IN_ASTEPTARE', 'APROBATA', 'RESPINSA') DEFAULT 'IN_ASTEPTARE',
    data_procesare DATE,
    FOREIGN KEY (id_ang) REFERENCES useri(id)
);

-- Tabel pentru notificări generale
CREATE TABLE IF NOT EXISTS notificari_general (
    id INT PRIMARY KEY AUTO_INCREMENT,
    id_destinatar INT NOT NULL,
    tip VARCHAR(50) NOT NULL,
    mesaj TEXT NOT NULL,
    citit BOOLEAN DEFAULT FALSE,
    data_creare TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_destinatar) REFERENCES useri(id)
);


SET FOREIGN_KEY_CHECKS = 1;

-- 4. Creare triggeri
-- -----------------------------------------------------
-- Trigger care deasigneaza toti angajatii dintr-un departament care urmeaza sa fie sters
-- -----------------------------------------------------
DELIMITER $$
DROP TRIGGER IF EXISTS before_dep_deleted $$
USE test$$
CREATE
TRIGGER test.before_dep_deleted
BEFORE DELETE ON test.departament
FOR EACH ROW
BEGIN
    UPDATE useri SET id_dep = -1 WHERE id_dep = OLD.id_dep;
END$$

-- -----------------------------------------------------
-- Trigger care seteaza numarul de zile de concedii in functie de tipul de user
-- -----------------------------------------------------
USE test$$
DROP TRIGGER IF EXISTS after_ins $$

USE test$$
CREATE
DEFINER=root@localhost
TRIGGER test.after_ins
BEFORE INSERT ON test.useri
FOR EACH ROW
BEGIN
    SET NEW.zilecons = 0;
    SET NEW.conluate = 0;
    SET NEW.conramase = 3;
    IF NEW.tip = 2 THEN
        SET NEW.zileramase = 30;
    ELSE
        SET NEW.zileramase = 40;
    END IF;
END$$

USE test$$
DROP TRIGGER IF EXISTS after_mod $$

USE test$$
CREATE
DEFINER=root@localhost
TRIGGER test.after_mod
BEFORE UPDATE ON test.useri
FOR EACH ROW
BEGIN
    IF NEW.tip = 2 and new.tip != old.tip THEN
        SET NEW.zileramase = 30;
    ELSE 
		if new.tip != old.tip and new.tip != 2 then
			SET NEW.zileramase = 40;
		END IF;
    END IF;
END$$

DELIMITER $$
DROP TRIGGER IF EXISTS after_user_insert$$
CREATE TRIGGER after_user_insert
AFTER INSERT ON useri
FOR EACH ROW
BEGIN
    IF NOT EXISTS (SELECT 1 FROM teme WHERE id_usr = NEW.id) THEN
        INSERT INTO teme (id_usr) VALUES (NEW.id);
    END IF;
END$$

DROP TRIGGER IF EXISTS aftrdel $$
USE test$$
CREATE
DEFINER=root@localhost
TRIGGER test.aftrdel
BEFORE DELETE ON test.useri
FOR EACH ROW
BEGIN
    delete from concedii where id_ang = old.id;
END$$

USE test$$
DROP TRIGGER IF EXISTS before_insert_useri $$

USE test$$
CREATE
DEFINER=root@localhost
TRIGGER test.before_insert_useri
BEFORE INSERT ON test.useri
FOR EACH ROW
BEGIN
    SET NEW.zilecons = 0;
    SET NEW.conluate = 0;
    SET NEW.conramase = 3;
    SET NEW.zileramase = IF(NEW.tip = 2, 30, 40);
END$$

USE test$$
DROP TRIGGER IF EXISTS before_user_deleted $$

USE test$$
CREATE
DEFINER=root@localhost
TRIGGER test.before_user_deleted
BEFORE DELETE ON test.useri
FOR EACH ROW
BEGIN
    DELETE FROM concedii WHERE id_ang = OLD.id;
END$$

USE test$$
DROP TRIGGER IF EXISTS teme1 $$

USE test$$
CREATE
DEFINER=root@localhost
TRIGGER test.teme1
AFTER INSERT ON test.useri
FOR EACH ROW
BEGIN
    INSERT INTO teme (id_usr) VALUES (NEW.id);
END$$

USE test$$
DROP TRIGGER IF EXISTS teme2 $$

USE test$$
CREATE
DEFINER=root@localhost
TRIGGER test.teme2
BEFORE DELETE ON test.useri
FOR EACH ROW
BEGIN
    delete from teme where id_usr = old.id;
END$$

-- -----------------------------------------------------
-- Trigger care modifica numarul de zile de concedii dupa ce se sterge un concediu
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS after_delete $$
CREATE
TRIGGER test.after_delete
AFTER DELETE ON test.concedii
FOR EACH ROW
BEGIN
    DECLARE userType INT;
    DECLARE totalDuration INT;
    -- Selecting user type and current total duration of leaves
    SELECT tip, zilecons INTO userType, totalDuration FROM useri WHERE id = OLD.id_ang;
    -- Update the total duration of leaves
    SET totalDuration = (select sum(durata) from concedii where id_ang = old.id_ang);
    -- Update useri table for leave details
    UPDATE useri
    SET zilecons = totalDuration,
        zileramase = IF(userType = 2, 30 - totalDuration, 40 - totalDuration),
        conluate = (select count(*) from concedii where status >= 0 and id_ang = old.id_ang),
        conramase = 3 - (select count(*) from concedii where status >= 0 and id_ang = old.id_ang)
    WHERE id = OLD.id_ang;
    -- Additional check if the leave was approved
    IF OLD.status = 2 THEN
        UPDATE useri
        SET conluate = (select count(*) from concedii where status = 2 and id_ang = old.id_ang),
			conramase = 3 - (select count(*) from concedii where status = 2 and id_ang = old.id_ang)
        WHERE id = OLD.id_ang;
    END IF;
END$$

-- -----------------------------------------------------
-- Trigger care modifica numarul de zile de concedii dupa ce se adauga un concediu
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS after_insert $$
CREATE
TRIGGER test.after_insert
AFTER INSERT ON test.concedii
FOR EACH ROW
BEGIN
    UPDATE useri u
    SET u.zilecons = (SELECT SUM(c.durata) FROM concedii c WHERE c.id_ang = NEW.id_ang)
    WHERE u.id = NEW.id_ang;
END$$

-- -----------------------------------------------------
-- Trigger care modifica numarul de concedii dupa ce un concediu este adaugat + se modifica si numarul de zile (chiar daca am deja un trigger ce face asta separat)
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS after_insert2 $$
CREATE
TRIGGER test.after_insert2
AFTER INSERT ON test.concedii
FOR EACH ROW
BEGIN
    DECLARE userType INT;
    SELECT tip INTO userType FROM useri WHERE id = NEW.id_ang;
    UPDATE useri
	SET conluate = (select count(*) from concedii where status >= 0 and id_ang = new.id_ang),
        conramase = 3 - (select count(*) from concedii where status >= 0 and id_ang = new.id_ang)
    WHERE id = NEW.id_ang;
    IF userType = 2 THEN
        UPDATE useri
        SET zileramase = 30 - (SELECT SUM(durata) FROM concedii WHERE id_ang = NEW.id_ang)
        WHERE id = NEW.id_ang;
    ELSE
        UPDATE useri
        SET zileramase = 40 - (SELECT SUM(durata) FROM concedii WHERE id_ang = NEW.id_ang)
        WHERE id = NEW.id_ang;
    END IF;
END$$

-- -----------------------------------------------------
-- Trigger care modifica numarul de zile de concedii dupa ce se modifica un concediu aka este aprobat sau respins
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS after_update $$
CREATE
TRIGGER test.after_update
AFTER UPDATE ON test.concedii
FOR EACH ROW
BEGIN
    DECLARE userType INT;
    DECLARE totalDuration INT;
    -- Selecting user type and current total duration of leaves
    SELECT tip, zilecons INTO userType, totalDuration FROM useri WHERE id = OLD.id_ang;
    -- Update the total duration of leaves
    SET totalDuration = (select sum(durata) from concedii where id_ang = old.id_ang);
    -- Update useri table for leave details
    UPDATE useri
    SET zilecons = totalDuration,
        zileramase = IF(userType = 2, 30 - totalDuration, 40 - totalDuration),
        conluate = (select count(*) from concedii where status >= 0 and id_ang = old.id_ang),
        conramase = 3 - (select count(*) from concedii where status >= 0 and id_ang = old.id_ang)
    WHERE id = OLD.id_ang;
    -- Additional check if the leave was approved
    IF OLD.status = 2 THEN
        UPDATE useri
        SET conluate = (select count(*) from concedii where status = 2 and id_ang = old.id_ang),
            conramase = 3 - (select count(*) from concedii where status = 2 and id_ang = old.id_ang)
        WHERE id = OLD.id_ang;
    END IF;
    IF new.status = -1 THEN
        UPDATE useri
        SET conluate = (select count(*) from concedii where status >= 0 and id_ang = old.id_ang),
			conramase = 3 - (select count(*) from concedii where status >= 0 and id_ang = old.id_ang)
        WHERE id = OLD.id_ang;
    END IF;
    IF OLD.status = 1 THEN
        UPDATE useri
        SET conluate = (select count(*) from concedii where status >= 0 and id_ang = old.id_ang),
			conramase = 3 - (select count(*) from concedii where status >= 0 and id_ang = old.id_ang)
        WHERE id = OLD.id_ang;
    END IF;
    IF OLD.status = -2 THEN
        UPDATE useri
        SET conluate = (select count(*) from concedii where status >= 0 and id_ang = old.id_ang),
			conramase = 3 - (select count(*) from concedii where status >= 0 and id_ang = old.id_ang)
        WHERE id = OLD.id_ang;
    END IF;
END$$

-- -----------------------------------------------------
-- Trigger care adauga durata unui concediu, atunci cand e adaugat
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS afterinsert $$
CREATE
TRIGGER test.afterinsert
BEFORE INSERT ON test.concedii
FOR EACH ROW
BEGIN
    SET NEW.durata = DATEDIFF(NEW.end_c, NEW.start_c) + 1;
END$$

-- -----------------------------------------------------
-- Trigger care verifica daca s-a adaugat bine un concediu aka data de inceput < data de final
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS before_insert_concedii $$
USE test$$
CREATE
TRIGGER test.before_insert_concedii
BEFORE INSERT ON test.concedii
FOR EACH ROW
BEGIN
    IF NEW.end_c < NEW.start_c THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Data de final nu poate fi inaintea celei de inceput.';
    END IF;
    SET NEW.durata = DATEDIFF(NEW.end_c, NEW.start_c) + 1;
    SET NEW.added = CURDATE();
    SET NEW.modified = CURDATE();
    SET NEW.acc_res = CURDATE();
END$$

-- -----------------------------------------------------
-- Trigger care pune data la care a fost aprobat sau respins un concediu
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS before_update_concedii $$
CREATE
TRIGGER test.before_update_concedii
BEFORE UPDATE ON test.concedii
FOR EACH ROW
BEGIN
    IF NEW.status < 0 THEN
        SET NEW.durata = 0;
    END IF; -- mai am asta si in alta parte, dar stiu macar ca merge???
    IF NEW.status <> 0 THEN
        SET NEW.modified = CURDATE();
    END IF;
    -- SET NEW.modified = CURDATE();
END$$

-- -----------------------------------------------------
-- Trigger care calculeaza zilele si numarul de concedii, dupa ce un concediu e respins
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS negativestatus $$
CREATE
TRIGGER test.negativestatus
BEFORE UPDATE ON test.concedii
FOR EACH ROW
BEGIN
	DECLARE userType INT;
    DECLARE newZilecons INT;
    SELECT tip INTO userType FROM useri WHERE id = OLD.id_ang;
    IF NEW.status < 0 THEN
        SET NEW.durata = 0;
        SELECT SUM(durata) INTO newZilecons FROM concedii WHERE id_ang = NEW.id_ang AND id != NEW.id;
        UPDATE useri
        SET zilecons = newZilecons
        WHERE id = NEW.id_ang;
        IF userType = 2 THEN
            UPDATE useri
            SET zileramase = 30 - newZilecons, 
				conluate = (select count(*) from concedii where status >= 0 and id_ang = new.id_ang),
				conramase = 3 - (select count(*) from concedii where status >= 0 and id_ang = new.id_ang)
            WHERE id = NEW.id_ang;
        ELSE
            UPDATE useri
            SET zileramase = 40 - newZilecons
            WHERE id = NEW.id_ang;
        END IF;
    END IF;
END$$

-- -----------------------------------------------------
-- Trigger care calculeaza zilele si numarul de concedii, dupa ce un concediu e aprobat final, ca sa zic asa
-- -----------------------------------------------------
DROP TRIGGER IF EXISTS status2 $$
CREATE
TRIGGER test.status2
BEFORE UPDATE ON test.concedii
FOR EACH ROW
BEGIN
    IF NEW.status = 2 and new.status != old.status THEN
        UPDATE useri
        SET conluate = (select count(*) from concedii where status >= 0 and id_ang = new.id_ang),
			conramase = 3 - (select count(*) from concedii where status >= 0 and id_ang = new.id_ang)
        WHERE id = NEW.id_ang;
    END IF;
END$$

-- -----------------------------------------------------
-- END ZONA TRIGGERI
-- -----------------------------------------------------
DELIMITER ;

-- 5. Inserarea datelor initiale
-- -----------------------------------------------------
-- INSERARI
-- -----------------------------------------------------
-- Inserarea datelor inițiale despre departamente
INSERT INTO departament (id_dep, nume_dep) VALUES
(1, 'HR'),
(2, 'Finante'),
(3, 'IT'),
(4, 'Juridic'),
(5, 'Marketing'),
(6, 'Vanzari'),
(7, 'Logistica'),
(8, 'Productie'),
(9, 'Achizitii'),
(10, 'Cercetare si Dezvoltare'),
(11, 'Customer Support'),
(12, 'Administrativ'),
(13, 'Comunicare'),
(14, 'Training'),
(15, 'Security'),
(16, 'Management'),
(17, 'Business Intelligence'),
(18, 'Contabilitate'),
(19, 'Control Intern'),
(20, 'Servicii Generale');

-- Inserarea datelor inițiale despre tipuri de angajati
INSERT INTO tipuri (tip, denumire, salariu) VALUES 
(0, 'Director', 13000),
(1, 'New Graduate', 3500),
(2, 'Intern', 3000),
(3, 'Sef', 11600),
(4, 'CEO', 26000),
(5, 'Junior', 4500),
(6, 'lvl1', 5500),
(7, 'lvl2', 6500),
(8, 'Mid', 7500),
(9, 'Senior', 8900),
(10, 'Manager', 9200),
(11, 'Principal', 11300),
(12, 'Vice Presedinte', 16000),
(13, 'Vice Presedinte Senior', 18000),
(15, 'MP', 20000),
(16, 'DC', 22000),
(17, 'CHRO', 24000),
(18, 'CFO', 26000),
(19, 'COO', 26000)
;

-- Tabel sporuri
INSERT INTO tipuri_sporuri (id, denumire, procent) VALUES
(0, 'Niciun spor', 0),
(1, 'Spor de noapte', 25),
(2, 'Spor de weekend', 15),
(3, 'Spor de vechime', 10),
(4, 'Spor de toxicitate', 20),
(5, 'Spor de confidentialitate', 10),
(6, 'Spor de periculozitate', 15),
(7, 'Spor pentru ore suplimentare', 75);

-- Tabel penalizari
INSERT INTO tipuri_penalizari (id, denumire, procent) VALUES
(1, 'Intarzieri repetate', 10),
(2, 'Absent nemotivat', 20),
(3, 'Nerespectare regulament', 15),
(4, 'Pagube materiale', 30);

-- Inserarea datelor inițiale despre status concediu
INSERT INTO statusuri (status, nume_status) VALUES 
(-2, 'Dezaprobat director'),
(-1, 'Dezaprobat sef'),
(0, 'Neaprobat'),
(1, 'Aprobat sef'),
(2, 'Aprobat director');

-- Tabel statusuri2
INSERT INTO statusuri2 (id, procent) VALUES
(0, 0),
(1, 25),
(2, 50),
(3, 75),
(4, 100);

-- Tabel cicluri
INSERT INTO cicluri (id, semnificatie) VALUES
(1, 'liceal'),
(2, 'post-liceal'),
(3, 'licenta'),
(4, 'masterat'),
(5, 'doctorat'),
(6, 'post-doc');

-- Tabel limbi
INSERT INTO limbi (id, limba) VALUES
(1, 'romana'),
(2, 'engleza'),
(3, 'franceza'),
(4, 'germana'),
(5, 'spaniola'),
(6, 'italiana'),
(7, 'olandeza'),
(8, 'japoneza');

-- Tabel nivel
INSERT INTO nivel (id, semnificatie) VALUES
(1, 'A1'),
(2, 'A2'),
(3, 'B1'),
(4, 'B2'),
(5, 'C1'),
(6, 'C2');

-- Tabel tip_job
INSERT INTO tip_job (id, semnificatie) VALUES
(1, 'fizic'),
(2, 'hibrid'),
(3, 'remote');

-- Tabel tip_adev
INSERT INTO tip_adev (id, denumire) VALUES
(1, 'adeverinta salariat'),
(2, 'adeverinta venit'),
(3, 'adeverinta medicala'),
(4, 'adeverinta concediu'),
(5, 'adeverinta experienta'),
(6, 'adeverinta delegare'),
(7, 'adeverinta somaj'),
(8, 'adeverinta carte de munca'),
(9, 'adeverinta cursuri'),
(10, 'adeverinta participare proiect'),
(11, 'adeverinta stagiu practica'),
(12, 'adeverinta incetare contract'),
(13, 'adeverinta vechime cumulata'),
(14, 'adeverinta pentru pensie'),
(15, 'adeverinta pentru banca/credit'),
(16, 'adeverinta pentru locuinta'),
(17, 'adeverinta pentru grad de handicap'),
(18, 'adeverinta pentru crese/gradinite'),
(19, 'adeverinta COVID-19 carantina'),
(20, 'adeverinta indemnizatie crestere copil');

-- Inserarea datelor inițiale despre tipuri de concedii
INSERT INTO tipcon (motiv, nr_zile) VALUES
('Concediu odihna', 21),
('Concediu formare profesionala', 30),
('Concediu medical', 90),
('Concediu risc maternal', 126),
('Concediu maternitate', 126),
('Concediu paternal', 5),
('Concediu crestere copil', 730),
('Concediu pentru ingrijirea copilului bolnav', 45),
('Concediu fara plata', 30),
('Concediu pentru evenimente familiale', 5),
('Concediu pentru studii', 30),
('Concediu pentru donare de sange', 2),
('Concediu pentru activitati de voluntariat', 5),
('Concediu pentru forta majora', 5),
('Concediu pentru carantina', 14);

DROP TRIGGER IF EXISTS after_user_insert; -- nu stiu de ce a trebuit sa-l sterg pe asta, dar cred ca-mi dadea eroare -> sa vad cum rezolv

-- Inserarea datelor inițiale despre angajati
INSERT INTO useri (nume, prenume, data_nasterii, email, telefon, username, password, id_dep, tip, adresa, culoare, cnp) VALUES 
('Vasile', 'Fabian', '1996-09-19', 'vasile.fabian@example.com', '0700000000', 'fvasile', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 1, 0, 'Strada Unirii', '#3A8DFF', 1),
('Popescu', 'Maria', '2001-12-28', 'maria.popescu2812@example.com', '0787763178', 'mariap', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 1, 1, 'Strada Libertății', '#FF5733', 2),
('Girnita', 'Claudia', '2002-04-18', 'claudia.girnita@example.com', '0771000002', 'claudia.g', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 1, 2,'Strada Unirii', '#42E695', 3),
('Costache', 'Irina', '2003-05-19', 'irina.costache@example.com', '0700000001', 'irina.c', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 1, 3,'Strada Basarab', '#9B59B6', 4),
('Moise', 'Monica', '2002-05-07', 'monica.moise@example.com', '0736000003', 'monica.m', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 1, 4,'Strada Libertății', '#FFD700', 5),
('Capra', 'Cosmina', '2002-03-01', 'cosmina.capra@example.com', '0700000004', 'cosmina.c', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 2, 0, 'Strada Doamnei', '#E74C3C', 6),
('Muedin', 'Emin', '1995-10-04', 'emin.m@example.com', '0700000005', 'emin.m', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 2, 1, 'Strada Doamnei', '#1ABC9C', 7),
('Rebreanu', 'Andrei', '2003-07-07', 'andrei.rebreanu@example.com', '0700000006', 'andrei.rebreanu', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 2, 2, 'Strada Frunzei', '#F39C12', 8),
('Ionescu', 'Lucian', '1989-04-18', 'lucion@example.com', '0700000007', 'lucian.i', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 2, 3, 'Strada Alunului', '#8E44AD', 9),
('Ciucioiu', 'Elena', '2002-09-11', 'elena.c@example.com', '0700000008', 'elena.c', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 2, 4, 'Strada Izvorului', '#2ECC71', 10)
;

-- niste update-uri de test pentru ca sa nu mai schimb de fiecare data cand refac baza =)))
update teme set accent="#C8BFE7" where id_usr = 14;
update teme set accent="#C63C51", clr="#1a1a1a", sidebar="#2a2a2a", card="#2a2a2a", hover="#2a2a2a", text="#ececec" where id_usr=15;

-- Inserarea datelor inițiale despre atractii turistice
INSERT INTO locatii_atractii (nume, strada, longitudine, latitudine, cod, oras, judet, tara) VALUES 
('Castelul Bran', 'Strada General Traian Moșoiu', 25.3672, 45.5152, 507025, 'Bran', 'Brașov', 'România'),
('Castelul Peleș', 'Aleea Peleșului', 25.5764, 45.3595, 106100, 'Sinaia', 'Prahova', 'România'),
('Palatul Parlamentului', 'Strada Izvor', 26.0879, 44.4275, 050563, 'București', 'București', 'România'),
('Salina Turda', 'Aleea Durgăului', 23.7874, 46.5785, 401106, 'Turda', 'Cluj', 'România'),
('Cetatea Sighișoara', 'Strada Cetății', 24.7914, 46.2197, 545400, 'Sighișoara', 'Mureș', 'România'),
('Mănăstirea Voroneț', '-', 25.8606, 47.3976, 725301, 'Voroneț', 'Suceava', 'România'),
('Muzeul Astra', 'Strada Pădurea Dumbrava', 24.1256, 45.7879, 550399, 'Sibiu', 'Sibiu', 'România'),
('Castelul Corvinilor', 'Strada Castelului', 22.8892, 45.7499, 331141, 'Hunedoara', 'Hunedoara', 'România'),
('Biserica Neagră', 'Curtea Johannes Honterus', 25.5877, 45.6427, 500025, 'Brașov', 'Brașov', 'România'),
('Cetatea Râșnov', 'Strada Cetății', 25.4606, 45.5909, 505400, 'Râșnov', 'Brașov', 'România'),
('Muzeul Național al Satului "Dimitrie Gusti"', 'Șoseaua Pavel Dimitrievici Kiseleff', 26.0640, 44.4731, 011347, 'București', 'București', 'România'),
('Casa Memorială George Enescu', 'Calea Victoriei', 26.0975, 44.4416, 010071, 'București', 'București', 'România'),
('Cetatea Alba Carolina', 'Piața Cetății', 23.5727, 46.0737, 510134, 'Alba Iulia', 'Alba', 'România'),
('Castelul de Lut Valea Zânelor', 'Porumbacu de Sus', 24.5488, 45.6543, 557192, 'Porumbacu de Sus', 'Sibiu', 'România'),
('Muzeul de Artă din Cluj-Napoca', 'Piața Unirii', 23.5914, 46.7712, 400113, 'Cluj-Napoca', 'Cluj', 'România'),
('Catedrala Mitropolitană din Iași', 'Bulevardul Ștefan cel Mare și Sfânt', 27.5826, 47.1585, 700064, 'Iași', 'Iași', 'România'),
('Biserica Sfântul Mihail din Cluj-Napoca', 'Piața Unirii', 23.5899, 46.7704, 400015, 'Cluj-Napoca', 'Cluj', 'România'),
('Muzeul Brukenthal', 'Piața Mare', 24.1505, 45.7983, 550178, 'Sibiu', 'Sibiu', 'România'),
('Cetatea Deva', 'Cetatea Deva', 22.9081, 45.8839, 330013, 'Deva', 'Hunedoara', 'România'),
('Grădina Botanică din Cluj-Napoca', 'Strada Republicii', 23.5952, 46.7587, 400015, 'Cluj-Napoca', 'Cluj', 'România'),
('Mănăstirea Horezu', 'Strada Mănăstirii', 24.0166, 45.1570, 245800, 'Horezu', 'Vâlcea', 'România'),
('Muzeul Olteniei', 'Strada Popa Șapcă', 23.7957, 44.3165, 200585, 'Craiova', 'Dolj', 'România'),
('Palatul Culturii din Iași', 'Piața Palat', 27.5870, 47.1573, 700113, 'Iași', 'Iași', 'România'),
('Teatrul Național "Marin Sorescu" din Craiova', 'Bulevardul Alexandru Ioan Cuza', 23.7898, 44.3176, 200585, 'Craiova', 'Dolj', 'România'),
('Cetatea Suceava', 'Strada Cetatea de Scaun', 26.2606, 47.6387, 720053, 'Suceava', 'Suceava', 'România');

-- Date inițiale pentru sediul principal
INSERT INTO sedii (nume_sediu, tip_sediu, strada, cod, oras, judet, tara, telefon, email) 
VALUES ('laaalalala', 'secundar', 'Strada Principală nr. 1', '010101', 'București', 'București', 'România', '021-123-4567', 'contact@companie.ro'),
('Sediu Central', 'principal', 'Strada Principală nr. 1', '010101', 'București', 'București', 'România', '021-123-4567', 'contact@companie.ro')
;

-- 6. Ready to use =) Enjoy
-- -----------------------------------------------------
-- QUERY-URI
-- -----------------------------------------------------
SELECT c.acc_res, 
	c.added, 
	c.modified, 
	c.id AS nr_crt, 
	d.nume_dep AS departament, 
	u.nume, 
	u.prenume, 
	t.denumire AS functie, 
	c.start_c, 
	c.end_c, 
	c.motiv, 
	c.locatie, 
	s.nume_status AS status, 
	ct.motiv as tipcon 
FROM useri u 
JOIN tipuri t ON u.tip = t.tip
JOIN departament d ON u.id_dep = d.id_dep
JOIN concedii c ON c.id_ang = u.id
JOIN statusuri s ON c.status = s.status
JOIN tipcon ct ON c.tip = ct.tip
where c.id_ang = 14
and u.username <> "test"
and YEAR(c.start_c) = YEAR(CURDATE()); 

SELECT c.id AS nr_crt,
		c.id_ang, 
		u.nume,
		u.prenume, 
		d.nume_dep AS departament, 
		t.denumire AS functie, 
       c.start_c, 
       c.end_c, 
       c.motiv, 
       CONCAT('Str.', l.strada, ', loc. ', l.oras, ', jud. ', l.judet, ', ', l.tara) as adresa, 
       ct.motiv as tipcon, 
       s.nume_status AS status, 
       c.added, 
       c.modified, 
       c.acc_res
FROM concedii c 
JOIN useri u ON u.id = c.id_ang 
JOIN tipuri t ON u.tip = t.tip 
JOIN departament d ON u.id_dep = d.id_dep 
JOIN statusuri s ON c.status = s.status 
JOIN tipcon ct ON c.tip = ct.tip 
LEFT JOIN locatii_concedii l ON c.id = l.id_concediu;

SELECT
	c.id_ang,
    u.id, 
	c.acc_res, 
    c.added, 
    c.modified, 
    c.id AS nr_crt, 
    d.nume_dep AS departament, 
    u.nume, 
    u.prenume, 
    t.denumire AS functie, 
    c.start_c, 
    c.end_c, 
    c.motiv, 
    c.locatie, 
    s.nume_status AS status, 
    ct.motiv as tipcon, 
    CONCAT('Str.', l.strada, ', loc. ', l.oras, ', jud. ', l.judet, ', ', l.tara) as adresa
FROM concedii c 
JOIN useri u ON u.id = c.id_ang 
JOIN tipuri t ON u.tip = t.tip 
JOIN departament d ON u.id_dep = d.id_dep 
JOIN statusuri s ON c.status = s.status 
JOIN tipcon ct ON c.tip = ct.tip 
LEFT JOIN locatii_concedii l ON c.id = l.id_concediu 
WHERE YEAR(c.start_c) = YEAR(CURDATE()) and u.id_dep = 1 and c.status = 1;

SELECT nume, prenume, username, denumire, nume_dep 
FROM useri 
left JOIN tipuri on tipuri.tip = useri.tip 
left JOIN departament on departament.id_dep = useri.id_dep 
WHERE username <> "test";

SELECT
	c.id_ang, 
    u.id, 
    c.acc_res, 
    c.added, 
    c.modified, 
    c.id AS nr_crt, 
    d.nume_dep AS departament, 
    u.nume, 
    u.prenume, 
    t.denumire AS functie, 
    c.start_c, 
    c.end_c, 
    c.motiv, 
    c.locatie, 
    s.nume_status AS status, 
    ct.motiv as tipcon, 
    CONCAT('Str.', l.strada, ', loc. ', l.oras, ', jud. ', l.judet, ', ', l.tara) as adresa
FROM concedii c
JOIN useri u ON u.id = c.id_ang 
JOIN tipuri t ON u.tip = t.tip 
JOIN departament d ON u.id_dep = d.id_dep 
JOIN statusuri s ON c.status = s.status 
JOIN tipcon ct ON c.tip = ct.tip 
LEFT JOIN locatii_concedii l ON c.id = l.id_concediu 
WHERE YEAR(c.start_c) = YEAR(CURDATE()) and u.id_dep = 1 and c.status = 1;

SELECT
	c.acc_res, 
    c.added, 
    c.modified, 
    c.id AS nr_crt, 
    d.nume_dep AS departament, 
    u.nume, u.prenume, 
    t.denumire AS functie, 
    c.start_c, 
    c.end_c, 
    c.motiv, 
    c.locatie, 
    s.nume_status AS status, 
    ct.motiv as tipcon
FROM useri u 
JOIN tipuri t ON u.tip = t.tip 
JOIN departament d ON u.id_dep = d.id_dep 
JOIN concedii c ON c.id_ang = u.id 
JOIN statusuri s ON c.status = s.status 
JOIN tipcon ct ON c.tip = ct.tip 
where c.id_ang = 11 
and u.username <> "test" 
and YEAR(c.start_c) = YEAR(CURDATE()); 

SELECT DISTINCT l.oras, l.judet FROM locatii_useri l
join useri u on u.id=l.id_user
where u.id_dep = (select u1.id_dep from useri u1 where u1.id = 14) 
ORDER BY l.oras;

-- -----------------------------------------------------
-- test
-- -----------------------------------------------------
select * from concedii join useri on concedii.id_ang = useri.id where id_dep = 1;
select * from istoric_incetari;
select * from useri;
SELECT c.acc_res, c.added, c.modified, c.id AS nr_crt, d.nume_dep AS departament, u.nume, u.prenume, t.denumire AS functie, c.start_c, c.end_c, c.motiv, c.locatie, s.nume_status AS status, ct.motiv as tipcon FROM useri u JOIN tipuri t ON u.tip = t.tip JOIN departament d ON u.id_dep = d.id_dep JOIN concedii c ON c.id_ang = u.id JOIN statusuri s ON c.status = s.status JOIN tipcon ct ON c.tip = ct.tip  WHERE u.username <> 'test' AND YEAR(c.start_c) = YEAR(CURDATE());
desc locatii_concedii;
desc concedii;
update useri set tip = 10 where username = "irina.c";
SELECT strada, oras, judet, nume, prenume, nume_dep FROM locatii_concedii join concedii on locatii_concedii.id_concediu = concedii.id join useri on useri.id = concedii.id_ang join departament on useri.id_dep = departament.id_dep ORDER BY oras;