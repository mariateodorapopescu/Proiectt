-- Dezactivează constrângerile FOREIGN KEY
SET FOREIGN_KEY_CHECKS = 0;

-- Șterge toate tabelele
DROP TABLE IF EXISTS useri;
DROP TABLE IF EXISTS departament;
DROP TABLE IF EXISTS tipuri;
DROP TABLE IF EXISTS concedii;
DROP TABLE IF EXISTS tipcon;
DROP TABLE IF EXISTS restrictii;
DROP TABLE IF EXISTS statusuri;
DROP TABLE IF EXISTS teme;
DROP TABLE IF EXISTS appearance;
DROP TABLE IF EXISTS sarbatori;
DROP TABLE IF EXISTS libere;
DROP TABLE IF EXISTS numbers;
DROP TABLE IF EXISTS regiuni;
DROP TABLE IF EXISTS tari;
DROP TABLE IF EXISTS locatii;

-- Reactivează constrângerile FOREIGN KEY
SET FOREIGN_KEY_CHECKS = 1;

-- Creare tabele
CREATE TABLE departament (
   id_dep INT AUTO_INCREMENT PRIMARY KEY,
   nume_dep VARCHAR(25) NOT NULL UNIQUE
);

CREATE TABLE tipuri (
   tip INT PRIMARY KEY,
   denumire VARCHAR(25) NOT NULL UNIQUE
);

CREATE TABLE useri (
   id INT AUTO_INCREMENT PRIMARY KEY,
   nume VARCHAR(45) NOT NULL,
   prenume VARCHAR(45) NOT NULL,
   data_nasterii DATE NOT NULL,
   adresa VARCHAR(256),
   email VARCHAR(56) NOT NULL,
   telefon VARCHAR(25) NOT NULL,
   username VARCHAR(25) NOT NULL UNIQUE,
   password VARCHAR(255) NOT NULL,
   id_dep INT NOT NULL,
   tip INT NOT NULL,
   zilecons INT DEFAULT 0,
   zileramase INT DEFAULT 40,
   conluate INT DEFAULT 0,
   conramase INT DEFAULT 3,
   cnp INT UNIQUE,
   culoare VARCHAR(25) NOT NULL DEFAULT '#333',
   activ INT DEFAULT 0,
   profil MEDIUMBLOB,
   FOREIGN KEY (id_dep) REFERENCES departament(id_dep),
   FOREIGN KEY (tip) REFERENCES tipuri(tip)
);

CREATE TABLE tipcon (
   tip INT AUTO_INCREMENT PRIMARY KEY,
   motiv VARCHAR(255) DEFAULT NULL,
   nr_zile INT DEFAULT 0
);

CREATE TABLE concedii (
   id INT AUTO_INCREMENT PRIMARY KEY,
   id_ang INT NOT NULL,
   start_c DATE NOT NULL,
   end_c DATE NOT NULL,
   motiv VARCHAR(256) NOT NULL,
   locatie VARCHAR(256) NOT NULL,
   status INT DEFAULT 0,
   tip INT NOT NULL,
   durata INT NOT NULL DEFAULT 0,
   added DATE,
   modified DATE,
   acc_res DATE,
   FOREIGN KEY (id_ang) REFERENCES useri(id),
   FOREIGN KEY (tip) REFERENCES tipcon(tip)
);

CREATE TABLE restrictii (
   tip INT PRIMARY KEY,
   decl_dep INT,
   modif_d INT,
   del_d INT,
   decl_usr INT,
   modif_u INT,
   del_u INT,
   auth INT,
   viz_d INT,
   introd_c INT,
   modif_c INT,
   del_c INT,
   viz_c_t_an INT,
   viz_c_t_per INT,
   viz_c_d_an INT,
   viz_c_d_per INT,
   viz_c_a_an INT,
   viz_c_a_per INT,
   viz_a_t INT,
   viz_a_d INT,
   raport INT,
   asoc_tip INT,
   asoc_dep INT
);

CREATE TABLE statusuri (
   status INT NOT NULL UNIQUE PRIMARY KEY,
   nume_status VARCHAR(56) NOT NULL UNIQUE
);

CREATE TABLE teme (
   id_usr INT NOT NULL PRIMARY KEY,
   accent VARCHAR(25) DEFAULT '#10439F',
   clr VARCHAR(25) DEFAULT '#d8d9e1',
   sidebar VARCHAR(25) DEFAULT '#ECEDFA',
   card VARCHAR(25) DEFAULT '#ECEDFA',
   text VARCHAR(25) DEFAULT '#333',
   hover VARCHAR(25) DEFAULT '#ECEDFA',
   FOREIGN KEY (id_usr) REFERENCES useri(id)
);

CREATE TABLE sarbatori (
	zi DATE,
	nume VARCHAR(255)
);

CREATE TABLE libere (
	zi DATE,
	nume VARCHAR(255)
);


CREATE TABLE regiuni (
    id_regiune INT PRIMARY KEY NOT NULL,
    nume_regiune VARCHAR(25)
);

-- Crearea tabelelor cu dependențe
CREATE TABLE tari (
    id_tara CHAR(2) PRIMARY KEY NOT NULL,
    nume_tara VARCHAR(40) NOT NULL,
    id_regiune INT NOT NULL,
    FOREIGN KEY (id_regiune) REFERENCES regiuni(id_regiune)
);

create table locatii (
id int,
ref int,
strada VARCHAR(40) NOT NULL,
longitudine DOUBLE,
latitudine DOUBLE,
cod VARCHAR(12) NOT NULL,
oras VARCHAR(30) NOT NULL,
judet VARCHAR(25) NOT NULL,
id_tara CHAR(2) NULL,
FOREIGN KEY (id_tara) REFERENCES tari(id_tara), 
FOREIGN KEY (ref) REFERENCES departament(id_dep), 
FOREIGN KEY (ref) REFERENCES useri(id), 
FOREIGN KEY (ref) REFERENCES concedii(id)
);


-- Trigger pentru a adăuga intrare implicită în teme la crearea unui user
DELIMITER $$
CREATE TRIGGER after_user_insert
AFTER INSERT ON useri
FOR EACH ROW
BEGIN
    INSERT INTO teme (id_usr) VALUES (NEW.id);
END$$
DELIMITER ;

-- Inserarea datelor inițiale
INSERT INTO departament (id_dep, nume_dep) VALUES 
(1, 'HR'),
(2, 'Finante'),
(3, 'IT'),
(4, 'Juridic');

INSERT INTO tipuri (tip, denumire) VALUES 
(0, 'Director'),
(1, 'Tip1'),
(2, 'Tip2'),
(3, 'Sef'),
(4, 'Administrator');

INSERT INTO statusuri (status, nume_status) VALUES 
(-2, 'Dezaprobat director'),
(-1, 'Dezaprobat sef'),
(0, 'Neaprobat'),
(1, 'Aprobat sef'),
(2, 'Aprobat director');

INSERT INTO tipcon (motiv, nr_zile) VALUES 
('Concediu odihnă', 14),
('Concediu formare profesională', 21),
('Concediu medical', 21),
('Concediu risc maternal', 90),
('Concediu maternitate', 720);

INSERT INTO useri (nume, prenume, data_nasterii, email, telefon, username, password, id_dep, tip, adresa) VALUES 
('Vasile', 'Fabian', '1996-09-19', 'vasile.fabian@example.com', '0700000000', 'fvasile', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 1, 0, 'Strada Unirii'),
('Popescu', 'Maria', '2001-12-28', 'maria.popescu2812@example.com', '0787763178', 'mariap', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 1, 1, 'Strada Libertății'),
('Girnita', 'Claudia', '2002-04-18', 'claudia.girnita@example.com', '0771000002', 'claudia.g', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 1, 2,'Strada Unirii'),
('Costache', 'Irina', '2003-05-19', 'irina.costache@example.com', '0700000001', 'irina.c', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 1, 3,'Strada Basarab'),
('Petrescu', 'Alexandru', '1996-06-05', 'alex.petrescu@example.com', '0758000003', 'alex.p', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 1, 4,'Strada Libertății'),
('Capra', 'Cosmina', '2002-03-01', 'cosmina.capra@example.com', '0700000004', 'cosmina.c', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 2, 0, 'Strada Doamnei'),
('Muedin', 'Emin', '1995-10-04', 'emin.m@example.com', '0700000005', 'emin.m', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 2, 1, 'Strada Doamnei'),
('Popescu', 'Teodor', '1997-04-04', 'teo.p@example.com', '0700000006', 'teodor.p', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 2, 2, 'Strada Frunzei'),
('Ionescu', 'Lucian', '1989-04-18', 'lucion@example.com', '0700000007', 'lucian.i', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 2, 3, 'Strada Alunului'),
('Rebreanu', 'Monica', '1992-05-07', 'monica.reb@example.com', '0700000008', 'monica.reb', '$2a$10$gPdSQ5MuTzI7K1vaHDXVhOyk19Mehd.gZO42NvN/MZmLTfJ8kezoq', 2, 4, 'Strada Izvorului')
;

SELECT * FROM teme;

DROP TRIGGER IF EXISTS after_insert;
DELIMITER $$
CREATE TRIGGER after_insert
AFTER INSERT ON concedii
FOR EACH ROW
BEGIN
    UPDATE useri u
    SET u.zilecons = (SELECT SUM(c.durata) FROM concedii c WHERE c.id_ang = NEW.id_ang)
    WHERE u.id = NEW.id_ang;
END$$
DELIMITER ;

DROP TRIGGER IF EXISTS afterinsert;
DELIMITER $$
CREATE TRIGGER afterinsert
BEFORE INSERT ON concedii
FOR EACH ROW
BEGIN
    SET NEW.durata = DATEDIFF(NEW.end_c, NEW.start_c) + 1;
END$$
DELIMITER ;

DROP TRIGGER IF EXISTS after_insert2;
DELIMITER $$
CREATE TRIGGER after_insert2
AFTER INSERT ON concedii
FOR EACH ROW
BEGIN
    DECLARE userType INT;
    SELECT tip INTO userType FROM useri WHERE id = NEW.id_ang;
    UPDATE useri
	SET conluate = (select count(*) from concedii where status >= 0 and id_ang = new.id_ang),
        conramase = 3 - (select count(*) from concedii where status >= 0 and id_ang = new.id_ang)
    WHERE id = NEW.id_ang;
    IF userType = 2 THEN
        UPDATE useri
        SET zileramase = 30 - (SELECT SUM(durata) FROM concedii WHERE id_ang = NEW.id_ang)
        WHERE id = NEW.id_ang;
    ELSE
        UPDATE useri
        SET zileramase = 40 - (SELECT SUM(durata) FROM concedii WHERE id_ang = NEW.id_ang)
        WHERE id = NEW.id_ang;
    END IF;
END$$
DELIMITER ;

DROP TRIGGER IF EXISTS before_insert_concedii;
DELIMITER $$
CREATE TRIGGER before_insert_concedii
BEFORE INSERT ON concedii
FOR EACH ROW
BEGIN
    IF NEW.end_c < NEW.start_c THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Data de final nu poate fi inaintea celei de inceput.';
        update concedii set durata = 0;
    END IF;
END$$
DELIMITER ;

DROP TRIGGER IF EXISTS negativestatus;
delimiter $$
CREATE TRIGGER negativestatus
BEFORE UPDATE ON concedii
FOR EACH ROW
BEGIN
	DECLARE userType INT;
    DECLARE newZilecons INT;
    SELECT tip INTO userType FROM useri WHERE id = OLD.id_ang;
    IF NEW.status < 0 THEN
        SET NEW.durata = 0;
        SELECT SUM(durata) INTO newZilecons FROM concedii WHERE id_ang = NEW.id_ang AND id != NEW.id;
        UPDATE useri
        SET zilecons = newZilecons
        WHERE id = NEW.id_ang;
        IF userType = 2 THEN
            UPDATE useri
            SET zileramase = 30 - newZilecons, 
				conluate = (select count(*) from concedii where status >= 0 and id_ang = new.id_ang),
				conramase = 3 - (select count(*) from concedii where status >= 0 and id_ang = new.id_ang)
            WHERE id = NEW.id_ang;
        ELSE
            UPDATE useri
            SET zileramase = 40 - newZilecons
            WHERE id = NEW.id_ang;
        END IF;
    END IF;
END$$
DELIMITER ;

DROP TRIGGER IF EXISTS after_delete;
DELIMITER $$
CREATE TRIGGER after_delete
AFTER DELETE ON concedii
FOR EACH ROW
BEGIN
    DECLARE userType INT;
    DECLARE totalDuration INT;
    SELECT tip, zilecons INTO userType, totalDuration FROM useri WHERE id = OLD.id_ang;
    UPDATE useri
    SET zilecons = (select sum(durata) from concedii where id_ang = old.id_ang)
    WHERE id = OLD.id_ang;
    UPDATE useri
        SET conluate = (select count(*) from concedii where status >= 0 and id_ang = old.id_ang),
			conramase = 3 - (select count(*) from concedii where status >= 0 and id_ang = old.id_ang)
        WHERE id = old.id_ang;
    IF old.status = 2 THEN
        UPDATE useri
        SET conluate = (select count(*) from concedii where status = 2 and id_ang = old.id_ang),
			conramase = 3 - (select count(*) from concedii where status = 2 and id_ang = old.id_ang)
        WHERE id = old.id_ang;
    END IF;
    IF userType = 2 THEN
        UPDATE useri
        SET zileramase = 30 - (select sum(durata) from concedii where id_ang = old.id_ang)
        WHERE id = OLD.id_ang;
    ELSE
        UPDATE useri
        SET zileramase = 40 - (select sum(durata) from concedii where id_ang = old.id_ang)
        WHERE id = OLD.id_ang;
    END IF;
END$$
DELIMITER ;

DROP TRIGGER IF EXISTS status2;
DELIMITER $$
CREATE TRIGGER status2
BEFORE UPDATE ON concedii
FOR EACH ROW
BEGIN
    IF NEW.status = 2 and new.status != old.status THEN
        UPDATE useri
        SET conluate = (select count(*) from concedii where status >= 0 and id_ang = new.id_ang),
			conramase = 3 - (select count(*) from concedii where status >= 0 and id_ang = new.id_ang)
        WHERE id = NEW.id_ang;
    END IF;
END$$
DELIMITER ;

DROP TRIGGER IF EXISTS after_ins;
DELIMITER $$
CREATE TRIGGER after_ins
BEFORE INSERT ON useri
FOR EACH ROW
BEGIN
    SET NEW.zilecons = 0;
    SET NEW.conluate = 0;
    SET NEW.conramase = 3;
    IF NEW.tip = 2 THEN
        SET NEW.zileramase = 30;
    ELSE
        SET NEW.zileramase = 40;
    END IF;
END$$
DELIMITER ;

DROP TRIGGER IF EXISTS after_mod;
DELIMITER $$
CREATE TRIGGER after_mod
BEFORE UPDATE ON useri
FOR EACH ROW
BEGIN
    IF NEW.tip = 2 and new.tip != old.tip THEN
        SET NEW.zileramase = 30;
    ELSE 
		if new.tip != old.tip and new.tip != 2 then
			SET NEW.zileramase = 40;
		END IF;
    END IF;
END$$
DELIMITER ;

DROP trigger IF EXISTS teme1;
DELIMITER $$
CREATE TRIGGER teme1
AFTER INSERT ON useri
FOR EACH ROW
BEGIN
    INSERT INTO teme (id_usr) VALUES (NEW.id);
END$$
DELIMITER ;

DROP trigger IF EXISTS teme2;
DELIMITER $$
CREATE TRIGGER teme2
before delete ON useri
FOR EACH ROW
BEGIN
    delete from teme where id_usr = old.id;
END$$
DELIMITER ;

select
	trigger_schema
    ,trigger_name
    ,action_statement
from
	information_schema.triggers
where
	trigger_schema = "test";

DROP trigger IF EXISTS aftrdel;
DELIMITER $$
CREATE TRIGGER aftrdel
before delete ON useri
FOR EACH ROW
BEGIN
    delete from concedii where id_ang = old.id;
END$$
DELIMITER ;

DELIMITER $$
DROP TRIGGER IF EXISTS before_user_deleted$$
CREATE TRIGGER before_user_deleted
BEFORE DELETE ON useri
FOR EACH ROW
BEGIN
    DELETE FROM concedii WHERE id_ang = OLD.id;
END$$
DELIMITER ;

DELIMITER $$
DROP TRIGGER IF EXISTS before_dep_deleted$$
CREATE TRIGGER before_dep_deleted
BEFORE DELETE ON departament
FOR EACH ROW
BEGIN
    DELETE FROM useri WHERE id_dep = OLD.id_dep;
END$$
DELIMITER ;
DROP TRIGGER IF EXISTS after_del;

DROP TRIGGER IF EXISTS after_delete;
DELIMITER $$
CREATE TRIGGER after_delete
AFTER DELETE ON concedii
FOR EACH ROW
BEGIN
    DECLARE userType INT;
    DECLARE totalDuration INT;
    -- Selecting user type and current total duration of leaves
    SELECT tip, zilecons INTO userType, totalDuration FROM useri WHERE id = OLD.id_ang;
    -- Update the total duration of leaves
    SET totalDuration = (select sum(durata) from concedii where id_ang = old.id_ang);
    -- Update useri table for leave details
    UPDATE useri
    SET zilecons = totalDuration,
        zileramase = IF(userType = 2, 30 - totalDuration, 40 - totalDuration),
        conluate = (select count(*) from concedii where status >= 0 and id_ang = old.id_ang),
        conramase = 3 - (select count(*) from concedii where status >= 0 and id_ang = old.id_ang)
    WHERE id = OLD.id_ang;
    -- Additional check if the leave was approved
    IF OLD.status = 2 THEN
        UPDATE useri
        SET conluate = (select count(*) from concedii where status = 2 and id_ang = old.id_ang),
			conramase = 3 - (select count(*) from concedii where status = 2 and id_ang = old.id_ang)
        WHERE id = OLD.id_ang;
    END IF;
END$$
DELIMITER ;

-- ROLLBACK;

DROP TRIGGER IF EXISTS after_update;
DELIMITER $$
CREATE TRIGGER after_update
AFTER update ON concedii
FOR EACH ROW
BEGIN
    DECLARE userType INT;
    DECLARE totalDuration INT;
    -- Selecting user type and current total duration of leaves
    SELECT tip, zilecons INTO userType, totalDuration FROM useri WHERE id = OLD.id_ang;
    -- Update the total duration of leaves
    SET totalDuration = (select sum(durata) from concedii where id_ang = old.id_ang);
    -- Update useri table for leave details
    UPDATE useri
    SET zilecons = totalDuration,
        zileramase = IF(userType = 2, 30 - totalDuration, 40 - totalDuration),
        conluate = (select count(*) from concedii where status >= 0 and id_ang = old.id_ang),
        conramase = 3 - (select count(*) from concedii where status >= 0 and id_ang = old.id_ang)
    WHERE id = OLD.id_ang;
    -- Additional check if the leave was approved
    IF OLD.status = 2 THEN
        UPDATE useri
        SET conluate = (select count(*) from concedii where status = 2 and id_ang = old.id_ang),
            conramase = 3 - (select count(*) from concedii where status = 2 and id_ang = old.id_ang)
        WHERE id = OLD.id_ang;
    END IF;
    IF new.status = -1 THEN
        UPDATE useri
        SET conluate = (select count(*) from concedii where status >= 0 and id_ang = old.id_ang),
			conramase = 3 - (select count(*) from concedii where status >= 0 and id_ang = old.id_ang)
        WHERE id = OLD.id_ang;
    END IF;
    IF OLD.status = 1 THEN
        UPDATE useri
        SET conluate = (select count(*) from concedii where status >= 0 and id_ang = old.id_ang),
			conramase = 3 - (select count(*) from concedii where status >= 0 and id_ang = old.id_ang)
        WHERE id = OLD.id_ang;
    END IF;
    IF OLD.status = -2 THEN
        UPDATE useri
        SET conluate = (select count(*) from concedii where status >= 0 and id_ang = old.id_ang),
			conramase = 3 - (select count(*) from concedii where status >= 0 and id_ang = old.id_ang)
        WHERE id = OLD.id_ang;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER before_insert_useri
BEFORE INSERT ON useri
FOR EACH ROW
BEGIN
    IF NEW.profil IS NULL THEN
        SET NEW.profil = (SELECT profil FROM useri WHERE username = 'test');
    END IF;
END$$
DELIMITER ;

 -- Triggeri pentru useri
DELIMITER $$
DROP TRIGGER IF EXISTS before_insert_useri;
CREATE TRIGGER before_insert_useri
BEFORE INSERT ON useri
FOR EACH ROW
BEGIN
    SET NEW.zilecons = 0;
    SET NEW.conluate = 0;
    SET NEW.conramase = 3;
    SET NEW.zileramase = IF(NEW.tip = 2, 30, 40);
END$$
DELIMITER ;

-- Triggeri pentru concedii
DELIMITER $$
DROP TRIGGER IF EXISTS before_insert_concedii;
CREATE TRIGGER before_insert_concedii
BEFORE INSERT ON concedii
FOR EACH ROW
BEGIN
    IF NEW.end_c < NEW.start_c THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Data de final nu poate fi inaintea celei de inceput.';
    END IF;
    SET NEW.durata = DATEDIFF(NEW.end_c, NEW.start_c) + 1;
    SET NEW.added = CURDATE();
    SET NEW.modified = CURDATE();
    SET NEW.acc_res = CURDATE();
END$$
DELIMITER ;

DELIMITER $$ -- ?
DROP TRIGGER IF EXISTS after_insert_concedii;
CREATE TRIGGER after_insert_concedii
AFTER INSERT ON concedii
FOR EACH ROW
BEGIN
    DECLARE userType INT;
    SELECT tip INTO userType FROM useri WHERE id = NEW.id_ang;
    
    UPDATE useri u 
    SET 
        u.zilecons = COALESCE((SELECT SUM(durata) FROM concedii WHERE id_ang = NEW.id_ang AND status >= 0), 0),
        u.conluate = (SELECT COUNT(*) FROM concedii WHERE id_ang = NEW.id_ang AND status >= 0),
        u.conramase = 3 - (SELECT COUNT(*) FROM concedii WHERE id_ang = NEW.id_ang AND status >= 0),
        u.zileramase = IF(userType = 2, 
                         30 - COALESCE((SELECT SUM(durata) FROM concedii WHERE id_ang = NEW.id_ang AND status >= 0), 0),
                         40 - COALESCE((SELECT SUM(durata) FROM concedii WHERE id_ang = NEW.id_ang AND status >= 0), 0))
    WHERE u.id = NEW.id_ang;
END$$
DELIMITER ;


DELIMITER $$
DROP TRIGGER IF EXISTS before_update_concedii$$
CREATE TRIGGER before_update_concedii
BEFORE UPDATE ON concedii
FOR EACH ROW
BEGIN
    IF NEW.status < 0 THEN
        SET NEW.durata = 0;
    END IF;
    SET NEW.modified = CURDATE();
END$$
DELIMITER ;

DELIMITER $$
DROP TRIGGER IF EXISTS after_update_concedii$$
CREATE TRIGGER after_update_concedii
AFTER UPDATE ON concedii
FOR EACH ROW
BEGIN
    DECLARE userType INT DEFAULT NULL;

    -- Obține tipul utilizatorului
    SELECT tip INTO userType 
    FROM useri 
    WHERE id = NEW.id_ang;

    -- Actualizează informațiile utilizatorului în funcție de tipul său
    UPDATE useri u 
    SET 
        u.zilecons = COALESCE((SELECT SUM(durata) FROM concedii WHERE id_ang = NEW.id_ang AND status >= 0), 0),
        u.conluate = (SELECT COUNT(*) FROM concedii WHERE id_ang = NEW.id_ang AND status >= 0),
        u.conramase = 3 - (SELECT COUNT(*) FROM concedii WHERE id_ang = NEW.id_ang AND status >= 0),
        u.zileramase = IF(userType = 2, 
                         30 - COALESCE((SELECT SUM(durata) FROM concedii WHERE id_ang = NEW.id_ang AND status >= 0), 0),
                         40 - COALESCE((SELECT SUM(durata) FROM concedii WHERE id_ang = NEW.id_ang AND status >= 0), 0))
    WHERE u.id = NEW.id_ang;
END$$
DELIMITER ;
DELIMITER $$
DROP TRIGGER IF EXISTS after_delete_concedii$$
CREATE TRIGGER after_delete_concedii
AFTER DELETE ON concedii
FOR EACH ROW
BEGIN
    DECLARE userType INT DEFAULT NULL;

    -- Obține tipul utilizatorului
    SELECT tip INTO userType 
    FROM useri 
    WHERE id = OLD.id_ang;

    -- Actualizează informațiile utilizatorului în funcție de tipul său
    UPDATE useri u 
    SET 
        u.zilecons = COALESCE((SELECT SUM(durata) FROM concedii WHERE id_ang = OLD.id_ang AND status >= 0), 0),
        u.conluate = (SELECT COUNT(*) FROM concedii WHERE id_ang = OLD.id_ang AND status >= 0),
        u.conramase = 3 - (SELECT COUNT(*) FROM concedii WHERE id_ang = OLD.id_ang AND status >= 0),
        u.zileramase = IF(userType = 2, 
                         30 - COALESCE((SELECT SUM(durata) FROM concedii WHERE id_ang = OLD.id_ang AND status >= 0), 0),
                         40 - COALESCE((SELECT SUM(durata) FROM concedii WHERE id_ang = OLD.id_ang AND status >= 0), 0))
    WHERE u.id = OLD.id_ang;
END$$
DELIMITER ;

select * from useri;